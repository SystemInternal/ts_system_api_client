/**
 * System REST API
 * This is a REST API through which clients can interact with System - an **open**, **collaborative**, and **ever-growing knowledge base** of all the world\'s systems.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 * Add subscription seat input.
 * @export
 * @interface AddSubscriptionSeatIn
 */
export interface AddSubscriptionSeatIn {
    /**
     *
     * @type {Array<string>}
     * @memberof AddSubscriptionSeatIn
     */
    'emails': Array<string>;
}
/**
 *
 * @export
 * @interface ApiKeys
 */
export interface ApiKeys {
    /**
     *
     * @type {Array<string>}
     * @memberof ApiKeys
     */
    'keys': Array<string>;
}
/**
 * Relationship types.
 * @export
 * @enum {string}
 */
export declare const AppSchemaConceptsRelationshipTypes: {
    readonly Statistical: "statistical";
    readonly Mechanistic: "mechanistic";
};
export type AppSchemaConceptsRelationshipTypes = typeof AppSchemaConceptsRelationshipTypes[keyof typeof AppSchemaConceptsRelationshipTypes];
/**
 * Interface for finding in study.
 * @export
 * @interface AppSchemaFindingsFinding
 */
export interface AppSchemaFindingsFinding {
    /**
     *
     * @type {string}
     * @memberof AppSchemaFindingsFinding
     */
    'summary'?: string;
    /**
     *
     * @type {RawFinding}
     * @memberof AppSchemaFindingsFinding
     */
    'data'?: RawFinding;
    /**
     *
     * @type {Array<string>}
     * @memberof AppSchemaFindingsFinding
     */
    'labels'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof AppSchemaFindingsFinding
     */
    'mechanistic': boolean;
    /**
     *
     * @type {string}
     * @memberof AppSchemaFindingsFinding
     */
    'mechanism_type'?: string;
}
/**
 * Interface for Groundings for a specific namespace.
 * @export
 * @interface AppSchemaGroundingsGrounding
 */
export interface AppSchemaGroundingsGrounding {
    /**
     *
     * @type {string}
     * @memberof AppSchemaGroundingsGrounding
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof AppSchemaGroundingsGrounding
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof AppSchemaGroundingsGrounding
     */
    'namespace': string;
    /**
     *
     * @type {string}
     * @memberof AppSchemaGroundingsGrounding
     */
    'namespace_id_label'?: string;
    /**
     *
     * @type {string}
     * @memberof AppSchemaGroundingsGrounding
     */
    'definition'?: string;
}
/**
 *
 * @export
 * @interface AuthorCount
 */
export interface AuthorCount {
    /**
     *
     * @type {string}
     * @memberof AuthorCount
     */
    'full_name': string;
    /**
     *
     * @type {string}
     * @memberof AuthorCount
     */
    'orcid'?: string;
    /**
     *
     * @type {string}
     * @memberof AuthorCount
     */
    'openalex_id'?: string;
    /**
     *
     * @type {number}
     * @memberof AuthorCount
     */
    'num_studies': number;
}
/**
 * Author output.
 * @export
 * @interface AuthorRDBOut
 */
export interface AuthorRDBOut {
    /**
     *
     * @type {string}
     * @memberof AuthorRDBOut
     */
    'full_name': string;
    /**
     *
     * @type {string}
     * @memberof AuthorRDBOut
     */
    'openalex_id'?: string;
    /**
     *
     * @type {string}
     * @memberof AuthorRDBOut
     */
    'orcid'?: string;
}
/**
 *
 * @export
 * @interface CiLower
 */
export interface CiLower {
}
/**
 *
 * @export
 * @interface CiUpper
 */
export interface CiUpper {
}
/**
 * Cluster out model.
 * @export
 * @interface ClusterOut
 */
export interface ClusterOut {
    /**
     *
     * @type {Array<ScoredCluster>}
     * @memberof ClusterOut
     */
    'clusters': Array<ScoredCluster>;
    /**
     *
     * @type {Array<ClusteredRelationship>}
     * @memberof ClusterOut
     */
    'relationships': Array<ClusteredRelationship>;
    /**
     *
     * @type {string}
     * @memberof ClusterOut
     */
    'cache_key'?: string;
}
/**
 * Cluster out status model.
 * @export
 * @interface ClusterOutStatus
 */
export interface ClusterOutStatus {
    /**
     *
     * @type {FunctionStatus}
     * @memberof ClusterOutStatus
     */
    'status': FunctionStatus;
    /**
     *
     * @type {SynthesisResponse}
     * @memberof ClusterOutStatus
     */
    'cluster_out'?: SynthesisResponse;
}
/**
 * Clustered evidence metadata.  # noqa: E501
 * @export
 * @interface ClusteredEvidenceMetadata
 */
export interface ClusteredEvidenceMetadata {
    /**
     *
     * @type {number}
     * @memberof ClusteredEvidenceMetadata
     */
    'citation_count_min'?: number;
    /**
     *
     * @type {number}
     * @memberof ClusteredEvidenceMetadata
     */
    'citation_count_max'?: number;
    /**
     *
     * @type {string}
     * @memberof ClusteredEvidenceMetadata
     */
    'publish_date_earliest'?: string;
    /**
     *
     * @type {string}
     * @memberof ClusteredEvidenceMetadata
     */
    'publish_date_latest'?: string;
    /**
     *
     * @type {number}
     * @memberof ClusteredEvidenceMetadata
     */
    'evidence_count'?: number;
}
/**
 * Schema for clustered relationship response.
 * @export
 * @interface ClusteredRelationship
 */
export interface ClusteredRelationship {
    /**
     *
     * @type {Array<GroundedVariable>}
     * @memberof ClusteredRelationship
     */
    'variables': Array<GroundedVariable>;
    /**
     *
     * @type {Array<string>}
     * @memberof ClusteredRelationship
     */
    'cluster_ids': Array<string>;
    /**
     *
     * @type {Array<FindingMeta>}
     * @memberof ClusteredRelationship
     */
    'finding_metas': Array<FindingMeta>;
    /**
     *
     * @type {Array<StudyFindings>}
     * @memberof ClusteredRelationship
     */
    'findings'?: Array<StudyFindings>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const ClusteringMethods: {
    readonly Agglomerative: "agglomerative";
    readonly Dbscan: "dbscan";
    readonly Paraphrase: "paraphrase";
};
export type ClusteringMethods = typeof ClusteringMethods[keyof typeof ClusteringMethods];
/**
 * Concept resource links.
 * @export
 * @interface ConceptLinks
 */
export interface ConceptLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof ConceptLinks
     */
    'self': string;
}
/**
 * Concept output model.
 * @export
 * @interface ConceptOut
 */
export interface ConceptOut {
    /**
     *
     * @type {string}
     * @memberof ConceptOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof ConceptOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof ConceptOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof ConceptOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof ConceptOut
     */
    'last_updated_at'?: string;
    /**
     *
     * @type {Array<ResourceAction>}
     * @memberof ConceptOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof ConceptOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ConceptOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ConceptOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof ConceptOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ConceptOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ConceptOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * The Concept\'s corresponding wikidata id.
     * @type {string}
     * @memberof ConceptOut
     */
    'wikidata_id': string;
    /**
     * Preferred name if different from existing.
     * @type {string}
     * @memberof ConceptOut
     */
    'preferred_name'?: string;
    /**
     * The Concept\'s name.
     * @type {string}
     * @memberof ConceptOut
     */
    'name'?: string;
    /**
     * The Concept\'s aliases.
     * @type {Array<string>}
     * @memberof ConceptOut
     */
    'aliases'?: Array<string>;
    /**
     * The Concept\'s semantic types.
     * @type {Array<string>}
     * @memberof ConceptOut
     */
    'semantic_types'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ConceptOut
     */
    'description'?: string;
    /**
     * Collection of links to related resources.
     * @type {ConceptLinks}
     * @memberof ConceptOut
     */
    '_links'?: ConceptLinks;
}
/**
 * Node at end of concept relationship.
 * @export
 * @interface ConceptRelationshipNode
 */
export interface ConceptRelationshipNode {
    /**
     *
     * @type {string}
     * @memberof ConceptRelationshipNode
     */
    'system_id': string;
    /**
     *
     * @type {string}
     * @memberof ConceptRelationshipNode
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof ConceptRelationshipNode
     */
    'wikidata_id': string;
    /**
     *
     * @type {Array<string>}
     * @memberof ConceptRelationshipNode
     */
    'supporting_association_ids': Array<string>;
}
/**
 * Concept relationships model.
 * @export
 * @interface ConceptRelationshipsOut
 */
export interface ConceptRelationshipsOut {
    /**
     *
     * @type {ConceptOut}
     * @memberof ConceptRelationshipsOut
     */
    'concept': ConceptOut;
    /**
     *
     * @type {Array<ConceptRelationshipNode>}
     * @memberof ConceptRelationshipsOut
     */
    'upstream': Array<ConceptRelationshipNode>;
    /**
     *
     * @type {Array<ConceptRelationshipNode>}
     * @memberof ConceptRelationshipsOut
     */
    'downstream': Array<ConceptRelationshipNode>;
}
/**
 * Confidence interval output model.
 * @export
 * @interface ConfidenceIntervalOut
 */
export interface ConfidenceIntervalOut {
    /**
     * Confidence level for interval.
     * @type {SignificanceLevel}
     * @memberof ConfidenceIntervalOut
     */
    'level'?: SignificanceLevel;
    /**
     * The lower bound of the CI.
     * @type {number}
     * @memberof ConfidenceIntervalOut
     */
    'ci_lower'?: number;
    /**
     * The upper bound of the CI.
     * @type {number}
     * @memberof ConfidenceIntervalOut
     */
    'ci_upper'?: number;
}
/**
 * Evidence category.
 * @export
 * @enum {string}
 */
export declare const EvidenceCategory: {
    readonly Statistical: "statistical";
    readonly Mechanistic: "mechanistic";
};
export type EvidenceCategory = typeof EvidenceCategory[keyof typeof EvidenceCategory];
/**
 * Evidence output.
 * @export
 * @interface EvidenceRDBOut
 */
export interface EvidenceRDBOut {
    /**
     *
     * @type {string}
     * @memberof EvidenceRDBOut
     */
    'system_id': string;
    /**
     *
     * @type {string}
     * @memberof EvidenceRDBOut
     */
    'study_id'?: string;
    /**
     *
     * @type {string}
     * @memberof EvidenceRDBOut
     */
    'statement_id': string;
    /**
     *
     * @type {string}
     * @memberof EvidenceRDBOut
     */
    'source_hash': string;
    /**
     *
     * @type {string}
     * @memberof EvidenceRDBOut
     */
    'mechanism_type': string;
    /**
     *
     * @type {string}
     * @memberof EvidenceRDBOut
     */
    'variable_1_id'?: string;
    /**
     *
     * @type {string}
     * @memberof EvidenceRDBOut
     */
    'variable_1_name'?: string;
    /**
     *
     * @type {string}
     * @memberof EvidenceRDBOut
     */
    'concept_1_id'?: string;
    /**
     *
     * @type {string}
     * @memberof EvidenceRDBOut
     */
    'variable_2_id'?: string;
    /**
     *
     * @type {string}
     * @memberof EvidenceRDBOut
     */
    'variable_2_name': string;
    /**
     *
     * @type {string}
     * @memberof EvidenceRDBOut
     */
    'concept_2_id'?: string;
    /**
     *
     * @type {string}
     * @memberof EvidenceRDBOut
     */
    'source_api'?: string;
    /**
     *
     * @type {number}
     * @memberof EvidenceRDBOut
     */
    'pubmed_id'?: number;
    /**
     *
     * @type {string}
     * @memberof EvidenceRDBOut
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof EvidenceRDBOut
     */
    'evidence_raw_text'?: string;
}
/**
 * Edge Typed Link model.  # noqa: E501
 * @export
 * @interface ExtendedLinkObject
 */
export interface ExtendedLinkObject {
    /**
     *
     * @type {string}
     * @memberof ExtendedLinkObject
     */
    'source': string;
    /**
     *
     * @type {string}
     * @memberof ExtendedLinkObject
     */
    'target': string;
    /**
     *
     * @type {GraphLinkType}
     * @memberof ExtendedLinkObject
     */
    'edge_type'?: GraphLinkType;
    /**
     *
     * @type {Array<string>}
     * @memberof ExtendedLinkObject
     */
    'association_ids'?: Array<string>;
}
/**
 * Object Typed Node model.  # noqa: E501
 * @export
 * @interface ExtendedNodeObject
 */
export interface ExtendedNodeObject {
    /**
     *
     * @type {string}
     * @memberof ExtendedNodeObject
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ExtendedNodeObject
     */
    'name': string;
    /**
     *
     * @type {GraphNodeType}
     * @memberof ExtendedNodeObject
     */
    'object_type'?: GraphNodeType;
    /**
     *
     * @type {Array<string>}
     * @memberof ExtendedNodeObject
     */
    'system_ids'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ExtendedNodeObject
     */
    'tags'?: Array<string>;
}
/**
 * Feedback on a finding.
 * @export
 * @interface FindingFeedbackIn
 */
export interface FindingFeedbackIn {
    /**
     *
     * @type {string}
     * @memberof FindingFeedbackIn
     */
    'feedback_type': string;
    /**
     *
     * @type {object}
     * @memberof FindingFeedbackIn
     */
    'user_comments'?: object;
}
/**
 * Schema for identifying finding.
 * @export
 * @interface FindingMeta
 */
export interface FindingMeta {
    /**
     *
     * @type {string}
     * @memberof FindingMeta
     */
    'pmid'?: string;
    /**
     *
     * @type {string}
     * @memberof FindingMeta
     */
    'doi'?: string;
    /**
     *
     * @type {string}
     * @memberof FindingMeta
     */
    'association_id'?: string;
    /**
     *
     * @type {string}
     * @memberof FindingMeta
     */
    'publish_date'?: string;
    /**
     *
     * @type {number}
     * @memberof FindingMeta
     */
    'article_score'?: number;
    /**
     *
     * @type {number}
     * @memberof FindingMeta
     */
    'citation_count'?: number;
    /**
     *
     * @type {string}
     * @memberof FindingMeta
     */
    'name'?: string;
    /**
     *
     * @type {Array<StudyAuthor>}
     * @memberof FindingMeta
     */
    'authorships'?: Array<StudyAuthor>;
    /**
     *
     * @type {string}
     * @memberof FindingMeta
     */
    'journal'?: string;
}
/**
 * Findings Log Out.  # noqa: E501
 * @export
 * @interface FindingsLogOut
 */
export interface FindingsLogOut {
    /**
     *
     * @type {Study}
     * @memberof FindingsLogOut
     */
    'study'?: Study;
    /**
     *
     * @type {Array<SohServiceClientModelsFindingFinding>}
     * @memberof FindingsLogOut
     */
    'findings': Array<SohServiceClientModelsFindingFinding>;
}
/**
 * Status for polling functions.
 * @export
 * @enum {string}
 */
export declare const FunctionStatus: {
    readonly Pending: "pending";
    readonly Running: "running";
    readonly Finished: "finished";
    readonly Error: "error";
};
export type FunctionStatus = typeof FunctionStatus[keyof typeof FunctionStatus];
/**
 * Document model.
 * @export
 * @interface GetFTRDocument
 */
export interface GetFTRDocument {
    /**
     *
     * @type {string}
     * @memberof GetFTRDocument
     */
    'contentType': string;
    /**
     *
     * @type {string}
     * @memberof GetFTRDocument
     */
    'url': string;
}
/**
 * Entitlement model.
 * @export
 * @interface GetFTREntitlement
 */
export interface GetFTREntitlement {
    /**
     *
     * @type {string}
     * @memberof GetFTREntitlement
     */
    'doi': string;
    /**
     *
     * @type {number}
     * @memberof GetFTREntitlement
     */
    'statusCode': number;
    /**
     *
     * @type {string}
     * @memberof GetFTREntitlement
     */
    'entitled'?: string;
    /**
     *
     * @type {string}
     * @memberof GetFTREntitlement
     */
    'accessType'?: string;
    /**
     *
     * @type {GetFTROrganization}
     * @memberof GetFTREntitlement
     */
    'org'?: GetFTROrganization;
    /**
     *
     * @type {Array<GetFTRDocument>}
     * @memberof GetFTREntitlement
     */
    'vor'?: Array<GetFTRDocument>;
    /**
     *
     * @type {Array<GetFTRDocument>}
     * @memberof GetFTREntitlement
     */
    'av'?: Array<GetFTRDocument>;
    /**
     *
     * @type {string}
     * @memberof GetFTREntitlement
     */
    'document'?: string;
}
/**
 * Entitlements input model.
 * @export
 * @interface GetFTREntitlementsIn
 */
export interface GetFTREntitlementsIn {
    /**
     *
     * @type {Array<string>}
     * @memberof GetFTREntitlementsIn
     */
    'dois': Array<string>;
    /**
     *
     * @type {GetFTROrganization}
     * @memberof GetFTREntitlementsIn
     */
    'org'?: GetFTROrganization;
}
/**
 * Entitlements output model.
 * @export
 * @interface GetFTREntitlementsOut
 */
export interface GetFTREntitlementsOut {
    /**
     *
     * @type {Array<GetFTREntitlement>}
     * @memberof GetFTREntitlementsOut
     */
    'entitlements': Array<GetFTREntitlement>;
}
/**
 * Organization model.
 * @export
 * @interface GetFTROrganization
 */
export interface GetFTROrganization {
    /**
     *
     * @type {string}
     * @memberof GetFTROrganization
     */
    'ipv4'?: string;
    /**
     *
     * @type {string}
     * @memberof GetFTROrganization
     */
    'entityID'?: string;
    /**
     *
     * @type {string}
     * @memberof GetFTROrganization
     */
    'ringgoldID'?: string;
}
/**
 * Graph Data model.  # noqa: E501
 * @export
 * @interface GraphData
 */
export interface GraphData {
    /**
     * Nodes of graph data.
     * @type {Array<ExtendedNodeObject>}
     * @memberof GraphData
     */
    'nodes': Array<ExtendedNodeObject>;
    /**
     * Links of graph data.
     * @type {Array<ExtendedLinkObject>}
     * @memberof GraphData
     */
    'links': Array<ExtendedLinkObject>;
}
/**
 * Graph Link Type enum.
 * @export
 * @enum {string}
 */
export declare const GraphLinkType: {
    readonly DatasetRelationship: "dataset_relationship";
    readonly ConceptRelationship: "concept_relationship";
    readonly VariableRelationship: "variable_relationship";
    readonly FeatureRelationship: "feature_relationship";
    readonly FeatureVariable: "feature_variable";
    readonly Measures: "measures";
};
export type GraphLinkType = typeof GraphLinkType[keyof typeof GraphLinkType];
/**
 * Graph metrics schema.
 * @export
 * @interface GraphMetrics
 */
export interface GraphMetrics {
    /**
     *
     * @type {number}
     * @memberof GraphMetrics
     */
    'num_relationships': number;
    /**
     *
     * @type {number}
     * @memberof GraphMetrics
     */
    'num_topics': number;
    /**
     *
     * @type {number}
     * @memberof GraphMetrics
     */
    'num_sources': number;
    /**
     *
     * @type {number}
     * @memberof GraphMetrics
     */
    'num_findings': number;
    /**
     *
     * @type {string}
     * @memberof GraphMetrics
     */
    'last_updated': string;
}
/**
 * Graph Node Type enum.
 * @export
 * @enum {string}
 */
export declare const GraphNodeType: {
    readonly Dataset: "dataset";
    readonly Concept: "concept";
    readonly Variable: "variable";
    readonly Feature: "feature";
};
export type GraphNodeType = typeof GraphNodeType[keyof typeof GraphNodeType];
/**
 * Graph out.  # noqa: E501
 * @export
 * @interface GraphOut
 */
export interface GraphOut {
    /**
     *
     * @type {Array<SohServiceClientModelsTopicNodeTopicNode>}
     * @memberof GraphOut
     */
    'nodes': Array<SohServiceClientModelsTopicNodeTopicNode>;
    /**
     *
     * @type {Array<TopicEdge>}
     * @memberof GraphOut
     */
    'links': Array<TopicEdge>;
    /**
     *
     * @type {number}
     * @memberof GraphOut
     */
    'original_link_count'?: number;
    /**
     *
     * @type {number}
     * @memberof GraphOut
     */
    'original_node_count'?: number;
}
/**
 * Typed graph payload.
 * @export
 * @interface GraphPayloadTyped
 */
export interface GraphPayloadTyped {
    /**
     * Dictionary of topic filters with key corresponding to zero-indexed node in path.
     * @type {{ [key: string]: TopicFilterParams; }}
     * @memberof GraphPayloadTyped
     */
    'topic_filters'?: {
        [key: string]: TopicFilterParams;
    };
    /**
     * Dictionary of relationship filters with key corresponding to zero-indexed edge in path.
     * @type {{ [key: string]: RelationshipFilterParams; }}
     * @memberof GraphPayloadTyped
     */
    'relationship_filters'?: {
        [key: string]: RelationshipFilterParams;
    };
    /**
     * Limit number of paths.
     * @type {number}
     * @memberof GraphPayloadTyped
     */
    'limit'?: number;
}
/**
 * Graph time series out.  # noqa: E501
 * @export
 * @interface GraphTimeSeriesOut
 */
export interface GraphTimeSeriesOut {
    /**
     *
     * @type {Array<TimeSeriesDataPoint>}
     * @memberof GraphTimeSeriesOut
     */
    'num_findings_time_series': Array<TimeSeriesDataPoint>;
    /**
     *
     * @type {Array<TimeSeriesDataPoint>}
     * @memberof GraphTimeSeriesOut
     */
    'num_relationships_time_series': Array<TimeSeriesDataPoint>;
    /**
     *
     * @type {Array<TimeSeriesDataPoint>}
     * @memberof GraphTimeSeriesOut
     */
    'num_concepts_time_series': Array<TimeSeriesDataPoint>;
}
/**
 *
 * @export
 * @interface GroundedEntity
 */
export interface GroundedEntity {
    /**
     *
     * @type {string}
     * @memberof GroundedEntity
     */
    'name': string;
    /**
     *
     * @type {Array<QueryParserApiModelsPydanticGrounding>}
     * @memberof GroundedEntity
     */
    'groundings'?: Array<QueryParserApiModelsPydanticGrounding>;
}
/**
 * Variable object schema for relationships.
 * @export
 * @interface GroundedVariable
 */
export interface GroundedVariable {
    /**
     *
     * @type {string}
     * @memberof GroundedVariable
     */
    'system_id'?: string;
    /**
     *
     * @type {string}
     * @memberof GroundedVariable
     */
    'name': string;
    /**
     *
     * @type {Array<VariableGrounding>}
     * @memberof GroundedVariable
     */
    'groundings'?: Array<VariableGrounding>;
    /**
     *
     * @type {string}
     * @memberof GroundedVariable
     */
    'topic_id'?: string;
    /**
     *
     * @type {string}
     * @memberof GroundedVariable
     */
    'topic_name'?: string;
    /**
     *
     * @type {string}
     * @memberof GroundedVariable
     */
    'topic_wikidata_id'?: string;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     *
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * Hierarchical topic node.  # noqa: E501
 * @export
 * @interface HierarchicalTopicNode
 */
export interface HierarchicalTopicNode {
    /**
     *
     * @type {string}
     * @memberof HierarchicalTopicNode
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof HierarchicalTopicNode
     */
    'topic_id': string;
    /**
     *
     * @type {Array<string>}
     * @memberof HierarchicalTopicNode
     */
    'umls_cuis': Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof HierarchicalTopicNode
     */
    'umls_children'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof HierarchicalTopicNode
     */
    'wikidata_id'?: string;
    /**
     *
     * @type {Array<Role>}
     * @memberof HierarchicalTopicNode
     */
    'roles': Array<Role>;
    /**
     *
     * @type {string}
     * @memberof HierarchicalTopicNode
     */
    'category': string;
    /**
     *
     * @type {string}
     * @memberof HierarchicalTopicNode
     */
    'mechanistic_category'?: string;
    /**
     *
     * @type {Array<SohServiceClientModelsRelationshipTypesRelationshipTypes>}
     * @memberof HierarchicalTopicNode
     */
    'relationship_types'?: Array<SohServiceClientModelsRelationshipTypesRelationshipTypes>;
    /**
     *
     * @type {Array<SohServiceClientModelsTopicNodeTopicNode>}
     * @memberof HierarchicalTopicNode
     */
    'children'?: Array<SohServiceClientModelsTopicNodeTopicNode>;
}
/**
 * Path.  # noqa: E501
 * @export
 * @interface MapPath
 */
export interface MapPath {
    /**
     * Sorted list of edge IDs
     * @type {Array<string>}
     * @memberof MapPath
     */
    'edge_ids': Array<string>;
    /**
     *
     * @type {number}
     * @memberof MapPath
     */
    'evidence_count': number;
}
/**
 * Map paths out.  # noqa: E501
 * @export
 * @interface MapPathsOut
 */
export interface MapPathsOut {
    /**
     *
     * @type {number}
     * @memberof MapPathsOut
     */
    'page': number;
    /**
     *
     * @type {number}
     * @memberof MapPathsOut
     */
    'page_size': number;
    /**
     *
     * @type {number}
     * @memberof MapPathsOut
     */
    'total': number;
    /**
     *
     * @type {Array<SystemGraphApiClientModelsTopicNodeTopicNode>}
     * @memberof MapPathsOut
     */
    'nodes': Array<SystemGraphApiClientModelsTopicNodeTopicNode>;
    /**
     *
     * @type {Array<MapRelationship>}
     * @memberof MapPathsOut
     */
    'links': Array<MapRelationship>;
    /**
     *
     * @type {Array<MapPath>}
     * @memberof MapPathsOut
     */
    'paths': Array<MapPath>;
}
/**
 * Map relationship.  # noqa: E501
 * @export
 * @interface MapRelationship
 */
export interface MapRelationship {
    /**
     *
     * @type {string}
     * @memberof MapRelationship
     */
    'edge_id': string;
    /**
     *
     * @type {string}
     * @memberof MapRelationship
     */
    'source': string;
    /**
     *
     * @type {string}
     * @memberof MapRelationship
     */
    'target': string;
    /**
     * Association IDs
     * @type {Array<string>}
     * @memberof MapRelationship
     */
    'association_ids'?: Array<string>;
    /**
     * Evidence IDs
     * @type {Array<string>}
     * @memberof MapRelationship
     */
    'evidence_ids'?: Array<string>;
}
/**
 * Metadata for mechanistic finding.
 * @export
 * @interface MechanisticMetadata
 */
export interface MechanisticMetadata {
    /**
     *
     * @type {Array<GroundedVariable>}
     * @memberof MechanisticMetadata
     */
    'variables': Array<GroundedVariable>;
    /**
     *
     * @type {Array<string>}
     * @memberof MechanisticMetadata
     */
    'populations'?: Array<string>;
    /**
     *
     * @type {StudyMetadataRDB}
     * @memberof MechanisticMetadata
     */
    'study_metadata'?: StudyMetadataRDB;
    /**
     *
     * @type {string}
     * @memberof MechanisticMetadata
     */
    'mechanism_type'?: string;
    /**
     *
     * @type {string}
     * @memberof MechanisticMetadata
     */
    'source_statement'?: string;
}
/**
 * Mechanistic relationship model.
 * @export
 * @interface MechanisticRelationship
 */
export interface MechanisticRelationship {
    /**
     *
     * @type {string}
     * @memberof MechanisticRelationship
     */
    'id': string;
    /**
     *
     * @type {MechanisticMetadata}
     * @memberof MechanisticRelationship
     */
    'metadata': MechanisticMetadata;
}
/**
 *
 * @export
 * @interface MedianEffectSize
 */
export interface MedianEffectSize {
}
/**
 * Metrics name enum.
 * @export
 * @enum {string}
 */
export declare const Metrics: {
    readonly SemanticSearchCreate: "semantic_search.create";
    readonly SemanticSearchClusterRead: "semantic_search_cluster.read";
    readonly FindingsLogDoiLookup: "findings_log.doi_lookup";
};
export type Metrics = typeof Metrics[keyof typeof Metrics];
/**
 * Node group model.  # noqa: E501
 * @export
 * @interface NodeGroup
 */
export interface NodeGroup {
    /**
     *
     * @type {Array<NodeGroupItem>}
     * @memberof NodeGroup
     */
    'items': Array<NodeGroupItem>;
    /**
     *
     * @type {number}
     * @memberof NodeGroup
     */
    'total': number;
}
/**
 * Supported Node Object model.  # noqa: E501
 * @export
 * @interface NodeGroupItem
 */
export interface NodeGroupItem {
    /**
     *
     * @type {Array<ExtendedLinkObject>}
     * @memberof NodeGroupItem
     */
    'links': Array<ExtendedLinkObject>;
    /**
     *
     * @type {ExtendedNodeObject}
     * @memberof NodeGroupItem
     */
    'node': ExtendedNodeObject;
}
/**
 *
 * @export
 * @interface PValue
 */
export interface PValue {
}
/**
 * Path.  # noqa: E501
 * @export
 * @interface Path
 */
export interface Path {
    /**
     *
     * @type {Array<string>}
     * @memberof Path
     */
    'edge_ids': Array<string>;
    /**
     *
     * @type {number}
     * @memberof Path
     */
    'evidence_count': number;
}
/**
 * Map paths out.  # noqa: E501
 * @export
 * @interface PathsOut
 */
export interface PathsOut {
    /**
     *
     * @type {number}
     * @memberof PathsOut
     */
    'limit': number;
    /**
     *
     * @type {number}
     * @memberof PathsOut
     */
    'offset': number;
    /**
     *
     * @type {number}
     * @memberof PathsOut
     */
    'total': number;
    /**
     *
     * @type {Array<SohServiceClientModelsTopicNodeTopicNode>}
     * @memberof PathsOut
     */
    'nodes': Array<SohServiceClientModelsTopicNodeTopicNode>;
    /**
     *
     * @type {Array<TopicEdge>}
     * @memberof PathsOut
     */
    'links': Array<TopicEdge>;
    /**
     *
     * @type {Array<Path>}
     * @memberof PathsOut
     */
    'paths': Array<Path>;
}
/**
 * Typed paths payload.
 * @export
 * @interface PathsPayloadTyped
 */
export interface PathsPayloadTyped {
    /**
     * Number of hops.
     * @type {number}
     * @memberof PathsPayloadTyped
     */
    'n_hop': number;
    /**
     * Dictionary of topic filters with key corresponding to zero-indexed node in path.
     * @type {{ [key: string]: TopicFilterParams; }}
     * @memberof PathsPayloadTyped
     */
    'topic_filters'?: {
        [key: string]: TopicFilterParams;
    };
    /**
     * Dictionary of relationship filters with key corresponding to zero-indexed edge in path.
     * @type {{ [key: string]: RelationshipFilterParams; }}
     * @memberof PathsPayloadTyped
     */
    'relationship_filters'?: {
        [key: string]: RelationshipFilterParams;
    };
    /**
     * Sort field as sort_by:order. If not provided, paths are sorted by findings count.
     * @type {string}
     * @memberof PathsPayloadTyped
     */
    'sort'?: string;
    /**
     * Limit number of paths.
     * @type {number}
     * @memberof PathsPayloadTyped
     */
    'limit'?: number;
    /**
     * Offset number of paths.
     * @type {number}
     * @memberof PathsPayloadTyped
     */
    'offset'?: number;
}
/**
 * Polling status enum.
 * @export
 * @enum {string}
 */
export declare const PollingStatus: {
    readonly NotExists: "not_exists";
    readonly Submitted: "submitted";
    readonly Running: "running";
    readonly Success: "success";
    readonly Failed: "failed";
    readonly FailedNoCitations: "failed_no_citations";
    readonly FailedValidation: "failed_validation";
};
export type PollingStatus = typeof PollingStatus[keyof typeof PollingStatus];
/**
 *
 * @export
 * @interface QueryParserApiModelsPydanticGrounding
 */
export interface QueryParserApiModelsPydanticGrounding {
    /**
     *
     * @type {string}
     * @memberof QueryParserApiModelsPydanticGrounding
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof QueryParserApiModelsPydanticGrounding
     */
    'namespace': string;
    /**
     *
     * @type {string}
     * @memberof QueryParserApiModelsPydanticGrounding
     */
    'id': string;
    /**
     *
     * @type {number}
     * @memberof QueryParserApiModelsPydanticGrounding
     */
    'score': number;
}
/**
 * Statistical finding.
 * @export
 * @interface RawFinding
 */
export interface RawFinding {
    /**
     *
     * @type {string}
     * @memberof RawFinding
     */
    'association_id': string;
    /**
     *
     * @type {string}
     * @memberof RawFinding
     */
    'variable_1': string;
    /**
     *
     * @type {string}
     * @memberof RawFinding
     */
    'variable_2': string;
    /**
     *
     * @type {boolean}
     * @memberof RawFinding
     */
    'bidirectional': boolean;
    /**
     *
     * @type {string}
     * @memberof RawFinding
     */
    'feature_contribution_method': string;
    /**
     *
     * @type {boolean}
     * @memberof RawFinding
     */
    'is_ratio': boolean;
    /**
     *
     * @type {number}
     * @memberof RawFinding
     */
    'value': number;
    /**
     *
     * @type {ConfidenceIntervalOut}
     * @memberof RawFinding
     */
    'ci'?: ConfidenceIntervalOut;
    /**
     *
     * @type {number}
     * @memberof RawFinding
     */
    'p_value'?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof RawFinding
     */
    'flags'?: Array<string>;
}
/**
 * Filter parameters.  # noqa: E501
 * @export
 * @interface RelationshipFilterParams
 */
export interface RelationshipFilterParams {
    /**
     *
     * @type {MedianEffectSize}
     * @memberof RelationshipFilterParams
     */
    'median_es_min'?: MedianEffectSize;
    /**
     * Highly cited.
     * @type {boolean}
     * @memberof RelationshipFilterParams
     */
    'highly_cited'?: boolean;
    /**
     * Well established.
     * @type {boolean}
     * @memberof RelationshipFilterParams
     */
    'well_established'?: boolean;
    /**
     * Not well established.
     * @type {boolean}
     * @memberof RelationshipFilterParams
     */
    'not_well_established'?: boolean;
    /**
     * Significant well established.
     * @type {boolean}
     * @memberof RelationshipFilterParams
     */
    'significant_well_estabished'?: boolean;
    /**
     * Supported by experimental trials.
     * @type {boolean}
     * @memberof RelationshipFilterParams
     */
    'supported_by_experimental'?: boolean;
    /**
     * Recency limit years.
     * @type {number}
     * @memberof RelationshipFilterParams
     */
    'recency_limit_years'?: number;
    /**
     * Sample size minimum.
     * @type {number}
     * @memberof RelationshipFilterParams
     */
    'sample_size_min'?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof RelationshipFilterParams
     */
    'mechanism_types'?: Array<string>;
}
/**
 * API resource action enum.
 * @export
 * @enum {string}
 */
export declare const ResourceAction: {
    readonly Create: "create";
    readonly View: "view";
    readonly Edit: "edit";
    readonly Delete: "delete";
};
export type ResourceAction = typeof ResourceAction[keyof typeof ResourceAction];
/**
 * A System Resource Flag Output Object.
 * @export
 * @interface ResourceFlag
 */
export interface ResourceFlag {
    /**
     * Given reasons for the flag.
     * @type {Array<string>}
     * @memberof ResourceFlag
     */
    'reasons': Array<string>;
    /**
     * Additional metadata for the flag.
     * @type {object}
     * @memberof ResourceFlag
     */
    'meta'?: object;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof ResourceFlag
     */
    'added_on': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof ResourceFlag
     */
    'added_by': string;
}
/**
 * Role.
 * @export
 * @enum {string}
 */
export declare const Role: {
    readonly Determinant: "Determinant";
    readonly Intervention: "Intervention";
    readonly Outcome: "Outcome";
    readonly Agent: "Agent";
};
export type Role = typeof Role[keyof typeof Role];
/**
 * Schema for scored cluster.
 * @export
 * @interface ScoredCluster
 */
export interface ScoredCluster {
    /**
     *
     * @type {number}
     * @memberof ScoredCluster
     */
    'sort_id': number;
    /**
     *
     * @type {string}
     * @memberof ScoredCluster
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ScoredCluster
     */
    'display_summary': string;
    /**
     *
     * @type {string}
     * @memberof ScoredCluster
     */
    'prompt_summary': string;
    /**
     *
     * @type {Array<string>}
     * @memberof ScoredCluster
     */
    'cluster_labels': Array<string>;
    /**
     *
     * @type {Array<Array<AppSchemaGroundingsGrounding>>}
     * @memberof ScoredCluster
     */
    'label_groundings'?: Array<Array<AppSchemaGroundingsGrounding>>;
    /**
     *
     * @type {string}
     * @memberof ScoredCluster
     */
    'stat_descriptor'?: string;
    /**
     * Cluster-level metadata
     * @type {ClusteredEvidenceMetadata}
     * @memberof ScoredCluster
     */
    'cluster_metadata'?: ClusteredEvidenceMetadata;
    /**
     *
     * @type {EvidenceCategory}
     * @memberof ScoredCluster
     */
    'evidence_category'?: EvidenceCategory;
    /**
     *
     * @type {number}
     * @memberof ScoredCluster
     */
    'score': number;
    /**
     *
     * @type {number}
     * @memberof ScoredCluster
     */
    'original_score'?: number;
    /**
     *
     * @type {number}
     * @memberof ScoredCluster
     */
    'sort_bucket'?: number;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof ScoredCluster
     */
    'search_term_grounding_namespaces'?: {
        [key: string]: string;
    };
    /**
     *
     * @type {string}
     * @memberof ScoredCluster
     */
    'reference_agent_position'?: string;
    /**
     *
     * @type {string}
     * @memberof ScoredCluster
     */
    'other_agent_category'?: string;
    /**
     *
     * @type {string}
     * @memberof ScoredCluster
     */
    'modification_type'?: string;
}
/**
 * Search type.
 * @export
 * @enum {string}
 */
export declare const SearchType: {
    readonly Semantic: "semantic";
    readonly Keyword: "keyword";
};
export type SearchType = typeof SearchType[keyof typeof SearchType];
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const SemanticSearchType: {
    readonly RiskFactorOf: "risk_factor_of";
    readonly Outcome: "outcome";
    readonly Relationship: "relationship";
    readonly Relationship2d: "relationship_2d";
    readonly SingleVariable2d: "single_variable_2d";
};
export type SemanticSearchType = typeof SemanticSearchType[keyof typeof SemanticSearchType];
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const SignificanceLevel: {
    readonly NinetyFive: "ninety_five";
    readonly NinetyNine: "ninety_nine";
    readonly NinetyNinePointNine: "ninety_nine_point_nine";
    readonly Invalid: "invalid";
};
export type SignificanceLevel = typeof SignificanceLevel[keyof typeof SignificanceLevel];
/**
 * Interface for soh metadata.
 * @export
 * @interface Soh
 */
export interface Soh {
    /**
     *
     * @type {string}
     * @memberof Soh
     */
    'finding_sentence'?: string;
    /**
     *
     * @type {string}
     * @memberof Soh
     */
    'study_population'?: string;
    /**
     *
     * @type {string}
     * @memberof Soh
     */
    'statistic_type'?: string;
    /**
     *
     * @type {number}
     * @memberof Soh
     */
    'statistic_value'?: number;
    /**
     *
     * @type {object}
     * @memberof Soh
     */
    'significance_value'?: object;
    /**
     *
     * @type {string}
     * @memberof Soh
     */
    'study_title'?: string;
    /**
     *
     * @type {string}
     * @memberof Soh
     */
    'study_doi'?: string;
    /**
     *
     * @type {number}
     * @memberof Soh
     */
    'study_cited_by'?: number;
    /**
     *
     * @type {string}
     * @memberof Soh
     */
    'study_published_date'?: string;
    /**
     *
     * @type {Array<object>}
     * @memberof Soh
     */
    'study_authors'?: Array<object>;
    /**
     *
     * @type {string}
     * @memberof Soh
     */
    'study_type'?: string;
    /**
     *
     * @type {string}
     * @memberof Soh
     */
    'variable_1_name'?: string;
    /**
     *
     * @type {string}
     * @memberof Soh
     */
    'variable_2_name'?: string;
    /**
     *
     * @type {number}
     * @memberof Soh
     */
    'p_value'?: number;
    /**
     *
     * @type {number}
     * @memberof Soh
     */
    'effect_size'?: number;
}
/**
 * Interface for soh metadata on evidences.
 * @export
 * @interface SohEvidence
 */
export interface SohEvidence {
    /**
     *
     * @type {string}
     * @memberof SohEvidence
     */
    'id': string;
    /**
     *
     * @type {Array<object>}
     * @memberof SohEvidence
     */
    'study_authors': Array<object>;
    /**
     *
     * @type {string}
     * @memberof SohEvidence
     */
    'study_published_date'?: string;
    /**
     *
     * @type {string}
     * @memberof SohEvidence
     */
    'study_doi': string;
    /**
     *
     * @type {string}
     * @memberof SohEvidence
     */
    'agent_1_name': string;
    /**
     *
     * @type {string}
     * @memberof SohEvidence
     */
    'agent_2_name': string;
    /**
     *
     * @type {string}
     * @memberof SohEvidence
     */
    'agent_1_id': string;
    /**
     *
     * @type {string}
     * @memberof SohEvidence
     */
    'agent_2_id': string;
    /**
     *
     * @type {string}
     * @memberof SohEvidence
     */
    'mechanism_type': string;
    /**
     *
     * @type {string}
     * @memberof SohEvidence
     */
    'source_statement'?: string;
    /**
     *
     * @type {number}
     * @memberof SohEvidence
     */
    'study_cited_by'?: number;
    /**
     *
     * @type {string}
     * @memberof SohEvidence
     */
    'study_title'?: string;
}
/**
 * Interface for /soh response type.
 * @export
 * @interface SohEvidenceOut
 */
export interface SohEvidenceOut {
    /**
     *
     * @type {Array<SohEvidence>}
     * @memberof SohEvidenceOut
     */
    'data': Array<SohEvidence>;
    /**
     *
     * @type {string}
     * @memberof SohEvidenceOut
     */
    'sort'?: string;
    /**
     *
     * @type {number}
     * @memberof SohEvidenceOut
     */
    'limit'?: number;
    /**
     *
     * @type {number}
     * @memberof SohEvidenceOut
     */
    'offset'?: number;
    /**
     *
     * @type {number}
     * @memberof SohEvidenceOut
     */
    'total'?: number;
}
/**
 * Interface for input to /soh.
 * @export
 * @interface SohIn
 */
export interface SohIn {
    /**
     *
     * @type {Array<string>}
     * @memberof SohIn
     */
    'concept_1_group'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof SohIn
     */
    'concept_2_group'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof SohIn
     */
    'sort'?: string;
    /**
     *
     * @type {number}
     * @memberof SohIn
     */
    'limit'?: number;
    /**
     *
     * @type {number}
     * @memberof SohIn
     */
    'offset'?: number;
    /**
     *
     * @type {boolean}
     * @memberof SohIn
     */
    'calculate_count'?: boolean;
}
/**
 * Interface for /soh response type.
 * @export
 * @interface SohOut
 */
export interface SohOut {
    /**
     *
     * @type {Array<Soh>}
     * @memberof SohOut
     */
    'data': Array<Soh>;
    /**
     *
     * @type {string}
     * @memberof SohOut
     */
    'sort'?: string;
    /**
     *
     * @type {number}
     * @memberof SohOut
     */
    'limit'?: number;
    /**
     *
     * @type {number}
     * @memberof SohOut
     */
    'offset'?: number;
    /**
     *
     * @type {number}
     * @memberof SohOut
     */
    'total'?: number;
}
/**
 * Statistical or Mechanistic Finding/Relationship.  # noqa: E501
 * @export
 * @interface SohServiceClientModelsFindingFinding
 */
export interface SohServiceClientModelsFindingFinding {
    /**
     *
     * @type {string}
     * @memberof SohServiceClientModelsFindingFinding
     */
    'study_id'?: string;
    /**
     *
     * @type {string}
     * @memberof SohServiceClientModelsFindingFinding
     */
    'study_doi'?: string;
    /**
     *
     * @type {string}
     * @memberof SohServiceClientModelsFindingFinding
     */
    'association_id': string;
    /**
     *
     * @type {string}
     * @memberof SohServiceClientModelsFindingFinding
     */
    'added_on': string;
    /**
     *
     * @type {string}
     * @memberof SohServiceClientModelsFindingFinding
     */
    'variable_1_name'?: string;
    /**
     *
     * @type {string}
     * @memberof SohServiceClientModelsFindingFinding
     */
    'variable_2_name'?: string;
    /**
     *
     * @type {string}
     * @memberof SohServiceClientModelsFindingFinding
     */
    'mechanism_type'?: string;
    /**
     *
     * @type {string}
     * @memberof SohServiceClientModelsFindingFinding
     */
    'statistic_type'?: string;
    /**
     *
     * @type {StatisticValue}
     * @memberof SohServiceClientModelsFindingFinding
     */
    'statistic_value'?: StatisticValue;
    /**
     *
     * @type {CiUpper}
     * @memberof SohServiceClientModelsFindingFinding
     */
    'ci_upper'?: CiUpper;
    /**
     *
     * @type {CiLower}
     * @memberof SohServiceClientModelsFindingFinding
     */
    'ci_lower'?: CiLower;
    /**
     *
     * @type {PValue}
     * @memberof SohServiceClientModelsFindingFinding
     */
    'p_value'?: PValue;
    /**
     *
     * @type {string}
     * @memberof SohServiceClientModelsFindingFinding
     */
    'population'?: string;
    /**
     *
     * @type {string}
     * @memberof SohServiceClientModelsFindingFinding
     */
    'sample_size'?: string;
    /**
     *
     * @type {Array<object>}
     * @memberof SohServiceClientModelsFindingFinding
     */
    'authors'?: Array<object>;
}
/**
 * Relationship types.
 * @export
 * @enum {string}
 */
export declare const SohServiceClientModelsRelationshipTypesRelationshipTypes: {
    readonly Statistical: "statistical";
    readonly Mechanistic: "mechanistic";
};
export type SohServiceClientModelsRelationshipTypesRelationshipTypes = typeof SohServiceClientModelsRelationshipTypesRelationshipTypes[keyof typeof SohServiceClientModelsRelationshipTypesRelationshipTypes];
/**
 * Topic node.  # noqa: E501
 * @export
 * @interface SohServiceClientModelsTopicNodeTopicNode
 */
export interface SohServiceClientModelsTopicNodeTopicNode {
    /**
     *
     * @type {string}
     * @memberof SohServiceClientModelsTopicNodeTopicNode
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof SohServiceClientModelsTopicNodeTopicNode
     */
    'topic_id': string;
    /**
     *
     * @type {Array<string>}
     * @memberof SohServiceClientModelsTopicNodeTopicNode
     */
    'umls_cuis': Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof SohServiceClientModelsTopicNodeTopicNode
     */
    'umls_children'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof SohServiceClientModelsTopicNodeTopicNode
     */
    'wikidata_id'?: string;
    /**
     *
     * @type {Array<Role>}
     * @memberof SohServiceClientModelsTopicNodeTopicNode
     */
    'roles': Array<Role>;
    /**
     *
     * @type {string}
     * @memberof SohServiceClientModelsTopicNodeTopicNode
     */
    'category': string;
    /**
     *
     * @type {string}
     * @memberof SohServiceClientModelsTopicNodeTopicNode
     */
    'mechanistic_category'?: string;
    /**
     *
     * @type {Array<SohServiceClientModelsRelationshipTypesRelationshipTypes>}
     * @memberof SohServiceClientModelsTopicNodeTopicNode
     */
    'relationship_types'?: Array<SohServiceClientModelsRelationshipTypesRelationshipTypes>;
}
/**
 *
 * @export
 * @interface SsoConfig
 */
export interface SsoConfig {
    /**
     *
     * @type {number}
     * @memberof SsoConfig
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof SsoConfig
     */
    'domain_hash': string;
    /**
     *
     * @type {string}
     * @memberof SsoConfig
     */
    'idp': string;
}
/**
 * Statistic relationship model.
 * @export
 * @interface StatisticRelationship
 */
export interface StatisticRelationship {
    /**
     *
     * @type {string}
     * @memberof StatisticRelationship
     */
    'id': string;
    /**
     *
     * @type {StatisticalMetadata}
     * @memberof StatisticRelationship
     */
    'metadata': StatisticalMetadata;
}
/**
 *
 * @export
 * @interface StatisticValue
 */
export interface StatisticValue {
}
/**
 * Metadata for statistical finding.
 * @export
 * @interface StatisticalMetadata
 */
export interface StatisticalMetadata {
    /**
     *
     * @type {Array<GroundedVariable>}
     * @memberof StatisticalMetadata
     */
    'variables': Array<GroundedVariable>;
    /**
     *
     * @type {Array<string>}
     * @memberof StatisticalMetadata
     */
    'populations'?: Array<string>;
    /**
     *
     * @type {StudyMetadataRDB}
     * @memberof StatisticalMetadata
     */
    'study_metadata'?: StudyMetadataRDB;
    /**
     *
     * @type {string}
     * @memberof StatisticalMetadata
     */
    'statistic_type'?: string;
    /**
     *
     * @type {number}
     * @memberof StatisticalMetadata
     */
    'statistic_value'?: number;
    /**
     *
     * @type {number}
     * @memberof StatisticalMetadata
     */
    'p_value'?: number;
    /**
     *
     * @type {string}
     * @memberof StatisticalMetadata
     */
    'ci_percent'?: string;
    /**
     *
     * @type {number}
     * @memberof StatisticalMetadata
     */
    'ci_lower'?: number;
    /**
     *
     * @type {number}
     * @memberof StatisticalMetadata
     */
    'ci_upper'?: number;
}
/**
 * Stripe account status enum.
 * @export
 * @enum {string}
 */
export declare const StripeAccountStatus: {
    readonly Trial: "trial";
    readonly Subscribed: "subscribed";
    readonly Expired: "expired";
    readonly GroupSubscribed: "group_subscribed";
    readonly Unsubscribed: "unsubscribed";
};
export type StripeAccountStatus = typeof StripeAccountStatus[keyof typeof StripeAccountStatus];
/**
 * Stripe object.
 * @export
 * @interface StripeOut
 */
export interface StripeOut {
    /**
     * Subscription start date.
     * @type {string}
     * @memberof StripeOut
     */
    'start_date'?: string;
    /**
     * Subscription end date.
     * @type {string}
     * @memberof StripeOut
     */
    'end_date'?: string;
    /**
     * Subscription status.
     * @type {StripeAccountStatus}
     * @memberof StripeOut
     */
    'status'?: StripeAccountStatus;
    /**
     * Monthly or yearly.
     * @type {string}
     * @memberof StripeOut
     */
    'interval'?: string;
    /**
     * Autonew subscription
     * @type {boolean}
     * @memberof StripeOut
     */
    'cancel_at_period_end'?: boolean;
    /**
     * Subscription id.
     * @type {string}
     * @memberof StripeOut
     */
    'subscription_id'?: string;
    /**
     * Is group admin.
     * @type {boolean}
     * @memberof StripeOut
     */
    'is_group_admin'?: boolean;
    /**
     * Is group member.
     * @type {boolean}
     * @memberof StripeOut
     */
    'is_group_member'?: boolean;
    /**
     * Coupon code.
     * @type {string}
     * @memberof StripeOut
     */
    'coupon_id'?: string;
}
/**
 * Stripe session object.
 * @export
 * @interface StripeSessionOut
 */
export interface StripeSessionOut {
    /**
     * Session url link.
     * @type {string}
     * @memberof StripeSessionOut
     */
    'session_url'?: string;
}
/**
 * Study.  # noqa: E501
 * @export
 * @interface Study
 */
export interface Study {
    /**
     *
     * @type {string}
     * @memberof Study
     */
    'doi': string;
    /**
     *
     * @type {string}
     * @memberof Study
     */
    'system_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Study
     */
    'title': string;
    /**
     *
     * @type {Array<object>}
     * @memberof Study
     */
    'authors': Array<object>;
    /**
     *
     * @type {string}
     * @memberof Study
     */
    'journal': string;
    /**
     *
     * @type {string}
     * @memberof Study
     */
    'publish_date': string;
    /**
     *
     * @type {string}
     * @memberof Study
     */
    'abstract'?: string;
    /**
     *
     * @type {number}
     * @memberof Study
     */
    'cited_by': number;
    /**
     *
     * @type {string}
     * @memberof Study
     */
    'retraction_reason'?: string;
}
/**
 * Interface for an author on a study.
 * @export
 * @interface StudyAuthor
 */
export interface StudyAuthor {
    /**
     *
     * @type {string}
     * @memberof StudyAuthor
     */
    'oa_id'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyAuthor
     */
    'name': string;
}
/**
 * Interface for a single study and its finding sentences, populations, sample size, and id.
 * @export
 * @interface StudyFindings
 */
export interface StudyFindings {
    /**
     *
     * @type {Array<AppSchemaFindingsFinding>}
     * @memberof StudyFindings
     */
    'findings': Array<AppSchemaFindingsFinding>;
    /**
     *
     * @type {string}
     * @memberof StudyFindings
     */
    'doi': string;
    /**
     *
     * @type {Array<string>}
     * @memberof StudyFindings
     */
    'populations'?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof StudyFindings
     */
    'sample_size'?: number;
    /**
     *
     * @type {string}
     * @memberof StudyFindings
     */
    'system_id'?: string;
    /**
     *
     * @type {number}
     * @memberof StudyFindings
     */
    'pmid'?: number;
    /**
     *
     * @type {string}
     * @memberof StudyFindings
     */
    'name'?: string;
    /**
     *
     * @type {Array<AuthorRDBOut>}
     * @memberof StudyFindings
     */
    'authors'?: Array<AuthorRDBOut>;
    /**
     *
     * @type {string}
     * @memberof StudyFindings
     */
    'study_summary'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyFindings
     */
    'journal'?: string;
    /**
     *
     * @type {number}
     * @memberof StudyFindings
     */
    'cited_by'?: number;
    /**
     *
     * @type {string}
     * @memberof StudyFindings
     */
    'publish_date'?: string;
}
/**
 * Interface for /findings input.
 * @export
 * @interface StudyFindingsIn
 */
export interface StudyFindingsIn {
    /**
     *
     * @type {Array<string>}
     * @memberof StudyFindingsIn
     */
    'association_ids'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof StudyFindingsIn
     */
    'dois'?: Array<string>;
}
/**
 * Interface for /findings response type.
 * @export
 * @interface StudyFindingsOut
 */
export interface StudyFindingsOut {
    /**
     *
     * @type {Array<StudyFindings>}
     * @memberof StudyFindingsOut
     */
    'studies': Array<StudyFindings>;
}
/**
 * Interface for Study Metadata retrieved from DynamoD and OpenAlex.
 * @export
 * @interface StudyMetadata
 */
export interface StudyMetadata {
    /**
     *
     * @type {string}
     * @memberof StudyMetadata
     */
    'pmid'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyMetadata
     */
    'doi'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyMetadata
     */
    'name'?: string;
    /**
     *
     * @type {Array<StudyAuthor>}
     * @memberof StudyMetadata
     */
    'authors'?: Array<StudyAuthor>;
    /**
     *
     * @type {string}
     * @memberof StudyMetadata
     */
    'journal'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyMetadata
     */
    'journal_id'?: string;
    /**
     *
     * @type {number}
     * @memberof StudyMetadata
     */
    'cited_by'?: number;
    /**
     *
     * @type {string}
     * @memberof StudyMetadata
     */
    'publish_date'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyMetadata
     */
    'link'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyMetadata
     */
    'summary'?: string;
    /**
     *
     * @type {boolean}
     * @memberof StudyMetadata
     */
    'retracted'?: boolean;
}
/**
 * Interface for input to /study-metadata.
 * @export
 * @interface StudyMetadataIn
 */
export interface StudyMetadataIn {
    /**
     *
     * @type {Array<string>}
     * @memberof StudyMetadataIn
     */
    'pmids': Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof StudyMetadataIn
     */
    'filters'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StudyMetadataIn
     */
    'sort'?: string;
    /**
     *
     * @type {number}
     * @memberof StudyMetadataIn
     */
    'limit'?: number;
    /**
     *
     * @type {number}
     * @memberof StudyMetadataIn
     */
    'offset'?: number;
}
/**
 * Interface for /study-metadata response type.
 * @export
 * @interface StudyMetadataOut
 */
export interface StudyMetadataOut {
    /**
     *
     * @type {Array<StudyMetadata>}
     * @memberof StudyMetadataOut
     */
    'study_metadata': Array<StudyMetadata>;
}
/**
 * Interface for Study Metadata retrieved from SystemRDB.
 * @export
 * @interface StudyMetadataRDB
 */
export interface StudyMetadataRDB {
    /**
     *
     * @type {string}
     * @memberof StudyMetadataRDB
     */
    'pmid'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyMetadataRDB
     */
    'doi'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyMetadataRDB
     */
    'name'?: string;
    /**
     *
     * @type {Array<StudyAuthor>}
     * @memberof StudyMetadataRDB
     */
    'authors'?: Array<StudyAuthor>;
    /**
     *
     * @type {string}
     * @memberof StudyMetadataRDB
     */
    'journal'?: string;
    /**
     *
     * @type {number}
     * @memberof StudyMetadataRDB
     */
    'cited_by'?: number;
    /**
     *
     * @type {string}
     * @memberof StudyMetadataRDB
     */
    'publish_date'?: string;
    /**
     *
     * @type {boolean}
     * @memberof StudyMetadataRDB
     */
    'retracted'?: boolean;
    /**
     *
     * @type {string}
     * @memberof StudyMetadataRDB
     */
    'study_type'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyMetadataRDB
     */
    'abstract'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyMetadataRDB
     */
    'study_summary'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyMetadataRDB
     */
    'study_population'?: string;
}
/**
 * Interface for /study-metadata RDB response type.
 * @export
 * @interface StudyMetadataRDBOut
 */
export interface StudyMetadataRDBOut {
    /**
     *
     * @type {Array<StudyMetadataRDB>}
     * @memberof StudyMetadataRDBOut
     */
    'study_metadata': Array<StudyMetadataRDB>;
    /**
     *
     * @type {number}
     * @memberof StudyMetadataRDBOut
     */
    'count': number;
}
/**
 * Study output.
 * @export
 * @interface StudyRDBOut
 */
export interface StudyRDBOut {
    /**
     *
     * @type {string}
     * @memberof StudyRDBOut
     */
    'system_id': string;
    /**
     *
     * @type {string}
     * @memberof StudyRDBOut
     */
    'doi'?: string;
    /**
     *
     * @type {number}
     * @memberof StudyRDBOut
     */
    'pmid'?: number;
    /**
     *
     * @type {string}
     * @memberof StudyRDBOut
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyRDBOut
     */
    'description'?: string;
    /**
     *
     * @type {Array<AuthorRDBOut>}
     * @memberof StudyRDBOut
     */
    'authors'?: Array<AuthorRDBOut>;
    /**
     *
     * @type {string}
     * @memberof StudyRDBOut
     */
    'study_type'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyRDBOut
     */
    'abstract'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyRDBOut
     */
    'study_summary'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyRDBOut
     */
    'study_population'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyRDBOut
     */
    'journal'?: string;
    /**
     *
     * @type {number}
     * @memberof StudyRDBOut
     */
    'cited_by'?: number;
    /**
     *
     * @type {string}
     * @memberof StudyRDBOut
     */
    'publish_date'?: string;
}
/**
 *
 * @export
 * @interface StudyStats
 */
export interface StudyStats {
    /**
     *
     * @type {Array<AuthorCount>}
     * @memberof StudyStats
     */
    'top_authors': Array<AuthorCount>;
    /**
     *
     * @type {{ [key: string]: number; }}
     * @memberof StudyStats
     */
    'yearly_pub_rate': {
        [key: string]: number;
    };
}
/**
 * Subscription seats.
 * @export
 * @interface SubscriptionSeats
 */
export interface SubscriptionSeats {
    /**
     *
     * @type {Array<string>}
     * @memberof SubscriptionSeats
     */
    'used_seats': Array<string>;
    /**
     *
     * @type {number}
     * @memberof SubscriptionSeats
     */
    'available_seats': number;
    /**
     *
     * @type {number}
     * @memberof SubscriptionSeats
     */
    'total_seats': number;
}
/**
 * Schema for a System Pubmed Search.  # noqa: E501
 * @export
 * @interface SuggestedQueriesIn
 */
export interface SuggestedQueriesIn {
    /**
     * User query
     * @type {string}
     * @memberof SuggestedQueriesIn
     */
    'query': string;
    /**
     * Number of pubmed results.
     * @type {number}
     * @memberof SuggestedQueriesIn
     */
    'num_pubmed_results': number;
    /**
     *
     * @type {SuggestedQueryType}
     * @memberof SuggestedQueriesIn
     */
    'suggestion_type'?: SuggestedQueryType;
}
/**
 * Schema for query suggestions.  # noqa: E501
 * @export
 * @interface SuggestedQueriesOut
 */
export interface SuggestedQueriesOut {
    /**
     *
     * @type {Array<SuggestedQuery>}
     * @memberof SuggestedQueriesOut
     */
    'queries': Array<SuggestedQuery>;
}
/**
 * Suggested query.  # noqa: E501
 * @export
 * @interface SuggestedQuery
 */
export interface SuggestedQuery {
    /**
     * User query
     * @type {string}
     * @memberof SuggestedQuery
     */
    'query': string;
    /**
     * Number of pubmed results.
     * @type {number}
     * @memberof SuggestedQuery
     */
    'num_pubmed_results': number;
    /**
     *
     * @type {SuggestedQueryType}
     * @memberof SuggestedQuery
     */
    'suggestion_type': SuggestedQueryType;
}
/**
 * Enum for query suggestion types.
 * @export
 * @enum {string}
 */
export declare const SuggestedQueryType: {
    readonly Expanded: "expanded";
    readonly Autocorrect: "autocorrect";
};
export type SuggestedQueryType = typeof SuggestedQueryType[keyof typeof SuggestedQueryType];
/**
 * Synthesis output schema.  # noqa: E501
 * @export
 * @interface Synthesis
 */
export interface Synthesis {
    /**
     *
     * @type {string}
     * @memberof Synthesis
     */
    'text': string;
    /**
     *
     * @type {string}
     * @memberof Synthesis
     */
    'cache_key': string;
}
/**
 * Information related to a thumbs down feedback.
 * @export
 * @interface SynthesisFeedback
 */
export interface SynthesisFeedback {
    /**
     *
     * @type {Array<string>}
     * @memberof SynthesisFeedback
     */
    'choice'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof SynthesisFeedback
     */
    'text': string;
}
/**
 * Input of feedback on synthesis from client.
 * @export
 * @interface SynthesisFeedbackIn
 */
export interface SynthesisFeedbackIn {
    /**
     *
     * @type {string}
     * @memberof SynthesisFeedbackIn
     */
    'question': string;
    /**
     *
     * @type {Array<string>}
     * @memberof SynthesisFeedbackIn
     */
    'prompt_summaries': Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof SynthesisFeedbackIn
     */
    'is_positive': boolean;
    /**
     *
     * @type {SynthesisFeedback}
     * @memberof SynthesisFeedbackIn
     */
    'feedback_value'?: SynthesisFeedback;
    /**
     *
     * @type {string}
     * @memberof SynthesisFeedbackIn
     */
    'cache_key'?: string;
}
/**
 * Synthesis fetching output schema.  # noqa: E501
 * @export
 * @interface SynthesisOut
 */
export interface SynthesisOut {
    /**
     *
     * @type {PollingStatus}
     * @memberof SynthesisOut
     */
    'status': PollingStatus;
    /**
     *
     * @type {Synthesis}
     * @memberof SynthesisOut
     */
    'synthesis': Synthesis;
}
/**
 * Synthesis response model.
 * @export
 * @interface SynthesisResponse
 */
export interface SynthesisResponse {
    /**
     *
     * @type {ClusterOut}
     * @memberof SynthesisResponse
     */
    'main': ClusterOut;
    /**
     *
     * @type {ClusterOut}
     * @memberof SynthesisResponse
     */
    'recent'?: ClusterOut;
    /**
     *
     * @type {ClusterOut}
     * @memberof SynthesisResponse
     */
    'highly_cited'?: ClusterOut;
}
/**
 * Topic node.  # noqa: E501
 * @export
 * @interface SystemGraphApiClientModelsTopicNodeTopicNode
 */
export interface SystemGraphApiClientModelsTopicNodeTopicNode {
    /**
     *
     * @type {string}
     * @memberof SystemGraphApiClientModelsTopicNodeTopicNode
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof SystemGraphApiClientModelsTopicNodeTopicNode
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof SystemGraphApiClientModelsTopicNodeTopicNode
     */
    'wikidata_id'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof SystemGraphApiClientModelsTopicNodeTopicNode
     */
    'semantic_types'?: Array<string>;
}
/**
 * System search underlying data.
 * @export
 * @interface SystemSearchData
 */
export interface SystemSearchData {
    /**
     *
     * @type {Array<ClusteredRelationship>}
     * @memberof SystemSearchData
     */
    'relationships': Array<ClusteredRelationship>;
}
/**
 * Payload for system search data endpoints.
 * @export
 * @interface SystemSearchDataIn
 */
export interface SystemSearchDataIn {
    /**
     *
     * @type {Array<string>}
     * @memberof SystemSearchDataIn
     */
    'pmids': Array<string>;
    /**
     *
     * @type {string}
     * @memberof SystemSearchDataIn
     */
    'population'?: string;
    /**
     *
     * @type {string}
     * @memberof SystemSearchDataIn
     */
    'variable_1_search'?: string;
    /**
     *
     * @type {string}
     * @memberof SystemSearchDataIn
     */
    'variable_2_search'?: string;
    /**
     *
     * @type {number}
     * @memberof SystemSearchDataIn
     */
    'limit': number;
    /**
     *
     * @type {number}
     * @memberof SystemSearchDataIn
     */
    'offset': number;
}
/**
 * System Search Fields.
 * @export
 * @interface SystemSearchIn
 */
export interface SystemSearchIn {
    /**
     * Search Field type
     * @type {SemanticSearchType}
     * @memberof SystemSearchIn
     */
    'question_type'?: SemanticSearchType;
    /**
     * Question to search for.
     * @type {string}
     * @memberof SystemSearchIn
     */
    'question'?: string;
    /**
     * First term part of the question.
     * @type {GroundedEntity}
     * @memberof SystemSearchIn
     */
    'term1': GroundedEntity;
    /**
     * Optional second term part of the question.
     * @type {GroundedEntity}
     * @memberof SystemSearchIn
     */
    'term2'?: GroundedEntity;
    /**
     * Optional Field to filter studies which have populations matching Field.
     * @type {string}
     * @memberof SystemSearchIn
     */
    'population'?: string;
    /**
     * To use cache or not. Default True.
     * @type {boolean}
     * @memberof SystemSearchIn
     */
    'use_cache'?: boolean;
    /**
     * Clustering thresholds as json stringified list of pairs of floats.
     * @type {Array<Array<number>>}
     * @memberof SystemSearchIn
     */
    'clustering_thresholds'?: Array<Array<number>>;
    /**
     * Clustering method to use.
     * @type {ClusteringMethods}
     * @memberof SystemSearchIn
     */
    'clustering_method'?: ClusteringMethods;
    /**
     * Temperature of summary
     * @type {number}
     * @memberof SystemSearchIn
     */
    'temperature'?: number;
    /**
     * Use GPT4 model.
     * @type {boolean}
     * @memberof SystemSearchIn
     */
    'use_gpt4'?: boolean;
    /**
     * Filter studies that were added after this date (in yyyy/mm/dd format).
     * @type {string}
     * @memberof SystemSearchIn
     */
    'added_after'?: string;
    /**
     * Kickoff a recent synthesis.
     * @type {boolean}
     * @memberof SystemSearchIn
     */
    'kickoff_recent_synthesis'?: boolean;
    /**
     * Kickoff a highly cited synthesis.
     * @type {boolean}
     * @memberof SystemSearchIn
     */
    'kickoff_highly_cited_synthesis'?: boolean;
}
/**
 * System search underlying data.
 * @export
 * @interface SystemSearchMechanisticDataOut
 */
export interface SystemSearchMechanisticDataOut {
    /**
     *
     * @type {Array<MechanisticRelationship>}
     * @memberof SystemSearchMechanisticDataOut
     */
    'relationships': Array<MechanisticRelationship>;
    /**
     *
     * @type {number}
     * @memberof SystemSearchMechanisticDataOut
     */
    'limit': number;
    /**
     *
     * @type {number}
     * @memberof SystemSearchMechanisticDataOut
     */
    'offset': number;
    /**
     *
     * @type {number}
     * @memberof SystemSearchMechanisticDataOut
     */
    'total': number;
}
/**
 * System search underlying data.
 * @export
 * @interface SystemSearchStatisticalDataOut
 */
export interface SystemSearchStatisticalDataOut {
    /**
     *
     * @type {Array<StatisticRelationship>}
     * @memberof SystemSearchStatisticalDataOut
     */
    'relationships': Array<StatisticRelationship>;
    /**
     *
     * @type {number}
     * @memberof SystemSearchStatisticalDataOut
     */
    'limit': number;
    /**
     *
     * @type {number}
     * @memberof SystemSearchStatisticalDataOut
     */
    'offset': number;
    /**
     *
     * @type {number}
     * @memberof SystemSearchStatisticalDataOut
     */
    'total': number;
}
/**
 * Time series data point.  # noqa: E501
 * @export
 * @interface TimeSeriesDataPoint
 */
export interface TimeSeriesDataPoint {
    /**
     *
     * @type {string}
     * @memberof TimeSeriesDataPoint
     */
    'date': string;
    /**
     *
     * @type {Value}
     * @memberof TimeSeriesDataPoint
     */
    'value': Value;
}
/**
 * Concept relationships model.  # noqa: E501
 * @export
 * @interface TopicCategories
 */
export interface TopicCategories {
    /**
     *
     * @type {ExtendedNodeObject}
     * @memberof TopicCategories
     */
    'topic': ExtendedNodeObject;
    /**
     *
     * @type {NodeGroupItem}
     * @memberof TopicCategories
     */
    'relationship'?: NodeGroupItem;
    /**
     *
     * @type {NodeGroup}
     * @memberof TopicCategories
     */
    'upstream'?: NodeGroup;
    /**
     *
     * @type {NodeGroup}
     * @memberof TopicCategories
     */
    'downstream'?: NodeGroup;
    /**
     *
     * @type {NodeGroup}
     * @memberof TopicCategories
     */
    'confounders'?: NodeGroup;
    /**
     *
     * @type {NodeGroup}
     * @memberof TopicCategories
     */
    'mediators'?: NodeGroup;
}
/**
 * Topic relationship.  # noqa: E501
 * @export
 * @interface TopicEdge
 */
export interface TopicEdge {
    /**
     *
     * @type {string}
     * @memberof TopicEdge
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof TopicEdge
     */
    'source': string;
    /**
     *
     * @type {string}
     * @memberof TopicEdge
     */
    'target': string;
    /**
     *
     * @type {number}
     * @memberof TopicEdge
     */
    'num_findings'?: number;
    /**
     *
     * @type {MedianEffectSize}
     * @memberof TopicEdge
     */
    'median_effect_size'?: MedianEffectSize;
    /**
     *
     * @type {object}
     * @memberof TopicEdge
     */
    'meta'?: object;
}
/**
 * Topic filter params.  # noqa: E501
 * @export
 * @interface TopicFilterParams
 */
export interface TopicFilterParams {
    /**
     *
     * @type {Role}
     * @memberof TopicFilterParams
     */
    'role'?: Role;
    /**
     *
     * @type {Array<string>}
     * @memberof TopicFilterParams
     */
    'include_category'?: Array<string>;
}
/**
 * Topic output.  # noqa: E501
 * @export
 * @interface TopicOut
 */
export interface TopicOut {
    /**
     *
     * @type {string}
     * @memberof TopicOut
     */
    'system_id': string;
    /**
     *
     * @type {string}
     * @memberof TopicOut
     */
    'wikidata_label': string;
    /**
     *
     * @type {Array<string>}
     * @memberof TopicOut
     */
    'semantic_type_tree_numbers'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof TopicOut
     */
    'wikidata_id': string;
}
/**
 * Topic output.
 * @export
 * @interface TopicRDBOut
 */
export interface TopicRDBOut {
    /**
     *
     * @type {string}
     * @memberof TopicRDBOut
     */
    'system_id': string;
    /**
     *
     * @type {string}
     * @memberof TopicRDBOut
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof TopicRDBOut
     */
    'wikidata_id': string;
    /**
     *
     * @type {string}
     * @memberof TopicRDBOut
     */
    'category'?: string;
}
/**
 * Interface for variables associated with a topic.
 * @export
 * @interface TopicVariablesOut
 */
export interface TopicVariablesOut {
    /**
     *
     * @type {TopicRDBOut}
     * @memberof TopicVariablesOut
     */
    'topic': TopicRDBOut;
    /**
     *
     * @type {Array<VariableInfo>}
     * @memberof TopicVariablesOut
     */
    'variables': Array<VariableInfo>;
    /**
     *
     * @type {number}
     * @memberof TopicVariablesOut
     */
    'total': number;
}
/**
 * User profile data input.
 * @export
 * @interface UpdateProfileIn
 */
export interface UpdateProfileIn {
    /**
     * User name that is visible to others on System.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'display_name'?: string;
    /**
     * The user\'s unique [ORCID](https://orcid.org/).
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'orcid'?: string;
    /**
     * User\'s avatar.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'avatar'?: string;
    /**
     * User\'s first name.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'first_name'?: string;
    /**
     * User\'s last name.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'last_name'?: string;
    /**
     * User\'s organizations.
     * @type {Array<string>}
     * @memberof UpdateProfileIn
     */
    'organizations'?: Array<string>;
    /**
     * User\'s field of work.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'field_of_work'?: string;
    /**
     * User email address.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'email'?: string;
    /**
     * User roles.
     * @type {Array<string>}
     * @memberof UpdateProfileIn
     */
    'roles'?: Array<string>;
}
/**
 * User metric usage result.
 * @export
 * @interface UserMetricUsageOut
 */
export interface UserMetricUsageOut {
    /**
     * Usage Metric
     * @type {Metrics}
     * @memberof UserMetricUsageOut
     */
    'metric': Metrics;
    /**
     * Metric usage count
     * @type {number}
     * @memberof UserMetricUsageOut
     */
    'count': number;
    /**
     * Metric usage from date
     * @type {string}
     * @memberof UserMetricUsageOut
     */
    'date_from': string;
}
/**
 * Private user profile out.
 * @export
 * @interface UserPrivateProfileOut
 */
export interface UserPrivateProfileOut {
    /**
     * The user\'s System ID.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'id': string;
    /**
     * Time when the user\'s profile was created.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'created_at': string;
    /**
     * The Author ID corresponding to this user.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'author_id'?: string;
    /**
     * User name that is visible to others on System.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'display_name': string;
    /**
     * The user\'s unique [ORCID](https://orcid.org/).
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'orcid'?: string;
    /**
     * User\'s avatar.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'avatar'?: string;
    /**
     * User\'s first name.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'first_name'?: string;
    /**
     * User\'s last name.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'last_name'?: string;
    /**
     * User\'s organizations.
     * @type {Array<string>}
     * @memberof UserPrivateProfileOut
     */
    'organizations'?: Array<string>;
    /**
     * User\'s field of work.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'field_of_work'?: string;
    /**
     * User email address.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'email': string;
    /**
     * User roles.
     * @type {Array<string>}
     * @memberof UserPrivateProfileOut
     */
    'roles'?: Array<string>;
    /**
     * Stripe object
     * @type {StripeOut}
     * @memberof UserPrivateProfileOut
     */
    'stripe'?: StripeOut;
}
/**
 * User profile data input.
 * @export
 * @interface UserProfileIn
 */
export interface UserProfileIn {
    /**
     * User name that is visible to others on System.
     * @type {string}
     * @memberof UserProfileIn
     */
    'display_name': string;
    /**
     * The user\'s unique [ORCID](https://orcid.org/).
     * @type {string}
     * @memberof UserProfileIn
     */
    'orcid'?: string;
    /**
     * User\'s avatar.
     * @type {string}
     * @memberof UserProfileIn
     */
    'avatar'?: string;
    /**
     * User\'s first name.
     * @type {string}
     * @memberof UserProfileIn
     */
    'first_name'?: string;
    /**
     * User\'s last name.
     * @type {string}
     * @memberof UserProfileIn
     */
    'last_name'?: string;
    /**
     * User\'s organizations.
     * @type {Array<string>}
     * @memberof UserProfileIn
     */
    'organizations'?: Array<string>;
    /**
     * User\'s field of work.
     * @type {string}
     * @memberof UserProfileIn
     */
    'field_of_work'?: string;
    /**
     * User email address.
     * @type {string}
     * @memberof UserProfileIn
     */
    'email': string;
    /**
     * User roles.
     * @type {Array<string>}
     * @memberof UserProfileIn
     */
    'roles'?: Array<string>;
}
/**
 * Public user profile out.
 * @export
 * @interface UserPublicProfileOut
 */
export interface UserPublicProfileOut {
    /**
     * The user\'s System ID.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'id': string;
    /**
     * Time when the user\'s profile was created.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'created_at': string;
    /**
     * The Author ID corresponding to this user.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'author_id'?: string;
    /**
     * User name that is visible to others on System.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'display_name': string;
    /**
     * The user\'s unique [ORCID](https://orcid.org/).
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'orcid'?: string;
    /**
     * User\'s avatar.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'avatar'?: string;
    /**
     * User\'s first name.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'first_name'?: string;
    /**
     * User\'s last name.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'last_name'?: string;
    /**
     * User\'s organizations.
     * @type {Array<string>}
     * @memberof UserPublicProfileOut
     */
    'organizations'?: Array<string>;
    /**
     * User\'s field of work.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'field_of_work'?: string;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     *
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 *
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}
/**
 *
 * @export
 * @interface Value
 */
export interface Value {
}
/**
 * Variable grounding model.
 * @export
 * @interface VariableGrounding
 */
export interface VariableGrounding {
    /**
     *
     * @type {string}
     * @memberof VariableGrounding
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof VariableGrounding
     */
    'namespace': string;
    /**
     *
     * @type {string}
     * @memberof VariableGrounding
     */
    'name': string;
}
/**
 * Interface for a variable\'s info.
 * @export
 * @interface VariableInfo
 */
export interface VariableInfo {
    /**
     *
     * @type {string}
     * @memberof VariableInfo
     */
    'variable_id': string;
    /**
     *
     * @type {string}
     * @memberof VariableInfo
     */
    'variable_name': string;
    /**
     *
     * @type {number}
     * @memberof VariableInfo
     */
    'num_studies': number;
}
/**
 * AccessApi - axios parameter creator
 * @export
 */
export declare const AccessApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Register user\'s interest in access to Data Beta.
     * @summary Request Data Access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestDataAccessV1AccessDataPost: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Register user\'s interest in access to Maps Beta.
     * @summary Request Maps Access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestMapsAccessV1AccessMapsPost: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccessApi - functional programming interface
 * @export
 */
export declare const AccessApiFp: (configuration?: Configuration) => {
    /**
     * Register user\'s interest in access to Data Beta.
     * @summary Request Data Access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestDataAccessV1AccessDataPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Register user\'s interest in access to Maps Beta.
     * @summary Request Maps Access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestMapsAccessV1AccessMapsPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * AccessApi - factory interface
 * @export
 */
export declare const AccessApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Register user\'s interest in access to Data Beta.
     * @summary Request Data Access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestDataAccessV1AccessDataPost(options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     * Register user\'s interest in access to Maps Beta.
     * @summary Request Maps Access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestMapsAccessV1AccessMapsPost(options?: RawAxiosRequestConfig): AxiosPromise<any>;
};
/**
 * AccessApi - object-oriented interface
 * @export
 * @class AccessApi
 * @extends {BaseAPI}
 */
export declare class AccessApi extends BaseAPI {
    /**
     * Register user\'s interest in access to Data Beta.
     * @summary Request Data Access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessApi
     */
    requestDataAccessV1AccessDataPost(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Register user\'s interest in access to Maps Beta.
     * @summary Request Maps Access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessApi
     */
    requestMapsAccessV1AccessMapsPost(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * FeedbackApi - axios parameter creator
 * @export
 */
export declare const FeedbackApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Save feedback on a finding.
     * @summary Post Finding Feedback
     * @param {string} findingId
     * @param {FindingFeedbackIn} findingFeedbackIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFindingFeedbackV1FeedbackFindingIdPost: (findingId: string, findingFeedbackIn: FindingFeedbackIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Post user feedback on AI-generated relationship synthesis to s3.
     * @summary Post Synthesis Feedback
     * @param {SynthesisFeedbackIn} synthesisFeedbackIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postSynthesisFeedbackV1FeedbackPost: (synthesisFeedbackIn: SynthesisFeedbackIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FeedbackApi - functional programming interface
 * @export
 */
export declare const FeedbackApiFp: (configuration?: Configuration) => {
    /**
     * Save feedback on a finding.
     * @summary Post Finding Feedback
     * @param {string} findingId
     * @param {FindingFeedbackIn} findingFeedbackIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFindingFeedbackV1FeedbackFindingIdPost(findingId: string, findingFeedbackIn: FindingFeedbackIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Post user feedback on AI-generated relationship synthesis to s3.
     * @summary Post Synthesis Feedback
     * @param {SynthesisFeedbackIn} synthesisFeedbackIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postSynthesisFeedbackV1FeedbackPost(synthesisFeedbackIn: SynthesisFeedbackIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * FeedbackApi - factory interface
 * @export
 */
export declare const FeedbackApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Save feedback on a finding.
     * @summary Post Finding Feedback
     * @param {FeedbackApiPostFindingFeedbackV1FeedbackFindingIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFindingFeedbackV1FeedbackFindingIdPost(requestParameters: FeedbackApiPostFindingFeedbackV1FeedbackFindingIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     * Post user feedback on AI-generated relationship synthesis to s3.
     * @summary Post Synthesis Feedback
     * @param {FeedbackApiPostSynthesisFeedbackV1FeedbackPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postSynthesisFeedbackV1FeedbackPost(requestParameters: FeedbackApiPostSynthesisFeedbackV1FeedbackPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
};
/**
 * Request parameters for postFindingFeedbackV1FeedbackFindingIdPost operation in FeedbackApi.
 * @export
 * @interface FeedbackApiPostFindingFeedbackV1FeedbackFindingIdPostRequest
 */
export interface FeedbackApiPostFindingFeedbackV1FeedbackFindingIdPostRequest {
    /**
     *
     * @type {string}
     * @memberof FeedbackApiPostFindingFeedbackV1FeedbackFindingIdPost
     */
    readonly findingId: string;
    /**
     *
     * @type {FindingFeedbackIn}
     * @memberof FeedbackApiPostFindingFeedbackV1FeedbackFindingIdPost
     */
    readonly findingFeedbackIn: FindingFeedbackIn;
}
/**
 * Request parameters for postSynthesisFeedbackV1FeedbackPost operation in FeedbackApi.
 * @export
 * @interface FeedbackApiPostSynthesisFeedbackV1FeedbackPostRequest
 */
export interface FeedbackApiPostSynthesisFeedbackV1FeedbackPostRequest {
    /**
     *
     * @type {SynthesisFeedbackIn}
     * @memberof FeedbackApiPostSynthesisFeedbackV1FeedbackPost
     */
    readonly synthesisFeedbackIn: SynthesisFeedbackIn;
}
/**
 * FeedbackApi - object-oriented interface
 * @export
 * @class FeedbackApi
 * @extends {BaseAPI}
 */
export declare class FeedbackApi extends BaseAPI {
    /**
     * Save feedback on a finding.
     * @summary Post Finding Feedback
     * @param {FeedbackApiPostFindingFeedbackV1FeedbackFindingIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    postFindingFeedbackV1FeedbackFindingIdPost(requestParameters: FeedbackApiPostFindingFeedbackV1FeedbackFindingIdPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Post user feedback on AI-generated relationship synthesis to s3.
     * @summary Post Synthesis Feedback
     * @param {FeedbackApiPostSynthesisFeedbackV1FeedbackPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    postSynthesisFeedbackV1FeedbackPost(requestParameters: FeedbackApiPostSynthesisFeedbackV1FeedbackPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * FindingsApi - axios parameter creator
 * @export
 */
export declare const FindingsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get study findings via association ids or dois.
     * @summary Get Study Findings From Association Ids Or Dois
     * @param {StudyFindingsIn} studyFindingsIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost: (studyFindingsIn: StudyFindingsIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FindingsApi - functional programming interface
 * @export
 */
export declare const FindingsApiFp: (configuration?: Configuration) => {
    /**
     * Get study findings via association ids or dois.
     * @summary Get Study Findings From Association Ids Or Dois
     * @param {StudyFindingsIn} studyFindingsIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost(studyFindingsIn: StudyFindingsIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyFindingsOut>>;
};
/**
 * FindingsApi - factory interface
 * @export
 */
export declare const FindingsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get study findings via association ids or dois.
     * @summary Get Study Findings From Association Ids Or Dois
     * @param {FindingsApiGetStudyFindingsFromAssociationIdsOrDOIsV1FindingsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost(requestParameters: FindingsApiGetStudyFindingsFromAssociationIdsOrDOIsV1FindingsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<StudyFindingsOut>;
};
/**
 * Request parameters for getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost operation in FindingsApi.
 * @export
 * @interface FindingsApiGetStudyFindingsFromAssociationIdsOrDOIsV1FindingsPostRequest
 */
export interface FindingsApiGetStudyFindingsFromAssociationIdsOrDOIsV1FindingsPostRequest {
    /**
     *
     * @type {StudyFindingsIn}
     * @memberof FindingsApiGetStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost
     */
    readonly studyFindingsIn: StudyFindingsIn;
}
/**
 * FindingsApi - object-oriented interface
 * @export
 * @class FindingsApi
 * @extends {BaseAPI}
 */
export declare class FindingsApi extends BaseAPI {
    /**
     * Get study findings via association ids or dois.
     * @summary Get Study Findings From Association Ids Or Dois
     * @param {FindingsApiGetStudyFindingsFromAssociationIdsOrDOIsV1FindingsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FindingsApi
     */
    getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost(requestParameters: FindingsApiGetStudyFindingsFromAssociationIdsOrDOIsV1FindingsPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StudyFindingsOut, any>>;
}
/**
 * FormsApi - axios parameter creator
 * @export
 */
export declare const FormsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Request Demo
     * @param {string} appName
     * @param {string} firstName
     * @param {string} lastName
     * @param {string} emailAddress
     * @param {string} company
     * @param {string} [title]
     * @param {string} [howDidYouHear]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestDemoV1FormsRequestDemoPost: (appName: string, firstName: string, lastName: string, emailAddress: string, company: string, title?: string, howDidYouHear?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FormsApi - functional programming interface
 * @export
 */
export declare const FormsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Request Demo
     * @param {string} appName
     * @param {string} firstName
     * @param {string} lastName
     * @param {string} emailAddress
     * @param {string} company
     * @param {string} [title]
     * @param {string} [howDidYouHear]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestDemoV1FormsRequestDemoPost(appName: string, firstName: string, lastName: string, emailAddress: string, company: string, title?: string, howDidYouHear?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * FormsApi - factory interface
 * @export
 */
export declare const FormsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Request Demo
     * @param {FormsApiRequestDemoV1FormsRequestDemoPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestDemoV1FormsRequestDemoPost(requestParameters: FormsApiRequestDemoV1FormsRequestDemoPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
};
/**
 * Request parameters for requestDemoV1FormsRequestDemoPost operation in FormsApi.
 * @export
 * @interface FormsApiRequestDemoV1FormsRequestDemoPostRequest
 */
export interface FormsApiRequestDemoV1FormsRequestDemoPostRequest {
    /**
     *
     * @type {string}
     * @memberof FormsApiRequestDemoV1FormsRequestDemoPost
     */
    readonly appName: string;
    /**
     *
     * @type {string}
     * @memberof FormsApiRequestDemoV1FormsRequestDemoPost
     */
    readonly firstName: string;
    /**
     *
     * @type {string}
     * @memberof FormsApiRequestDemoV1FormsRequestDemoPost
     */
    readonly lastName: string;
    /**
     *
     * @type {string}
     * @memberof FormsApiRequestDemoV1FormsRequestDemoPost
     */
    readonly emailAddress: string;
    /**
     *
     * @type {string}
     * @memberof FormsApiRequestDemoV1FormsRequestDemoPost
     */
    readonly company: string;
    /**
     *
     * @type {string}
     * @memberof FormsApiRequestDemoV1FormsRequestDemoPost
     */
    readonly title?: string;
    /**
     *
     * @type {string}
     * @memberof FormsApiRequestDemoV1FormsRequestDemoPost
     */
    readonly howDidYouHear?: string;
}
/**
 * FormsApi - object-oriented interface
 * @export
 * @class FormsApi
 * @extends {BaseAPI}
 */
export declare class FormsApi extends BaseAPI {
    /**
     *
     * @summary Request Demo
     * @param {FormsApiRequestDemoV1FormsRequestDemoPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    requestDemoV1FormsRequestDemoPost(requestParameters: FormsApiRequestDemoV1FormsRequestDemoPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * KeyManagementApi - axios parameter creator
 * @export
 */
export declare const KeyManagementApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get user\'s API keys.
     * @summary Get Client Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientKeysV1KeysMeGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * KeyManagementApi - functional programming interface
 * @export
 */
export declare const KeyManagementApiFp: (configuration?: Configuration) => {
    /**
     * Get user\'s API keys.
     * @summary Get Client Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientKeysV1KeysMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeys>>;
};
/**
 * KeyManagementApi - factory interface
 * @export
 */
export declare const KeyManagementApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get user\'s API keys.
     * @summary Get Client Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientKeysV1KeysMeGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiKeys>;
};
/**
 * KeyManagementApi - object-oriented interface
 * @export
 * @class KeyManagementApi
 * @extends {BaseAPI}
 */
export declare class KeyManagementApi extends BaseAPI {
    /**
     * Get user\'s API keys.
     * @summary Get Client Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyManagementApi
     */
    getClientKeysV1KeysMeGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ApiKeys, any>>;
}
/**
 * MetricsApi - axios parameter creator
 * @export
 */
export declare const MetricsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get metrics on the graph.
     * @summary Get Graph Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGraphMetricsV1MetricsGraphGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MetricsApi - functional programming interface
 * @export
 */
export declare const MetricsApiFp: (configuration?: Configuration) => {
    /**
     * Get metrics on the graph.
     * @summary Get Graph Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGraphMetricsV1MetricsGraphGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphMetrics>>;
};
/**
 * MetricsApi - factory interface
 * @export
 */
export declare const MetricsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get metrics on the graph.
     * @summary Get Graph Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGraphMetricsV1MetricsGraphGet(options?: RawAxiosRequestConfig): AxiosPromise<GraphMetrics>;
};
/**
 * MetricsApi - object-oriented interface
 * @export
 * @class MetricsApi
 * @extends {BaseAPI}
 */
export declare class MetricsApi extends BaseAPI {
    /**
     * Get metrics on the graph.
     * @summary Get Graph Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    getGraphMetricsV1MetricsGraphGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GraphMetrics, any>>;
}
/**
 * PassthroughApi - axios parameter creator
 * @export
 */
export declare const PassthroughApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Forward request to crossref.
     * @summary Get Crossref
     * @param {any} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCrossrefV1CrossrefRestOfPathGet: (restOfPath: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Post GetFTR entitlements endpoint.
     * @summary Get Ftr Entitlements
     * @param {GetFTREntitlementsIn} getFTREntitlementsIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFtrEntitlementsV1GetftrEntitlementsPost: (getFTREntitlementsIn: GetFTREntitlementsIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Forward request to ORCID.
     * @summary Get Orcid
     * @param {any} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrcidV1OrcidRestOfPathGet: (restOfPath: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Forward request to SearchGraph.
     * @summary Get Semantic Graph
     * @param {string} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticGraphV1SemanticGraphRestOfPathGet: (restOfPath: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Forward request to UMLS.
     * @summary Get Umls Concepts
     * @param {any} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUmlsConceptsV1UmlsRestOfPathGet: (restOfPath: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Forward request to SearchGraph.
     * @summary Get Variable Concepts
     * @param {string} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVariableConceptsV1VariableConceptsRestOfPathGet: (restOfPath: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PassthroughApi - functional programming interface
 * @export
 */
export declare const PassthroughApiFp: (configuration?: Configuration) => {
    /**
     * Forward request to crossref.
     * @summary Get Crossref
     * @param {any} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCrossrefV1CrossrefRestOfPathGet(restOfPath: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Post GetFTR entitlements endpoint.
     * @summary Get Ftr Entitlements
     * @param {GetFTREntitlementsIn} getFTREntitlementsIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFtrEntitlementsV1GetftrEntitlementsPost(getFTREntitlementsIn: GetFTREntitlementsIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFTREntitlementsOut>>;
    /**
     * Forward request to ORCID.
     * @summary Get Orcid
     * @param {any} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrcidV1OrcidRestOfPathGet(restOfPath: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Forward request to SearchGraph.
     * @summary Get Semantic Graph
     * @param {string} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticGraphV1SemanticGraphRestOfPathGet(restOfPath: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Forward request to UMLS.
     * @summary Get Umls Concepts
     * @param {any} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUmlsConceptsV1UmlsRestOfPathGet(restOfPath: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Forward request to SearchGraph.
     * @summary Get Variable Concepts
     * @param {string} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVariableConceptsV1VariableConceptsRestOfPathGet(restOfPath: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * PassthroughApi - factory interface
 * @export
 */
export declare const PassthroughApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Forward request to crossref.
     * @summary Get Crossref
     * @param {PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCrossrefV1CrossrefRestOfPathGet(requestParameters: PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     * Post GetFTR entitlements endpoint.
     * @summary Get Ftr Entitlements
     * @param {PassthroughApiGetFtrEntitlementsV1GetftrEntitlementsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFtrEntitlementsV1GetftrEntitlementsPost(requestParameters: PassthroughApiGetFtrEntitlementsV1GetftrEntitlementsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetFTREntitlementsOut>;
    /**
     * Forward request to ORCID.
     * @summary Get Orcid
     * @param {PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrcidV1OrcidRestOfPathGet(requestParameters: PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     * Forward request to SearchGraph.
     * @summary Get Semantic Graph
     * @param {PassthroughApiGetSemanticGraphV1SemanticGraphRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticGraphV1SemanticGraphRestOfPathGet(requestParameters: PassthroughApiGetSemanticGraphV1SemanticGraphRestOfPathGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     * Forward request to UMLS.
     * @summary Get Umls Concepts
     * @param {PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUmlsConceptsV1UmlsRestOfPathGet(requestParameters: PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     * Forward request to SearchGraph.
     * @summary Get Variable Concepts
     * @param {PassthroughApiGetVariableConceptsV1VariableConceptsRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVariableConceptsV1VariableConceptsRestOfPathGet(requestParameters: PassthroughApiGetVariableConceptsV1VariableConceptsRestOfPathGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
};
/**
 * Request parameters for getCrossrefV1CrossrefRestOfPathGet operation in PassthroughApi.
 * @export
 * @interface PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest
 */
export interface PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest {
    /**
     *
     * @type {any}
     * @memberof PassthroughApiGetCrossrefV1CrossrefRestOfPathGet
     */
    readonly restOfPath: any;
}
/**
 * Request parameters for getFtrEntitlementsV1GetftrEntitlementsPost operation in PassthroughApi.
 * @export
 * @interface PassthroughApiGetFtrEntitlementsV1GetftrEntitlementsPostRequest
 */
export interface PassthroughApiGetFtrEntitlementsV1GetftrEntitlementsPostRequest {
    /**
     *
     * @type {GetFTREntitlementsIn}
     * @memberof PassthroughApiGetFtrEntitlementsV1GetftrEntitlementsPost
     */
    readonly getFTREntitlementsIn: GetFTREntitlementsIn;
}
/**
 * Request parameters for getOrcidV1OrcidRestOfPathGet operation in PassthroughApi.
 * @export
 * @interface PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest
 */
export interface PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest {
    /**
     *
     * @type {any}
     * @memberof PassthroughApiGetOrcidV1OrcidRestOfPathGet
     */
    readonly restOfPath: any;
}
/**
 * Request parameters for getSemanticGraphV1SemanticGraphRestOfPathGet operation in PassthroughApi.
 * @export
 * @interface PassthroughApiGetSemanticGraphV1SemanticGraphRestOfPathGetRequest
 */
export interface PassthroughApiGetSemanticGraphV1SemanticGraphRestOfPathGetRequest {
    /**
     *
     * @type {string}
     * @memberof PassthroughApiGetSemanticGraphV1SemanticGraphRestOfPathGet
     */
    readonly restOfPath: string;
}
/**
 * Request parameters for getUmlsConceptsV1UmlsRestOfPathGet operation in PassthroughApi.
 * @export
 * @interface PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGetRequest
 */
export interface PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGetRequest {
    /**
     *
     * @type {any}
     * @memberof PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGet
     */
    readonly restOfPath: any;
}
/**
 * Request parameters for getVariableConceptsV1VariableConceptsRestOfPathGet operation in PassthroughApi.
 * @export
 * @interface PassthroughApiGetVariableConceptsV1VariableConceptsRestOfPathGetRequest
 */
export interface PassthroughApiGetVariableConceptsV1VariableConceptsRestOfPathGetRequest {
    /**
     *
     * @type {string}
     * @memberof PassthroughApiGetVariableConceptsV1VariableConceptsRestOfPathGet
     */
    readonly restOfPath: string;
}
/**
 * PassthroughApi - object-oriented interface
 * @export
 * @class PassthroughApi
 * @extends {BaseAPI}
 */
export declare class PassthroughApi extends BaseAPI {
    /**
     * Forward request to crossref.
     * @summary Get Crossref
     * @param {PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getCrossrefV1CrossrefRestOfPathGet(requestParameters: PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Post GetFTR entitlements endpoint.
     * @summary Get Ftr Entitlements
     * @param {PassthroughApiGetFtrEntitlementsV1GetftrEntitlementsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getFtrEntitlementsV1GetftrEntitlementsPost(requestParameters: PassthroughApiGetFtrEntitlementsV1GetftrEntitlementsPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFTREntitlementsOut, any>>;
    /**
     * Forward request to ORCID.
     * @summary Get Orcid
     * @param {PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getOrcidV1OrcidRestOfPathGet(requestParameters: PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Forward request to SearchGraph.
     * @summary Get Semantic Graph
     * @param {PassthroughApiGetSemanticGraphV1SemanticGraphRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getSemanticGraphV1SemanticGraphRestOfPathGet(requestParameters: PassthroughApiGetSemanticGraphV1SemanticGraphRestOfPathGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Forward request to UMLS.
     * @summary Get Umls Concepts
     * @param {PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getUmlsConceptsV1UmlsRestOfPathGet(requestParameters: PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Forward request to SearchGraph.
     * @summary Get Variable Concepts
     * @param {PassthroughApiGetVariableConceptsV1VariableConceptsRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getVariableConceptsV1VariableConceptsRestOfPathGet(requestParameters: PassthroughApiGetVariableConceptsV1VariableConceptsRestOfPathGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * QuerySuggestionsApi - axios parameter creator
 * @export
 */
export declare const QuerySuggestionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get query suggestions.
     * @summary Get Query Suggestions.
     * @param {SuggestedQueriesIn} suggestedQueriesIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuerySuggestionsV1QuerySuggestionsPost: (suggestedQueriesIn: SuggestedQueriesIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * QuerySuggestionsApi - functional programming interface
 * @export
 */
export declare const QuerySuggestionsApiFp: (configuration?: Configuration) => {
    /**
     * Get query suggestions.
     * @summary Get Query Suggestions.
     * @param {SuggestedQueriesIn} suggestedQueriesIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuerySuggestionsV1QuerySuggestionsPost(suggestedQueriesIn: SuggestedQueriesIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestedQueriesOut>>;
};
/**
 * QuerySuggestionsApi - factory interface
 * @export
 */
export declare const QuerySuggestionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get query suggestions.
     * @summary Get Query Suggestions.
     * @param {QuerySuggestionsApiGetQuerySuggestionsV1QuerySuggestionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuerySuggestionsV1QuerySuggestionsPost(requestParameters: QuerySuggestionsApiGetQuerySuggestionsV1QuerySuggestionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuggestedQueriesOut>;
};
/**
 * Request parameters for getQuerySuggestionsV1QuerySuggestionsPost operation in QuerySuggestionsApi.
 * @export
 * @interface QuerySuggestionsApiGetQuerySuggestionsV1QuerySuggestionsPostRequest
 */
export interface QuerySuggestionsApiGetQuerySuggestionsV1QuerySuggestionsPostRequest {
    /**
     *
     * @type {SuggestedQueriesIn}
     * @memberof QuerySuggestionsApiGetQuerySuggestionsV1QuerySuggestionsPost
     */
    readonly suggestedQueriesIn: SuggestedQueriesIn;
}
/**
 * QuerySuggestionsApi - object-oriented interface
 * @export
 * @class QuerySuggestionsApi
 * @extends {BaseAPI}
 */
export declare class QuerySuggestionsApi extends BaseAPI {
    /**
     * Get query suggestions.
     * @summary Get Query Suggestions.
     * @param {QuerySuggestionsApiGetQuerySuggestionsV1QuerySuggestionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuerySuggestionsApi
     */
    getQuerySuggestionsV1QuerySuggestionsPost(requestParameters: QuerySuggestionsApiGetQuerySuggestionsV1QuerySuggestionsPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SuggestedQueriesOut, any>>;
}
/**
 * RdbApi - axios parameter creator
 * @export
 */
export declare const RdbApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Read evidences.
     * @summary Read Evidences
     * @param {Array<string>} [ids] Evidence ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readEvidencesV1RdbEvidencesGet: (ids?: Array<string>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Read studies.
     * @summary Read Studies
     * @param {Array<string>} [ids] Study ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readStudiesV1RdbStudiesGet: (ids?: Array<string>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RdbApi - functional programming interface
 * @export
 */
export declare const RdbApiFp: (configuration?: Configuration) => {
    /**
     * Read evidences.
     * @summary Read Evidences
     * @param {Array<string>} [ids] Evidence ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readEvidencesV1RdbEvidencesGet(ids?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EvidenceRDBOut>>>;
    /**
     * Read studies.
     * @summary Read Studies
     * @param {Array<string>} [ids] Study ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readStudiesV1RdbStudiesGet(ids?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StudyRDBOut>>>;
};
/**
 * RdbApi - factory interface
 * @export
 */
export declare const RdbApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Read evidences.
     * @summary Read Evidences
     * @param {RdbApiReadEvidencesV1RdbEvidencesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readEvidencesV1RdbEvidencesGet(requestParameters?: RdbApiReadEvidencesV1RdbEvidencesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<EvidenceRDBOut>>;
    /**
     * Read studies.
     * @summary Read Studies
     * @param {RdbApiReadStudiesV1RdbStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readStudiesV1RdbStudiesGet(requestParameters?: RdbApiReadStudiesV1RdbStudiesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<StudyRDBOut>>;
};
/**
 * Request parameters for readEvidencesV1RdbEvidencesGet operation in RdbApi.
 * @export
 * @interface RdbApiReadEvidencesV1RdbEvidencesGetRequest
 */
export interface RdbApiReadEvidencesV1RdbEvidencesGetRequest {
    /**
     * Evidence ids
     * @type {Array<string>}
     * @memberof RdbApiReadEvidencesV1RdbEvidencesGet
     */
    readonly ids?: Array<string>;
}
/**
 * Request parameters for readStudiesV1RdbStudiesGet operation in RdbApi.
 * @export
 * @interface RdbApiReadStudiesV1RdbStudiesGetRequest
 */
export interface RdbApiReadStudiesV1RdbStudiesGetRequest {
    /**
     * Study ids
     * @type {Array<string>}
     * @memberof RdbApiReadStudiesV1RdbStudiesGet
     */
    readonly ids?: Array<string>;
}
/**
 * RdbApi - object-oriented interface
 * @export
 * @class RdbApi
 * @extends {BaseAPI}
 */
export declare class RdbApi extends BaseAPI {
    /**
     * Read evidences.
     * @summary Read Evidences
     * @param {RdbApiReadEvidencesV1RdbEvidencesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RdbApi
     */
    readEvidencesV1RdbEvidencesGet(requestParameters?: RdbApiReadEvidencesV1RdbEvidencesGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EvidenceRDBOut[], any>>;
    /**
     * Read studies.
     * @summary Read Studies
     * @param {RdbApiReadStudiesV1RdbStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RdbApi
     */
    readStudiesV1RdbStudiesGet(requestParameters?: RdbApiReadStudiesV1RdbStudiesGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StudyRDBOut[], any>>;
}
/**
 * SemanticSearchApi - axios parameter creator
 * @export
 */
export declare const SemanticSearchApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Cluster Relationships
     * @param {SystemSearchIn} systemSearchIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost: (systemSearchIn: SystemSearchIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Semantic Search
     * @param {SystemSearchIn} systemSearchIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    asyncSemanticSearchV1SemanticSearchClusterPost: (systemSearchIn: SystemSearchIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Fetch Cluster Response
     * @param {string} runId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet: (runId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get semantic search.  Values from semantic search. Logs freemium usage on success
     * @summary Fetch Synthesis
     * @param {string} cacheKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchSynthesisV1SemanticSearchFetchGet: (cacheKey: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get semantic search relationship map.
     * @summary Get Relationship Map Endpoint
     * @param {SystemSearchIn} systemSearchIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelationshipMapEndpointV1SemanticSearchRelationshipMapPost: (systemSearchIn: SystemSearchIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get semantic search usage.  date defaults to Jan 1st 2023 - before releasing tracking. Ommiting the date query param is equivalent of getting usage regardless of the date  metric defaults to Metrics.semantic_search_create for backward compatibility so that API consumers that don\'t pass a metric query param still get the original behaviour.
     * @summary Get Semantic Search Usage
     * @param {string} [dateFrom]
     * @param {Metrics} [metric]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticSearchUsageV1SemanticSearchUsageGet: (dateFrom?: string, metric?: Metrics, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get semantic search findings.  Values from semantic search.
     * @summary Get System Search Findings Data
     * @param {SystemSearchIn} systemSearchIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemSearchFindingsDataV1SemanticSearchDataPost: (systemSearchIn: SystemSearchIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get statistical findings.
     * @summary Get System Search Mechanistic Data
     * @param {SystemSearchDataIn} systemSearchDataIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPost: (systemSearchDataIn: SystemSearchDataIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get mechanistic findings.
     * @summary Get System Search Statistical Data
     * @param {SystemSearchDataIn} systemSearchDataIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPost: (systemSearchDataIn: SystemSearchDataIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Regenerate Synthesis
     * @param {string} cacheKey
     * @param {boolean} [forceRerun]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regenerateSynthesisV1SemanticSearchRegeneratePost: (cacheKey: string, forceRerun?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SemanticSearchApi - functional programming interface
 * @export
 */
export declare const SemanticSearchApiFp: (configuration?: Configuration) => {
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Cluster Relationships
     * @param {SystemSearchIn} systemSearchIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost(systemSearchIn: SystemSearchIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Semantic Search
     * @param {SystemSearchIn} systemSearchIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    asyncSemanticSearchV1SemanticSearchClusterPost(systemSearchIn: SystemSearchIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SynthesisResponse>>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Fetch Cluster Response
     * @param {string} runId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet(runId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterOutStatus>>;
    /**
     * Get semantic search.  Values from semantic search. Logs freemium usage on success
     * @summary Fetch Synthesis
     * @param {string} cacheKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchSynthesisV1SemanticSearchFetchGet(cacheKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SynthesisOut>>;
    /**
     * Get semantic search relationship map.
     * @summary Get Relationship Map Endpoint
     * @param {SystemSearchIn} systemSearchIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelationshipMapEndpointV1SemanticSearchRelationshipMapPost(systemSearchIn: SystemSearchIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get semantic search usage.  date defaults to Jan 1st 2023 - before releasing tracking. Ommiting the date query param is equivalent of getting usage regardless of the date  metric defaults to Metrics.semantic_search_create for backward compatibility so that API consumers that don\'t pass a metric query param still get the original behaviour.
     * @summary Get Semantic Search Usage
     * @param {string} [dateFrom]
     * @param {Metrics} [metric]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticSearchUsageV1SemanticSearchUsageGet(dateFrom?: string, metric?: Metrics, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserMetricUsageOut>>;
    /**
     * Get semantic search findings.  Values from semantic search.
     * @summary Get System Search Findings Data
     * @param {SystemSearchIn} systemSearchIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemSearchFindingsDataV1SemanticSearchDataPost(systemSearchIn: SystemSearchIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSearchData>>;
    /**
     * Get statistical findings.
     * @summary Get System Search Mechanistic Data
     * @param {SystemSearchDataIn} systemSearchDataIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPost(systemSearchDataIn: SystemSearchDataIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSearchMechanisticDataOut>>;
    /**
     * Get mechanistic findings.
     * @summary Get System Search Statistical Data
     * @param {SystemSearchDataIn} systemSearchDataIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPost(systemSearchDataIn: SystemSearchDataIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSearchStatisticalDataOut>>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Regenerate Synthesis
     * @param {string} cacheKey
     * @param {boolean} [forceRerun]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regenerateSynthesisV1SemanticSearchRegeneratePost(cacheKey: string, forceRerun?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * SemanticSearchApi - factory interface
 * @export
 */
export declare const SemanticSearchApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Cluster Relationships
     * @param {SemanticSearchApiAsyncClusterRelationshipsV1SemanticSearchClusterAsyncPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost(requestParameters: SemanticSearchApiAsyncClusterRelationshipsV1SemanticSearchClusterAsyncPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Semantic Search
     * @param {SemanticSearchApiAsyncSemanticSearchV1SemanticSearchClusterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    asyncSemanticSearchV1SemanticSearchClusterPost(requestParameters: SemanticSearchApiAsyncSemanticSearchV1SemanticSearchClusterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SynthesisResponse>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Fetch Cluster Response
     * @param {SemanticSearchApiFetchClusterResponseV1SemanticSearchClusterAsyncRunIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet(requestParameters: SemanticSearchApiFetchClusterResponseV1SemanticSearchClusterAsyncRunIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ClusterOutStatus>;
    /**
     * Get semantic search.  Values from semantic search. Logs freemium usage on success
     * @summary Fetch Synthesis
     * @param {SemanticSearchApiFetchSynthesisV1SemanticSearchFetchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchSynthesisV1SemanticSearchFetchGet(requestParameters: SemanticSearchApiFetchSynthesisV1SemanticSearchFetchGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SynthesisOut>;
    /**
     * Get semantic search relationship map.
     * @summary Get Relationship Map Endpoint
     * @param {SemanticSearchApiGetRelationshipMapEndpointV1SemanticSearchRelationshipMapPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelationshipMapEndpointV1SemanticSearchRelationshipMapPost(requestParameters: SemanticSearchApiGetRelationshipMapEndpointV1SemanticSearchRelationshipMapPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     * Get semantic search usage.  date defaults to Jan 1st 2023 - before releasing tracking. Ommiting the date query param is equivalent of getting usage regardless of the date  metric defaults to Metrics.semantic_search_create for backward compatibility so that API consumers that don\'t pass a metric query param still get the original behaviour.
     * @summary Get Semantic Search Usage
     * @param {SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticSearchUsageV1SemanticSearchUsageGet(requestParameters?: SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserMetricUsageOut>;
    /**
     * Get semantic search findings.  Values from semantic search.
     * @summary Get System Search Findings Data
     * @param {SemanticSearchApiGetSystemSearchFindingsDataV1SemanticSearchDataPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemSearchFindingsDataV1SemanticSearchDataPost(requestParameters: SemanticSearchApiGetSystemSearchFindingsDataV1SemanticSearchDataPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SystemSearchData>;
    /**
     * Get statistical findings.
     * @summary Get System Search Mechanistic Data
     * @param {SemanticSearchApiGetSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPost(requestParameters: SemanticSearchApiGetSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SystemSearchMechanisticDataOut>;
    /**
     * Get mechanistic findings.
     * @summary Get System Search Statistical Data
     * @param {SemanticSearchApiGetSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPost(requestParameters: SemanticSearchApiGetSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SystemSearchStatisticalDataOut>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Regenerate Synthesis
     * @param {SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regenerateSynthesisV1SemanticSearchRegeneratePost(requestParameters: SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
};
/**
 * Request parameters for asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiAsyncClusterRelationshipsV1SemanticSearchClusterAsyncPostRequest
 */
export interface SemanticSearchApiAsyncClusterRelationshipsV1SemanticSearchClusterAsyncPostRequest {
    /**
     *
     * @type {SystemSearchIn}
     * @memberof SemanticSearchApiAsyncClusterRelationshipsV1SemanticSearchClusterAsyncPost
     */
    readonly systemSearchIn: SystemSearchIn;
}
/**
 * Request parameters for asyncSemanticSearchV1SemanticSearchClusterPost operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiAsyncSemanticSearchV1SemanticSearchClusterPostRequest
 */
export interface SemanticSearchApiAsyncSemanticSearchV1SemanticSearchClusterPostRequest {
    /**
     *
     * @type {SystemSearchIn}
     * @memberof SemanticSearchApiAsyncSemanticSearchV1SemanticSearchClusterPost
     */
    readonly systemSearchIn: SystemSearchIn;
}
/**
 * Request parameters for fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiFetchClusterResponseV1SemanticSearchClusterAsyncRunIdGetRequest
 */
export interface SemanticSearchApiFetchClusterResponseV1SemanticSearchClusterAsyncRunIdGetRequest {
    /**
     *
     * @type {string}
     * @memberof SemanticSearchApiFetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet
     */
    readonly runId: string;
}
/**
 * Request parameters for fetchSynthesisV1SemanticSearchFetchGet operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiFetchSynthesisV1SemanticSearchFetchGetRequest
 */
export interface SemanticSearchApiFetchSynthesisV1SemanticSearchFetchGetRequest {
    /**
     *
     * @type {string}
     * @memberof SemanticSearchApiFetchSynthesisV1SemanticSearchFetchGet
     */
    readonly cacheKey: string;
}
/**
 * Request parameters for getRelationshipMapEndpointV1SemanticSearchRelationshipMapPost operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiGetRelationshipMapEndpointV1SemanticSearchRelationshipMapPostRequest
 */
export interface SemanticSearchApiGetRelationshipMapEndpointV1SemanticSearchRelationshipMapPostRequest {
    /**
     *
     * @type {SystemSearchIn}
     * @memberof SemanticSearchApiGetRelationshipMapEndpointV1SemanticSearchRelationshipMapPost
     */
    readonly systemSearchIn: SystemSearchIn;
}
/**
 * Request parameters for getSemanticSearchUsageV1SemanticSearchUsageGet operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGetRequest
 */
export interface SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGetRequest {
    /**
     *
     * @type {string}
     * @memberof SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGet
     */
    readonly dateFrom?: string;
    /**
     *
     * @type {Metrics}
     * @memberof SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGet
     */
    readonly metric?: Metrics;
}
/**
 * Request parameters for getSystemSearchFindingsDataV1SemanticSearchDataPost operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiGetSystemSearchFindingsDataV1SemanticSearchDataPostRequest
 */
export interface SemanticSearchApiGetSystemSearchFindingsDataV1SemanticSearchDataPostRequest {
    /**
     *
     * @type {SystemSearchIn}
     * @memberof SemanticSearchApiGetSystemSearchFindingsDataV1SemanticSearchDataPost
     */
    readonly systemSearchIn: SystemSearchIn;
}
/**
 * Request parameters for getSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPost operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiGetSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPostRequest
 */
export interface SemanticSearchApiGetSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPostRequest {
    /**
     *
     * @type {SystemSearchDataIn}
     * @memberof SemanticSearchApiGetSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPost
     */
    readonly systemSearchDataIn: SystemSearchDataIn;
}
/**
 * Request parameters for getSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPost operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiGetSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPostRequest
 */
export interface SemanticSearchApiGetSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPostRequest {
    /**
     *
     * @type {SystemSearchDataIn}
     * @memberof SemanticSearchApiGetSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPost
     */
    readonly systemSearchDataIn: SystemSearchDataIn;
}
/**
 * Request parameters for regenerateSynthesisV1SemanticSearchRegeneratePost operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePostRequest
 */
export interface SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePostRequest {
    /**
     *
     * @type {string}
     * @memberof SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePost
     */
    readonly cacheKey: string;
    /**
     *
     * @type {boolean}
     * @memberof SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePost
     */
    readonly forceRerun?: boolean;
}
/**
 * SemanticSearchApi - object-oriented interface
 * @export
 * @class SemanticSearchApi
 * @extends {BaseAPI}
 */
export declare class SemanticSearchApi extends BaseAPI {
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Cluster Relationships
     * @param {SemanticSearchApiAsyncClusterRelationshipsV1SemanticSearchClusterAsyncPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost(requestParameters: SemanticSearchApiAsyncClusterRelationshipsV1SemanticSearchClusterAsyncPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Semantic Search
     * @param {SemanticSearchApiAsyncSemanticSearchV1SemanticSearchClusterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    asyncSemanticSearchV1SemanticSearchClusterPost(requestParameters: SemanticSearchApiAsyncSemanticSearchV1SemanticSearchClusterPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SynthesisResponse, any>>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Fetch Cluster Response
     * @param {SemanticSearchApiFetchClusterResponseV1SemanticSearchClusterAsyncRunIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet(requestParameters: SemanticSearchApiFetchClusterResponseV1SemanticSearchClusterAsyncRunIdGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ClusterOutStatus, any>>;
    /**
     * Get semantic search.  Values from semantic search. Logs freemium usage on success
     * @summary Fetch Synthesis
     * @param {SemanticSearchApiFetchSynthesisV1SemanticSearchFetchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    fetchSynthesisV1SemanticSearchFetchGet(requestParameters: SemanticSearchApiFetchSynthesisV1SemanticSearchFetchGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SynthesisOut, any>>;
    /**
     * Get semantic search relationship map.
     * @summary Get Relationship Map Endpoint
     * @param {SemanticSearchApiGetRelationshipMapEndpointV1SemanticSearchRelationshipMapPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    getRelationshipMapEndpointV1SemanticSearchRelationshipMapPost(requestParameters: SemanticSearchApiGetRelationshipMapEndpointV1SemanticSearchRelationshipMapPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get semantic search usage.  date defaults to Jan 1st 2023 - before releasing tracking. Ommiting the date query param is equivalent of getting usage regardless of the date  metric defaults to Metrics.semantic_search_create for backward compatibility so that API consumers that don\'t pass a metric query param still get the original behaviour.
     * @summary Get Semantic Search Usage
     * @param {SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    getSemanticSearchUsageV1SemanticSearchUsageGet(requestParameters?: SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserMetricUsageOut, any>>;
    /**
     * Get semantic search findings.  Values from semantic search.
     * @summary Get System Search Findings Data
     * @param {SemanticSearchApiGetSystemSearchFindingsDataV1SemanticSearchDataPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    getSystemSearchFindingsDataV1SemanticSearchDataPost(requestParameters: SemanticSearchApiGetSystemSearchFindingsDataV1SemanticSearchDataPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SystemSearchData, any>>;
    /**
     * Get statistical findings.
     * @summary Get System Search Mechanistic Data
     * @param {SemanticSearchApiGetSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    getSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPost(requestParameters: SemanticSearchApiGetSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SystemSearchMechanisticDataOut, any>>;
    /**
     * Get mechanistic findings.
     * @summary Get System Search Statistical Data
     * @param {SemanticSearchApiGetSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    getSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPost(requestParameters: SemanticSearchApiGetSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SystemSearchStatisticalDataOut, any>>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Regenerate Synthesis
     * @param {SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    regenerateSynthesisV1SemanticSearchRegeneratePost(requestParameters: SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * SohApi - axios parameter creator
 * @export
 */
export declare const SohApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetch graph.
     * @summary Fetch Full Mech Graph
     * @param {string} topicId
     * @param {GraphPayloadTyped} graphPayloadTyped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPost: (topicId: string, graphPayloadTyped: GraphPayloadTyped, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch graph.
     * @summary Fetch Full Stat Graph
     * @param {string} topicId
     * @param {GraphPayloadTyped} graphPayloadTyped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPost: (topicId: string, graphPayloadTyped: GraphPayloadTyped, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch time series data for relationships, findings, and topics.
     * @summary Fetch Graph Time Series Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchGraphTimeSeriesDataV1SohMetricsTimeSeriesGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get hierarchical topics.
     * @summary Fetch Hierarchical Topics
     * @param {string} query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchHierarchicalTopicsV1SohHierarchicalTopicsGet: (query: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch graph.
     * @summary Fetch Mech Graph
     * @param {string} topicId
     * @param {string} traversalDirection
     * @param {PathsPayloadTyped} pathsPayloadTyped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPost: (topicId: string, traversalDirection: string, pathsPayloadTyped: PathsPayloadTyped, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch mediators.
     * @summary Fetch Mech Mediators
     * @param {string} topicId
     * @param {string} targetTopicId
     * @param {PathsPayloadTyped} pathsPayloadTyped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPost: (topicId: string, targetTopicId: string, pathsPayloadTyped: PathsPayloadTyped, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch paths.
     * @summary Fetch Mech Paths
     * @param {string} topicId
     * @param {string} traversalDirection
     * @param {PathsPayloadTyped} pathsPayloadTyped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPost: (topicId: string, traversalDirection: string, pathsPayloadTyped: PathsPayloadTyped, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch graph.
     * @summary Fetch Stat Graph
     * @param {string} topicId
     * @param {string} traversalDirection
     * @param {PathsPayloadTyped} pathsPayloadTyped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPost: (topicId: string, traversalDirection: string, pathsPayloadTyped: PathsPayloadTyped, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch mediators.
     * @summary Fetch Stat Mediators
     * @param {string} topicId
     * @param {string} targetTopicId
     * @param {PathsPayloadTyped} pathsPayloadTyped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPost: (topicId: string, targetTopicId: string, pathsPayloadTyped: PathsPayloadTyped, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch paths.
     * @summary Fetch Stat Paths
     * @param {string} topicId
     * @param {string} traversalDirection
     * @param {PathsPayloadTyped} pathsPayloadTyped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPost: (topicId: string, traversalDirection: string, pathsPayloadTyped: PathsPayloadTyped, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get system of health data.
     * @summary Fetch Topics
     * @param {string} query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchTopicsV1SohTopicsGet: (query: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get system of health findings and related study if doi provided.
     * @summary Get List Of Soh Findings
     * @param {string} [doi]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListOfSohFindingsV1SohFindingsLogGet: (doi?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get system of health summary.
     * @summary Get Relationship Summary Between Two Topics.
     * @param {string} topic1Id
     * @param {string} topic2Id
     * @param {boolean} [recent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelationshipSummaryBetweenTwoTopicsV1SohSummaryGet: (topic1Id: string, topic2Id: string, recent?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get system of health data.
     * @summary Get Soh Evidence Metadata
     * @param {SohIn} sohIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSohEvidenceMetadataV1SohEvidencesPost: (sohIn: SohIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get system of health data.
     * @summary Get Soh Graph Metadata
     * @param {number} [limit] Number of relationships to return.
     * @param {boolean} [clearCache] Clear cache and fetch new graph.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSohGraphMetadataV1SohGraphGet: (limit?: number, clearCache?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get system of health data.
     * @summary Get Soh Of Metadata
     * @param {SohIn} sohIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSohOfMetadataV1SohFindingsPost: (sohIn: SohIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get system of health data.
     * @summary Get Topic By Id
     * @param {string} topicId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopicByIDV1SohTopicsTopicIdGet: (topicId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SohApi - functional programming interface
 * @export
 */
export declare const SohApiFp: (configuration?: Configuration) => {
    /**
     * Fetch graph.
     * @summary Fetch Full Mech Graph
     * @param {string} topicId
     * @param {GraphPayloadTyped} graphPayloadTyped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPost(topicId: string, graphPayloadTyped: GraphPayloadTyped, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphOut>>;
    /**
     * Fetch graph.
     * @summary Fetch Full Stat Graph
     * @param {string} topicId
     * @param {GraphPayloadTyped} graphPayloadTyped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPost(topicId: string, graphPayloadTyped: GraphPayloadTyped, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphOut>>;
    /**
     * Fetch time series data for relationships, findings, and topics.
     * @summary Fetch Graph Time Series Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchGraphTimeSeriesDataV1SohMetricsTimeSeriesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphTimeSeriesOut>>;
    /**
     * Get hierarchical topics.
     * @summary Fetch Hierarchical Topics
     * @param {string} query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchHierarchicalTopicsV1SohHierarchicalTopicsGet(query: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HierarchicalTopicNode>>>;
    /**
     * Fetch graph.
     * @summary Fetch Mech Graph
     * @param {string} topicId
     * @param {string} traversalDirection
     * @param {PathsPayloadTyped} pathsPayloadTyped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPost(topicId: string, traversalDirection: string, pathsPayloadTyped: PathsPayloadTyped, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphOut>>;
    /**
     * Fetch mediators.
     * @summary Fetch Mech Mediators
     * @param {string} topicId
     * @param {string} targetTopicId
     * @param {PathsPayloadTyped} pathsPayloadTyped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPost(topicId: string, targetTopicId: string, pathsPayloadTyped: PathsPayloadTyped, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PathsOut>>;
    /**
     * Fetch paths.
     * @summary Fetch Mech Paths
     * @param {string} topicId
     * @param {string} traversalDirection
     * @param {PathsPayloadTyped} pathsPayloadTyped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPost(topicId: string, traversalDirection: string, pathsPayloadTyped: PathsPayloadTyped, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PathsOut>>;
    /**
     * Fetch graph.
     * @summary Fetch Stat Graph
     * @param {string} topicId
     * @param {string} traversalDirection
     * @param {PathsPayloadTyped} pathsPayloadTyped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPost(topicId: string, traversalDirection: string, pathsPayloadTyped: PathsPayloadTyped, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphOut>>;
    /**
     * Fetch mediators.
     * @summary Fetch Stat Mediators
     * @param {string} topicId
     * @param {string} targetTopicId
     * @param {PathsPayloadTyped} pathsPayloadTyped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPost(topicId: string, targetTopicId: string, pathsPayloadTyped: PathsPayloadTyped, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PathsOut>>;
    /**
     * Fetch paths.
     * @summary Fetch Stat Paths
     * @param {string} topicId
     * @param {string} traversalDirection
     * @param {PathsPayloadTyped} pathsPayloadTyped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPost(topicId: string, traversalDirection: string, pathsPayloadTyped: PathsPayloadTyped, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PathsOut>>;
    /**
     * Get system of health data.
     * @summary Fetch Topics
     * @param {string} query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchTopicsV1SohTopicsGet(query: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SohServiceClientModelsTopicNodeTopicNode>>>;
    /**
     * Get system of health findings and related study if doi provided.
     * @summary Get List Of Soh Findings
     * @param {string} [doi]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListOfSohFindingsV1SohFindingsLogGet(doi?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindingsLogOut>>;
    /**
     * Get system of health summary.
     * @summary Get Relationship Summary Between Two Topics.
     * @param {string} topic1Id
     * @param {string} topic2Id
     * @param {boolean} [recent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelationshipSummaryBetweenTwoTopicsV1SohSummaryGet(topic1Id: string, topic2Id: string, recent?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * Get system of health data.
     * @summary Get Soh Evidence Metadata
     * @param {SohIn} sohIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSohEvidenceMetadataV1SohEvidencesPost(sohIn: SohIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SohEvidenceOut>>;
    /**
     * Get system of health data.
     * @summary Get Soh Graph Metadata
     * @param {number} [limit] Number of relationships to return.
     * @param {boolean} [clearCache] Clear cache and fetch new graph.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSohGraphMetadataV1SohGraphGet(limit?: number, clearCache?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphOut>>;
    /**
     * Get system of health data.
     * @summary Get Soh Of Metadata
     * @param {SohIn} sohIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSohOfMetadataV1SohFindingsPost(sohIn: SohIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SohOut>>;
    /**
     * Get system of health data.
     * @summary Get Topic By Id
     * @param {string} topicId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopicByIDV1SohTopicsTopicIdGet(topicId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SohServiceClientModelsTopicNodeTopicNode>>;
};
/**
 * SohApi - factory interface
 * @export
 */
export declare const SohApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetch graph.
     * @summary Fetch Full Mech Graph
     * @param {SohApiFetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPost(requestParameters: SohApiFetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<GraphOut>;
    /**
     * Fetch graph.
     * @summary Fetch Full Stat Graph
     * @param {SohApiFetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPost(requestParameters: SohApiFetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<GraphOut>;
    /**
     * Fetch time series data for relationships, findings, and topics.
     * @summary Fetch Graph Time Series Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchGraphTimeSeriesDataV1SohMetricsTimeSeriesGet(options?: RawAxiosRequestConfig): AxiosPromise<GraphTimeSeriesOut>;
    /**
     * Get hierarchical topics.
     * @summary Fetch Hierarchical Topics
     * @param {SohApiFetchHierarchicalTopicsV1SohHierarchicalTopicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchHierarchicalTopicsV1SohHierarchicalTopicsGet(requestParameters: SohApiFetchHierarchicalTopicsV1SohHierarchicalTopicsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<HierarchicalTopicNode>>;
    /**
     * Fetch graph.
     * @summary Fetch Mech Graph
     * @param {SohApiFetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPost(requestParameters: SohApiFetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<GraphOut>;
    /**
     * Fetch mediators.
     * @summary Fetch Mech Mediators
     * @param {SohApiFetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPost(requestParameters: SohApiFetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PathsOut>;
    /**
     * Fetch paths.
     * @summary Fetch Mech Paths
     * @param {SohApiFetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPost(requestParameters: SohApiFetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PathsOut>;
    /**
     * Fetch graph.
     * @summary Fetch Stat Graph
     * @param {SohApiFetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPost(requestParameters: SohApiFetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<GraphOut>;
    /**
     * Fetch mediators.
     * @summary Fetch Stat Mediators
     * @param {SohApiFetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPost(requestParameters: SohApiFetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PathsOut>;
    /**
     * Fetch paths.
     * @summary Fetch Stat Paths
     * @param {SohApiFetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPost(requestParameters: SohApiFetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PathsOut>;
    /**
     * Get system of health data.
     * @summary Fetch Topics
     * @param {SohApiFetchTopicsV1SohTopicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchTopicsV1SohTopicsGet(requestParameters: SohApiFetchTopicsV1SohTopicsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<SohServiceClientModelsTopicNodeTopicNode>>;
    /**
     * Get system of health findings and related study if doi provided.
     * @summary Get List Of Soh Findings
     * @param {SohApiGetListOfSohFindingsV1SohFindingsLogGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListOfSohFindingsV1SohFindingsLogGet(requestParameters?: SohApiGetListOfSohFindingsV1SohFindingsLogGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<FindingsLogOut>;
    /**
     * Get system of health summary.
     * @summary Get Relationship Summary Between Two Topics.
     * @param {SohApiGetRelationshipSummaryBetweenTwoTopicsV1SohSummaryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelationshipSummaryBetweenTwoTopicsV1SohSummaryGet(requestParameters: SohApiGetRelationshipSummaryBetweenTwoTopicsV1SohSummaryGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<string>;
    /**
     * Get system of health data.
     * @summary Get Soh Evidence Metadata
     * @param {SohApiGetSohEvidenceMetadataV1SohEvidencesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSohEvidenceMetadataV1SohEvidencesPost(requestParameters: SohApiGetSohEvidenceMetadataV1SohEvidencesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SohEvidenceOut>;
    /**
     * Get system of health data.
     * @summary Get Soh Graph Metadata
     * @param {SohApiGetSohGraphMetadataV1SohGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSohGraphMetadataV1SohGraphGet(requestParameters?: SohApiGetSohGraphMetadataV1SohGraphGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<GraphOut>;
    /**
     * Get system of health data.
     * @summary Get Soh Of Metadata
     * @param {SohApiGetSohOfMetadataV1SohFindingsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSohOfMetadataV1SohFindingsPost(requestParameters: SohApiGetSohOfMetadataV1SohFindingsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SohOut>;
    /**
     * Get system of health data.
     * @summary Get Topic By Id
     * @param {SohApiGetTopicByIDV1SohTopicsTopicIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopicByIDV1SohTopicsTopicIdGet(requestParameters: SohApiGetTopicByIDV1SohTopicsTopicIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SohServiceClientModelsTopicNodeTopicNode>;
};
/**
 * Request parameters for fetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPost operation in SohApi.
 * @export
 * @interface SohApiFetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPostRequest
 */
export interface SohApiFetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPostRequest {
    /**
     *
     * @type {string}
     * @memberof SohApiFetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPost
     */
    readonly topicId: string;
    /**
     *
     * @type {GraphPayloadTyped}
     * @memberof SohApiFetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPost
     */
    readonly graphPayloadTyped: GraphPayloadTyped;
}
/**
 * Request parameters for fetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPost operation in SohApi.
 * @export
 * @interface SohApiFetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPostRequest
 */
export interface SohApiFetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPostRequest {
    /**
     *
     * @type {string}
     * @memberof SohApiFetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPost
     */
    readonly topicId: string;
    /**
     *
     * @type {GraphPayloadTyped}
     * @memberof SohApiFetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPost
     */
    readonly graphPayloadTyped: GraphPayloadTyped;
}
/**
 * Request parameters for fetchHierarchicalTopicsV1SohHierarchicalTopicsGet operation in SohApi.
 * @export
 * @interface SohApiFetchHierarchicalTopicsV1SohHierarchicalTopicsGetRequest
 */
export interface SohApiFetchHierarchicalTopicsV1SohHierarchicalTopicsGetRequest {
    /**
     *
     * @type {string}
     * @memberof SohApiFetchHierarchicalTopicsV1SohHierarchicalTopicsGet
     */
    readonly query: string;
}
/**
 * Request parameters for fetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPost operation in SohApi.
 * @export
 * @interface SohApiFetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPostRequest
 */
export interface SohApiFetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPostRequest {
    /**
     *
     * @type {string}
     * @memberof SohApiFetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPost
     */
    readonly topicId: string;
    /**
     *
     * @type {string}
     * @memberof SohApiFetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPost
     */
    readonly traversalDirection: string;
    /**
     *
     * @type {PathsPayloadTyped}
     * @memberof SohApiFetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPost
     */
    readonly pathsPayloadTyped: PathsPayloadTyped;
}
/**
 * Request parameters for fetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPost operation in SohApi.
 * @export
 * @interface SohApiFetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPostRequest
 */
export interface SohApiFetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPostRequest {
    /**
     *
     * @type {string}
     * @memberof SohApiFetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPost
     */
    readonly topicId: string;
    /**
     *
     * @type {string}
     * @memberof SohApiFetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPost
     */
    readonly targetTopicId: string;
    /**
     *
     * @type {PathsPayloadTyped}
     * @memberof SohApiFetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPost
     */
    readonly pathsPayloadTyped: PathsPayloadTyped;
}
/**
 * Request parameters for fetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPost operation in SohApi.
 * @export
 * @interface SohApiFetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPostRequest
 */
export interface SohApiFetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPostRequest {
    /**
     *
     * @type {string}
     * @memberof SohApiFetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPost
     */
    readonly topicId: string;
    /**
     *
     * @type {string}
     * @memberof SohApiFetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPost
     */
    readonly traversalDirection: string;
    /**
     *
     * @type {PathsPayloadTyped}
     * @memberof SohApiFetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPost
     */
    readonly pathsPayloadTyped: PathsPayloadTyped;
}
/**
 * Request parameters for fetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPost operation in SohApi.
 * @export
 * @interface SohApiFetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPostRequest
 */
export interface SohApiFetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPostRequest {
    /**
     *
     * @type {string}
     * @memberof SohApiFetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPost
     */
    readonly topicId: string;
    /**
     *
     * @type {string}
     * @memberof SohApiFetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPost
     */
    readonly traversalDirection: string;
    /**
     *
     * @type {PathsPayloadTyped}
     * @memberof SohApiFetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPost
     */
    readonly pathsPayloadTyped: PathsPayloadTyped;
}
/**
 * Request parameters for fetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPost operation in SohApi.
 * @export
 * @interface SohApiFetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPostRequest
 */
export interface SohApiFetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPostRequest {
    /**
     *
     * @type {string}
     * @memberof SohApiFetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPost
     */
    readonly topicId: string;
    /**
     *
     * @type {string}
     * @memberof SohApiFetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPost
     */
    readonly targetTopicId: string;
    /**
     *
     * @type {PathsPayloadTyped}
     * @memberof SohApiFetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPost
     */
    readonly pathsPayloadTyped: PathsPayloadTyped;
}
/**
 * Request parameters for fetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPost operation in SohApi.
 * @export
 * @interface SohApiFetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPostRequest
 */
export interface SohApiFetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPostRequest {
    /**
     *
     * @type {string}
     * @memberof SohApiFetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPost
     */
    readonly topicId: string;
    /**
     *
     * @type {string}
     * @memberof SohApiFetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPost
     */
    readonly traversalDirection: string;
    /**
     *
     * @type {PathsPayloadTyped}
     * @memberof SohApiFetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPost
     */
    readonly pathsPayloadTyped: PathsPayloadTyped;
}
/**
 * Request parameters for fetchTopicsV1SohTopicsGet operation in SohApi.
 * @export
 * @interface SohApiFetchTopicsV1SohTopicsGetRequest
 */
export interface SohApiFetchTopicsV1SohTopicsGetRequest {
    /**
     *
     * @type {string}
     * @memberof SohApiFetchTopicsV1SohTopicsGet
     */
    readonly query: string;
}
/**
 * Request parameters for getListOfSohFindingsV1SohFindingsLogGet operation in SohApi.
 * @export
 * @interface SohApiGetListOfSohFindingsV1SohFindingsLogGetRequest
 */
export interface SohApiGetListOfSohFindingsV1SohFindingsLogGetRequest {
    /**
     *
     * @type {string}
     * @memberof SohApiGetListOfSohFindingsV1SohFindingsLogGet
     */
    readonly doi?: string;
}
/**
 * Request parameters for getRelationshipSummaryBetweenTwoTopicsV1SohSummaryGet operation in SohApi.
 * @export
 * @interface SohApiGetRelationshipSummaryBetweenTwoTopicsV1SohSummaryGetRequest
 */
export interface SohApiGetRelationshipSummaryBetweenTwoTopicsV1SohSummaryGetRequest {
    /**
     *
     * @type {string}
     * @memberof SohApiGetRelationshipSummaryBetweenTwoTopicsV1SohSummaryGet
     */
    readonly topic1Id: string;
    /**
     *
     * @type {string}
     * @memberof SohApiGetRelationshipSummaryBetweenTwoTopicsV1SohSummaryGet
     */
    readonly topic2Id: string;
    /**
     *
     * @type {boolean}
     * @memberof SohApiGetRelationshipSummaryBetweenTwoTopicsV1SohSummaryGet
     */
    readonly recent?: boolean;
}
/**
 * Request parameters for getSohEvidenceMetadataV1SohEvidencesPost operation in SohApi.
 * @export
 * @interface SohApiGetSohEvidenceMetadataV1SohEvidencesPostRequest
 */
export interface SohApiGetSohEvidenceMetadataV1SohEvidencesPostRequest {
    /**
     *
     * @type {SohIn}
     * @memberof SohApiGetSohEvidenceMetadataV1SohEvidencesPost
     */
    readonly sohIn: SohIn;
}
/**
 * Request parameters for getSohGraphMetadataV1SohGraphGet operation in SohApi.
 * @export
 * @interface SohApiGetSohGraphMetadataV1SohGraphGetRequest
 */
export interface SohApiGetSohGraphMetadataV1SohGraphGetRequest {
    /**
     * Number of relationships to return.
     * @type {number}
     * @memberof SohApiGetSohGraphMetadataV1SohGraphGet
     */
    readonly limit?: number;
    /**
     * Clear cache and fetch new graph.
     * @type {boolean}
     * @memberof SohApiGetSohGraphMetadataV1SohGraphGet
     */
    readonly clearCache?: boolean;
}
/**
 * Request parameters for getSohOfMetadataV1SohFindingsPost operation in SohApi.
 * @export
 * @interface SohApiGetSohOfMetadataV1SohFindingsPostRequest
 */
export interface SohApiGetSohOfMetadataV1SohFindingsPostRequest {
    /**
     *
     * @type {SohIn}
     * @memberof SohApiGetSohOfMetadataV1SohFindingsPost
     */
    readonly sohIn: SohIn;
}
/**
 * Request parameters for getTopicByIDV1SohTopicsTopicIdGet operation in SohApi.
 * @export
 * @interface SohApiGetTopicByIDV1SohTopicsTopicIdGetRequest
 */
export interface SohApiGetTopicByIDV1SohTopicsTopicIdGetRequest {
    /**
     *
     * @type {string}
     * @memberof SohApiGetTopicByIDV1SohTopicsTopicIdGet
     */
    readonly topicId: string;
}
/**
 * SohApi - object-oriented interface
 * @export
 * @class SohApi
 * @extends {BaseAPI}
 */
export declare class SohApi extends BaseAPI {
    /**
     * Fetch graph.
     * @summary Fetch Full Mech Graph
     * @param {SohApiFetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPost(requestParameters: SohApiFetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GraphOut, any>>;
    /**
     * Fetch graph.
     * @summary Fetch Full Stat Graph
     * @param {SohApiFetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPost(requestParameters: SohApiFetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GraphOut, any>>;
    /**
     * Fetch time series data for relationships, findings, and topics.
     * @summary Fetch Graph Time Series Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchGraphTimeSeriesDataV1SohMetricsTimeSeriesGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GraphTimeSeriesOut, any>>;
    /**
     * Get hierarchical topics.
     * @summary Fetch Hierarchical Topics
     * @param {SohApiFetchHierarchicalTopicsV1SohHierarchicalTopicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchHierarchicalTopicsV1SohHierarchicalTopicsGet(requestParameters: SohApiFetchHierarchicalTopicsV1SohHierarchicalTopicsGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<HierarchicalTopicNode[], any>>;
    /**
     * Fetch graph.
     * @summary Fetch Mech Graph
     * @param {SohApiFetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPost(requestParameters: SohApiFetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GraphOut, any>>;
    /**
     * Fetch mediators.
     * @summary Fetch Mech Mediators
     * @param {SohApiFetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPost(requestParameters: SohApiFetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PathsOut, any>>;
    /**
     * Fetch paths.
     * @summary Fetch Mech Paths
     * @param {SohApiFetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPost(requestParameters: SohApiFetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PathsOut, any>>;
    /**
     * Fetch graph.
     * @summary Fetch Stat Graph
     * @param {SohApiFetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPost(requestParameters: SohApiFetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GraphOut, any>>;
    /**
     * Fetch mediators.
     * @summary Fetch Stat Mediators
     * @param {SohApiFetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPost(requestParameters: SohApiFetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PathsOut, any>>;
    /**
     * Fetch paths.
     * @summary Fetch Stat Paths
     * @param {SohApiFetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPost(requestParameters: SohApiFetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PathsOut, any>>;
    /**
     * Get system of health data.
     * @summary Fetch Topics
     * @param {SohApiFetchTopicsV1SohTopicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchTopicsV1SohTopicsGet(requestParameters: SohApiFetchTopicsV1SohTopicsGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SohServiceClientModelsTopicNodeTopicNode[], any>>;
    /**
     * Get system of health findings and related study if doi provided.
     * @summary Get List Of Soh Findings
     * @param {SohApiGetListOfSohFindingsV1SohFindingsLogGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    getListOfSohFindingsV1SohFindingsLogGet(requestParameters?: SohApiGetListOfSohFindingsV1SohFindingsLogGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FindingsLogOut, any>>;
    /**
     * Get system of health summary.
     * @summary Get Relationship Summary Between Two Topics.
     * @param {SohApiGetRelationshipSummaryBetweenTwoTopicsV1SohSummaryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    getRelationshipSummaryBetweenTwoTopicsV1SohSummaryGet(requestParameters: SohApiGetRelationshipSummaryBetweenTwoTopicsV1SohSummaryGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     * Get system of health data.
     * @summary Get Soh Evidence Metadata
     * @param {SohApiGetSohEvidenceMetadataV1SohEvidencesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    getSohEvidenceMetadataV1SohEvidencesPost(requestParameters: SohApiGetSohEvidenceMetadataV1SohEvidencesPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SohEvidenceOut, any>>;
    /**
     * Get system of health data.
     * @summary Get Soh Graph Metadata
     * @param {SohApiGetSohGraphMetadataV1SohGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    getSohGraphMetadataV1SohGraphGet(requestParameters?: SohApiGetSohGraphMetadataV1SohGraphGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GraphOut, any>>;
    /**
     * Get system of health data.
     * @summary Get Soh Of Metadata
     * @param {SohApiGetSohOfMetadataV1SohFindingsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    getSohOfMetadataV1SohFindingsPost(requestParameters: SohApiGetSohOfMetadataV1SohFindingsPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SohOut, any>>;
    /**
     * Get system of health data.
     * @summary Get Topic By Id
     * @param {SohApiGetTopicByIDV1SohTopicsTopicIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    getTopicByIDV1SohTopicsTopicIdGet(requestParameters: SohApiGetTopicByIDV1SohTopicsTopicIdGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SohServiceClientModelsTopicNodeTopicNode, any>>;
}
/**
 * SsoApi - axios parameter creator
 * @export
 */
export declare const SsoApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get Identity Provider name for given email domain.
     * @summary Get Identity Provider Name
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityProviderNameV1IdpNameEmailGet: (email: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SsoApi - functional programming interface
 * @export
 */
export declare const SsoApiFp: (configuration?: Configuration) => {
    /**
     * Get Identity Provider name for given email domain.
     * @summary Get Identity Provider Name
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityProviderNameV1IdpNameEmailGet(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SsoConfig>>;
};
/**
 * SsoApi - factory interface
 * @export
 */
export declare const SsoApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get Identity Provider name for given email domain.
     * @summary Get Identity Provider Name
     * @param {SsoApiGetIdentityProviderNameV1IdpNameEmailGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityProviderNameV1IdpNameEmailGet(requestParameters: SsoApiGetIdentityProviderNameV1IdpNameEmailGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SsoConfig>;
};
/**
 * Request parameters for getIdentityProviderNameV1IdpNameEmailGet operation in SsoApi.
 * @export
 * @interface SsoApiGetIdentityProviderNameV1IdpNameEmailGetRequest
 */
export interface SsoApiGetIdentityProviderNameV1IdpNameEmailGetRequest {
    /**
     *
     * @type {string}
     * @memberof SsoApiGetIdentityProviderNameV1IdpNameEmailGet
     */
    readonly email: string;
}
/**
 * SsoApi - object-oriented interface
 * @export
 * @class SsoApi
 * @extends {BaseAPI}
 */
export declare class SsoApi extends BaseAPI {
    /**
     * Get Identity Provider name for given email domain.
     * @summary Get Identity Provider Name
     * @param {SsoApiGetIdentityProviderNameV1IdpNameEmailGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsoApi
     */
    getIdentityProviderNameV1IdpNameEmailGet(requestParameters: SsoApiGetIdentityProviderNameV1IdpNameEmailGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SsoConfig, any>>;
}
/**
 * StripeApi - axios parameter creator
 * @export
 */
export declare const StripeApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Add subscription seats.
     * @summary Add Subscription Seats
     * @param {string} subscriptionId
     * @param {AddSubscriptionSeatIn} addSubscriptionSeatIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost: (subscriptionId: string, addSubscriptionSeatIn: AddSubscriptionSeatIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get subscription seats.
     * @summary Get Subscription Seats
     * @param {string} subscriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet: (subscriptionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Start stripe checkout session.
     * @summary Manage Subscription
     * @param {string} [domainCallback]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manageSubscriptionV1StripeSubscriptionManagePost: (domainCallback?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Remove subscription seat.
     * @summary Remove Subscription Seat
     * @param {string} email
     * @param {string} subscriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete: (email: string, subscriptionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StripeApi - functional programming interface
 * @export
 */
export declare const StripeApiFp: (configuration?: Configuration) => {
    /**
     * Add subscription seats.
     * @summary Add Subscription Seats
     * @param {string} subscriptionId
     * @param {AddSubscriptionSeatIn} addSubscriptionSeatIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost(subscriptionId: string, addSubscriptionSeatIn: AddSubscriptionSeatIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     * Get subscription seats.
     * @summary Get Subscription Seats
     * @param {string} subscriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(subscriptionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionSeats>>;
    /**
     * Start stripe checkout session.
     * @summary Manage Subscription
     * @param {string} [domainCallback]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manageSubscriptionV1StripeSubscriptionManagePost(domainCallback?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeSessionOut>>;
    /**
     * Remove subscription seat.
     * @summary Remove Subscription Seat
     * @param {string} email
     * @param {string} subscriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(email: string, subscriptionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
};
/**
 * StripeApi - factory interface
 * @export
 */
export declare const StripeApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Add subscription seats.
     * @summary Add Subscription Seats
     * @param {StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost(requestParameters: StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<boolean>;
    /**
     * Get subscription seats.
     * @summary Get Subscription Seats
     * @param {StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(requestParameters: StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SubscriptionSeats>;
    /**
     * Start stripe checkout session.
     * @summary Manage Subscription
     * @param {StripeApiManageSubscriptionV1StripeSubscriptionManagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manageSubscriptionV1StripeSubscriptionManagePost(requestParameters?: StripeApiManageSubscriptionV1StripeSubscriptionManagePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<StripeSessionOut>;
    /**
     * Remove subscription seat.
     * @summary Remove Subscription Seat
     * @param {StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(requestParameters: StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<boolean>;
};
/**
 * Request parameters for addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost operation in StripeApi.
 * @export
 * @interface StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPostRequest
 */
export interface StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPostRequest {
    /**
     *
     * @type {string}
     * @memberof StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost
     */
    readonly subscriptionId: string;
    /**
     *
     * @type {AddSubscriptionSeatIn}
     * @memberof StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost
     */
    readonly addSubscriptionSeatIn: AddSubscriptionSeatIn;
}
/**
 * Request parameters for getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet operation in StripeApi.
 * @export
 * @interface StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGetRequest
 */
export interface StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGetRequest {
    /**
     *
     * @type {string}
     * @memberof StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet
     */
    readonly subscriptionId: string;
}
/**
 * Request parameters for manageSubscriptionV1StripeSubscriptionManagePost operation in StripeApi.
 * @export
 * @interface StripeApiManageSubscriptionV1StripeSubscriptionManagePostRequest
 */
export interface StripeApiManageSubscriptionV1StripeSubscriptionManagePostRequest {
    /**
     *
     * @type {string}
     * @memberof StripeApiManageSubscriptionV1StripeSubscriptionManagePost
     */
    readonly domainCallback?: string;
}
/**
 * Request parameters for removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete operation in StripeApi.
 * @export
 * @interface StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDeleteRequest
 */
export interface StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete
     */
    readonly email: string;
    /**
     *
     * @type {string}
     * @memberof StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete
     */
    readonly subscriptionId: string;
}
/**
 * StripeApi - object-oriented interface
 * @export
 * @class StripeApi
 * @extends {BaseAPI}
 */
export declare class StripeApi extends BaseAPI {
    /**
     * Add subscription seats.
     * @summary Add Subscription Seats
     * @param {StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost(requestParameters: StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<boolean, any>>;
    /**
     * Get subscription seats.
     * @summary Get Subscription Seats
     * @param {StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(requestParameters: StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SubscriptionSeats, any>>;
    /**
     * Start stripe checkout session.
     * @summary Manage Subscription
     * @param {StripeApiManageSubscriptionV1StripeSubscriptionManagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    manageSubscriptionV1StripeSubscriptionManagePost(requestParameters?: StripeApiManageSubscriptionV1StripeSubscriptionManagePostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StripeSessionOut, any>>;
    /**
     * Remove subscription seat.
     * @summary Remove Subscription Seat
     * @param {StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(requestParameters: StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<boolean, any>>;
}
/**
 * StudyMetadataApi - axios parameter creator
 * @export
 */
export declare const StudyMetadataApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get study metadata from OpenAlex and DynamoDB via pmids.
     * @summary Get Study Metadata From Openalex For A Given List Of Pmids.
     * @param {StudyMetadataIn} studyMetadataIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost: (studyMetadataIn: StudyMetadataIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get study metadata from SystemRDB via pmids.
     * @summary Get Study Metadata From Systemrdb For A Given List Of Pmids.
     * @param {StudyMetadataIn} studyMetadataIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPost: (studyMetadataIn: StudyMetadataIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StudyMetadataApi - functional programming interface
 * @export
 */
export declare const StudyMetadataApiFp: (configuration?: Configuration) => {
    /**
     * Get study metadata from OpenAlex and DynamoDB via pmids.
     * @summary Get Study Metadata From Openalex For A Given List Of Pmids.
     * @param {StudyMetadataIn} studyMetadataIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost(studyMetadataIn: StudyMetadataIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyMetadataOut>>;
    /**
     * Get study metadata from SystemRDB via pmids.
     * @summary Get Study Metadata From Systemrdb For A Given List Of Pmids.
     * @param {StudyMetadataIn} studyMetadataIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPost(studyMetadataIn: StudyMetadataIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyMetadataRDBOut>>;
};
/**
 * StudyMetadataApi - factory interface
 * @export
 */
export declare const StudyMetadataApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get study metadata from OpenAlex and DynamoDB via pmids.
     * @summary Get Study Metadata From Openalex For A Given List Of Pmids.
     * @param {StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost(requestParameters: StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<StudyMetadataOut>;
    /**
     * Get study metadata from SystemRDB via pmids.
     * @summary Get Study Metadata From Systemrdb For A Given List Of Pmids.
     * @param {StudyMetadataApiGetStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPost(requestParameters: StudyMetadataApiGetStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<StudyMetadataRDBOut>;
};
/**
 * Request parameters for getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost operation in StudyMetadataApi.
 * @export
 * @interface StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPostRequest
 */
export interface StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPostRequest {
    /**
     *
     * @type {StudyMetadataIn}
     * @memberof StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost
     */
    readonly studyMetadataIn: StudyMetadataIn;
}
/**
 * Request parameters for getStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPost operation in StudyMetadataApi.
 * @export
 * @interface StudyMetadataApiGetStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPostRequest
 */
export interface StudyMetadataApiGetStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPostRequest {
    /**
     *
     * @type {StudyMetadataIn}
     * @memberof StudyMetadataApiGetStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPost
     */
    readonly studyMetadataIn: StudyMetadataIn;
}
/**
 * StudyMetadataApi - object-oriented interface
 * @export
 * @class StudyMetadataApi
 * @extends {BaseAPI}
 */
export declare class StudyMetadataApi extends BaseAPI {
    /**
     * Get study metadata from OpenAlex and DynamoDB via pmids.
     * @summary Get Study Metadata From Openalex For A Given List Of Pmids.
     * @param {StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyMetadataApi
     */
    getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost(requestParameters: StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StudyMetadataOut, any>>;
    /**
     * Get study metadata from SystemRDB via pmids.
     * @summary Get Study Metadata From Systemrdb For A Given List Of Pmids.
     * @param {StudyMetadataApiGetStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyMetadataApi
     */
    getStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPost(requestParameters: StudyMetadataApiGetStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StudyMetadataRDBOut, any>>;
}
/**
 * StudyStatsApi - axios parameter creator
 * @export
 */
export declare const StudyStatsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Study Stats
     * @param {string} [relationshipId] Relationship ID
     * @param {AppSchemaConceptsRelationshipTypes} [relationshipType] Relationship type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudyStats: (relationshipId?: string, relationshipType?: AppSchemaConceptsRelationshipTypes, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StudyStatsApi - functional programming interface
 * @export
 */
export declare const StudyStatsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Study Stats
     * @param {string} [relationshipId] Relationship ID
     * @param {AppSchemaConceptsRelationshipTypes} [relationshipType] Relationship type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudyStats(relationshipId?: string, relationshipType?: AppSchemaConceptsRelationshipTypes, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyStats>>;
};
/**
 * StudyStatsApi - factory interface
 * @export
 */
export declare const StudyStatsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get Study Stats
     * @param {StudyStatsApiGetStudyStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudyStats(requestParameters?: StudyStatsApiGetStudyStatsRequest, options?: RawAxiosRequestConfig): AxiosPromise<StudyStats>;
};
/**
 * Request parameters for getStudyStats operation in StudyStatsApi.
 * @export
 * @interface StudyStatsApiGetStudyStatsRequest
 */
export interface StudyStatsApiGetStudyStatsRequest {
    /**
     * Relationship ID
     * @type {string}
     * @memberof StudyStatsApiGetStudyStats
     */
    readonly relationshipId?: string;
    /**
     * Relationship type
     * @type {AppSchemaConceptsRelationshipTypes}
     * @memberof StudyStatsApiGetStudyStats
     */
    readonly relationshipType?: AppSchemaConceptsRelationshipTypes;
}
/**
 * StudyStatsApi - object-oriented interface
 * @export
 * @class StudyStatsApi
 * @extends {BaseAPI}
 */
export declare class StudyStatsApi extends BaseAPI {
    /**
     *
     * @summary Get Study Stats
     * @param {StudyStatsApiGetStudyStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyStatsApi
     */
    getStudyStats(requestParameters?: StudyStatsApiGetStudyStatsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StudyStats, any>>;
}
/**
 * SystemGraphApi - axios parameter creator
 * @export
 */
export declare const SystemGraphApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get downstream paths.
     * @summary Get Downstream Endpoint
     * @param {string} node System ID of topic node
     * @param {number} [page] Page number
     * @param {number} [pageSize] Page size
     * @param {number} [nHops] Number of hops
     * @param {Array<string>} [additionalNodes] Additional nodes
     * @param {string} [relationshipTypes] Comma separated list of relationship types
     * @param {boolean} [includeNonSignificant] Significant relationships only
     * @param {string} [semanticTypes] Comma separated list of semantic_types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDownstreamEndpointV1SystemGraphPathsDownstreamGet: (node: string, page?: number, pageSize?: number, nHops?: number, additionalNodes?: Array<string>, relationshipTypes?: string, includeNonSignificant?: boolean, semanticTypes?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get relationship path.
     * @summary Get Mediators Endpoint
     * @param {string} source System ID of source
     * @param {string} target System ID of target
     * @param {number} [page] Page number
     * @param {number} [pageSize] Page size
     * @param {Array<string>} [additionalSources] Additional sources
     * @param {Array<string>} [additionalTargets] Additional targets
     * @param {string} [relationshipTypes] Comma separated list of relationship types
     * @param {boolean} [includeNonSignificant] Significant relationships only
     * @param {string} [semanticTypes] Comma separated list of semantic_types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMediatorsEndpointV1SystemGraphPathsMediatorsGet: (source: string, target: string, page?: number, pageSize?: number, additionalSources?: Array<string>, additionalTargets?: Array<string>, relationshipTypes?: string, includeNonSignificant?: boolean, semanticTypes?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get system graph from the database.
     * @summary Get One Degree From Topic
     * @param {string} topicId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet: (topicId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get relationship path.
     * @summary Get Relationship Endpoint
     * @param {string} source System ID of source
     * @param {string} target System ID of target
     * @param {number} [page] Page number
     * @param {number} [pageSize] Page size
     * @param {Array<string>} [additionalSources] Additional sources
     * @param {Array<string>} [additionalTargets] Additional targets
     * @param {string} [relationshipTypes] Comma separated list of relationship types
     * @param {boolean} [includeNonSignificant] Significant relationships only
     * @param {string} [semanticTypes] Comma separated list of semantic_types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelationshipEndpointV1SystemGraphPathsRelationshipGet: (source: string, target: string, page?: number, pageSize?: number, additionalSources?: Array<string>, additionalTargets?: Array<string>, relationshipTypes?: string, includeNonSignificant?: boolean, semanticTypes?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch semantic graph.
     * @summary Get Semantic Graph Endpoint
     * @param {string} [topic1] Topic 1
     * @param {string} [topic2] Topic 2
     * @param {Array<string>} [ids1] Topic 1 ids
     * @param {Array<string>} [ids2] Topic 2 ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticGraphEndpointV1SystemGraphSemanticGraphGet: (topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch single topic semantic graph.
     * @summary Get Semantic Topic Graph Endpoint
     * @param {string} [topicName] Topic name
     * @param {Array<string>} [topicIds] Topic ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet: (topicName?: string, topicIds?: Array<string>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get relationship path.
     * @summary Get Shared Sources Endpoint
     * @param {string} source System ID of source
     * @param {string} target System ID of target
     * @param {number} [page] Page number
     * @param {number} [pageSize] Page size
     * @param {Array<string>} [additionalSources] Additional sources
     * @param {Array<string>} [additionalTargets] Additional targets
     * @param {string} [relationshipTypes] Comma separated list of relationship types
     * @param {boolean} [includeNonSignificant] Significant relationships only
     * @param {string} [semanticTypes] Comma separated list of semantic_types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet: (source: string, target: string, page?: number, pageSize?: number, additionalSources?: Array<string>, additionalTargets?: Array<string>, relationshipTypes?: string, includeNonSignificant?: boolean, semanticTypes?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get relationship path.
     * @summary Get Shared Targets Endpoint
     * @param {string} source System ID of source
     * @param {string} target System ID of target
     * @param {number} [page] Page number
     * @param {number} [pageSize] Page size
     * @param {Array<string>} [additionalSources] Additional sources
     * @param {Array<string>} [additionalTargets] Additional targets
     * @param {string} [relationshipTypes] Comma separated list of relationship types
     * @param {boolean} [includeNonSignificant] Significant relationships only
     * @param {string} [semanticTypes] Comma separated list of semantic_types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet: (source: string, target: string, page?: number, pageSize?: number, additionalSources?: Array<string>, additionalTargets?: Array<string>, relationshipTypes?: string, includeNonSignificant?: boolean, semanticTypes?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get system graph from the database.
     * @summary Get System Graph Endpoint
     * @param {number} [numRelationships] Number of relationships to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemGraphEndpointV1SystemGraphSystemGraphGet: (numRelationships?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch semantic graph.
     * @summary Get Topological Categories Endpoint
     * @param {string} topic1 Topic 1
     * @param {Array<string>} ids1 Topic 1 ids
     * @param {string} [topic2] Topic 2
     * @param {Array<string>} [ids2] Topic 2 ids
     * @param {number} [pageSize] Page size
     * @param {number} [offset] Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet: (topic1: string, ids1: Array<string>, topic2?: string, ids2?: Array<string>, pageSize?: number, offset?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get relationship path.
     * @summary Get Two Hop Mediators Endpoint
     * @param {string} source System ID of source
     * @param {string} target System ID of target
     * @param {number} [page] Page number
     * @param {number} [pageSize] Page size
     * @param {Array<string>} [additionalSources] Additional sources
     * @param {Array<string>} [additionalTargets] Additional targets
     * @param {string} [relationshipTypes] Comma separated list of relationship types
     * @param {boolean} [includeNonSignificant] Significant relationships only
     * @param {string} [semanticTypes] Comma separated list of semantic_types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet: (source: string, target: string, page?: number, pageSize?: number, additionalSources?: Array<string>, additionalTargets?: Array<string>, relationshipTypes?: string, includeNonSignificant?: boolean, semanticTypes?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get upstream paths.
     * @summary Get Upstream Endpoint
     * @param {string} node System ID of topic node
     * @param {number} [page] Page number
     * @param {number} [pageSize] Page size
     * @param {number} [nHops] Number of hops
     * @param {Array<string>} [additionalNodes] Additional nodes
     * @param {string} [relationshipTypes] Comma separated list of relationship types
     * @param {boolean} [includeNonSignificant] Significant relationships only
     * @param {string} [semanticTypes] Comma separated list of semantic_types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUpstreamEndpointV1SystemGraphPathsUpstreamGet: (node: string, page?: number, pageSize?: number, nHops?: number, additionalNodes?: Array<string>, relationshipTypes?: string, includeNonSignificant?: boolean, semanticTypes?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Search topics.
     * @summary Search Topics Endpoint
     * @param {string} q Search query
     * @param {Array<string>} [subgraphTopics] Topic ids in subgraph
     * @param {number} [subgraphDepth] Depth of subgraph
     * @param {SearchType} [searchType] Search type (semantic or keyword)
     * @param {number} [autocut] Autocut for semantic search
     * @param {number} [limit] Limit for semantic search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTopicsEndpointV1SystemGraphSearchGet: (q: string, subgraphTopics?: Array<string>, subgraphDepth?: number, searchType?: SearchType, autocut?: number, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SystemGraphApi - functional programming interface
 * @export
 */
export declare const SystemGraphApiFp: (configuration?: Configuration) => {
    /**
     * Get downstream paths.
     * @summary Get Downstream Endpoint
     * @param {string} node System ID of topic node
     * @param {number} [page] Page number
     * @param {number} [pageSize] Page size
     * @param {number} [nHops] Number of hops
     * @param {Array<string>} [additionalNodes] Additional nodes
     * @param {string} [relationshipTypes] Comma separated list of relationship types
     * @param {boolean} [includeNonSignificant] Significant relationships only
     * @param {string} [semanticTypes] Comma separated list of semantic_types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDownstreamEndpointV1SystemGraphPathsDownstreamGet(node: string, page?: number, pageSize?: number, nHops?: number, additionalNodes?: Array<string>, relationshipTypes?: string, includeNonSignificant?: boolean, semanticTypes?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MapPathsOut>>;
    /**
     * Get relationship path.
     * @summary Get Mediators Endpoint
     * @param {string} source System ID of source
     * @param {string} target System ID of target
     * @param {number} [page] Page number
     * @param {number} [pageSize] Page size
     * @param {Array<string>} [additionalSources] Additional sources
     * @param {Array<string>} [additionalTargets] Additional targets
     * @param {string} [relationshipTypes] Comma separated list of relationship types
     * @param {boolean} [includeNonSignificant] Significant relationships only
     * @param {string} [semanticTypes] Comma separated list of semantic_types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMediatorsEndpointV1SystemGraphPathsMediatorsGet(source: string, target: string, page?: number, pageSize?: number, additionalSources?: Array<string>, additionalTargets?: Array<string>, relationshipTypes?: string, includeNonSignificant?: boolean, semanticTypes?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MapPathsOut>>;
    /**
     * Get system graph from the database.
     * @summary Get One Degree From Topic
     * @param {string} topicId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet(topicId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptRelationshipsOut>>;
    /**
     * Get relationship path.
     * @summary Get Relationship Endpoint
     * @param {string} source System ID of source
     * @param {string} target System ID of target
     * @param {number} [page] Page number
     * @param {number} [pageSize] Page size
     * @param {Array<string>} [additionalSources] Additional sources
     * @param {Array<string>} [additionalTargets] Additional targets
     * @param {string} [relationshipTypes] Comma separated list of relationship types
     * @param {boolean} [includeNonSignificant] Significant relationships only
     * @param {string} [semanticTypes] Comma separated list of semantic_types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelationshipEndpointV1SystemGraphPathsRelationshipGet(source: string, target: string, page?: number, pageSize?: number, additionalSources?: Array<string>, additionalTargets?: Array<string>, relationshipTypes?: string, includeNonSignificant?: boolean, semanticTypes?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MapPathsOut>>;
    /**
     * Fetch semantic graph.
     * @summary Get Semantic Graph Endpoint
     * @param {string} [topic1] Topic 1
     * @param {string} [topic2] Topic 2
     * @param {Array<string>} [ids1] Topic 1 ids
     * @param {Array<string>} [ids2] Topic 2 ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticGraphEndpointV1SystemGraphSemanticGraphGet(topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>>;
    /**
     * Fetch single topic semantic graph.
     * @summary Get Semantic Topic Graph Endpoint
     * @param {string} [topicName] Topic name
     * @param {Array<string>} [topicIds] Topic ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet(topicName?: string, topicIds?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>>;
    /**
     * Get relationship path.
     * @summary Get Shared Sources Endpoint
     * @param {string} source System ID of source
     * @param {string} target System ID of target
     * @param {number} [page] Page number
     * @param {number} [pageSize] Page size
     * @param {Array<string>} [additionalSources] Additional sources
     * @param {Array<string>} [additionalTargets] Additional targets
     * @param {string} [relationshipTypes] Comma separated list of relationship types
     * @param {boolean} [includeNonSignificant] Significant relationships only
     * @param {string} [semanticTypes] Comma separated list of semantic_types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet(source: string, target: string, page?: number, pageSize?: number, additionalSources?: Array<string>, additionalTargets?: Array<string>, relationshipTypes?: string, includeNonSignificant?: boolean, semanticTypes?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MapPathsOut>>;
    /**
     * Get relationship path.
     * @summary Get Shared Targets Endpoint
     * @param {string} source System ID of source
     * @param {string} target System ID of target
     * @param {number} [page] Page number
     * @param {number} [pageSize] Page size
     * @param {Array<string>} [additionalSources] Additional sources
     * @param {Array<string>} [additionalTargets] Additional targets
     * @param {string} [relationshipTypes] Comma separated list of relationship types
     * @param {boolean} [includeNonSignificant] Significant relationships only
     * @param {string} [semanticTypes] Comma separated list of semantic_types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet(source: string, target: string, page?: number, pageSize?: number, additionalSources?: Array<string>, additionalTargets?: Array<string>, relationshipTypes?: string, includeNonSignificant?: boolean, semanticTypes?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MapPathsOut>>;
    /**
     * Get system graph from the database.
     * @summary Get System Graph Endpoint
     * @param {number} [numRelationships] Number of relationships to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemGraphEndpointV1SystemGraphSystemGraphGet(numRelationships?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>>;
    /**
     * Fetch semantic graph.
     * @summary Get Topological Categories Endpoint
     * @param {string} topic1 Topic 1
     * @param {Array<string>} ids1 Topic 1 ids
     * @param {string} [topic2] Topic 2
     * @param {Array<string>} [ids2] Topic 2 ids
     * @param {number} [pageSize] Page size
     * @param {number} [offset] Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet(topic1: string, ids1: Array<string>, topic2?: string, ids2?: Array<string>, pageSize?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicCategories>>;
    /**
     * Get relationship path.
     * @summary Get Two Hop Mediators Endpoint
     * @param {string} source System ID of source
     * @param {string} target System ID of target
     * @param {number} [page] Page number
     * @param {number} [pageSize] Page size
     * @param {Array<string>} [additionalSources] Additional sources
     * @param {Array<string>} [additionalTargets] Additional targets
     * @param {string} [relationshipTypes] Comma separated list of relationship types
     * @param {boolean} [includeNonSignificant] Significant relationships only
     * @param {string} [semanticTypes] Comma separated list of semantic_types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet(source: string, target: string, page?: number, pageSize?: number, additionalSources?: Array<string>, additionalTargets?: Array<string>, relationshipTypes?: string, includeNonSignificant?: boolean, semanticTypes?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MapPathsOut>>;
    /**
     * Get upstream paths.
     * @summary Get Upstream Endpoint
     * @param {string} node System ID of topic node
     * @param {number} [page] Page number
     * @param {number} [pageSize] Page size
     * @param {number} [nHops] Number of hops
     * @param {Array<string>} [additionalNodes] Additional nodes
     * @param {string} [relationshipTypes] Comma separated list of relationship types
     * @param {boolean} [includeNonSignificant] Significant relationships only
     * @param {string} [semanticTypes] Comma separated list of semantic_types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUpstreamEndpointV1SystemGraphPathsUpstreamGet(node: string, page?: number, pageSize?: number, nHops?: number, additionalNodes?: Array<string>, relationshipTypes?: string, includeNonSignificant?: boolean, semanticTypes?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MapPathsOut>>;
    /**
     * Search topics.
     * @summary Search Topics Endpoint
     * @param {string} q Search query
     * @param {Array<string>} [subgraphTopics] Topic ids in subgraph
     * @param {number} [subgraphDepth] Depth of subgraph
     * @param {SearchType} [searchType] Search type (semantic or keyword)
     * @param {number} [autocut] Autocut for semantic search
     * @param {number} [limit] Limit for semantic search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTopicsEndpointV1SystemGraphSearchGet(q: string, subgraphTopics?: Array<string>, subgraphDepth?: number, searchType?: SearchType, autocut?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TopicOut>>>;
};
/**
 * SystemGraphApi - factory interface
 * @export
 */
export declare const SystemGraphApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get downstream paths.
     * @summary Get Downstream Endpoint
     * @param {SystemGraphApiGetDownstreamEndpointV1SystemGraphPathsDownstreamGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDownstreamEndpointV1SystemGraphPathsDownstreamGet(requestParameters: SystemGraphApiGetDownstreamEndpointV1SystemGraphPathsDownstreamGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MapPathsOut>;
    /**
     * Get relationship path.
     * @summary Get Mediators Endpoint
     * @param {SystemGraphApiGetMediatorsEndpointV1SystemGraphPathsMediatorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMediatorsEndpointV1SystemGraphPathsMediatorsGet(requestParameters: SystemGraphApiGetMediatorsEndpointV1SystemGraphPathsMediatorsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MapPathsOut>;
    /**
     * Get system graph from the database.
     * @summary Get One Degree From Topic
     * @param {SystemGraphApiGetOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet(requestParameters: SystemGraphApiGetOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConceptRelationshipsOut>;
    /**
     * Get relationship path.
     * @summary Get Relationship Endpoint
     * @param {SystemGraphApiGetRelationshipEndpointV1SystemGraphPathsRelationshipGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRelationshipEndpointV1SystemGraphPathsRelationshipGet(requestParameters: SystemGraphApiGetRelationshipEndpointV1SystemGraphPathsRelationshipGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MapPathsOut>;
    /**
     * Fetch semantic graph.
     * @summary Get Semantic Graph Endpoint
     * @param {SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticGraphEndpointV1SystemGraphSemanticGraphGet(requestParameters?: SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<GraphData>;
    /**
     * Fetch single topic semantic graph.
     * @summary Get Semantic Topic Graph Endpoint
     * @param {SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet(requestParameters?: SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<GraphData>;
    /**
     * Get relationship path.
     * @summary Get Shared Sources Endpoint
     * @param {SystemGraphApiGetSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet(requestParameters: SystemGraphApiGetSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MapPathsOut>;
    /**
     * Get relationship path.
     * @summary Get Shared Targets Endpoint
     * @param {SystemGraphApiGetSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet(requestParameters: SystemGraphApiGetSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MapPathsOut>;
    /**
     * Get system graph from the database.
     * @summary Get System Graph Endpoint
     * @param {SystemGraphApiGetSystemGraphEndpointV1SystemGraphSystemGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemGraphEndpointV1SystemGraphSystemGraphGet(requestParameters?: SystemGraphApiGetSystemGraphEndpointV1SystemGraphSystemGraphGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<GraphData>;
    /**
     * Fetch semantic graph.
     * @summary Get Topological Categories Endpoint
     * @param {SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet(requestParameters: SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<TopicCategories>;
    /**
     * Get relationship path.
     * @summary Get Two Hop Mediators Endpoint
     * @param {SystemGraphApiGetTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet(requestParameters: SystemGraphApiGetTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MapPathsOut>;
    /**
     * Get upstream paths.
     * @summary Get Upstream Endpoint
     * @param {SystemGraphApiGetUpstreamEndpointV1SystemGraphPathsUpstreamGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUpstreamEndpointV1SystemGraphPathsUpstreamGet(requestParameters: SystemGraphApiGetUpstreamEndpointV1SystemGraphPathsUpstreamGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MapPathsOut>;
    /**
     * Search topics.
     * @summary Search Topics Endpoint
     * @param {SystemGraphApiSearchTopicsEndpointV1SystemGraphSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTopicsEndpointV1SystemGraphSearchGet(requestParameters: SystemGraphApiSearchTopicsEndpointV1SystemGraphSearchGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<TopicOut>>;
};
/**
 * Request parameters for getDownstreamEndpointV1SystemGraphPathsDownstreamGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetDownstreamEndpointV1SystemGraphPathsDownstreamGetRequest
 */
export interface SystemGraphApiGetDownstreamEndpointV1SystemGraphPathsDownstreamGetRequest {
    /**
     * System ID of topic node
     * @type {string}
     * @memberof SystemGraphApiGetDownstreamEndpointV1SystemGraphPathsDownstreamGet
     */
    readonly node: string;
    /**
     * Page number
     * @type {number}
     * @memberof SystemGraphApiGetDownstreamEndpointV1SystemGraphPathsDownstreamGet
     */
    readonly page?: number;
    /**
     * Page size
     * @type {number}
     * @memberof SystemGraphApiGetDownstreamEndpointV1SystemGraphPathsDownstreamGet
     */
    readonly pageSize?: number;
    /**
     * Number of hops
     * @type {number}
     * @memberof SystemGraphApiGetDownstreamEndpointV1SystemGraphPathsDownstreamGet
     */
    readonly nHops?: number;
    /**
     * Additional nodes
     * @type {Array<string>}
     * @memberof SystemGraphApiGetDownstreamEndpointV1SystemGraphPathsDownstreamGet
     */
    readonly additionalNodes?: Array<string>;
    /**
     * Comma separated list of relationship types
     * @type {string}
     * @memberof SystemGraphApiGetDownstreamEndpointV1SystemGraphPathsDownstreamGet
     */
    readonly relationshipTypes?: string;
    /**
     * Significant relationships only
     * @type {boolean}
     * @memberof SystemGraphApiGetDownstreamEndpointV1SystemGraphPathsDownstreamGet
     */
    readonly includeNonSignificant?: boolean;
    /**
     * Comma separated list of semantic_types
     * @type {string}
     * @memberof SystemGraphApiGetDownstreamEndpointV1SystemGraphPathsDownstreamGet
     */
    readonly semanticTypes?: string;
}
/**
 * Request parameters for getMediatorsEndpointV1SystemGraphPathsMediatorsGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetMediatorsEndpointV1SystemGraphPathsMediatorsGetRequest
 */
export interface SystemGraphApiGetMediatorsEndpointV1SystemGraphPathsMediatorsGetRequest {
    /**
     * System ID of source
     * @type {string}
     * @memberof SystemGraphApiGetMediatorsEndpointV1SystemGraphPathsMediatorsGet
     */
    readonly source: string;
    /**
     * System ID of target
     * @type {string}
     * @memberof SystemGraphApiGetMediatorsEndpointV1SystemGraphPathsMediatorsGet
     */
    readonly target: string;
    /**
     * Page number
     * @type {number}
     * @memberof SystemGraphApiGetMediatorsEndpointV1SystemGraphPathsMediatorsGet
     */
    readonly page?: number;
    /**
     * Page size
     * @type {number}
     * @memberof SystemGraphApiGetMediatorsEndpointV1SystemGraphPathsMediatorsGet
     */
    readonly pageSize?: number;
    /**
     * Additional sources
     * @type {Array<string>}
     * @memberof SystemGraphApiGetMediatorsEndpointV1SystemGraphPathsMediatorsGet
     */
    readonly additionalSources?: Array<string>;
    /**
     * Additional targets
     * @type {Array<string>}
     * @memberof SystemGraphApiGetMediatorsEndpointV1SystemGraphPathsMediatorsGet
     */
    readonly additionalTargets?: Array<string>;
    /**
     * Comma separated list of relationship types
     * @type {string}
     * @memberof SystemGraphApiGetMediatorsEndpointV1SystemGraphPathsMediatorsGet
     */
    readonly relationshipTypes?: string;
    /**
     * Significant relationships only
     * @type {boolean}
     * @memberof SystemGraphApiGetMediatorsEndpointV1SystemGraphPathsMediatorsGet
     */
    readonly includeNonSignificant?: boolean;
    /**
     * Comma separated list of semantic_types
     * @type {string}
     * @memberof SystemGraphApiGetMediatorsEndpointV1SystemGraphPathsMediatorsGet
     */
    readonly semanticTypes?: string;
}
/**
 * Request parameters for getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGetRequest
 */
export interface SystemGraphApiGetOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGetRequest {
    /**
     *
     * @type {string}
     * @memberof SystemGraphApiGetOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet
     */
    readonly topicId: string;
}
/**
 * Request parameters for getRelationshipEndpointV1SystemGraphPathsRelationshipGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetRelationshipEndpointV1SystemGraphPathsRelationshipGetRequest
 */
export interface SystemGraphApiGetRelationshipEndpointV1SystemGraphPathsRelationshipGetRequest {
    /**
     * System ID of source
     * @type {string}
     * @memberof SystemGraphApiGetRelationshipEndpointV1SystemGraphPathsRelationshipGet
     */
    readonly source: string;
    /**
     * System ID of target
     * @type {string}
     * @memberof SystemGraphApiGetRelationshipEndpointV1SystemGraphPathsRelationshipGet
     */
    readonly target: string;
    /**
     * Page number
     * @type {number}
     * @memberof SystemGraphApiGetRelationshipEndpointV1SystemGraphPathsRelationshipGet
     */
    readonly page?: number;
    /**
     * Page size
     * @type {number}
     * @memberof SystemGraphApiGetRelationshipEndpointV1SystemGraphPathsRelationshipGet
     */
    readonly pageSize?: number;
    /**
     * Additional sources
     * @type {Array<string>}
     * @memberof SystemGraphApiGetRelationshipEndpointV1SystemGraphPathsRelationshipGet
     */
    readonly additionalSources?: Array<string>;
    /**
     * Additional targets
     * @type {Array<string>}
     * @memberof SystemGraphApiGetRelationshipEndpointV1SystemGraphPathsRelationshipGet
     */
    readonly additionalTargets?: Array<string>;
    /**
     * Comma separated list of relationship types
     * @type {string}
     * @memberof SystemGraphApiGetRelationshipEndpointV1SystemGraphPathsRelationshipGet
     */
    readonly relationshipTypes?: string;
    /**
     * Significant relationships only
     * @type {boolean}
     * @memberof SystemGraphApiGetRelationshipEndpointV1SystemGraphPathsRelationshipGet
     */
    readonly includeNonSignificant?: boolean;
    /**
     * Comma separated list of semantic_types
     * @type {string}
     * @memberof SystemGraphApiGetRelationshipEndpointV1SystemGraphPathsRelationshipGet
     */
    readonly semanticTypes?: string;
}
/**
 * Request parameters for getSemanticGraphEndpointV1SystemGraphSemanticGraphGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGetRequest
 */
export interface SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGetRequest {
    /**
     * Topic 1
     * @type {string}
     * @memberof SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGet
     */
    readonly topic1?: string;
    /**
     * Topic 2
     * @type {string}
     * @memberof SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGet
     */
    readonly topic2?: string;
    /**
     * Topic 1 ids
     * @type {Array<string>}
     * @memberof SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGet
     */
    readonly ids1?: Array<string>;
    /**
     * Topic 2 ids
     * @type {Array<string>}
     * @memberof SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGet
     */
    readonly ids2?: Array<string>;
}
/**
 * Request parameters for getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGetRequest
 */
export interface SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGetRequest {
    /**
     * Topic name
     * @type {string}
     * @memberof SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet
     */
    readonly topicName?: string;
    /**
     * Topic ids
     * @type {Array<string>}
     * @memberof SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet
     */
    readonly topicIds?: Array<string>;
}
/**
 * Request parameters for getSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGetRequest
 */
export interface SystemGraphApiGetSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGetRequest {
    /**
     * System ID of source
     * @type {string}
     * @memberof SystemGraphApiGetSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet
     */
    readonly source: string;
    /**
     * System ID of target
     * @type {string}
     * @memberof SystemGraphApiGetSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet
     */
    readonly target: string;
    /**
     * Page number
     * @type {number}
     * @memberof SystemGraphApiGetSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet
     */
    readonly page?: number;
    /**
     * Page size
     * @type {number}
     * @memberof SystemGraphApiGetSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet
     */
    readonly pageSize?: number;
    /**
     * Additional sources
     * @type {Array<string>}
     * @memberof SystemGraphApiGetSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet
     */
    readonly additionalSources?: Array<string>;
    /**
     * Additional targets
     * @type {Array<string>}
     * @memberof SystemGraphApiGetSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet
     */
    readonly additionalTargets?: Array<string>;
    /**
     * Comma separated list of relationship types
     * @type {string}
     * @memberof SystemGraphApiGetSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet
     */
    readonly relationshipTypes?: string;
    /**
     * Significant relationships only
     * @type {boolean}
     * @memberof SystemGraphApiGetSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet
     */
    readonly includeNonSignificant?: boolean;
    /**
     * Comma separated list of semantic_types
     * @type {string}
     * @memberof SystemGraphApiGetSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet
     */
    readonly semanticTypes?: string;
}
/**
 * Request parameters for getSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGetRequest
 */
export interface SystemGraphApiGetSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGetRequest {
    /**
     * System ID of source
     * @type {string}
     * @memberof SystemGraphApiGetSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet
     */
    readonly source: string;
    /**
     * System ID of target
     * @type {string}
     * @memberof SystemGraphApiGetSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet
     */
    readonly target: string;
    /**
     * Page number
     * @type {number}
     * @memberof SystemGraphApiGetSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet
     */
    readonly page?: number;
    /**
     * Page size
     * @type {number}
     * @memberof SystemGraphApiGetSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet
     */
    readonly pageSize?: number;
    /**
     * Additional sources
     * @type {Array<string>}
     * @memberof SystemGraphApiGetSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet
     */
    readonly additionalSources?: Array<string>;
    /**
     * Additional targets
     * @type {Array<string>}
     * @memberof SystemGraphApiGetSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet
     */
    readonly additionalTargets?: Array<string>;
    /**
     * Comma separated list of relationship types
     * @type {string}
     * @memberof SystemGraphApiGetSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet
     */
    readonly relationshipTypes?: string;
    /**
     * Significant relationships only
     * @type {boolean}
     * @memberof SystemGraphApiGetSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet
     */
    readonly includeNonSignificant?: boolean;
    /**
     * Comma separated list of semantic_types
     * @type {string}
     * @memberof SystemGraphApiGetSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet
     */
    readonly semanticTypes?: string;
}
/**
 * Request parameters for getSystemGraphEndpointV1SystemGraphSystemGraphGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetSystemGraphEndpointV1SystemGraphSystemGraphGetRequest
 */
export interface SystemGraphApiGetSystemGraphEndpointV1SystemGraphSystemGraphGetRequest {
    /**
     * Number of relationships to return.
     * @type {number}
     * @memberof SystemGraphApiGetSystemGraphEndpointV1SystemGraphSystemGraphGet
     */
    readonly numRelationships?: number;
}
/**
 * Request parameters for getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGetRequest
 */
export interface SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGetRequest {
    /**
     * Topic 1
     * @type {string}
     * @memberof SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet
     */
    readonly topic1: string;
    /**
     * Topic 1 ids
     * @type {Array<string>}
     * @memberof SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet
     */
    readonly ids1: Array<string>;
    /**
     * Topic 2
     * @type {string}
     * @memberof SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet
     */
    readonly topic2?: string;
    /**
     * Topic 2 ids
     * @type {Array<string>}
     * @memberof SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet
     */
    readonly ids2?: Array<string>;
    /**
     * Page size
     * @type {number}
     * @memberof SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet
     */
    readonly pageSize?: number;
    /**
     * Offset
     * @type {number}
     * @memberof SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet
     */
    readonly offset?: number;
}
/**
 * Request parameters for getTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGetRequest
 */
export interface SystemGraphApiGetTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGetRequest {
    /**
     * System ID of source
     * @type {string}
     * @memberof SystemGraphApiGetTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet
     */
    readonly source: string;
    /**
     * System ID of target
     * @type {string}
     * @memberof SystemGraphApiGetTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet
     */
    readonly target: string;
    /**
     * Page number
     * @type {number}
     * @memberof SystemGraphApiGetTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet
     */
    readonly page?: number;
    /**
     * Page size
     * @type {number}
     * @memberof SystemGraphApiGetTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet
     */
    readonly pageSize?: number;
    /**
     * Additional sources
     * @type {Array<string>}
     * @memberof SystemGraphApiGetTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet
     */
    readonly additionalSources?: Array<string>;
    /**
     * Additional targets
     * @type {Array<string>}
     * @memberof SystemGraphApiGetTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet
     */
    readonly additionalTargets?: Array<string>;
    /**
     * Comma separated list of relationship types
     * @type {string}
     * @memberof SystemGraphApiGetTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet
     */
    readonly relationshipTypes?: string;
    /**
     * Significant relationships only
     * @type {boolean}
     * @memberof SystemGraphApiGetTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet
     */
    readonly includeNonSignificant?: boolean;
    /**
     * Comma separated list of semantic_types
     * @type {string}
     * @memberof SystemGraphApiGetTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet
     */
    readonly semanticTypes?: string;
}
/**
 * Request parameters for getUpstreamEndpointV1SystemGraphPathsUpstreamGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetUpstreamEndpointV1SystemGraphPathsUpstreamGetRequest
 */
export interface SystemGraphApiGetUpstreamEndpointV1SystemGraphPathsUpstreamGetRequest {
    /**
     * System ID of topic node
     * @type {string}
     * @memberof SystemGraphApiGetUpstreamEndpointV1SystemGraphPathsUpstreamGet
     */
    readonly node: string;
    /**
     * Page number
     * @type {number}
     * @memberof SystemGraphApiGetUpstreamEndpointV1SystemGraphPathsUpstreamGet
     */
    readonly page?: number;
    /**
     * Page size
     * @type {number}
     * @memberof SystemGraphApiGetUpstreamEndpointV1SystemGraphPathsUpstreamGet
     */
    readonly pageSize?: number;
    /**
     * Number of hops
     * @type {number}
     * @memberof SystemGraphApiGetUpstreamEndpointV1SystemGraphPathsUpstreamGet
     */
    readonly nHops?: number;
    /**
     * Additional nodes
     * @type {Array<string>}
     * @memberof SystemGraphApiGetUpstreamEndpointV1SystemGraphPathsUpstreamGet
     */
    readonly additionalNodes?: Array<string>;
    /**
     * Comma separated list of relationship types
     * @type {string}
     * @memberof SystemGraphApiGetUpstreamEndpointV1SystemGraphPathsUpstreamGet
     */
    readonly relationshipTypes?: string;
    /**
     * Significant relationships only
     * @type {boolean}
     * @memberof SystemGraphApiGetUpstreamEndpointV1SystemGraphPathsUpstreamGet
     */
    readonly includeNonSignificant?: boolean;
    /**
     * Comma separated list of semantic_types
     * @type {string}
     * @memberof SystemGraphApiGetUpstreamEndpointV1SystemGraphPathsUpstreamGet
     */
    readonly semanticTypes?: string;
}
/**
 * Request parameters for searchTopicsEndpointV1SystemGraphSearchGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiSearchTopicsEndpointV1SystemGraphSearchGetRequest
 */
export interface SystemGraphApiSearchTopicsEndpointV1SystemGraphSearchGetRequest {
    /**
     * Search query
     * @type {string}
     * @memberof SystemGraphApiSearchTopicsEndpointV1SystemGraphSearchGet
     */
    readonly q: string;
    /**
     * Topic ids in subgraph
     * @type {Array<string>}
     * @memberof SystemGraphApiSearchTopicsEndpointV1SystemGraphSearchGet
     */
    readonly subgraphTopics?: Array<string>;
    /**
     * Depth of subgraph
     * @type {number}
     * @memberof SystemGraphApiSearchTopicsEndpointV1SystemGraphSearchGet
     */
    readonly subgraphDepth?: number;
    /**
     * Search type (semantic or keyword)
     * @type {SearchType}
     * @memberof SystemGraphApiSearchTopicsEndpointV1SystemGraphSearchGet
     */
    readonly searchType?: SearchType;
    /**
     * Autocut for semantic search
     * @type {number}
     * @memberof SystemGraphApiSearchTopicsEndpointV1SystemGraphSearchGet
     */
    readonly autocut?: number;
    /**
     * Limit for semantic search
     * @type {number}
     * @memberof SystemGraphApiSearchTopicsEndpointV1SystemGraphSearchGet
     */
    readonly limit?: number;
}
/**
 * SystemGraphApi - object-oriented interface
 * @export
 * @class SystemGraphApi
 * @extends {BaseAPI}
 */
export declare class SystemGraphApi extends BaseAPI {
    /**
     * Get downstream paths.
     * @summary Get Downstream Endpoint
     * @param {SystemGraphApiGetDownstreamEndpointV1SystemGraphPathsDownstreamGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getDownstreamEndpointV1SystemGraphPathsDownstreamGet(requestParameters: SystemGraphApiGetDownstreamEndpointV1SystemGraphPathsDownstreamGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MapPathsOut, any>>;
    /**
     * Get relationship path.
     * @summary Get Mediators Endpoint
     * @param {SystemGraphApiGetMediatorsEndpointV1SystemGraphPathsMediatorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getMediatorsEndpointV1SystemGraphPathsMediatorsGet(requestParameters: SystemGraphApiGetMediatorsEndpointV1SystemGraphPathsMediatorsGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MapPathsOut, any>>;
    /**
     * Get system graph from the database.
     * @summary Get One Degree From Topic
     * @param {SystemGraphApiGetOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet(requestParameters: SystemGraphApiGetOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ConceptRelationshipsOut, any>>;
    /**
     * Get relationship path.
     * @summary Get Relationship Endpoint
     * @param {SystemGraphApiGetRelationshipEndpointV1SystemGraphPathsRelationshipGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getRelationshipEndpointV1SystemGraphPathsRelationshipGet(requestParameters: SystemGraphApiGetRelationshipEndpointV1SystemGraphPathsRelationshipGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MapPathsOut, any>>;
    /**
     * Fetch semantic graph.
     * @summary Get Semantic Graph Endpoint
     * @param {SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getSemanticGraphEndpointV1SystemGraphSemanticGraphGet(requestParameters?: SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GraphData, any>>;
    /**
     * Fetch single topic semantic graph.
     * @summary Get Semantic Topic Graph Endpoint
     * @param {SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet(requestParameters?: SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GraphData, any>>;
    /**
     * Get relationship path.
     * @summary Get Shared Sources Endpoint
     * @param {SystemGraphApiGetSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet(requestParameters: SystemGraphApiGetSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MapPathsOut, any>>;
    /**
     * Get relationship path.
     * @summary Get Shared Targets Endpoint
     * @param {SystemGraphApiGetSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet(requestParameters: SystemGraphApiGetSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MapPathsOut, any>>;
    /**
     * Get system graph from the database.
     * @summary Get System Graph Endpoint
     * @param {SystemGraphApiGetSystemGraphEndpointV1SystemGraphSystemGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getSystemGraphEndpointV1SystemGraphSystemGraphGet(requestParameters?: SystemGraphApiGetSystemGraphEndpointV1SystemGraphSystemGraphGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GraphData, any>>;
    /**
     * Fetch semantic graph.
     * @summary Get Topological Categories Endpoint
     * @param {SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet(requestParameters: SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TopicCategories, any>>;
    /**
     * Get relationship path.
     * @summary Get Two Hop Mediators Endpoint
     * @param {SystemGraphApiGetTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet(requestParameters: SystemGraphApiGetTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MapPathsOut, any>>;
    /**
     * Get upstream paths.
     * @summary Get Upstream Endpoint
     * @param {SystemGraphApiGetUpstreamEndpointV1SystemGraphPathsUpstreamGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getUpstreamEndpointV1SystemGraphPathsUpstreamGet(requestParameters: SystemGraphApiGetUpstreamEndpointV1SystemGraphPathsUpstreamGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MapPathsOut, any>>;
    /**
     * Search topics.
     * @summary Search Topics Endpoint
     * @param {SystemGraphApiSearchTopicsEndpointV1SystemGraphSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    searchTopicsEndpointV1SystemGraphSearchGet(requestParameters: SystemGraphApiSearchTopicsEndpointV1SystemGraphSearchGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TopicOut[], any>>;
}
/**
 * TopicApi - axios parameter creator
 * @export
 */
export declare const TopicApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get topic data.
     * @summary Get Information For A Topic.
     * @param {Array<string>} [topicIds] List of topic IDs to fetch information from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInformationForATopicV1TopicInfoGet: (topicIds?: Array<string>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get information for variables related to a topic.
     * @summary Get Variables Related To A Topic.
     * @param {string} topicId
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVariablesRelatedToATopicV1TopicVariablesGet: (topicId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TopicApi - functional programming interface
 * @export
 */
export declare const TopicApiFp: (configuration?: Configuration) => {
    /**
     * Get topic data.
     * @summary Get Information For A Topic.
     * @param {Array<string>} [topicIds] List of topic IDs to fetch information from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInformationForATopicV1TopicInfoGet(topicIds?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TopicRDBOut>>>;
    /**
     * Get information for variables related to a topic.
     * @summary Get Variables Related To A Topic.
     * @param {string} topicId
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVariablesRelatedToATopicV1TopicVariablesGet(topicId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicVariablesOut>>;
};
/**
 * TopicApi - factory interface
 * @export
 */
export declare const TopicApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get topic data.
     * @summary Get Information For A Topic.
     * @param {TopicApiGetInformationForATopicV1TopicInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInformationForATopicV1TopicInfoGet(requestParameters?: TopicApiGetInformationForATopicV1TopicInfoGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<TopicRDBOut>>;
    /**
     * Get information for variables related to a topic.
     * @summary Get Variables Related To A Topic.
     * @param {TopicApiGetVariablesRelatedToATopicV1TopicVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVariablesRelatedToATopicV1TopicVariablesGet(requestParameters: TopicApiGetVariablesRelatedToATopicV1TopicVariablesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<TopicVariablesOut>;
};
/**
 * Request parameters for getInformationForATopicV1TopicInfoGet operation in TopicApi.
 * @export
 * @interface TopicApiGetInformationForATopicV1TopicInfoGetRequest
 */
export interface TopicApiGetInformationForATopicV1TopicInfoGetRequest {
    /**
     * List of topic IDs to fetch information from.
     * @type {Array<string>}
     * @memberof TopicApiGetInformationForATopicV1TopicInfoGet
     */
    readonly topicIds?: Array<string>;
}
/**
 * Request parameters for getVariablesRelatedToATopicV1TopicVariablesGet operation in TopicApi.
 * @export
 * @interface TopicApiGetVariablesRelatedToATopicV1TopicVariablesGetRequest
 */
export interface TopicApiGetVariablesRelatedToATopicV1TopicVariablesGetRequest {
    /**
     *
     * @type {string}
     * @memberof TopicApiGetVariablesRelatedToATopicV1TopicVariablesGet
     */
    readonly topicId: string;
    /**
     *
     * @type {number}
     * @memberof TopicApiGetVariablesRelatedToATopicV1TopicVariablesGet
     */
    readonly limit?: number;
    /**
     *
     * @type {number}
     * @memberof TopicApiGetVariablesRelatedToATopicV1TopicVariablesGet
     */
    readonly offset?: number;
}
/**
 * TopicApi - object-oriented interface
 * @export
 * @class TopicApi
 * @extends {BaseAPI}
 */
export declare class TopicApi extends BaseAPI {
    /**
     * Get topic data.
     * @summary Get Information For A Topic.
     * @param {TopicApiGetInformationForATopicV1TopicInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    getInformationForATopicV1TopicInfoGet(requestParameters?: TopicApiGetInformationForATopicV1TopicInfoGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TopicRDBOut[], any>>;
    /**
     * Get information for variables related to a topic.
     * @summary Get Variables Related To A Topic.
     * @param {TopicApiGetVariablesRelatedToATopicV1TopicVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    getVariablesRelatedToATopicV1TopicVariablesGet(requestParameters: TopicApiGetVariablesRelatedToATopicV1TopicVariablesGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TopicVariablesOut, any>>;
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new user.
     * @summary Create A User By Cognito Id.
     * @param {string} userId
     * @param {UpdateProfileIn} updateProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAUserByCognitoIdV1UsersPost: (userId: string, updateProfileIn: UpdateProfileIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new user.
     * @summary Create A User From Credentials.
     * @param {UserProfileIn} userProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAUserFromCredentialsV1UserPost: (userProfileIn: UserProfileIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatedUserV1UserGet: (includeAvatar?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {string} userId
     * @param {boolean} [includeAvatar]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserV1UsersUserIdGet: (userId: string, includeAvatar?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List public profiles.
     * @summary Get Users
     * @param {string} [teamId]
     * @param {string} [email] Email address
     * @param {boolean} [includeAvatar] Include avatar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersV1UsersGet: (teamId?: string, email?: string, includeAvatar?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new user.
     * @summary Update A User By Id.
     * @param {string} userId
     * @param {UpdateProfileIn} updateProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAUserByIdV1UsersUserIdPatch: (userId: string, updateProfileIn: UpdateProfileIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {UserProfileIn} userProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuthenticatedUserProfileV1UserPut: (userProfileIn: UserProfileIn, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     * Create a new user.
     * @summary Create A User By Cognito Id.
     * @param {string} userId
     * @param {UpdateProfileIn} updateProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAUserByCognitoIdV1UsersPost(userId: string, updateProfileIn: UpdateProfileIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>>;
    /**
     * Create a new user.
     * @summary Create A User From Credentials.
     * @param {UserProfileIn} userProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAUserFromCredentialsV1UserPost(userProfileIn: UserProfileIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>>;
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatedUserV1UserGet(includeAvatar?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>>;
    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {string} userId
     * @param {boolean} [includeAvatar]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserV1UsersUserIdGet(userId: string, includeAvatar?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPublicProfileOut>>;
    /**
     * List public profiles.
     * @summary Get Users
     * @param {string} [teamId]
     * @param {string} [email] Email address
     * @param {boolean} [includeAvatar] Include avatar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersV1UsersGet(teamId?: string, email?: string, includeAvatar?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserPublicProfileOut>>>;
    /**
     * Create a new user.
     * @summary Update A User By Id.
     * @param {string} userId
     * @param {UpdateProfileIn} updateProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAUserByIdV1UsersUserIdPatch(userId: string, updateProfileIn: UpdateProfileIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>>;
    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {UserProfileIn} userProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuthenticatedUserProfileV1UserPut(userProfileIn: UserProfileIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new user.
     * @summary Create A User By Cognito Id.
     * @param {UsersApiCreateAUserByCognitoIdV1UsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAUserByCognitoIdV1UsersPost(requestParameters: UsersApiCreateAUserByCognitoIdV1UsersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserPrivateProfileOut>;
    /**
     * Create a new user.
     * @summary Create A User From Credentials.
     * @param {UsersApiCreateAUserFromCredentialsV1UserPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAUserFromCredentialsV1UserPost(requestParameters: UsersApiCreateAUserFromCredentialsV1UserPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserPrivateProfileOut>;
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {UsersApiGetAuthenticatedUserV1UserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatedUserV1UserGet(requestParameters?: UsersApiGetAuthenticatedUserV1UserGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserPrivateProfileOut>;
    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {UsersApiGetUserV1UsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserV1UsersUserIdGet(requestParameters: UsersApiGetUserV1UsersUserIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserPublicProfileOut>;
    /**
     * List public profiles.
     * @summary Get Users
     * @param {UsersApiGetUsersV1UsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersV1UsersGet(requestParameters?: UsersApiGetUsersV1UsersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserPublicProfileOut>>;
    /**
     * Create a new user.
     * @summary Update A User By Id.
     * @param {UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAUserByIdV1UsersUserIdPatch(requestParameters: UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserPrivateProfileOut>;
    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuthenticatedUserProfileV1UserPut(requestParameters: UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserPrivateProfileOut>;
};
/**
 * Request parameters for createAUserByCognitoIdV1UsersPost operation in UsersApi.
 * @export
 * @interface UsersApiCreateAUserByCognitoIdV1UsersPostRequest
 */
export interface UsersApiCreateAUserByCognitoIdV1UsersPostRequest {
    /**
     *
     * @type {string}
     * @memberof UsersApiCreateAUserByCognitoIdV1UsersPost
     */
    readonly userId: string;
    /**
     *
     * @type {UpdateProfileIn}
     * @memberof UsersApiCreateAUserByCognitoIdV1UsersPost
     */
    readonly updateProfileIn: UpdateProfileIn;
}
/**
 * Request parameters for createAUserFromCredentialsV1UserPost operation in UsersApi.
 * @export
 * @interface UsersApiCreateAUserFromCredentialsV1UserPostRequest
 */
export interface UsersApiCreateAUserFromCredentialsV1UserPostRequest {
    /**
     *
     * @type {UserProfileIn}
     * @memberof UsersApiCreateAUserFromCredentialsV1UserPost
     */
    readonly userProfileIn: UserProfileIn;
}
/**
 * Request parameters for getAuthenticatedUserV1UserGet operation in UsersApi.
 * @export
 * @interface UsersApiGetAuthenticatedUserV1UserGetRequest
 */
export interface UsersApiGetAuthenticatedUserV1UserGetRequest {
    /**
     * Include the user\&#39;s avatar.
     * @type {boolean}
     * @memberof UsersApiGetAuthenticatedUserV1UserGet
     */
    readonly includeAvatar?: boolean;
}
/**
 * Request parameters for getUserV1UsersUserIdGet operation in UsersApi.
 * @export
 * @interface UsersApiGetUserV1UsersUserIdGetRequest
 */
export interface UsersApiGetUserV1UsersUserIdGetRequest {
    /**
     *
     * @type {string}
     * @memberof UsersApiGetUserV1UsersUserIdGet
     */
    readonly userId: string;
    /**
     *
     * @type {boolean}
     * @memberof UsersApiGetUserV1UsersUserIdGet
     */
    readonly includeAvatar?: boolean;
}
/**
 * Request parameters for getUsersV1UsersGet operation in UsersApi.
 * @export
 * @interface UsersApiGetUsersV1UsersGetRequest
 */
export interface UsersApiGetUsersV1UsersGetRequest {
    /**
     *
     * @type {string}
     * @memberof UsersApiGetUsersV1UsersGet
     */
    readonly teamId?: string;
    /**
     * Email address
     * @type {string}
     * @memberof UsersApiGetUsersV1UsersGet
     */
    readonly email?: string;
    /**
     * Include avatar
     * @type {boolean}
     * @memberof UsersApiGetUsersV1UsersGet
     */
    readonly includeAvatar?: boolean;
}
/**
 * Request parameters for updateAUserByIdV1UsersUserIdPatch operation in UsersApi.
 * @export
 * @interface UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest
 */
export interface UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest {
    /**
     *
     * @type {string}
     * @memberof UsersApiUpdateAUserByIdV1UsersUserIdPatch
     */
    readonly userId: string;
    /**
     *
     * @type {UpdateProfileIn}
     * @memberof UsersApiUpdateAUserByIdV1UsersUserIdPatch
     */
    readonly updateProfileIn: UpdateProfileIn;
}
/**
 * Request parameters for updateAuthenticatedUserProfileV1UserPut operation in UsersApi.
 * @export
 * @interface UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest
 */
export interface UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest {
    /**
     *
     * @type {UserProfileIn}
     * @memberof UsersApiUpdateAuthenticatedUserProfileV1UserPut
     */
    readonly userProfileIn: UserProfileIn;
}
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     * Create a new user.
     * @summary Create A User By Cognito Id.
     * @param {UsersApiCreateAUserByCognitoIdV1UsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createAUserByCognitoIdV1UsersPost(requestParameters: UsersApiCreateAUserByCognitoIdV1UsersPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserPrivateProfileOut, any>>;
    /**
     * Create a new user.
     * @summary Create A User From Credentials.
     * @param {UsersApiCreateAUserFromCredentialsV1UserPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createAUserFromCredentialsV1UserPost(requestParameters: UsersApiCreateAUserFromCredentialsV1UserPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserPrivateProfileOut, any>>;
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {UsersApiGetAuthenticatedUserV1UserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getAuthenticatedUserV1UserGet(requestParameters?: UsersApiGetAuthenticatedUserV1UserGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserPrivateProfileOut, any>>;
    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {UsersApiGetUserV1UsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserV1UsersUserIdGet(requestParameters: UsersApiGetUserV1UsersUserIdGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserPublicProfileOut, any>>;
    /**
     * List public profiles.
     * @summary Get Users
     * @param {UsersApiGetUsersV1UsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUsersV1UsersGet(requestParameters?: UsersApiGetUsersV1UsersGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserPublicProfileOut[], any>>;
    /**
     * Create a new user.
     * @summary Update A User By Id.
     * @param {UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateAUserByIdV1UsersUserIdPatch(requestParameters: UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserPrivateProfileOut, any>>;
    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateAuthenticatedUserProfileV1UserPut(requestParameters: UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserPrivateProfileOut, any>>;
}
/**
 * VariableApi - axios parameter creator
 * @export
 */
export declare const VariableApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get information for variable findings.
     * @summary Get Findings Of A Variable.
     * @param {string} variableId
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFindingsOfAVariableV1VariableVariableIdFindingsGet: (variableId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * VariableApi - functional programming interface
 * @export
 */
export declare const VariableApiFp: (configuration?: Configuration) => {
    /**
     * Get information for variable findings.
     * @summary Get Findings Of A Variable.
     * @param {string} variableId
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFindingsOfAVariableV1VariableVariableIdFindingsGet(variableId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyFindingsOut>>;
};
/**
 * VariableApi - factory interface
 * @export
 */
export declare const VariableApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get information for variable findings.
     * @summary Get Findings Of A Variable.
     * @param {VariableApiGetFindingsOfAVariableV1VariableVariableIdFindingsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFindingsOfAVariableV1VariableVariableIdFindingsGet(requestParameters: VariableApiGetFindingsOfAVariableV1VariableVariableIdFindingsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<StudyFindingsOut>;
};
/**
 * Request parameters for getFindingsOfAVariableV1VariableVariableIdFindingsGet operation in VariableApi.
 * @export
 * @interface VariableApiGetFindingsOfAVariableV1VariableVariableIdFindingsGetRequest
 */
export interface VariableApiGetFindingsOfAVariableV1VariableVariableIdFindingsGetRequest {
    /**
     *
     * @type {string}
     * @memberof VariableApiGetFindingsOfAVariableV1VariableVariableIdFindingsGet
     */
    readonly variableId: string;
    /**
     *
     * @type {number}
     * @memberof VariableApiGetFindingsOfAVariableV1VariableVariableIdFindingsGet
     */
    readonly limit?: number;
    /**
     *
     * @type {number}
     * @memberof VariableApiGetFindingsOfAVariableV1VariableVariableIdFindingsGet
     */
    readonly offset?: number;
}
/**
 * VariableApi - object-oriented interface
 * @export
 * @class VariableApi
 * @extends {BaseAPI}
 */
export declare class VariableApi extends BaseAPI {
    /**
     * Get information for variable findings.
     * @summary Get Findings Of A Variable.
     * @param {VariableApiGetFindingsOfAVariableV1VariableVariableIdFindingsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariableApi
     */
    getFindingsOfAVariableV1VariableVariableIdFindingsGet(requestParameters: VariableApiGetFindingsOfAVariableV1VariableVariableIdFindingsGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StudyFindingsOut, any>>;
}
