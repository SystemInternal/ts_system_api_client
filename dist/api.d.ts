/**
 * System REST API
 * This is a REST API through which clients can interact with System - an **open**, **collaborative**, and **ever-growing knowledge base** of all the world\'s systems.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * Add subscription seat input.
 * @export
 * @interface AddSubscriptionSeatIn
 */
export interface AddSubscriptionSeatIn {
    /**
     *
     * @type {Array<string>}
     * @memberof AddSubscriptionSeatIn
     */
    'emails': Array<string>;
}
/**
 * List of algorithms model.
 * @export
 * @interface AlgorithmListResult
 */
export interface AlgorithmListResult {
    /**
     *
     * @type {Array<AlgorithmOut>}
     * @memberof AlgorithmListResult
     */
    'items': Array<AlgorithmOut>;
}
/**
 * Algorithm output model.
 * @export
 * @interface AlgorithmOut
 */
export interface AlgorithmOut {
    /**
     *
     * @type {string}
     * @memberof AlgorithmOut
     */
    'algorithm_id': string;
    /**
     *
     * @type {string}
     * @memberof AlgorithmOut
     */
    'display_name': string;
    /**
     *
     * @type {string}
     * @memberof AlgorithmOut
     */
    'description': string;
}
/**
 * Interface for Groundings for a specific namespace.
 * @export
 * @interface AppSchemaGroundingsGrounding
 */
export interface AppSchemaGroundingsGrounding {
    /**
     *
     * @type {string}
     * @memberof AppSchemaGroundingsGrounding
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof AppSchemaGroundingsGrounding
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof AppSchemaGroundingsGrounding
     */
    'namespace': string;
    /**
     *
     * @type {string}
     * @memberof AppSchemaGroundingsGrounding
     */
    'namespace_id_label'?: string;
    /**
     *
     * @type {string}
     * @memberof AppSchemaGroundingsGrounding
     */
    'definition'?: string;
}
/**
 * Credentials for an integration without password.
 * @export
 * @interface BigQueryCredentials
 */
export interface BigQueryCredentials {
    /**
     * Integration location.
     * @type {string}
     * @memberof BigQueryCredentials
     */
    'location': string;
    /**
     * Integration project.
     * @type {string}
     * @memberof BigQueryCredentials
     */
    'project': string;
}
/**
 * Input credentials for a BigQuery integration.
 * @export
 * @interface BigQueryCredentialsIn
 */
export interface BigQueryCredentialsIn {
    /**
     * Integration location.
     * @type {string}
     * @memberof BigQueryCredentialsIn
     */
    'location': string;
    /**
     * Integration project.
     * @type {string}
     * @memberof BigQueryCredentialsIn
     */
    'project': string;
    /**
     * Integration credentials.
     * @type {string}
     * @memberof BigQueryCredentialsIn
     */
    'raw_credentials': string;
}
/**
 * Cluster out model.
 * @export
 * @interface ClusterOut
 */
export interface ClusterOut {
    /**
     *
     * @type {Array<ScoredCluster>}
     * @memberof ClusterOut
     */
    'clusters': Array<ScoredCluster>;
    /**
     *
     * @type {Array<ClusteredRelationship>}
     * @memberof ClusterOut
     */
    'relationships': Array<ClusteredRelationship>;
    /**
     *
     * @type {string}
     * @memberof ClusterOut
     */
    'cache_key'?: string;
}
/**
 * Cluster out status model.
 * @export
 * @interface ClusterOutStatus
 */
export interface ClusterOutStatus {
    /**
     *
     * @type {FunctionStatus}
     * @memberof ClusterOutStatus
     */
    'status': FunctionStatus;
    /**
     *
     * @type {SynthesisResponse}
     * @memberof ClusterOutStatus
     */
    'cluster_out'?: SynthesisResponse;
}
/**
 * Clustered evidence metadata.  # noqa: E501
 * @export
 * @interface ClusteredEvidenceMetadata
 */
export interface ClusteredEvidenceMetadata {
    /**
     *
     * @type {number}
     * @memberof ClusteredEvidenceMetadata
     */
    'citation_count_min'?: number;
    /**
     *
     * @type {number}
     * @memberof ClusteredEvidenceMetadata
     */
    'citation_count_max'?: number;
    /**
     *
     * @type {string}
     * @memberof ClusteredEvidenceMetadata
     */
    'publish_date_earliest'?: string;
    /**
     *
     * @type {string}
     * @memberof ClusteredEvidenceMetadata
     */
    'publish_date_latest'?: string;
}
/**
 * Schema for clustered relationship response.
 * @export
 * @interface ClusteredRelationship
 */
export interface ClusteredRelationship {
    /**
     *
     * @type {Array<GroundedVariable>}
     * @memberof ClusteredRelationship
     */
    'variables': Array<GroundedVariable>;
    /**
     *
     * @type {Array<string>}
     * @memberof ClusteredRelationship
     */
    'cluster_ids': Array<string>;
    /**
     *
     * @type {Array<FindingMeta>}
     * @memberof ClusteredRelationship
     */
    'finding_metas': Array<FindingMeta>;
    /**
     *
     * @type {Array<StudyFindings>}
     * @memberof ClusteredRelationship
     */
    'findings'?: Array<StudyFindings>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare enum ClusteringMethods {
    Agglomerative = "agglomerative",
    Dbscan = "dbscan",
    Paraphrase = "paraphrase"
}
/**
 * Concept resource links.
 * @export
 * @interface ConceptLinks
 */
export interface ConceptLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof ConceptLinks
     */
    'self': string;
}
/**
 * Concept output model.
 * @export
 * @interface ConceptOut
 */
export interface ConceptOut {
    /**
     *
     * @type {string}
     * @memberof ConceptOut
     */
    'id': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof ConceptOut
     */
    'created_by'?: string;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof ConceptOut
     */
    'created_at'?: string;
    /**
     * User who made the last edit.
     * @type {string}
     * @memberof ConceptOut
     */
    'last_updated_by'?: string;
    /**
     * Time of last edit.
     * @type {string}
     * @memberof ConceptOut
     */
    'last_updated_at'?: string;
    /**
     *
     * @type {Array<ResourceAction>}
     * @memberof ConceptOut
     */
    '_permissions'?: Array<ResourceAction>;
    /**
     * Flags on this resource.
     * @type {Array<ResourceFlag>}
     * @memberof ConceptOut
     */
    'flags'?: Array<ResourceFlag>;
    /**
     * Tags to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ConceptOut
     */
    'tags'?: Array<string>;
    /**
     * Search terms to attach to resource (max 64).
     * @type {Array<string>}
     * @memberof ConceptOut
     */
    'search_terms'?: Array<string>;
    /**
     * A hidden object is not meant to be shown on the frontend.
     * @type {boolean}
     * @memberof ConceptOut
     */
    'is_hidden'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ConceptOut
     */
    'is_private'?: boolean;
    /**
     * Notes whether the resource is private or not
     * @type {boolean}
     * @memberof ConceptOut
     * @deprecated
     */
    '_private'?: boolean;
    /**
     * The Concept\'s corresponding wikidata id.
     * @type {string}
     * @memberof ConceptOut
     */
    'wikidata_id': string;
    /**
     * Preferred name if different from existing.
     * @type {string}
     * @memberof ConceptOut
     */
    'preferred_name'?: string;
    /**
     * The Concept\'s name.
     * @type {string}
     * @memberof ConceptOut
     */
    'name'?: string;
    /**
     * The Concept\'s aliases.
     * @type {Array<string>}
     * @memberof ConceptOut
     */
    'aliases'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ConceptOut
     */
    'description'?: string;
    /**
     * Collection of links to related resources.
     * @type {ConceptLinks}
     * @memberof ConceptOut
     */
    '_links'?: ConceptLinks;
}
/**
 * Concept pagination out.
 * @export
 * @interface ConceptPaginationOut
 */
export interface ConceptPaginationOut {
    /**
     * Collection of links to related resources.
     * @type {FirstLastPaginationLinks}
     * @memberof ConceptPaginationOut
     */
    '_links'?: FirstLastPaginationLinks;
    /**
     * List of results.
     * @type {Array<ConceptOut>}
     * @memberof ConceptPaginationOut
     */
    'items'?: Array<ConceptOut>;
    /**
     * List of ids.
     * @type {Array<string>}
     * @memberof ConceptPaginationOut
     */
    'ids'?: Array<string>;
    /**
     * Total number of results available.
     * @type {number}
     * @memberof ConceptPaginationOut
     */
    'total'?: number;
    /**
     * Valid \'order_by\' values that can be applied to current pagination set.
     * @type {Array<string>}
     * @memberof ConceptPaginationOut
     */
    '_sorts'?: Array<string>;
}
/**
 * Node at end of concept relationship.
 * @export
 * @interface ConceptRelationshipNode
 */
export interface ConceptRelationshipNode {
    /**
     *
     * @type {string}
     * @memberof ConceptRelationshipNode
     */
    'system_id': string;
    /**
     *
     * @type {string}
     * @memberof ConceptRelationshipNode
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof ConceptRelationshipNode
     */
    'wikidata_id': string;
    /**
     *
     * @type {Array<string>}
     * @memberof ConceptRelationshipNode
     */
    'supporting_association_ids': Array<string>;
}
/**
 * Concept relationships model.
 * @export
 * @interface ConceptRelationshipsOut
 */
export interface ConceptRelationshipsOut {
    /**
     *
     * @type {ConceptOut}
     * @memberof ConceptRelationshipsOut
     */
    'concept': ConceptOut;
    /**
     *
     * @type {Array<ConceptRelationshipNode>}
     * @memberof ConceptRelationshipsOut
     */
    'upstream': Array<ConceptRelationshipNode>;
    /**
     *
     * @type {Array<ConceptRelationshipNode>}
     * @memberof ConceptRelationshipsOut
     */
    'downstream': Array<ConceptRelationshipNode>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare enum ConceptSortEnum {
    CreatedAt = "created_at",
    LastUpdatedAt = "last_updated_at",
    Name = "name"
}
/**
 * Confidence interval output model.
 * @export
 * @interface ConfidenceIntervalOut
 */
export interface ConfidenceIntervalOut {
    /**
     * Confidence level for interval.
     * @type {SignificanceLevel}
     * @memberof ConfidenceIntervalOut
     */
    'level'?: SignificanceLevel;
    /**
     * The lower bound of the CI.
     * @type {number}
     * @memberof ConfidenceIntervalOut
     */
    'ci_lower'?: number;
    /**
     * The upper bound of the CI.
     * @type {number}
     * @memberof ConfidenceIntervalOut
     */
    'ci_upper'?: number;
}
/**
 * An Enterprise Resource.
 * @export
 * @interface Enterprise
 */
export interface Enterprise {
    /**
     * Enterprise name.
     * @type {string}
     * @memberof Enterprise
     */
    'name': string;
    /**
     * Enterprise Identity Provider.
     * @type {string}
     * @memberof Enterprise
     */
    'identity_provider'?: string;
    /**
     * Enterprise SAML SSO entity id.
     * @type {string}
     * @memberof Enterprise
     */
    'entity_id'?: string;
    /**
     * Enterprise SAML SSO ACS url.
     * @type {string}
     * @memberof Enterprise
     */
    'acs_url'?: string;
    /**
     * Enterprise SAML SSO IDP metadata
     * @type {string}
     * @memberof Enterprise
     */
    'idp_metadata'?: string;
    /**
     *
     * @type {number}
     * @memberof Enterprise
     */
    'id': number;
    /**
     * The list of integrations to retrieve
     * @type {Array<Integration>}
     * @memberof Enterprise
     */
    'integrations'?: Array<Integration>;
    /**
     * The enterprise messages
     * @type {Array<MessageOut>}
     * @memberof Enterprise
     */
    'messages'?: Array<MessageOut>;
    /**
     * The actions the requesting user is allowed to perform on this resource.
     * @type {Array<ResourceAction>}
     * @memberof Enterprise
     */
    '_permissions'?: Array<ResourceAction>;
}
/**
 * An Enterprise create/update Resource.
 * @export
 * @interface EnterpriseIn
 */
export interface EnterpriseIn {
    /**
     * Enterprise name.
     * @type {string}
     * @memberof EnterpriseIn
     */
    'name': string;
    /**
     * Enterprise Identity Provider.
     * @type {string}
     * @memberof EnterpriseIn
     */
    'identity_provider'?: string;
    /**
     * Enterprise SAML SSO entity id.
     * @type {string}
     * @memberof EnterpriseIn
     */
    'entity_id'?: string;
    /**
     * Enterprise SAML SSO ACS url.
     * @type {string}
     * @memberof EnterpriseIn
     */
    'acs_url'?: string;
    /**
     * Enterprise SAML SSO IDP metadata
     * @type {string}
     * @memberof EnterpriseIn
     */
    'idp_metadata'?: string;
}
/**
 * Edge Typed Link model.  # noqa: E501
 * @export
 * @interface ExtendedLinkObject
 */
export interface ExtendedLinkObject {
    /**
     *
     * @type {string}
     * @memberof ExtendedLinkObject
     */
    'source': string;
    /**
     *
     * @type {string}
     * @memberof ExtendedLinkObject
     */
    'target': string;
    /**
     *
     * @type {GraphLinkType}
     * @memberof ExtendedLinkObject
     */
    'edge_type'?: GraphLinkType;
    /**
     *
     * @type {Array<string>}
     * @memberof ExtendedLinkObject
     */
    'association_ids'?: Array<string>;
}
/**
 * Object Typed Node model.  # noqa: E501
 * @export
 * @interface ExtendedNodeObject
 */
export interface ExtendedNodeObject {
    /**
     *
     * @type {string}
     * @memberof ExtendedNodeObject
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ExtendedNodeObject
     */
    'name': string;
    /**
     *
     * @type {GraphNodeType}
     * @memberof ExtendedNodeObject
     */
    'object_type'?: GraphNodeType;
    /**
     *
     * @type {Array<string>}
     * @memberof ExtendedNodeObject
     */
    'system_ids'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ExtendedNodeObject
     */
    'tags'?: Array<string>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare enum FeatureContributionMethod {
    Gini = "gini",
    Gain = "gain",
    Shap = "shap",
    Coefficient = "coefficient",
    Lime = "lime",
    Permutation = "permutation",
    PearsonR = "pearson_r",
    KendallTau = "kendall_tau",
    CramerV = "cramer_v",
    KruskalWallisHTest = "kruskal_wallis_h_test",
    ControlVariable = "control_variable",
    ProductMomentR = "product_moment_r",
    FrequencyScore = "frequency_score",
    OddsRatio = "odds_ratio",
    RelativeRiskRatio = "relative_risk_ratio",
    HazardRatio = "hazard_ratio",
    MeanGainUnstandardized = "mean_gain_unstandardized",
    MeanGainStandardized = "mean_gain_standardized",
    MeanDifferenceUnstandardized = "mean_difference_unstandardized",
    MeanDifferenceStandardized = "mean_difference_standardized",
    ProportionDifference = "proportion_difference",
    LogOddsRatio = "log_odds_ratio",
    PearsonChiSquaredTest = "pearson_chi_squared_test",
    Forecast = "forecast",
    PercentChangeDifference = "percent_change_difference",
    AdjustedOddsRatio = "adjusted_odds_ratio",
    AdjustedHazardRatio = "adjusted_hazard_ratio",
    IncidentRateRatio = "incident_rate_ratio",
    RiskDifference = "risk_difference",
    InformationFlow = "information_flow",
    StandardizedCoefficient = "standardized_coefficient",
    CohensD = "cohens_d",
    HedgesG = "hedges_g",
    GlassSDelta = "glass_s_delta",
    RootMeanSquareDifferencePsi = "root_mean_square_difference_psi",
    MahalanobisDistance = "mahalanobis_distance",
    CohensW = "cohens_w",
    CohensH = "cohens_h",
    CliffsDelta = "cliffs_delta",
    RankBiserialCorrelation = "rank_biserial_correlation",
    SpearmanCorrelation = "spearman_correlation",
    Elasticity = "elasticity",
    PrevalenceRatio = "prevalence_ratio",
    Invalid = "invalid"
}
/**
 * Interface for finding in study.
 * @export
 * @interface Finding
 */
export interface Finding {
    /**
     *
     * @type {string}
     * @memberof Finding
     */
    'summary'?: string;
    /**
     *
     * @type {RawFinding}
     * @memberof Finding
     */
    'data'?: RawFinding;
    /**
     *
     * @type {Array<string>}
     * @memberof Finding
     */
    'labels'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof Finding
     */
    'mechanistic': boolean;
    /**
     *
     * @type {string}
     * @memberof Finding
     */
    'mechanism_type'?: string;
}
/**
 * Schema for identifying finding.
 * @export
 * @interface FindingMeta
 */
export interface FindingMeta {
    /**
     *
     * @type {string}
     * @memberof FindingMeta
     */
    'pmid'?: string;
    /**
     *
     * @type {string}
     * @memberof FindingMeta
     */
    'doi'?: string;
    /**
     *
     * @type {string}
     * @memberof FindingMeta
     */
    'association_id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof FindingMeta
     */
    'is_rct': boolean;
    /**
     *
     * @type {string}
     * @memberof FindingMeta
     */
    'publish_date'?: string;
    /**
     *
     * @type {number}
     * @memberof FindingMeta
     */
    'article_score'?: number;
    /**
     *
     * @type {number}
     * @memberof FindingMeta
     */
    'citation_count'?: number;
    /**
     *
     * @type {string}
     * @memberof FindingMeta
     */
    'name'?: string;
    /**
     *
     * @type {Array<StudyAuthor>}
     * @memberof FindingMeta
     */
    'authorships'?: Array<StudyAuthor>;
    /**
     *
     * @type {string}
     * @memberof FindingMeta
     */
    'journal'?: string;
}
/**
 * Next/prev Pagination links with first and last urls.
 * @export
 * @interface FirstLastPaginationLinks
 */
export interface FirstLastPaginationLinks {
    /**
     * Link to this resource.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    'self': string;
    /**
     * Link to next page.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    'next'?: string;
    /**
     * Link to previous page.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    'prev'?: string;
    /**
     * Link to first page.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    'first'?: string;
    /**
     * Link to last page.
     * @type {string}
     * @memberof FirstLastPaginationLinks
     */
    'last'?: string;
}
/**
 * Status for polling functions.
 * @export
 * @enum {string}
 */
export declare enum FunctionStatus {
    Pending = "pending",
    Running = "running",
    Finished = "finished",
    Error = "error"
}
/**
 * Document model.
 * @export
 * @interface GetFTRDocument
 */
export interface GetFTRDocument {
    /**
     *
     * @type {string}
     * @memberof GetFTRDocument
     */
    'contentType': string;
    /**
     *
     * @type {string}
     * @memberof GetFTRDocument
     */
    'url': string;
}
/**
 * Entitlement model.
 * @export
 * @interface GetFTREntitlement
 */
export interface GetFTREntitlement {
    /**
     *
     * @type {string}
     * @memberof GetFTREntitlement
     */
    'doi': string;
    /**
     *
     * @type {number}
     * @memberof GetFTREntitlement
     */
    'statusCode': number;
    /**
     *
     * @type {string}
     * @memberof GetFTREntitlement
     */
    'entitled'?: string;
    /**
     *
     * @type {string}
     * @memberof GetFTREntitlement
     */
    'accessType'?: string;
    /**
     *
     * @type {GetFTROrganization}
     * @memberof GetFTREntitlement
     */
    'org'?: GetFTROrganization;
    /**
     *
     * @type {Array<GetFTRDocument>}
     * @memberof GetFTREntitlement
     */
    'vor'?: Array<GetFTRDocument>;
    /**
     *
     * @type {Array<GetFTRDocument>}
     * @memberof GetFTREntitlement
     */
    'av'?: Array<GetFTRDocument>;
    /**
     *
     * @type {string}
     * @memberof GetFTREntitlement
     */
    'document'?: string;
}
/**
 * Entitlements input model.
 * @export
 * @interface GetFTREntitlementsIn
 */
export interface GetFTREntitlementsIn {
    /**
     *
     * @type {Array<string>}
     * @memberof GetFTREntitlementsIn
     */
    'dois': Array<string>;
    /**
     *
     * @type {GetFTROrganization}
     * @memberof GetFTREntitlementsIn
     */
    'org'?: GetFTROrganization;
}
/**
 * Entitlements output model.
 * @export
 * @interface GetFTREntitlementsOut
 */
export interface GetFTREntitlementsOut {
    /**
     *
     * @type {Array<GetFTREntitlement>}
     * @memberof GetFTREntitlementsOut
     */
    'entitlements': Array<GetFTREntitlement>;
}
/**
 * Organization model.
 * @export
 * @interface GetFTROrganization
 */
export interface GetFTROrganization {
    /**
     *
     * @type {string}
     * @memberof GetFTROrganization
     */
    'ipv4'?: string;
    /**
     *
     * @type {string}
     * @memberof GetFTROrganization
     */
    'entityID'?: string;
    /**
     *
     * @type {string}
     * @memberof GetFTROrganization
     */
    'ringgoldID'?: string;
}
/**
 * Graph Data model.  # noqa: E501
 * @export
 * @interface GraphData
 */
export interface GraphData {
    /**
     * Nodes of graph data.
     * @type {Array<ExtendedNodeObject>}
     * @memberof GraphData
     */
    'nodes': Array<ExtendedNodeObject>;
    /**
     * Links of graph data.
     * @type {Array<ExtendedLinkObject>}
     * @memberof GraphData
     */
    'links': Array<ExtendedLinkObject>;
}
/**
 * Graph Link Type enum.
 * @export
 * @enum {string}
 */
export declare enum GraphLinkType {
    DatasetRelationship = "dataset_relationship",
    ConceptRelationship = "concept_relationship",
    VariableRelationship = "variable_relationship",
    FeatureRelationship = "feature_relationship",
    FeatureVariable = "feature_variable",
    Measures = "measures"
}
/**
 * Graph metrics schema.
 * @export
 * @interface GraphMetrics
 */
export interface GraphMetrics {
    /**
     *
     * @type {number}
     * @memberof GraphMetrics
     */
    'num_relationships': number;
    /**
     *
     * @type {number}
     * @memberof GraphMetrics
     */
    'num_topics': number;
    /**
     *
     * @type {number}
     * @memberof GraphMetrics
     */
    'num_sources': number;
    /**
     *
     * @type {string}
     * @memberof GraphMetrics
     */
    'last_updated': string;
}
/**
 * Graph Node Type enum.
 * @export
 * @enum {string}
 */
export declare enum GraphNodeType {
    Dataset = "dataset",
    Concept = "concept",
    Variable = "variable",
    Feature = "feature"
}
/**
 * GraphQL query model.
 * @export
 * @interface GraphQLQuery
 */
export interface GraphQLQuery {
    /**
     *
     * @type {string}
     * @memberof GraphQLQuery
     */
    'query': string;
    /**
     *
     * @type {string}
     * @memberof GraphQLQuery
     */
    'operationName'?: string;
    /**
     *
     * @type {any}
     * @memberof GraphQLQuery
     */
    'variables'?: any;
}
/**
 *
 * @export
 * @interface GroundedEntity
 */
export interface GroundedEntity {
    /**
     *
     * @type {string}
     * @memberof GroundedEntity
     */
    'name': string;
    /**
     *
     * @type {Array<QueryParserApiModelsPydanticGrounding>}
     * @memberof GroundedEntity
     */
    'groundings'?: Array<QueryParserApiModelsPydanticGrounding>;
}
/**
 * Variable object schema for relationships.
 * @export
 * @interface GroundedVariable
 */
export interface GroundedVariable {
    /**
     *
     * @type {string}
     * @memberof GroundedVariable
     */
    'system_id'?: string;
    /**
     *
     * @type {string}
     * @memberof GroundedVariable
     */
    'name': string;
    /**
     *
     * @type {Array<VariableGrounding>}
     * @memberof GroundedVariable
     */
    'groundings'?: Array<VariableGrounding>;
    /**
     *
     * @type {string}
     * @memberof GroundedVariable
     */
    'topic_id'?: string;
    /**
     *
     * @type {string}
     * @memberof GroundedVariable
     */
    'topic_name'?: string;
    /**
     *
     * @type {string}
     * @memberof GroundedVariable
     */
    'topic_wikidata_id'?: string;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     *
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * SSO Identity Providers preconfigured in AWS Cognito user pool.
 * @export
 * @enum {string}
 */
export declare enum IdentityProvider {
    Google = "Google",
    KeycloakGoogleDev = "keycloak-google-dev"
}
/**
 * Get Identity Provider Name.
 * @export
 * @interface IdentityProviderNameOut
 */
export interface IdentityProviderNameOut {
    /**
     * Name of the identity provider for given email as configured in System
     * @type {IdentityProvider}
     * @memberof IdentityProviderNameOut
     */
    'idp'?: IdentityProvider;
}
/**
 * An Integration Resource.
 * @export
 * @interface Integration
 */
export interface Integration {
    /**
     * Integration name.
     * @type {string}
     * @memberof Integration
     */
    'name'?: string;
    /**
     * Integration state.
     * @type {IntegrationState}
     * @memberof Integration
     */
    'state'?: IntegrationState;
    /**
     * The integration type.
     * @type {IntegrationType}
     * @memberof Integration
     */
    'service_type': IntegrationType;
    /**
     * API Endpoint.
     * @type {string}
     * @memberof Integration
     */
    'endpoint': string;
    /**
     * Integration IP address.
     * @type {string}
     * @memberof Integration
     */
    'ip_address'?: string;
    /**
     * Integration lamdba names.
     * @type {string}
     * @memberof Integration
     */
    'lambda_arn'?: string;
    /**
     * Is this integration deployed on enterprise\'s internal stack?
     * @type {boolean}
     * @memberof Integration
     */
    'on_premise'?: boolean;
    /**
     * The list of tables to retrieve
     * @type {Array<Table>}
     * @memberof Integration
     */
    'tables'?: Array<Table>;
    /**
     * The list of views to retrieve
     * @type {Array<Table>}
     * @memberof Integration
     */
    'views'?: Array<Table>;
    /**
     * The integration messages
     * @type {Array<MessageOut>}
     * @memberof Integration
     */
    'messages'?: Array<MessageOut>;
    /**
     *
     * @type {number}
     * @memberof Integration
     */
    'id': number;
    /**
     * Integration credentials.
     * @type {RedshiftCredentials | SnowflakeCredentials | BigQueryCredentials | LookerCredentials | ModeCredentials}
     * @memberof Integration
     */
    'credentials': RedshiftCredentials | SnowflakeCredentials | BigQueryCredentials | LookerCredentials | ModeCredentials;
    /**
     * Enterprise link.
     * @type {string}
     * @memberof Integration
     */
    'enterprise'?: string;
    /**
     * Team link.
     * @type {string}
     * @memberof Integration
     */
    'team'?: string;
    /**
     * The actions the requesting user is allowed to perform on this resource.
     * @type {Array<ResourceAction>}
     * @memberof Integration
     */
    '_permissions'?: Array<ResourceAction>;
}
/**
 * Integration model for create/update.
 * @export
 * @interface IntegrationIn
 */
export interface IntegrationIn {
    /**
     * Integration name.
     * @type {string}
     * @memberof IntegrationIn
     */
    'name'?: string;
    /**
     * Integration state.
     * @type {IntegrationState}
     * @memberof IntegrationIn
     */
    'state'?: IntegrationState;
    /**
     * The integration type.
     * @type {IntegrationType}
     * @memberof IntegrationIn
     */
    'service_type'?: IntegrationType;
    /**
     * API Endpoint.
     * @type {string}
     * @memberof IntegrationIn
     */
    'endpoint'?: string;
    /**
     * Integration IP address.
     * @type {string}
     * @memberof IntegrationIn
     */
    'ip_address'?: string;
    /**
     * Integration lamdba names.
     * @type {string}
     * @memberof IntegrationIn
     */
    'lambda_arn'?: string;
    /**
     * Is this integration deployed on enterprise\'s internal stack?
     * @type {boolean}
     * @memberof IntegrationIn
     */
    'on_premise'?: boolean;
    /**
     * The list of tables to retrieve
     * @type {Array<Table>}
     * @memberof IntegrationIn
     */
    'tables'?: Array<Table>;
    /**
     * The list of views to retrieve
     * @type {Array<Table>}
     * @memberof IntegrationIn
     */
    'views'?: Array<Table>;
    /**
     * The integration messages
     * @type {Array<MessageOut>}
     * @memberof IntegrationIn
     */
    'messages'?: Array<MessageOut>;
    /**
     * Integration credentials.
     * @type {RedshiftCredentialsIn | SnowflakeCredentialsIn | BigQueryCredentialsIn | LookerCredentialsIn | ModeCredentialsIn}
     * @memberof IntegrationIn
     */
    'credentials'?: RedshiftCredentialsIn | SnowflakeCredentialsIn | BigQueryCredentialsIn | LookerCredentialsIn | ModeCredentialsIn;
    /**
     * Team or Enterprise link
     * @type {string}
     * @memberof IntegrationIn
     */
    'owner'?: string;
}
/**
 * Integration service state.
 * @export
 * @enum {string}
 */
export declare enum IntegrationState {
    Initial = "INITIAL",
    Active = "ACTIVE",
    Inactive = "INACTIVE"
}
/**
 * Integration retrieval types.
 * @export
 * @enum {string}
 */
export declare enum IntegrationType {
    Redshift = "REDSHIFT",
    Snowflake = "SNOWFLAKE",
    Bigquery = "BIGQUERY",
    Looker = "LOOKER",
    Mode = "MODE"
}
/**
 * Credentials for a Looker integration without password.
 * @export
 * @interface LookerCredentials
 */
export interface LookerCredentials {
    /**
     * Integration verify ssl
     * @type {boolean}
     * @memberof LookerCredentials
     */
    'verify_ssl'?: boolean;
    /**
     * Integration base url
     * @type {string}
     * @memberof LookerCredentials
     */
    'base_url': string;
}
/**
 * Input credentials for a Looker integration.
 * @export
 * @interface LookerCredentialsIn
 */
export interface LookerCredentialsIn {
    /**
     * Integration verify ssl
     * @type {boolean}
     * @memberof LookerCredentialsIn
     */
    'verify_ssl'?: boolean;
    /**
     * Integration base url
     * @type {string}
     * @memberof LookerCredentialsIn
     */
    'base_url': string;
    /**
     * Integration client id.
     * @type {string}
     * @memberof LookerCredentialsIn
     */
    'client_id': string;
    /**
     * Integration client secret key.
     * @type {string}
     * @memberof LookerCredentialsIn
     */
    'client_secret': string;
}
/**
 * A Message object.
 * @export
 * @interface MessageIn
 */
export interface MessageIn {
    /**
     *
     * @type {string}
     * @memberof MessageIn
     */
    'message': string;
    /**
     *
     * @type {MessageType}
     * @memberof MessageIn
     */
    'message_type'?: MessageType;
    /**
     * The message attributes
     * @type {any}
     * @memberof MessageIn
     */
    'attributes'?: any;
    /**
     * Integration link.
     * @type {string}
     * @memberof MessageIn
     */
    'integration': string;
}
/**
 * A Message object.
 * @export
 * @interface MessageOut
 */
export interface MessageOut {
    /**
     *
     * @type {string}
     * @memberof MessageOut
     */
    'message': string;
    /**
     *
     * @type {MessageType}
     * @memberof MessageOut
     */
    'message_type'?: MessageType;
    /**
     * The message attributes
     * @type {any}
     * @memberof MessageOut
     */
    'attributes'?: any;
    /**
     * Integration link.
     * @type {string}
     * @memberof MessageOut
     */
    'integration': string;
    /**
     *
     * @type {number}
     * @memberof MessageOut
     */
    'id'?: number;
    /**
     * Creation date
     * @type {string}
     * @memberof MessageOut
     */
    'created'?: string;
}
/**
 * Message type.
 * @export
 * @enum {string}
 */
export declare enum MessageType {
    Error = "ERROR",
    DatasetCreated = "DATASET_CREATED"
}
/**
 * Metrics name enum.
 * @export
 * @enum {string}
 */
export declare enum Metrics {
    SearchCreate = "semantic_search.create",
    SearchClusterRead = "semantic_search_cluster.read"
}
/**
 * Credentials for a Mode integration without the token and secret.
 * @export
 * @interface ModeCredentials
 */
export interface ModeCredentials {
    /**
     * Integration dashboard
     * @type {string}
     * @memberof ModeCredentials
     */
    'dashboard': string;
}
/**
 * Input credentials for a Mode integration.
 * @export
 * @interface ModeCredentialsIn
 */
export interface ModeCredentialsIn {
    /**
     * Integration dashboard
     * @type {string}
     * @memberof ModeCredentialsIn
     */
    'dashboard': string;
    /**
     * Integration api token.
     * @type {string}
     * @memberof ModeCredentialsIn
     */
    'api_token': string;
    /**
     * Integration api secret.
     * @type {string}
     * @memberof ModeCredentialsIn
     */
    'api_secret': string;
}
/**
 * Node group model.  # noqa: E501
 * @export
 * @interface NodeGroup
 */
export interface NodeGroup {
    /**
     *
     * @type {Array<NodeGroupItem>}
     * @memberof NodeGroup
     */
    'items': Array<NodeGroupItem>;
    /**
     *
     * @type {number}
     * @memberof NodeGroup
     */
    'total': number;
}
/**
 * Supported Node Object model.  # noqa: E501
 * @export
 * @interface NodeGroupItem
 */
export interface NodeGroupItem {
    /**
     *
     * @type {Array<ExtendedLinkObject>}
     * @memberof NodeGroupItem
     */
    'links': Array<ExtendedLinkObject>;
    /**
     *
     * @type {ExtendedNodeObject}
     * @memberof NodeGroupItem
     */
    'node': ExtendedNodeObject;
}
/**
 * Ordering direction enum.
 * @export
 * @enum {string}
 */
export declare enum Ordering {
    Asc = "asc",
    Desc = "desc"
}
/**
 * Polling status enum.
 * @export
 * @enum {string}
 */
export declare enum PollingStatus {
    NotExists = "not_exists",
    Submitted = "submitted",
    Running = "running",
    Success = "success",
    Failed = "failed",
    FailedNoCitations = "failed_no_citations"
}
/**
 *
 * @export
 * @interface QueryParserApiModelsPydanticGrounding
 */
export interface QueryParserApiModelsPydanticGrounding {
    /**
     *
     * @type {string}
     * @memberof QueryParserApiModelsPydanticGrounding
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof QueryParserApiModelsPydanticGrounding
     */
    'namespace': string;
    /**
     *
     * @type {string}
     * @memberof QueryParserApiModelsPydanticGrounding
     */
    'id': string;
    /**
     *
     * @type {number}
     * @memberof QueryParserApiModelsPydanticGrounding
     */
    'score': number;
}
/**
 * Statistical finding.
 * @export
 * @interface RawFinding
 */
export interface RawFinding {
    /**
     *
     * @type {string}
     * @memberof RawFinding
     */
    'association_id': string;
    /**
     *
     * @type {string}
     * @memberof RawFinding
     */
    'variable_1': string;
    /**
     *
     * @type {string}
     * @memberof RawFinding
     */
    'variable_2': string;
    /**
     *
     * @type {boolean}
     * @memberof RawFinding
     */
    'bidirectional': boolean;
    /**
     *
     * @type {FeatureContributionMethod}
     * @memberof RawFinding
     */
    'feature_contribution_method': FeatureContributionMethod;
    /**
     *
     * @type {boolean}
     * @memberof RawFinding
     */
    'is_ratio': boolean;
    /**
     *
     * @type {number}
     * @memberof RawFinding
     */
    'value': number;
    /**
     *
     * @type {ConfidenceIntervalOut}
     * @memberof RawFinding
     */
    'ci'?: ConfidenceIntervalOut;
    /**
     *
     * @type {number}
     * @memberof RawFinding
     */
    'p_value'?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof RawFinding
     */
    'flags'?: Array<string>;
}
/**
 * Credentials for a Redshift integration without password.
 * @export
 * @interface RedshiftCredentials
 */
export interface RedshiftCredentials {
    /**
     * Integration database name.
     * @type {string}
     * @memberof RedshiftCredentials
     */
    'db_name': string;
    /**
     * Integration user name.
     * @type {string}
     * @memberof RedshiftCredentials
     */
    'db_user': string;
    /**
     * Integration host (Required for Redshift).
     * @type {string}
     * @memberof RedshiftCredentials
     */
    'db_host': string;
    /**
     * Integration port (Required for Redshift).
     * @type {number}
     * @memberof RedshiftCredentials
     */
    'db_port': number;
}
/**
 * Input credentials for a Redshift integration.
 * @export
 * @interface RedshiftCredentialsIn
 */
export interface RedshiftCredentialsIn {
    /**
     * Integration database name.
     * @type {string}
     * @memberof RedshiftCredentialsIn
     */
    'db_name': string;
    /**
     * Integration user name.
     * @type {string}
     * @memberof RedshiftCredentialsIn
     */
    'db_user': string;
    /**
     * Integration host (Required for Redshift).
     * @type {string}
     * @memberof RedshiftCredentialsIn
     */
    'db_host': string;
    /**
     * Integration port (Required for Redshift).
     * @type {number}
     * @memberof RedshiftCredentialsIn
     */
    'db_port': number;
    /**
     * Integration password.
     * @type {string}
     * @memberof RedshiftCredentialsIn
     */
    'db_password': string;
}
/**
 * API resource action enum.
 * @export
 * @enum {string}
 */
export declare enum ResourceAction {
    Create = "create",
    View = "view",
    Edit = "edit",
    Delete = "delete"
}
/**
 * A System Resource Flag Output Object.
 * @export
 * @interface ResourceFlag
 */
export interface ResourceFlag {
    /**
     * Given reasons for the flag.
     * @type {Array<string>}
     * @memberof ResourceFlag
     */
    'reasons': Array<string>;
    /**
     * Additional metadata for the flag.
     * @type {object}
     * @memberof ResourceFlag
     */
    'meta'?: object;
    /**
     * Time when resource was created.
     * @type {string}
     * @memberof ResourceFlag
     */
    'added_on': string;
    /**
     * User who created this resource.
     * @type {string}
     * @memberof ResourceFlag
     */
    'added_by': string;
}
/**
 * A System Resource Flag Input Object.
 * @export
 * @interface ResourceFlagIn
 */
export interface ResourceFlagIn {
    /**
     * Given reasons for the flag.
     * @type {Array<string>}
     * @memberof ResourceFlagIn
     */
    'reasons': Array<string>;
    /**
     * Additional metadata for the flag.
     * @type {object}
     * @memberof ResourceFlagIn
     */
    'meta'?: object;
}
/**
 * Table retrieval status.
 * @export
 * @enum {string}
 */
export declare enum RetrievalStatus {
    Pending = "pending",
    Success = "success",
    Failure = "failure"
}
/**
 * Schema for scored cluster.
 * @export
 * @interface ScoredCluster
 */
export interface ScoredCluster {
    /**
     *
     * @type {number}
     * @memberof ScoredCluster
     */
    'sort_id': number;
    /**
     *
     * @type {string}
     * @memberof ScoredCluster
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ScoredCluster
     */
    'display_summary': string;
    /**
     *
     * @type {string}
     * @memberof ScoredCluster
     */
    'prompt_summary': string;
    /**
     *
     * @type {Array<string>}
     * @memberof ScoredCluster
     */
    'cluster_labels': Array<string>;
    /**
     *
     * @type {Array<Array<AppSchemaGroundingsGrounding>>}
     * @memberof ScoredCluster
     */
    'label_groundings'?: Array<Array<AppSchemaGroundingsGrounding>>;
    /**
     *
     * @type {string}
     * @memberof ScoredCluster
     */
    'stat_descriptor'?: string;
    /**
     * Cluster-level metadata
     * @type {ClusteredEvidenceMetadata}
     * @memberof ScoredCluster
     */
    'cluster_metadata'?: ClusteredEvidenceMetadata;
    /**
     *
     * @type {number}
     * @memberof ScoredCluster
     */
    'score': number;
    /**
     *
     * @type {number}
     * @memberof ScoredCluster
     */
    'original_score'?: number;
    /**
     *
     * @type {number}
     * @memberof ScoredCluster
     */
    'sort_bucket'?: number;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof ScoredCluster
     */
    'search_term_grounding_namespaces'?: {
        [key: string]: string;
    };
    /**
     *
     * @type {string}
     * @memberof ScoredCluster
     */
    'reference_agent_position'?: string;
    /**
     *
     * @type {string}
     * @memberof ScoredCluster
     */
    'other_agent_category'?: string;
    /**
     *
     * @type {string}
     * @memberof ScoredCluster
     */
    'modification_type'?: string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare enum SemanticSearchType {
    RiskFactorOf = "risk_factor_of",
    Outcome = "outcome",
    Relationship = "relationship",
    Relationship2d = "relationship_2d",
    SingleVariable2d = "single_variable_2d"
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare enum SignificanceLevel {
    NinetyFive = "ninety_five",
    NinetyNine = "ninety_nine",
    NinetyNinePointNine = "ninety_nine_point_nine",
    Invalid = "invalid"
}
/**
 * Credentials for a Snowflake integration without password.
 * @export
 * @interface SnowflakeCredentials
 */
export interface SnowflakeCredentials {
    /**
     * Integration database name.
     * @type {string}
     * @memberof SnowflakeCredentials
     */
    'db_name': string;
    /**
     * Integration user name.
     * @type {string}
     * @memberof SnowflakeCredentials
     */
    'db_user': string;
    /**
     * Integration account name.
     * @type {string}
     * @memberof SnowflakeCredentials
     */
    'db_account': string;
    /**
     * Integration warehouse name.
     * @type {string}
     * @memberof SnowflakeCredentials
     */
    'db_warehouse': string;
}
/**
 * Input credentials for a Snowflake integration.
 * @export
 * @interface SnowflakeCredentialsIn
 */
export interface SnowflakeCredentialsIn {
    /**
     * Integration database name.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    'db_name': string;
    /**
     * Integration user name.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    'db_user': string;
    /**
     * Integration account name.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    'db_account': string;
    /**
     * Integration warehouse name.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    'db_warehouse': string;
    /**
     * Integration password.
     * @type {string}
     * @memberof SnowflakeCredentialsIn
     */
    'db_password': string;
}
/**
 * Stripe account status enum.
 * @export
 * @enum {string}
 */
export declare enum StripeAccountStatus {
    Trial = "trial",
    Subscribed = "subscribed",
    Expired = "expired",
    GroupSubscribed = "group_subscribed",
    Unsubscribed = "unsubscribed"
}
/**
 * Stripe object.
 * @export
 * @interface StripeOut
 */
export interface StripeOut {
    /**
     * Subscription start date.
     * @type {string}
     * @memberof StripeOut
     */
    'start_date'?: string;
    /**
     * Subscription end date.
     * @type {string}
     * @memberof StripeOut
     */
    'end_date'?: string;
    /**
     * Subscription status.
     * @type {StripeAccountStatus}
     * @memberof StripeOut
     */
    'status'?: StripeAccountStatus;
    /**
     * Monthly or yearly.
     * @type {string}
     * @memberof StripeOut
     */
    'interval'?: string;
    /**
     * Autonew subscription
     * @type {boolean}
     * @memberof StripeOut
     */
    'cancel_at_period_end'?: boolean;
    /**
     * Subscription id.
     * @type {string}
     * @memberof StripeOut
     */
    'subscription_id'?: string;
    /**
     * Is group admin.
     * @type {boolean}
     * @memberof StripeOut
     */
    'is_group_admin'?: boolean;
    /**
     * Is group member.
     * @type {boolean}
     * @memberof StripeOut
     */
    'is_group_member'?: boolean;
    /**
     * Coupon code.
     * @type {string}
     * @memberof StripeOut
     */
    'coupon_id'?: string;
}
/**
 * Stripe session object.
 * @export
 * @interface StripeSessionOut
 */
export interface StripeSessionOut {
    /**
     * Session url link.
     * @type {string}
     * @memberof StripeSessionOut
     */
    'session_url'?: string;
}
/**
 * Interface for an author on a study.
 * @export
 * @interface StudyAuthor
 */
export interface StudyAuthor {
    /**
     *
     * @type {string}
     * @memberof StudyAuthor
     */
    'oa_id'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyAuthor
     */
    'name': string;
}
/**
 * Interface for a single study and its finding sentences, populations, sample size, and id.
 * @export
 * @interface StudyFindings
 */
export interface StudyFindings {
    /**
     *
     * @type {Array<Finding>}
     * @memberof StudyFindings
     */
    'findings': Array<Finding>;
    /**
     *
     * @type {Array<string>}
     * @memberof StudyFindings
     */
    'populations'?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof StudyFindings
     */
    'sample_size'?: number;
    /**
     *
     * @type {string}
     * @memberof StudyFindings
     */
    'doi': string;
}
/**
 * Interface for /findings input.
 * @export
 * @interface StudyFindingsIn
 */
export interface StudyFindingsIn {
    /**
     *
     * @type {Array<string>}
     * @memberof StudyFindingsIn
     */
    'association_ids'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof StudyFindingsIn
     */
    'dois'?: Array<string>;
}
/**
 * Interface for /findings response type.
 * @export
 * @interface StudyFindingsOut
 */
export interface StudyFindingsOut {
    /**
     *
     * @type {Array<StudyFindings>}
     * @memberof StudyFindingsOut
     */
    'studies': Array<StudyFindings>;
}
/**
 * Interface for Study Metadata retrieved from DynamoDB and OpenAlex.
 * @export
 * @interface StudyMetadata
 */
export interface StudyMetadata {
    /**
     *
     * @type {string}
     * @memberof StudyMetadata
     */
    'pmid'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyMetadata
     */
    'doi'?: string;
    /**
     *
     * @type {number}
     * @memberof StudyMetadata
     */
    'cited_by'?: number;
    /**
     *
     * @type {string}
     * @memberof StudyMetadata
     */
    'journal'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyMetadata
     */
    'journal_id'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyMetadata
     */
    'publish_date'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyMetadata
     */
    'link'?: string;
    /**
     *
     * @type {Array<StudyAuthor>}
     * @memberof StudyMetadata
     */
    'authors'?: Array<StudyAuthor>;
    /**
     *
     * @type {string}
     * @memberof StudyMetadata
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof StudyMetadata
     */
    'summary'?: string;
    /**
     *
     * @type {boolean}
     * @memberof StudyMetadata
     */
    'retracted'?: boolean;
}
/**
 * Interface for input to /study-metadata.
 * @export
 * @interface StudyMetadataIn
 */
export interface StudyMetadataIn {
    /**
     *
     * @type {Array<string>}
     * @memberof StudyMetadataIn
     */
    'pmids': Array<string>;
}
/**
 * Interface for /study-metadata response type.
 * @export
 * @interface StudyMetadataOut
 */
export interface StudyMetadataOut {
    /**
     *
     * @type {Array<StudyMetadata>}
     * @memberof StudyMetadataOut
     */
    'study_metadata': Array<StudyMetadata>;
}
/**
 * Subscription seats.
 * @export
 * @interface SubscriptionSeats
 */
export interface SubscriptionSeats {
    /**
     *
     * @type {Array<string>}
     * @memberof SubscriptionSeats
     */
    'used_seats': Array<string>;
    /**
     *
     * @type {number}
     * @memberof SubscriptionSeats
     */
    'available_seats': number;
    /**
     *
     * @type {number}
     * @memberof SubscriptionSeats
     */
    'total_seats': number;
}
/**
 * Schema for a System Pubmed Search.  # noqa: E501
 * @export
 * @interface SuggestedQueriesIn
 */
export interface SuggestedQueriesIn {
    /**
     * User query
     * @type {string}
     * @memberof SuggestedQueriesIn
     */
    'query': string;
    /**
     * Number of pubmed results.
     * @type {number}
     * @memberof SuggestedQueriesIn
     */
    'num_pubmed_results': number;
}
/**
 * Schema for query suggestions.  # noqa: E501
 * @export
 * @interface SuggestedQueriesOut
 */
export interface SuggestedQueriesOut {
    /**
     *
     * @type {Array<SuggestedQuery>}
     * @memberof SuggestedQueriesOut
     */
    'queries': Array<SuggestedQuery>;
}
/**
 * Suggested query.  # noqa: E501
 * @export
 * @interface SuggestedQuery
 */
export interface SuggestedQuery {
    /**
     * User query
     * @type {string}
     * @memberof SuggestedQuery
     */
    'query': string;
    /**
     * Number of pubmed results.
     * @type {number}
     * @memberof SuggestedQuery
     */
    'num_pubmed_results': number;
    /**
     * Enum for query suggestion types.
     * @type {string}
     * @memberof SuggestedQuery
     */
    'suggestion_type': string;
}
/**
 * Synthesis output schema.  # noqa: E501
 * @export
 * @interface Synthesis
 */
export interface Synthesis {
    /**
     *
     * @type {string}
     * @memberof Synthesis
     */
    'text': string;
    /**
     *
     * @type {string}
     * @memberof Synthesis
     */
    'cache_key': string;
}
/**
 * Information related to a thumbs down feedback.
 * @export
 * @interface SynthesisFeedback
 */
export interface SynthesisFeedback {
    /**
     *
     * @type {Array<string>}
     * @memberof SynthesisFeedback
     */
    'choice'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof SynthesisFeedback
     */
    'text': string;
}
/**
 * Input of feedback on synthesis from client.
 * @export
 * @interface SynthesisFeedbackIn
 */
export interface SynthesisFeedbackIn {
    /**
     *
     * @type {string}
     * @memberof SynthesisFeedbackIn
     */
    'question': string;
    /**
     *
     * @type {Array<string>}
     * @memberof SynthesisFeedbackIn
     */
    'prompt_summaries': Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof SynthesisFeedbackIn
     */
    'is_positive': boolean;
    /**
     *
     * @type {SynthesisFeedback}
     * @memberof SynthesisFeedbackIn
     */
    'feedback_value'?: SynthesisFeedback;
    /**
     *
     * @type {string}
     * @memberof SynthesisFeedbackIn
     */
    'cache_key'?: string;
}
/**
 * Synthesis fetching output schema.  # noqa: E501
 * @export
 * @interface SynthesisOut
 */
export interface SynthesisOut {
    /**
     *
     * @type {PollingStatus}
     * @memberof SynthesisOut
     */
    'status': PollingStatus;
    /**
     *
     * @type {Synthesis}
     * @memberof SynthesisOut
     */
    'synthesis': Synthesis;
}
/**
 * Synthesis response model.
 * @export
 * @interface SynthesisResponse
 */
export interface SynthesisResponse {
    /**
     *
     * @type {ClusterOut}
     * @memberof SynthesisResponse
     */
    'main': ClusterOut;
    /**
     *
     * @type {ClusterOut}
     * @memberof SynthesisResponse
     */
    'recent'?: ClusterOut;
}
/**
 * System search underlying data.
 * @export
 * @interface SystemSearchData
 */
export interface SystemSearchData {
    /**
     *
     * @type {Array<ClusteredRelationship>}
     * @memberof SystemSearchData
     */
    'relationships': Array<ClusteredRelationship>;
}
/**
 * System Search Fields.
 * @export
 * @interface SystemSearchIn
 */
export interface SystemSearchIn {
    /**
     * Search Field type
     * @type {SemanticSearchType}
     * @memberof SystemSearchIn
     */
    'question_type'?: SemanticSearchType;
    /**
     * Question to search for.
     * @type {string}
     * @memberof SystemSearchIn
     */
    'question'?: string;
    /**
     * First term part of the question.
     * @type {GroundedEntity}
     * @memberof SystemSearchIn
     */
    'term1': GroundedEntity;
    /**
     * Optional second term part of the question.
     * @type {GroundedEntity}
     * @memberof SystemSearchIn
     */
    'term2'?: GroundedEntity;
    /**
     * Optional Field to filter studies which have populations matching Field.
     * @type {string}
     * @memberof SystemSearchIn
     */
    'population'?: string;
    /**
     * To use cache or not. Default True.
     * @type {boolean}
     * @memberof SystemSearchIn
     */
    'use_cache'?: boolean;
    /**
     * Clustering thresholds as json stringified list of pairs of floats.
     * @type {Array<Array<number>>}
     * @memberof SystemSearchIn
     */
    'clustering_thresholds'?: Array<Array<number>>;
    /**
     * Clustering method to use.
     * @type {ClusteringMethods}
     * @memberof SystemSearchIn
     */
    'clustering_method'?: ClusteringMethods;
    /**
     * Temperature of summary
     * @type {number}
     * @memberof SystemSearchIn
     */
    'temperature'?: number;
    /**
     * Use GPT4 model.
     * @type {boolean}
     * @memberof SystemSearchIn
     */
    'use_gpt4'?: boolean;
    /**
     * Filter studies that were added after this date (in yyyy/mm/dd format).
     * @type {string}
     * @memberof SystemSearchIn
     */
    'added_after'?: string;
    /**
     * Kickoff a recent synthesis.
     * @type {boolean}
     * @memberof SystemSearchIn
     */
    'kickoff_recent_synthesis'?: boolean;
}
/**
 * A table object.
 * @export
 * @interface Table
 */
export interface Table {
    /**
     *
     * @type {number}
     * @memberof Table
     */
    'id'?: number;
    /**
     * Table name.
     * @type {string}
     * @memberof Table
     */
    'name'?: string;
    /**
     * Active status.
     * @type {boolean}
     * @memberof Table
     */
    'active'?: boolean;
    /**
     * Schema name.
     * @type {string}
     * @memberof Table
     */
    'schema_name'?: string;
    /**
     * System ID of dataset this table corresponds to.
     * @type {string}
     * @memberof Table
     */
    'dataset_id'?: string;
    /**
     * Retrieval status.
     * @type {RetrievalStatus}
     * @memberof Table
     */
    'status'?: RetrievalStatus;
    /**
     * Time when table was last retrieved.
     * @type {string}
     * @memberof Table
     */
    'last_retrieval'?: string;
    /**
     * Time when interactions were last computed.
     * @type {string}
     * @memberof Table
     */
    'last_interactions_on'?: string;
    /**
     * Integration link.
     * @type {string}
     * @memberof Table
     */
    'integration': string;
}
/**
 * Concept relationships model.  # noqa: E501
 * @export
 * @interface TopicCategories
 */
export interface TopicCategories {
    /**
     *
     * @type {ExtendedNodeObject}
     * @memberof TopicCategories
     */
    'topic': ExtendedNodeObject;
    /**
     *
     * @type {NodeGroupItem}
     * @memberof TopicCategories
     */
    'relationship'?: NodeGroupItem;
    /**
     *
     * @type {NodeGroup}
     * @memberof TopicCategories
     */
    'upstream'?: NodeGroup;
    /**
     *
     * @type {NodeGroup}
     * @memberof TopicCategories
     */
    'downstream'?: NodeGroup;
    /**
     *
     * @type {NodeGroup}
     * @memberof TopicCategories
     */
    'confounders'?: NodeGroup;
    /**
     *
     * @type {NodeGroup}
     * @memberof TopicCategories
     */
    'mediators'?: NodeGroup;
}
/**
 * User profile data input.
 * @export
 * @interface UpdateProfileIn
 */
export interface UpdateProfileIn {
    /**
     * User name that is visible to others on System.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'display_name'?: string;
    /**
     * The user\'s unique [ORCID](https://orcid.org/).
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'orcid'?: string;
    /**
     * User\'s avatar.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'avatar'?: string;
    /**
     * User\'s first name.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'first_name'?: string;
    /**
     * User\'s last name.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'last_name'?: string;
    /**
     * User\'s organizations.
     * @type {Array<string>}
     * @memberof UpdateProfileIn
     */
    'organizations'?: Array<string>;
    /**
     * User\'s field of work.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'field_of_work'?: string;
    /**
     * User email address.
     * @type {string}
     * @memberof UpdateProfileIn
     */
    'email'?: string;
    /**
     * User roles.
     * @type {Array<string>}
     * @memberof UpdateProfileIn
     */
    'roles'?: Array<string>;
}
/**
 * User metric usage result.
 * @export
 * @interface UserMetricUsageOut
 */
export interface UserMetricUsageOut {
    /**
     * Usage Metric
     * @type {Metrics}
     * @memberof UserMetricUsageOut
     */
    'metric': Metrics;
    /**
     * Metric usage count
     * @type {number}
     * @memberof UserMetricUsageOut
     */
    'count': number;
    /**
     * Metric usage from date
     * @type {string}
     * @memberof UserMetricUsageOut
     */
    'date_from': string;
}
/**
 * Private user profile out.
 * @export
 * @interface UserPrivateProfileOut
 */
export interface UserPrivateProfileOut {
    /**
     * The user\'s System ID.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'id': string;
    /**
     * Time when the user\'s profile was created.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'created_at': string;
    /**
     * The Author ID corresponding to this user.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'author_id'?: string;
    /**
     * User name that is visible to others on System.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'display_name': string;
    /**
     * The user\'s unique [ORCID](https://orcid.org/).
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'orcid'?: string;
    /**
     * User\'s avatar.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'avatar'?: string;
    /**
     * User\'s first name.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'first_name'?: string;
    /**
     * User\'s last name.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'last_name'?: string;
    /**
     * User\'s organizations.
     * @type {Array<string>}
     * @memberof UserPrivateProfileOut
     */
    'organizations'?: Array<string>;
    /**
     * User\'s field of work.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'field_of_work'?: string;
    /**
     * User email address.
     * @type {string}
     * @memberof UserPrivateProfileOut
     */
    'email': string;
    /**
     * User roles.
     * @type {Array<string>}
     * @memberof UserPrivateProfileOut
     */
    'roles'?: Array<string>;
    /**
     * Stripe object
     * @type {StripeOut}
     * @memberof UserPrivateProfileOut
     */
    'stripe'?: StripeOut;
}
/**
 * User profile data input.
 * @export
 * @interface UserProfileIn
 */
export interface UserProfileIn {
    /**
     * User name that is visible to others on System.
     * @type {string}
     * @memberof UserProfileIn
     */
    'display_name': string;
    /**
     * The user\'s unique [ORCID](https://orcid.org/).
     * @type {string}
     * @memberof UserProfileIn
     */
    'orcid'?: string;
    /**
     * User\'s avatar.
     * @type {string}
     * @memberof UserProfileIn
     */
    'avatar'?: string;
    /**
     * User\'s first name.
     * @type {string}
     * @memberof UserProfileIn
     */
    'first_name'?: string;
    /**
     * User\'s last name.
     * @type {string}
     * @memberof UserProfileIn
     */
    'last_name'?: string;
    /**
     * User\'s organizations.
     * @type {Array<string>}
     * @memberof UserProfileIn
     */
    'organizations'?: Array<string>;
    /**
     * User\'s field of work.
     * @type {string}
     * @memberof UserProfileIn
     */
    'field_of_work'?: string;
    /**
     * User email address.
     * @type {string}
     * @memberof UserProfileIn
     */
    'email': string;
    /**
     * User roles.
     * @type {Array<string>}
     * @memberof UserProfileIn
     */
    'roles'?: Array<string>;
}
/**
 * Public user profile out.
 * @export
 * @interface UserPublicProfileOut
 */
export interface UserPublicProfileOut {
    /**
     * The user\'s System ID.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'id': string;
    /**
     * Time when the user\'s profile was created.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'created_at': string;
    /**
     * The Author ID corresponding to this user.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'author_id'?: string;
    /**
     * User name that is visible to others on System.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'display_name': string;
    /**
     * The user\'s unique [ORCID](https://orcid.org/).
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'orcid'?: string;
    /**
     * User\'s avatar.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'avatar'?: string;
    /**
     * User\'s first name.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'first_name'?: string;
    /**
     * User\'s last name.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'last_name'?: string;
    /**
     * User\'s organizations.
     * @type {Array<string>}
     * @memberof UserPublicProfileOut
     */
    'organizations'?: Array<string>;
    /**
     * User\'s field of work.
     * @type {string}
     * @memberof UserPublicProfileOut
     */
    'field_of_work'?: string;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     *
     * @type {Array<string>}
     * @memberof ValidationError
     */
    'loc': Array<string>;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * Variable grounding model.
 * @export
 * @interface VariableGrounding
 */
export interface VariableGrounding {
    /**
     *
     * @type {string}
     * @memberof VariableGrounding
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof VariableGrounding
     */
    'namespace': string;
    /**
     *
     * @type {string}
     * @memberof VariableGrounding
     */
    'name': string;
}
/**
 * AccessApi - axios parameter creator
 * @export
 */
export declare const AccessApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Register user\'s interest in access to Data Beta.
     * @summary Request Data Access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestDataAccessV1AccessDataPost: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Register user\'s interest in access to Maps Beta.
     * @summary Request Maps Access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestMapsAccessV1AccessMapsPost: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccessApi - functional programming interface
 * @export
 */
export declare const AccessApiFp: (configuration?: Configuration) => {
    /**
     * Register user\'s interest in access to Data Beta.
     * @summary Request Data Access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestDataAccessV1AccessDataPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Register user\'s interest in access to Maps Beta.
     * @summary Request Maps Access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestMapsAccessV1AccessMapsPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * AccessApi - factory interface
 * @export
 */
export declare const AccessApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Register user\'s interest in access to Data Beta.
     * @summary Request Data Access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestDataAccessV1AccessDataPost(options?: any): AxiosPromise<any>;
    /**
     * Register user\'s interest in access to Maps Beta.
     * @summary Request Maps Access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestMapsAccessV1AccessMapsPost(options?: any): AxiosPromise<any>;
};
/**
 * AccessApi - object-oriented interface
 * @export
 * @class AccessApi
 * @extends {BaseAPI}
 */
export declare class AccessApi extends BaseAPI {
    /**
     * Register user\'s interest in access to Data Beta.
     * @summary Request Data Access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessApi
     */
    requestDataAccessV1AccessDataPost(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any>>;
    /**
     * Register user\'s interest in access to Maps Beta.
     * @summary Request Maps Access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessApi
     */
    requestMapsAccessV1AccessMapsPost(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any>>;
}
/**
 * AssociationsApi - axios parameter creator
 * @export
 */
export declare const AssociationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {string} associationId
     * @param {ResourceFlagIn} resourceFlagIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    flagAssociationV1AssociationsAssociationIdFlagsPost: (associationId: string, resourceFlagIn: ResourceFlagIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {string} associationId
     * @param {ResourceFlagIn} resourceFlagIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    flagAssociationV1AssociationsAssociationIdFlagsPost_1: (associationId: string, resourceFlagIn: ResourceFlagIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List Associations.
     * @summary List Free Metadata
     * @param {Array<string>} [ids] List of association IDs to fetch free metadata for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFreeMetadataV1AssociationsFreeMetadataGet: (ids?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AssociationsApi - functional programming interface
 * @export
 */
export declare const AssociationsApiFp: (configuration?: Configuration) => {
    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {string} associationId
     * @param {ResourceFlagIn} resourceFlagIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    flagAssociationV1AssociationsAssociationIdFlagsPost(associationId: string, resourceFlagIn: ResourceFlagIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {string} associationId
     * @param {ResourceFlagIn} resourceFlagIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    flagAssociationV1AssociationsAssociationIdFlagsPost_1(associationId: string, resourceFlagIn: ResourceFlagIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * List Associations.
     * @summary List Free Metadata
     * @param {Array<string>} [ids] List of association IDs to fetch free metadata for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFreeMetadataV1AssociationsFreeMetadataGet(ids?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>>;
};
/**
 * AssociationsApi - factory interface
 * @export
 */
export declare const AssociationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {string} associationId
     * @param {ResourceFlagIn} resourceFlagIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    flagAssociationV1AssociationsAssociationIdFlagsPost(associationId: string, resourceFlagIn: ResourceFlagIn, options?: any): AxiosPromise<any>;
    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {string} associationId
     * @param {ResourceFlagIn} resourceFlagIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    flagAssociationV1AssociationsAssociationIdFlagsPost_1(associationId: string, resourceFlagIn: ResourceFlagIn, options?: any): AxiosPromise<any>;
    /**
     * List Associations.
     * @summary List Free Metadata
     * @param {Array<string>} [ids] List of association IDs to fetch free metadata for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFreeMetadataV1AssociationsFreeMetadataGet(ids?: Array<string>, options?: any): AxiosPromise<Array<any>>;
};
/**
 * Request parameters for flagAssociationV1AssociationsAssociationIdFlagsPost operation in AssociationsApi.
 * @export
 * @interface AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPostRequest
 */
export interface AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPostRequest {
    /**
     *
     * @type {string}
     * @memberof AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost
     */
    readonly associationId: string;
    /**
     *
     * @type {ResourceFlagIn}
     * @memberof AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost
     */
    readonly resourceFlagIn: ResourceFlagIn;
}
/**
 * Request parameters for flagAssociationV1AssociationsAssociationIdFlagsPost_1 operation in AssociationsApi.
 * @export
 * @interface AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0Request
 */
export interface AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0Request {
    /**
     *
     * @type {string}
     * @memberof AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0
     */
    readonly associationId: string;
    /**
     *
     * @type {ResourceFlagIn}
     * @memberof AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0
     */
    readonly resourceFlagIn: ResourceFlagIn;
}
/**
 * Request parameters for listFreeMetadataV1AssociationsFreeMetadataGet operation in AssociationsApi.
 * @export
 * @interface AssociationsApiListFreeMetadataV1AssociationsFreeMetadataGetRequest
 */
export interface AssociationsApiListFreeMetadataV1AssociationsFreeMetadataGetRequest {
    /**
     * List of association IDs to fetch free metadata for.
     * @type {Array<string>}
     * @memberof AssociationsApiListFreeMetadataV1AssociationsFreeMetadataGet
     */
    readonly ids?: Array<string>;
}
/**
 * AssociationsApi - object-oriented interface
 * @export
 * @class AssociationsApi
 * @extends {BaseAPI}
 */
export declare class AssociationsApi extends BaseAPI {
    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    flagAssociationV1AssociationsAssociationIdFlagsPost(requestParameters: AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any>>;
    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    flagAssociationV1AssociationsAssociationIdFlagsPost_1(requestParameters: AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any>>;
    /**
     * List Associations.
     * @summary List Free Metadata
     * @param {AssociationsApiListFreeMetadataV1AssociationsFreeMetadataGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listFreeMetadataV1AssociationsFreeMetadataGet(requestParameters?: AssociationsApiListFreeMetadataV1AssociationsFreeMetadataGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any[]>>;
}
/**
 * ConceptsApi - axios parameter creator
 * @export
 */
export declare const ConceptsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetch concept relationships.
     * @summary Get Concept Relationships
     * @param {string} conceptId
     * @param {boolean} [topPercentileLimit] Flag for limiting to top percentile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet: (conceptId: string, topPercentileLimit?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get Concept.
     * @summary Get Concept
     * @param {string} conceptId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConceptV1ConceptsConceptIdGet: (conceptId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List Concepts.
     * @summary List Concepts
     * @param {string} [teamId]
     * @param {number} [minRelationshipStrength] Min strength
     * @param {string} [query] Search query.
     * @param {boolean} [includeHidden] Include hidden objects in results.
     * @param {Array<string>} [id] Filter results by id.
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
     * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @param {ConceptSortEnum} [orderBy] Order by this field.
     * @param {Ordering} [ordering] Order ascending or descending.
     * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConceptsV1ConceptsGet: (teamId?: string, minRelationshipStrength?: number, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List Concepts.
     * @summary Semantic Search Concepts
     * @param {string} query Query for the search.
     * @param {number} [alpha] Alpha for the search.
     * @param {number} [autocut] Autocut for the search.
     * @param {number} [customCutoffScore] Custom cutoff score.
     * @param {number} [limit] Limit for the search.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    semanticSearchConceptsV1ConceptsSemanticGet: (query: string, alpha?: number, autocut?: number, customCutoffScore?: number, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ConceptsApi - functional programming interface
 * @export
 */
export declare const ConceptsApiFp: (configuration?: Configuration) => {
    /**
     * Fetch concept relationships.
     * @summary Get Concept Relationships
     * @param {string} conceptId
     * @param {boolean} [topPercentileLimit] Flag for limiting to top percentile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet(conceptId: string, topPercentileLimit?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptRelationshipsOut>>;
    /**
     * Get Concept.
     * @summary Get Concept
     * @param {string} conceptId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConceptV1ConceptsConceptIdGet(conceptId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptOut>>;
    /**
     * List Concepts.
     * @summary List Concepts
     * @param {string} [teamId]
     * @param {number} [minRelationshipStrength] Min strength
     * @param {string} [query] Search query.
     * @param {boolean} [includeHidden] Include hidden objects in results.
     * @param {Array<string>} [id] Filter results by id.
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
     * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @param {ConceptSortEnum} [orderBy] Order by this field.
     * @param {Ordering} [ordering] Order ascending or descending.
     * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConceptsV1ConceptsGet(teamId?: string, minRelationshipStrength?: number, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptPaginationOut>>;
    /**
     * List Concepts.
     * @summary Semantic Search Concepts
     * @param {string} query Query for the search.
     * @param {number} [alpha] Alpha for the search.
     * @param {number} [autocut] Autocut for the search.
     * @param {number} [customCutoffScore] Custom cutoff score.
     * @param {number} [limit] Limit for the search.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    semanticSearchConceptsV1ConceptsSemanticGet(query: string, alpha?: number, autocut?: number, customCutoffScore?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConceptOut>>>;
};
/**
 * ConceptsApi - factory interface
 * @export
 */
export declare const ConceptsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetch concept relationships.
     * @summary Get Concept Relationships
     * @param {string} conceptId
     * @param {boolean} [topPercentileLimit] Flag for limiting to top percentile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet(conceptId: string, topPercentileLimit?: boolean, options?: any): AxiosPromise<ConceptRelationshipsOut>;
    /**
     * Get Concept.
     * @summary Get Concept
     * @param {string} conceptId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConceptV1ConceptsConceptIdGet(conceptId: string, options?: any): AxiosPromise<ConceptOut>;
    /**
     * List Concepts.
     * @summary List Concepts
     * @param {string} [teamId]
     * @param {number} [minRelationshipStrength] Min strength
     * @param {string} [query] Search query.
     * @param {boolean} [includeHidden] Include hidden objects in results.
     * @param {Array<string>} [id] Filter results by id.
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
     * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @param {ConceptSortEnum} [orderBy] Order by this field.
     * @param {Ordering} [ordering] Order ascending or descending.
     * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConceptsV1ConceptsGet(teamId?: string, minRelationshipStrength?: number, query?: string, includeHidden?: boolean, id?: Array<string>, page?: number, pageSize?: number, total?: boolean, idsOnly?: boolean, orderBy?: ConceptSortEnum, ordering?: Ordering, sortBy?: string, inConceptGraph?: boolean, options?: any): AxiosPromise<ConceptPaginationOut>;
    /**
     * List Concepts.
     * @summary Semantic Search Concepts
     * @param {string} query Query for the search.
     * @param {number} [alpha] Alpha for the search.
     * @param {number} [autocut] Autocut for the search.
     * @param {number} [customCutoffScore] Custom cutoff score.
     * @param {number} [limit] Limit for the search.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    semanticSearchConceptsV1ConceptsSemanticGet(query: string, alpha?: number, autocut?: number, customCutoffScore?: number, limit?: number, options?: any): AxiosPromise<Array<ConceptOut>>;
};
/**
 * Request parameters for getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiGetConceptRelationshipsV1ConceptsConceptIdRelationshipsGetRequest
 */
export interface ConceptsApiGetConceptRelationshipsV1ConceptsConceptIdRelationshipsGetRequest {
    /**
     *
     * @type {string}
     * @memberof ConceptsApiGetConceptRelationshipsV1ConceptsConceptIdRelationshipsGet
     */
    readonly conceptId: string;
    /**
     * Flag for limiting to top percentile.
     * @type {boolean}
     * @memberof ConceptsApiGetConceptRelationshipsV1ConceptsConceptIdRelationshipsGet
     */
    readonly topPercentileLimit?: boolean;
}
/**
 * Request parameters for getConceptV1ConceptsConceptIdGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiGetConceptV1ConceptsConceptIdGetRequest
 */
export interface ConceptsApiGetConceptV1ConceptsConceptIdGetRequest {
    /**
     *
     * @type {string}
     * @memberof ConceptsApiGetConceptV1ConceptsConceptIdGet
     */
    readonly conceptId: string;
}
/**
 * Request parameters for listConceptsV1ConceptsGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiListConceptsV1ConceptsGetRequest
 */
export interface ConceptsApiListConceptsV1ConceptsGetRequest {
    /**
     *
     * @type {string}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly teamId?: string;
    /**
     * Min strength
     * @type {number}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly minRelationshipStrength?: number;
    /**
     * Search query.
     * @type {string}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly query?: string;
    /**
     * Include hidden objects in results.
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly includeHidden?: boolean;
    /**
     * Filter results by id.
     * @type {Array<string>}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly id?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly page?: number;
    /**
     *
     * @type {number}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly pageSize?: number;
    /**
     * Include total count in response. Only use if you need it as a separate database call is required.
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly total?: boolean;
    /**
     * Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly idsOnly?: boolean;
    /**
     * Order by this field.
     * @type {ConceptSortEnum}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly orderBy?: ConceptSortEnum;
    /**
     * Order ascending or descending.
     * @type {Ordering}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly ordering?: Ordering;
    /**
     * Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
     * @type {string}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly sortBy?: string;
    /**
     * Is Concept in the Concept Graph?
     * @type {boolean}
     * @memberof ConceptsApiListConceptsV1ConceptsGet
     */
    readonly inConceptGraph?: boolean;
}
/**
 * Request parameters for semanticSearchConceptsV1ConceptsSemanticGet operation in ConceptsApi.
 * @export
 * @interface ConceptsApiSemanticSearchConceptsV1ConceptsSemanticGetRequest
 */
export interface ConceptsApiSemanticSearchConceptsV1ConceptsSemanticGetRequest {
    /**
     * Query for the search.
     * @type {string}
     * @memberof ConceptsApiSemanticSearchConceptsV1ConceptsSemanticGet
     */
    readonly query: string;
    /**
     * Alpha for the search.
     * @type {number}
     * @memberof ConceptsApiSemanticSearchConceptsV1ConceptsSemanticGet
     */
    readonly alpha?: number;
    /**
     * Autocut for the search.
     * @type {number}
     * @memberof ConceptsApiSemanticSearchConceptsV1ConceptsSemanticGet
     */
    readonly autocut?: number;
    /**
     * Custom cutoff score.
     * @type {number}
     * @memberof ConceptsApiSemanticSearchConceptsV1ConceptsSemanticGet
     */
    readonly customCutoffScore?: number;
    /**
     * Limit for the search.
     * @type {number}
     * @memberof ConceptsApiSemanticSearchConceptsV1ConceptsSemanticGet
     */
    readonly limit?: number;
}
/**
 * ConceptsApi - object-oriented interface
 * @export
 * @class ConceptsApi
 * @extends {BaseAPI}
 */
export declare class ConceptsApi extends BaseAPI {
    /**
     * Fetch concept relationships.
     * @summary Get Concept Relationships
     * @param {ConceptsApiGetConceptRelationshipsV1ConceptsConceptIdRelationshipsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet(requestParameters: ConceptsApiGetConceptRelationshipsV1ConceptsConceptIdRelationshipsGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConceptRelationshipsOut>>;
    /**
     * Get Concept.
     * @summary Get Concept
     * @param {ConceptsApiGetConceptV1ConceptsConceptIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    getConceptV1ConceptsConceptIdGet(requestParameters: ConceptsApiGetConceptV1ConceptsConceptIdGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConceptOut>>;
    /**
     * List Concepts.
     * @summary List Concepts
     * @param {ConceptsApiListConceptsV1ConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listConceptsV1ConceptsGet(requestParameters?: ConceptsApiListConceptsV1ConceptsGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConceptPaginationOut>>;
    /**
     * List Concepts.
     * @summary Semantic Search Concepts
     * @param {ConceptsApiSemanticSearchConceptsV1ConceptsSemanticGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    semanticSearchConceptsV1ConceptsSemanticGet(requestParameters: ConceptsApiSemanticSearchConceptsV1ConceptsSemanticGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConceptOut[]>>;
}
/**
 * EnterpriseApi - axios parameter creator
 * @export
 */
export declare const EnterpriseApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {IntegrationIn} integrationIn
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIntegrationV1EnterpriseIntegrationsPost: (integrationIn: IntegrationIn, teamId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new message.
     * @summary Create Message
     * @param {MessageIn} messageIn
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessageV1EnterpriseMessagesPost: (messageIn: MessageIn, teamId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the Enterprise.
     * @summary Get Enterprise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnterpriseV1EnterpriseGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an Integration.
     * @summary Get Integration
     * @param {string} integrationId
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationV1EnterpriseIntegrationsIntegrationIdGet: (integrationId: string, teamId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get team integrations.
     * @summary Get Integrations
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationsV1EnterpriseIntegrationsGet: (teamId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a Message.
     * @summary Get Message
     * @param {string} messageId
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageV1EnterpriseMessagesMessageIdGet: (messageId: string, teamId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update Enterprise.
     * @summary Update Enterprise
     * @param {EnterpriseIn} enterpriseIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEnterpriseV1EnterprisePatch: (enterpriseIn: EnterpriseIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update Integration.
     * @summary Update Integration
     * @param {string} integrationId
     * @param {IntegrationIn} integrationIn
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch: (integrationId: string, integrationIn: IntegrationIn, teamId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a Message.
     * @summary Update Message
     * @param {string} messageId
     * @param {MessageIn} messageIn
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMessageV1EnterpriseMessagesMessageIdPatch: (messageId: string, messageIn: MessageIn, teamId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EnterpriseApi - functional programming interface
 * @export
 */
export declare const EnterpriseApiFp: (configuration?: Configuration) => {
    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {IntegrationIn} integrationIn
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIntegrationV1EnterpriseIntegrationsPost(integrationIn: IntegrationIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Integration>>;
    /**
     * Create a new message.
     * @summary Create Message
     * @param {MessageIn} messageIn
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessageV1EnterpriseMessagesPost(messageIn: MessageIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOut>>;
    /**
     * Get the Enterprise.
     * @summary Get Enterprise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnterpriseV1EnterpriseGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Enterprise>>;
    /**
     * Get an Integration.
     * @summary Get Integration
     * @param {string} integrationId
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Integration>>;
    /**
     * Get team integrations.
     * @summary Get Integrations
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationsV1EnterpriseIntegrationsGet(teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Integration>>>;
    /**
     * Get a Message.
     * @summary Get Message
     * @param {string} messageId
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageV1EnterpriseMessagesMessageIdGet(messageId: string, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOut>>;
    /**
     * Update Enterprise.
     * @summary Update Enterprise
     * @param {EnterpriseIn} enterpriseIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEnterpriseV1EnterprisePatch(enterpriseIn: EnterpriseIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Enterprise>>;
    /**
     * Update Integration.
     * @summary Update Integration
     * @param {string} integrationId
     * @param {IntegrationIn} integrationIn
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId: string, integrationIn: IntegrationIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Integration>>;
    /**
     * Update a Message.
     * @summary Update Message
     * @param {string} messageId
     * @param {MessageIn} messageIn
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMessageV1EnterpriseMessagesMessageIdPatch(messageId: string, messageIn: MessageIn, teamId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOut>>;
};
/**
 * EnterpriseApi - factory interface
 * @export
 */
export declare const EnterpriseApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {IntegrationIn} integrationIn
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIntegrationV1EnterpriseIntegrationsPost(integrationIn: IntegrationIn, teamId?: string, options?: any): AxiosPromise<Integration>;
    /**
     * Create a new message.
     * @summary Create Message
     * @param {MessageIn} messageIn
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessageV1EnterpriseMessagesPost(messageIn: MessageIn, teamId?: string, options?: any): AxiosPromise<MessageOut>;
    /**
     * Get the Enterprise.
     * @summary Get Enterprise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnterpriseV1EnterpriseGet(options?: any): AxiosPromise<Enterprise>;
    /**
     * Get an Integration.
     * @summary Get Integration
     * @param {string} integrationId
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId: string, teamId?: string, options?: any): AxiosPromise<Integration>;
    /**
     * Get team integrations.
     * @summary Get Integrations
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegrationsV1EnterpriseIntegrationsGet(teamId?: string, options?: any): AxiosPromise<Array<Integration>>;
    /**
     * Get a Message.
     * @summary Get Message
     * @param {string} messageId
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageV1EnterpriseMessagesMessageIdGet(messageId: string, teamId?: string, options?: any): AxiosPromise<MessageOut>;
    /**
     * Update Enterprise.
     * @summary Update Enterprise
     * @param {EnterpriseIn} enterpriseIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEnterpriseV1EnterprisePatch(enterpriseIn: EnterpriseIn, options?: any): AxiosPromise<Enterprise>;
    /**
     * Update Integration.
     * @summary Update Integration
     * @param {string} integrationId
     * @param {IntegrationIn} integrationIn
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId: string, integrationIn: IntegrationIn, teamId?: string, options?: any): AxiosPromise<Integration>;
    /**
     * Update a Message.
     * @summary Update Message
     * @param {string} messageId
     * @param {MessageIn} messageIn
     * @param {string} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMessageV1EnterpriseMessagesMessageIdPatch(messageId: string, messageIn: MessageIn, teamId?: string, options?: any): AxiosPromise<MessageOut>;
};
/**
 * Request parameters for createIntegrationV1EnterpriseIntegrationsPost operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest
 */
export interface EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest {
    /**
     *
     * @type {IntegrationIn}
     * @memberof EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPost
     */
    readonly integrationIn: IntegrationIn;
    /**
     *
     * @type {string}
     * @memberof EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPost
     */
    readonly teamId?: string;
}
/**
 * Request parameters for createMessageV1EnterpriseMessagesPost operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiCreateMessageV1EnterpriseMessagesPostRequest
 */
export interface EnterpriseApiCreateMessageV1EnterpriseMessagesPostRequest {
    /**
     *
     * @type {MessageIn}
     * @memberof EnterpriseApiCreateMessageV1EnterpriseMessagesPost
     */
    readonly messageIn: MessageIn;
    /**
     *
     * @type {string}
     * @memberof EnterpriseApiCreateMessageV1EnterpriseMessagesPost
     */
    readonly teamId?: string;
}
/**
 * Request parameters for getIntegrationV1EnterpriseIntegrationsIntegrationIdGet operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest
 */
export interface EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest {
    /**
     *
     * @type {string}
     * @memberof EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGet
     */
    readonly integrationId: string;
    /**
     *
     * @type {string}
     * @memberof EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGet
     */
    readonly teamId?: string;
}
/**
 * Request parameters for getIntegrationsV1EnterpriseIntegrationsGet operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiGetIntegrationsV1EnterpriseIntegrationsGetRequest
 */
export interface EnterpriseApiGetIntegrationsV1EnterpriseIntegrationsGetRequest {
    /**
     *
     * @type {string}
     * @memberof EnterpriseApiGetIntegrationsV1EnterpriseIntegrationsGet
     */
    readonly teamId?: string;
}
/**
 * Request parameters for getMessageV1EnterpriseMessagesMessageIdGet operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGetRequest
 */
export interface EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGetRequest {
    /**
     *
     * @type {string}
     * @memberof EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGet
     */
    readonly messageId: string;
    /**
     *
     * @type {string}
     * @memberof EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGet
     */
    readonly teamId?: string;
}
/**
 * Request parameters for updateEnterpriseV1EnterprisePatch operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiUpdateEnterpriseV1EnterprisePatchRequest
 */
export interface EnterpriseApiUpdateEnterpriseV1EnterprisePatchRequest {
    /**
     *
     * @type {EnterpriseIn}
     * @memberof EnterpriseApiUpdateEnterpriseV1EnterprisePatch
     */
    readonly enterpriseIn: EnterpriseIn;
}
/**
 * Request parameters for updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest
 */
export interface EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest {
    /**
     *
     * @type {string}
     * @memberof EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch
     */
    readonly integrationId: string;
    /**
     *
     * @type {IntegrationIn}
     * @memberof EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch
     */
    readonly integrationIn: IntegrationIn;
    /**
     *
     * @type {string}
     * @memberof EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch
     */
    readonly teamId?: string;
}
/**
 * Request parameters for updateMessageV1EnterpriseMessagesMessageIdPatch operation in EnterpriseApi.
 * @export
 * @interface EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatchRequest
 */
export interface EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatchRequest {
    /**
     *
     * @type {string}
     * @memberof EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatch
     */
    readonly messageId: string;
    /**
     *
     * @type {MessageIn}
     * @memberof EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatch
     */
    readonly messageIn: MessageIn;
    /**
     *
     * @type {string}
     * @memberof EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatch
     */
    readonly teamId?: string;
}
/**
 * EnterpriseApi - object-oriented interface
 * @export
 * @class EnterpriseApi
 * @extends {BaseAPI}
 */
export declare class EnterpriseApi extends BaseAPI {
    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    createIntegrationV1EnterpriseIntegrationsPost(requestParameters: EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Integration>>;
    /**
     * Create a new message.
     * @summary Create Message
     * @param {EnterpriseApiCreateMessageV1EnterpriseMessagesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    createMessageV1EnterpriseMessagesPost(requestParameters: EnterpriseApiCreateMessageV1EnterpriseMessagesPostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MessageOut>>;
    /**
     * Get the Enterprise.
     * @summary Get Enterprise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    getEnterpriseV1EnterpriseGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Enterprise>>;
    /**
     * Get an Integration.
     * @summary Get Integration
     * @param {EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(requestParameters: EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Integration>>;
    /**
     * Get team integrations.
     * @summary Get Integrations
     * @param {EnterpriseApiGetIntegrationsV1EnterpriseIntegrationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    getIntegrationsV1EnterpriseIntegrationsGet(requestParameters?: EnterpriseApiGetIntegrationsV1EnterpriseIntegrationsGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Integration[]>>;
    /**
     * Get a Message.
     * @summary Get Message
     * @param {EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    getMessageV1EnterpriseMessagesMessageIdGet(requestParameters: EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MessageOut>>;
    /**
     * Update Enterprise.
     * @summary Update Enterprise
     * @param {EnterpriseApiUpdateEnterpriseV1EnterprisePatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    updateEnterpriseV1EnterprisePatch(requestParameters: EnterpriseApiUpdateEnterpriseV1EnterprisePatchRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Enterprise>>;
    /**
     * Update Integration.
     * @summary Update Integration
     * @param {EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(requestParameters: EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Integration>>;
    /**
     * Update a Message.
     * @summary Update Message
     * @param {EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    updateMessageV1EnterpriseMessagesMessageIdPatch(requestParameters: EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatchRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MessageOut>>;
}
/**
 * FeedbackApi - axios parameter creator
 * @export
 */
export declare const FeedbackApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Post user feedback on AI-generated relationship synthesis to s3.
     * @summary Post Synthesis Feedback
     * @param {SynthesisFeedbackIn} synthesisFeedbackIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postSynthesisFeedbackV1FeedbackPost: (synthesisFeedbackIn: SynthesisFeedbackIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FeedbackApi - functional programming interface
 * @export
 */
export declare const FeedbackApiFp: (configuration?: Configuration) => {
    /**
     * Post user feedback on AI-generated relationship synthesis to s3.
     * @summary Post Synthesis Feedback
     * @param {SynthesisFeedbackIn} synthesisFeedbackIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postSynthesisFeedbackV1FeedbackPost(synthesisFeedbackIn: SynthesisFeedbackIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * FeedbackApi - factory interface
 * @export
 */
export declare const FeedbackApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Post user feedback on AI-generated relationship synthesis to s3.
     * @summary Post Synthesis Feedback
     * @param {SynthesisFeedbackIn} synthesisFeedbackIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postSynthesisFeedbackV1FeedbackPost(synthesisFeedbackIn: SynthesisFeedbackIn, options?: any): AxiosPromise<any>;
};
/**
 * Request parameters for postSynthesisFeedbackV1FeedbackPost operation in FeedbackApi.
 * @export
 * @interface FeedbackApiPostSynthesisFeedbackV1FeedbackPostRequest
 */
export interface FeedbackApiPostSynthesisFeedbackV1FeedbackPostRequest {
    /**
     *
     * @type {SynthesisFeedbackIn}
     * @memberof FeedbackApiPostSynthesisFeedbackV1FeedbackPost
     */
    readonly synthesisFeedbackIn: SynthesisFeedbackIn;
}
/**
 * FeedbackApi - object-oriented interface
 * @export
 * @class FeedbackApi
 * @extends {BaseAPI}
 */
export declare class FeedbackApi extends BaseAPI {
    /**
     * Post user feedback on AI-generated relationship synthesis to s3.
     * @summary Post Synthesis Feedback
     * @param {FeedbackApiPostSynthesisFeedbackV1FeedbackPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    postSynthesisFeedbackV1FeedbackPost(requestParameters: FeedbackApiPostSynthesisFeedbackV1FeedbackPostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any>>;
}
/**
 * FindingsApi - axios parameter creator
 * @export
 */
export declare const FindingsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get study findings via association ids or dois.
     * @summary Get Study Findings From Association Ids Or Dois
     * @param {StudyFindingsIn} studyFindingsIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost: (studyFindingsIn: StudyFindingsIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FindingsApi - functional programming interface
 * @export
 */
export declare const FindingsApiFp: (configuration?: Configuration) => {
    /**
     * Get study findings via association ids or dois.
     * @summary Get Study Findings From Association Ids Or Dois
     * @param {StudyFindingsIn} studyFindingsIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost(studyFindingsIn: StudyFindingsIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyFindingsOut>>;
};
/**
 * FindingsApi - factory interface
 * @export
 */
export declare const FindingsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get study findings via association ids or dois.
     * @summary Get Study Findings From Association Ids Or Dois
     * @param {StudyFindingsIn} studyFindingsIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost(studyFindingsIn: StudyFindingsIn, options?: any): AxiosPromise<StudyFindingsOut>;
};
/**
 * Request parameters for getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost operation in FindingsApi.
 * @export
 * @interface FindingsApiGetStudyFindingsFromAssociationIdsOrDOIsV1FindingsPostRequest
 */
export interface FindingsApiGetStudyFindingsFromAssociationIdsOrDOIsV1FindingsPostRequest {
    /**
     *
     * @type {StudyFindingsIn}
     * @memberof FindingsApiGetStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost
     */
    readonly studyFindingsIn: StudyFindingsIn;
}
/**
 * FindingsApi - object-oriented interface
 * @export
 * @class FindingsApi
 * @extends {BaseAPI}
 */
export declare class FindingsApi extends BaseAPI {
    /**
     * Get study findings via association ids or dois.
     * @summary Get Study Findings From Association Ids Or Dois
     * @param {FindingsApiGetStudyFindingsFromAssociationIdsOrDOIsV1FindingsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FindingsApi
     */
    getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost(requestParameters: FindingsApiGetStudyFindingsFromAssociationIdsOrDOIsV1FindingsPostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudyFindingsOut>>;
}
/**
 * MetricsApi - axios parameter creator
 * @export
 */
export declare const MetricsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get metrics on the graph.
     * @summary Get Graph Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGraphMetricsV1MetricsGraphGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MetricsApi - functional programming interface
 * @export
 */
export declare const MetricsApiFp: (configuration?: Configuration) => {
    /**
     * Get metrics on the graph.
     * @summary Get Graph Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGraphMetricsV1MetricsGraphGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphMetrics>>;
};
/**
 * MetricsApi - factory interface
 * @export
 */
export declare const MetricsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get metrics on the graph.
     * @summary Get Graph Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGraphMetricsV1MetricsGraphGet(options?: any): AxiosPromise<GraphMetrics>;
};
/**
 * MetricsApi - object-oriented interface
 * @export
 * @class MetricsApi
 * @extends {BaseAPI}
 */
export declare class MetricsApi extends BaseAPI {
    /**
     * Get metrics on the graph.
     * @summary Get Graph Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    getGraphMetricsV1MetricsGraphGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GraphMetrics>>;
}
/**
 * ModeldbApi - axios parameter creator
 * @export
 */
export declare const ModeldbApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get algorithms by id.
     * @summary Get Algorithm
     * @param {string} algorithmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet: (algorithmId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List available algorithms in ModelDB. Search with algorithm class if passed.
     * @summary List Algorithms
     * @param {string} [algorithmClass]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAlgorithmsV1ModeldbAlgorithmsGet: (algorithmClass?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ModeldbApi - functional programming interface
 * @export
 */
export declare const ModeldbApiFp: (configuration?: Configuration) => {
    /**
     * Get algorithms by id.
     * @summary Get Algorithm
     * @param {string} algorithmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlgorithmOut>>;
    /**
     * List available algorithms in ModelDB. Search with algorithm class if passed.
     * @summary List Algorithms
     * @param {string} [algorithmClass]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlgorithmListResult>>;
};
/**
 * ModeldbApi - factory interface
 * @export
 */
export declare const ModeldbApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get algorithms by id.
     * @summary Get Algorithm
     * @param {string} algorithmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId: string, options?: any): AxiosPromise<AlgorithmOut>;
    /**
     * List available algorithms in ModelDB. Search with algorithm class if passed.
     * @summary List Algorithms
     * @param {string} [algorithmClass]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass?: string, options?: any): AxiosPromise<AlgorithmListResult>;
};
/**
 * Request parameters for getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet operation in ModeldbApi.
 * @export
 * @interface ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGetRequest
 */
export interface ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGetRequest {
    /**
     *
     * @type {string}
     * @memberof ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet
     */
    readonly algorithmId: string;
}
/**
 * Request parameters for listAlgorithmsV1ModeldbAlgorithmsGet operation in ModeldbApi.
 * @export
 * @interface ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGetRequest
 */
export interface ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGetRequest {
    /**
     *
     * @type {string}
     * @memberof ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGet
     */
    readonly algorithmClass?: string;
}
/**
 * ModeldbApi - object-oriented interface
 * @export
 * @class ModeldbApi
 * @extends {BaseAPI}
 */
export declare class ModeldbApi extends BaseAPI {
    /**
     * Get algorithms by id.
     * @summary Get Algorithm
     * @param {ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeldbApi
     */
    getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(requestParameters: ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AlgorithmOut>>;
    /**
     * List available algorithms in ModelDB. Search with algorithm class if passed.
     * @summary List Algorithms
     * @param {ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeldbApi
     */
    listAlgorithmsV1ModeldbAlgorithmsGet(requestParameters?: ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AlgorithmListResult>>;
}
/**
 * PassthroughApi - axios parameter creator
 * @export
 */
export declare const PassthroughApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Forward request to crossref.
     * @summary Get Crossref
     * @param {any} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCrossrefV1CrossrefRestOfPathGet: (restOfPath: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Post GetFTR entitlements endpoint.
     * @summary Get Ftr Entitlements
     * @param {GetFTREntitlementsIn} getFTREntitlementsIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFtrEntitlementsV1GetftrEntitlementsPost: (getFTREntitlementsIn: GetFTREntitlementsIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Forward request to ORCID.
     * @summary Get Orcid
     * @param {any} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrcidV1OrcidRestOfPathGet: (restOfPath: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Forward request to SearchGraph.
     * @summary Get Semantic Graph
     * @param {string} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticGraphV1SemanticGraphRestOfPathGet: (restOfPath: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Forward request to UMLS.
     * @summary Get Umls Concepts
     * @param {any} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUmlsConceptsV1UmlsRestOfPathGet: (restOfPath: any, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Forward request to SearchGraph.
     * @summary Get Variable Concepts
     * @param {string} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVariableConceptsV1VariableConceptsRestOfPathGet: (restOfPath: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Forward GraphQL request to SystemDB.
     * @summary Post Graphql
     * @param {GraphQLQuery} graphQLQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postGraphqlV1GraphqlPost: (graphQLQuery: GraphQLQuery, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PassthroughApi - functional programming interface
 * @export
 */
export declare const PassthroughApiFp: (configuration?: Configuration) => {
    /**
     * Forward request to crossref.
     * @summary Get Crossref
     * @param {any} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCrossrefV1CrossrefRestOfPathGet(restOfPath: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Post GetFTR entitlements endpoint.
     * @summary Get Ftr Entitlements
     * @param {GetFTREntitlementsIn} getFTREntitlementsIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFtrEntitlementsV1GetftrEntitlementsPost(getFTREntitlementsIn: GetFTREntitlementsIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFTREntitlementsOut>>;
    /**
     * Forward request to ORCID.
     * @summary Get Orcid
     * @param {any} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrcidV1OrcidRestOfPathGet(restOfPath: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Forward request to SearchGraph.
     * @summary Get Semantic Graph
     * @param {string} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticGraphV1SemanticGraphRestOfPathGet(restOfPath: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Forward request to UMLS.
     * @summary Get Umls Concepts
     * @param {any} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUmlsConceptsV1UmlsRestOfPathGet(restOfPath: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Forward request to SearchGraph.
     * @summary Get Variable Concepts
     * @param {string} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVariableConceptsV1VariableConceptsRestOfPathGet(restOfPath: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Forward GraphQL request to SystemDB.
     * @summary Post Graphql
     * @param {GraphQLQuery} graphQLQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postGraphqlV1GraphqlPost(graphQLQuery: GraphQLQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * PassthroughApi - factory interface
 * @export
 */
export declare const PassthroughApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Forward request to crossref.
     * @summary Get Crossref
     * @param {any} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCrossrefV1CrossrefRestOfPathGet(restOfPath: any, options?: any): AxiosPromise<any>;
    /**
     * Post GetFTR entitlements endpoint.
     * @summary Get Ftr Entitlements
     * @param {GetFTREntitlementsIn} getFTREntitlementsIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFtrEntitlementsV1GetftrEntitlementsPost(getFTREntitlementsIn: GetFTREntitlementsIn, options?: any): AxiosPromise<GetFTREntitlementsOut>;
    /**
     * Forward request to ORCID.
     * @summary Get Orcid
     * @param {any} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrcidV1OrcidRestOfPathGet(restOfPath: any, options?: any): AxiosPromise<any>;
    /**
     * Forward request to SearchGraph.
     * @summary Get Semantic Graph
     * @param {string} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticGraphV1SemanticGraphRestOfPathGet(restOfPath: string, options?: any): AxiosPromise<any>;
    /**
     * Forward request to UMLS.
     * @summary Get Umls Concepts
     * @param {any} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUmlsConceptsV1UmlsRestOfPathGet(restOfPath: any, options?: any): AxiosPromise<any>;
    /**
     * Forward request to SearchGraph.
     * @summary Get Variable Concepts
     * @param {string} restOfPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVariableConceptsV1VariableConceptsRestOfPathGet(restOfPath: string, options?: any): AxiosPromise<any>;
    /**
     * Forward GraphQL request to SystemDB.
     * @summary Post Graphql
     * @param {GraphQLQuery} graphQLQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postGraphqlV1GraphqlPost(graphQLQuery: GraphQLQuery, options?: any): AxiosPromise<any>;
};
/**
 * Request parameters for getCrossrefV1CrossrefRestOfPathGet operation in PassthroughApi.
 * @export
 * @interface PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest
 */
export interface PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest {
    /**
     *
     * @type {any}
     * @memberof PassthroughApiGetCrossrefV1CrossrefRestOfPathGet
     */
    readonly restOfPath: any;
}
/**
 * Request parameters for getFtrEntitlementsV1GetftrEntitlementsPost operation in PassthroughApi.
 * @export
 * @interface PassthroughApiGetFtrEntitlementsV1GetftrEntitlementsPostRequest
 */
export interface PassthroughApiGetFtrEntitlementsV1GetftrEntitlementsPostRequest {
    /**
     *
     * @type {GetFTREntitlementsIn}
     * @memberof PassthroughApiGetFtrEntitlementsV1GetftrEntitlementsPost
     */
    readonly getFTREntitlementsIn: GetFTREntitlementsIn;
}
/**
 * Request parameters for getOrcidV1OrcidRestOfPathGet operation in PassthroughApi.
 * @export
 * @interface PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest
 */
export interface PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest {
    /**
     *
     * @type {any}
     * @memberof PassthroughApiGetOrcidV1OrcidRestOfPathGet
     */
    readonly restOfPath: any;
}
/**
 * Request parameters for getSemanticGraphV1SemanticGraphRestOfPathGet operation in PassthroughApi.
 * @export
 * @interface PassthroughApiGetSemanticGraphV1SemanticGraphRestOfPathGetRequest
 */
export interface PassthroughApiGetSemanticGraphV1SemanticGraphRestOfPathGetRequest {
    /**
     *
     * @type {string}
     * @memberof PassthroughApiGetSemanticGraphV1SemanticGraphRestOfPathGet
     */
    readonly restOfPath: string;
}
/**
 * Request parameters for getUmlsConceptsV1UmlsRestOfPathGet operation in PassthroughApi.
 * @export
 * @interface PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGetRequest
 */
export interface PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGetRequest {
    /**
     *
     * @type {any}
     * @memberof PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGet
     */
    readonly restOfPath: any;
}
/**
 * Request parameters for getVariableConceptsV1VariableConceptsRestOfPathGet operation in PassthroughApi.
 * @export
 * @interface PassthroughApiGetVariableConceptsV1VariableConceptsRestOfPathGetRequest
 */
export interface PassthroughApiGetVariableConceptsV1VariableConceptsRestOfPathGetRequest {
    /**
     *
     * @type {string}
     * @memberof PassthroughApiGetVariableConceptsV1VariableConceptsRestOfPathGet
     */
    readonly restOfPath: string;
}
/**
 * Request parameters for postGraphqlV1GraphqlPost operation in PassthroughApi.
 * @export
 * @interface PassthroughApiPostGraphqlV1GraphqlPostRequest
 */
export interface PassthroughApiPostGraphqlV1GraphqlPostRequest {
    /**
     *
     * @type {GraphQLQuery}
     * @memberof PassthroughApiPostGraphqlV1GraphqlPost
     */
    readonly graphQLQuery: GraphQLQuery;
}
/**
 * PassthroughApi - object-oriented interface
 * @export
 * @class PassthroughApi
 * @extends {BaseAPI}
 */
export declare class PassthroughApi extends BaseAPI {
    /**
     * Forward request to crossref.
     * @summary Get Crossref
     * @param {PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getCrossrefV1CrossrefRestOfPathGet(requestParameters: PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any>>;
    /**
     * Post GetFTR entitlements endpoint.
     * @summary Get Ftr Entitlements
     * @param {PassthroughApiGetFtrEntitlementsV1GetftrEntitlementsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getFtrEntitlementsV1GetftrEntitlementsPost(requestParameters: PassthroughApiGetFtrEntitlementsV1GetftrEntitlementsPostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFTREntitlementsOut>>;
    /**
     * Forward request to ORCID.
     * @summary Get Orcid
     * @param {PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getOrcidV1OrcidRestOfPathGet(requestParameters: PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any>>;
    /**
     * Forward request to SearchGraph.
     * @summary Get Semantic Graph
     * @param {PassthroughApiGetSemanticGraphV1SemanticGraphRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getSemanticGraphV1SemanticGraphRestOfPathGet(requestParameters: PassthroughApiGetSemanticGraphV1SemanticGraphRestOfPathGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any>>;
    /**
     * Forward request to UMLS.
     * @summary Get Umls Concepts
     * @param {PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getUmlsConceptsV1UmlsRestOfPathGet(requestParameters: PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any>>;
    /**
     * Forward request to SearchGraph.
     * @summary Get Variable Concepts
     * @param {PassthroughApiGetVariableConceptsV1VariableConceptsRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getVariableConceptsV1VariableConceptsRestOfPathGet(requestParameters: PassthroughApiGetVariableConceptsV1VariableConceptsRestOfPathGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any>>;
    /**
     * Forward GraphQL request to SystemDB.
     * @summary Post Graphql
     * @param {PassthroughApiPostGraphqlV1GraphqlPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    postGraphqlV1GraphqlPost(requestParameters: PassthroughApiPostGraphqlV1GraphqlPostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any>>;
}
/**
 * QuerySuggestionsApi - axios parameter creator
 * @export
 */
export declare const QuerySuggestionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get query suggestions.
     * @summary Get Query Suggestions.
     * @param {SuggestedQueriesIn} suggestedQueriesIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuerySuggestionsV1QuerySuggestionsPost: (suggestedQueriesIn: SuggestedQueriesIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * QuerySuggestionsApi - functional programming interface
 * @export
 */
export declare const QuerySuggestionsApiFp: (configuration?: Configuration) => {
    /**
     * Get query suggestions.
     * @summary Get Query Suggestions.
     * @param {SuggestedQueriesIn} suggestedQueriesIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuerySuggestionsV1QuerySuggestionsPost(suggestedQueriesIn: SuggestedQueriesIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuggestedQueriesOut>>;
};
/**
 * QuerySuggestionsApi - factory interface
 * @export
 */
export declare const QuerySuggestionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get query suggestions.
     * @summary Get Query Suggestions.
     * @param {SuggestedQueriesIn} suggestedQueriesIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuerySuggestionsV1QuerySuggestionsPost(suggestedQueriesIn: SuggestedQueriesIn, options?: any): AxiosPromise<SuggestedQueriesOut>;
};
/**
 * Request parameters for getQuerySuggestionsV1QuerySuggestionsPost operation in QuerySuggestionsApi.
 * @export
 * @interface QuerySuggestionsApiGetQuerySuggestionsV1QuerySuggestionsPostRequest
 */
export interface QuerySuggestionsApiGetQuerySuggestionsV1QuerySuggestionsPostRequest {
    /**
     *
     * @type {SuggestedQueriesIn}
     * @memberof QuerySuggestionsApiGetQuerySuggestionsV1QuerySuggestionsPost
     */
    readonly suggestedQueriesIn: SuggestedQueriesIn;
}
/**
 * QuerySuggestionsApi - object-oriented interface
 * @export
 * @class QuerySuggestionsApi
 * @extends {BaseAPI}
 */
export declare class QuerySuggestionsApi extends BaseAPI {
    /**
     * Get query suggestions.
     * @summary Get Query Suggestions.
     * @param {QuerySuggestionsApiGetQuerySuggestionsV1QuerySuggestionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuerySuggestionsApi
     */
    getQuerySuggestionsV1QuerySuggestionsPost(requestParameters: QuerySuggestionsApiGetQuerySuggestionsV1QuerySuggestionsPostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SuggestedQueriesOut>>;
}
/**
 * SemanticSearchApi - axios parameter creator
 * @export
 */
export declare const SemanticSearchApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Cluster Relationships
     * @param {SystemSearchIn} systemSearchIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost: (systemSearchIn: SystemSearchIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Semantic Search
     * @param {SystemSearchIn} systemSearchIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    asyncSemanticSearchV1SemanticSearchClusterPost: (systemSearchIn: SystemSearchIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Fetch Cluster Response
     * @param {string} runId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet: (runId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get semantic search.  Values from semantic search. Logs freemium usage on success
     * @summary Fetch Synthesis
     * @param {string} cacheKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchSynthesisV1SemanticSearchFetchGet: (cacheKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get semantic search usage.  date defaults to Jan 1st 2023 - before releasing tracking. Ommiting the date query param is equivalent of getting usage regardless of the date  metric defaults to Metrics.semantic_search_create for backward compatibility so that API consumers that don\'t pass a metric query param still get the original behaviour.
     * @summary Get Semantic Search Usage
     * @param {string} [dateFrom]
     * @param {Metrics} [metric]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticSearchUsageV1SemanticSearchUsageGet: (dateFrom?: string, metric?: Metrics, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get semantic search findings.  Values from semantic search.
     * @summary Get System Search Findings Data
     * @param {SystemSearchIn} systemSearchIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemSearchFindingsDataV1SemanticSearchDataPost: (systemSearchIn: SystemSearchIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Regenerate Synthesis
     * @param {string} cacheKey
     * @param {boolean} [forceRerun]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regenerateSynthesisV1SemanticSearchRegeneratePost: (cacheKey: string, forceRerun?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SemanticSearchApi - functional programming interface
 * @export
 */
export declare const SemanticSearchApiFp: (configuration?: Configuration) => {
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Cluster Relationships
     * @param {SystemSearchIn} systemSearchIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost(systemSearchIn: SystemSearchIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Semantic Search
     * @param {SystemSearchIn} systemSearchIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    asyncSemanticSearchV1SemanticSearchClusterPost(systemSearchIn: SystemSearchIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SynthesisResponse>>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Fetch Cluster Response
     * @param {string} runId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet(runId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterOutStatus>>;
    /**
     * Get semantic search.  Values from semantic search. Logs freemium usage on success
     * @summary Fetch Synthesis
     * @param {string} cacheKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchSynthesisV1SemanticSearchFetchGet(cacheKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SynthesisOut>>;
    /**
     * Get semantic search usage.  date defaults to Jan 1st 2023 - before releasing tracking. Ommiting the date query param is equivalent of getting usage regardless of the date  metric defaults to Metrics.semantic_search_create for backward compatibility so that API consumers that don\'t pass a metric query param still get the original behaviour.
     * @summary Get Semantic Search Usage
     * @param {string} [dateFrom]
     * @param {Metrics} [metric]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticSearchUsageV1SemanticSearchUsageGet(dateFrom?: string, metric?: Metrics, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserMetricUsageOut>>;
    /**
     * Get semantic search findings.  Values from semantic search.
     * @summary Get System Search Findings Data
     * @param {SystemSearchIn} systemSearchIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemSearchFindingsDataV1SemanticSearchDataPost(systemSearchIn: SystemSearchIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSearchData>>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Regenerate Synthesis
     * @param {string} cacheKey
     * @param {boolean} [forceRerun]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regenerateSynthesisV1SemanticSearchRegeneratePost(cacheKey: string, forceRerun?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * SemanticSearchApi - factory interface
 * @export
 */
export declare const SemanticSearchApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Cluster Relationships
     * @param {SystemSearchIn} systemSearchIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost(systemSearchIn: SystemSearchIn, options?: any): AxiosPromise<any>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Semantic Search
     * @param {SystemSearchIn} systemSearchIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    asyncSemanticSearchV1SemanticSearchClusterPost(systemSearchIn: SystemSearchIn, options?: any): AxiosPromise<SynthesisResponse>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Fetch Cluster Response
     * @param {string} runId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet(runId: string, options?: any): AxiosPromise<ClusterOutStatus>;
    /**
     * Get semantic search.  Values from semantic search. Logs freemium usage on success
     * @summary Fetch Synthesis
     * @param {string} cacheKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchSynthesisV1SemanticSearchFetchGet(cacheKey: string, options?: any): AxiosPromise<SynthesisOut>;
    /**
     * Get semantic search usage.  date defaults to Jan 1st 2023 - before releasing tracking. Ommiting the date query param is equivalent of getting usage regardless of the date  metric defaults to Metrics.semantic_search_create for backward compatibility so that API consumers that don\'t pass a metric query param still get the original behaviour.
     * @summary Get Semantic Search Usage
     * @param {string} [dateFrom]
     * @param {Metrics} [metric]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticSearchUsageV1SemanticSearchUsageGet(dateFrom?: string, metric?: Metrics, options?: any): AxiosPromise<UserMetricUsageOut>;
    /**
     * Get semantic search findings.  Values from semantic search.
     * @summary Get System Search Findings Data
     * @param {SystemSearchIn} systemSearchIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemSearchFindingsDataV1SemanticSearchDataPost(systemSearchIn: SystemSearchIn, options?: any): AxiosPromise<SystemSearchData>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Regenerate Synthesis
     * @param {string} cacheKey
     * @param {boolean} [forceRerun]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regenerateSynthesisV1SemanticSearchRegeneratePost(cacheKey: string, forceRerun?: boolean, options?: any): AxiosPromise<any>;
};
/**
 * Request parameters for asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiAsyncClusterRelationshipsV1SemanticSearchClusterAsyncPostRequest
 */
export interface SemanticSearchApiAsyncClusterRelationshipsV1SemanticSearchClusterAsyncPostRequest {
    /**
     *
     * @type {SystemSearchIn}
     * @memberof SemanticSearchApiAsyncClusterRelationshipsV1SemanticSearchClusterAsyncPost
     */
    readonly systemSearchIn: SystemSearchIn;
}
/**
 * Request parameters for asyncSemanticSearchV1SemanticSearchClusterPost operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiAsyncSemanticSearchV1SemanticSearchClusterPostRequest
 */
export interface SemanticSearchApiAsyncSemanticSearchV1SemanticSearchClusterPostRequest {
    /**
     *
     * @type {SystemSearchIn}
     * @memberof SemanticSearchApiAsyncSemanticSearchV1SemanticSearchClusterPost
     */
    readonly systemSearchIn: SystemSearchIn;
}
/**
 * Request parameters for fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiFetchClusterResponseV1SemanticSearchClusterAsyncRunIdGetRequest
 */
export interface SemanticSearchApiFetchClusterResponseV1SemanticSearchClusterAsyncRunIdGetRequest {
    /**
     *
     * @type {string}
     * @memberof SemanticSearchApiFetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet
     */
    readonly runId: string;
}
/**
 * Request parameters for fetchSynthesisV1SemanticSearchFetchGet operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiFetchSynthesisV1SemanticSearchFetchGetRequest
 */
export interface SemanticSearchApiFetchSynthesisV1SemanticSearchFetchGetRequest {
    /**
     *
     * @type {string}
     * @memberof SemanticSearchApiFetchSynthesisV1SemanticSearchFetchGet
     */
    readonly cacheKey: string;
}
/**
 * Request parameters for getSemanticSearchUsageV1SemanticSearchUsageGet operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGetRequest
 */
export interface SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGetRequest {
    /**
     *
     * @type {string}
     * @memberof SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGet
     */
    readonly dateFrom?: string;
    /**
     *
     * @type {Metrics}
     * @memberof SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGet
     */
    readonly metric?: Metrics;
}
/**
 * Request parameters for getSystemSearchFindingsDataV1SemanticSearchDataPost operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiGetSystemSearchFindingsDataV1SemanticSearchDataPostRequest
 */
export interface SemanticSearchApiGetSystemSearchFindingsDataV1SemanticSearchDataPostRequest {
    /**
     *
     * @type {SystemSearchIn}
     * @memberof SemanticSearchApiGetSystemSearchFindingsDataV1SemanticSearchDataPost
     */
    readonly systemSearchIn: SystemSearchIn;
}
/**
 * Request parameters for regenerateSynthesisV1SemanticSearchRegeneratePost operation in SemanticSearchApi.
 * @export
 * @interface SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePostRequest
 */
export interface SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePostRequest {
    /**
     *
     * @type {string}
     * @memberof SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePost
     */
    readonly cacheKey: string;
    /**
     *
     * @type {boolean}
     * @memberof SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePost
     */
    readonly forceRerun?: boolean;
}
/**
 * SemanticSearchApi - object-oriented interface
 * @export
 * @class SemanticSearchApi
 * @extends {BaseAPI}
 */
export declare class SemanticSearchApi extends BaseAPI {
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Cluster Relationships
     * @param {SemanticSearchApiAsyncClusterRelationshipsV1SemanticSearchClusterAsyncPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost(requestParameters: SemanticSearchApiAsyncClusterRelationshipsV1SemanticSearchClusterAsyncPostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any>>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Semantic Search
     * @param {SemanticSearchApiAsyncSemanticSearchV1SemanticSearchClusterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    asyncSemanticSearchV1SemanticSearchClusterPost(requestParameters: SemanticSearchApiAsyncSemanticSearchV1SemanticSearchClusterPostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SynthesisResponse>>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Fetch Cluster Response
     * @param {SemanticSearchApiFetchClusterResponseV1SemanticSearchClusterAsyncRunIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet(requestParameters: SemanticSearchApiFetchClusterResponseV1SemanticSearchClusterAsyncRunIdGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ClusterOutStatus>>;
    /**
     * Get semantic search.  Values from semantic search. Logs freemium usage on success
     * @summary Fetch Synthesis
     * @param {SemanticSearchApiFetchSynthesisV1SemanticSearchFetchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    fetchSynthesisV1SemanticSearchFetchGet(requestParameters: SemanticSearchApiFetchSynthesisV1SemanticSearchFetchGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SynthesisOut>>;
    /**
     * Get semantic search usage.  date defaults to Jan 1st 2023 - before releasing tracking. Ommiting the date query param is equivalent of getting usage regardless of the date  metric defaults to Metrics.semantic_search_create for backward compatibility so that API consumers that don\'t pass a metric query param still get the original behaviour.
     * @summary Get Semantic Search Usage
     * @param {SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    getSemanticSearchUsageV1SemanticSearchUsageGet(requestParameters?: SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserMetricUsageOut>>;
    /**
     * Get semantic search findings.  Values from semantic search.
     * @summary Get System Search Findings Data
     * @param {SemanticSearchApiGetSystemSearchFindingsDataV1SemanticSearchDataPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    getSystemSearchFindingsDataV1SemanticSearchDataPost(requestParameters: SemanticSearchApiGetSystemSearchFindingsDataV1SemanticSearchDataPostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SystemSearchData>>;
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Regenerate Synthesis
     * @param {SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    regenerateSynthesisV1SemanticSearchRegeneratePost(requestParameters: SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any>>;
}
/**
 * SsoApi - axios parameter creator
 * @export
 */
export declare const SsoApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get Identity Provider name for given email domain.
     * @summary Get Identity Provider Name
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityProviderNameV1IdpNameEmailGet: (email: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SsoApi - functional programming interface
 * @export
 */
export declare const SsoApiFp: (configuration?: Configuration) => {
    /**
     * Get Identity Provider name for given email domain.
     * @summary Get Identity Provider Name
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityProviderNameV1IdpNameEmailGet(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityProviderNameOut>>;
};
/**
 * SsoApi - factory interface
 * @export
 */
export declare const SsoApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get Identity Provider name for given email domain.
     * @summary Get Identity Provider Name
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityProviderNameV1IdpNameEmailGet(email: string, options?: any): AxiosPromise<IdentityProviderNameOut>;
};
/**
 * Request parameters for getIdentityProviderNameV1IdpNameEmailGet operation in SsoApi.
 * @export
 * @interface SsoApiGetIdentityProviderNameV1IdpNameEmailGetRequest
 */
export interface SsoApiGetIdentityProviderNameV1IdpNameEmailGetRequest {
    /**
     *
     * @type {string}
     * @memberof SsoApiGetIdentityProviderNameV1IdpNameEmailGet
     */
    readonly email: string;
}
/**
 * SsoApi - object-oriented interface
 * @export
 * @class SsoApi
 * @extends {BaseAPI}
 */
export declare class SsoApi extends BaseAPI {
    /**
     * Get Identity Provider name for given email domain.
     * @summary Get Identity Provider Name
     * @param {SsoApiGetIdentityProviderNameV1IdpNameEmailGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsoApi
     */
    getIdentityProviderNameV1IdpNameEmailGet(requestParameters: SsoApiGetIdentityProviderNameV1IdpNameEmailGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityProviderNameOut>>;
}
/**
 * StripeApi - axios parameter creator
 * @export
 */
export declare const StripeApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Add subscription seats.
     * @summary Add Subscription Seats
     * @param {string} subscriptionId
     * @param {AddSubscriptionSeatIn} addSubscriptionSeatIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost: (subscriptionId: string, addSubscriptionSeatIn: AddSubscriptionSeatIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get subscription seats.
     * @summary Get Subscription Seats
     * @param {string} subscriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet: (subscriptionId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Start stripe checkout session.
     * @summary Manage Subscription
     * @param {string} [domainCallback]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manageSubscriptionV1StripeSubscriptionManagePost: (domainCallback?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Remove subscription seat.
     * @summary Remove Subscription Seat
     * @param {string} email
     * @param {string} subscriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete: (email: string, subscriptionId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StripeApi - functional programming interface
 * @export
 */
export declare const StripeApiFp: (configuration?: Configuration) => {
    /**
     * Add subscription seats.
     * @summary Add Subscription Seats
     * @param {string} subscriptionId
     * @param {AddSubscriptionSeatIn} addSubscriptionSeatIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost(subscriptionId: string, addSubscriptionSeatIn: AddSubscriptionSeatIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     * Get subscription seats.
     * @summary Get Subscription Seats
     * @param {string} subscriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(subscriptionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionSeats>>;
    /**
     * Start stripe checkout session.
     * @summary Manage Subscription
     * @param {string} [domainCallback]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manageSubscriptionV1StripeSubscriptionManagePost(domainCallback?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeSessionOut>>;
    /**
     * Remove subscription seat.
     * @summary Remove Subscription Seat
     * @param {string} email
     * @param {string} subscriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(email: string, subscriptionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
};
/**
 * StripeApi - factory interface
 * @export
 */
export declare const StripeApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Add subscription seats.
     * @summary Add Subscription Seats
     * @param {string} subscriptionId
     * @param {AddSubscriptionSeatIn} addSubscriptionSeatIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost(subscriptionId: string, addSubscriptionSeatIn: AddSubscriptionSeatIn, options?: any): AxiosPromise<boolean>;
    /**
     * Get subscription seats.
     * @summary Get Subscription Seats
     * @param {string} subscriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(subscriptionId: string, options?: any): AxiosPromise<SubscriptionSeats>;
    /**
     * Start stripe checkout session.
     * @summary Manage Subscription
     * @param {string} [domainCallback]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manageSubscriptionV1StripeSubscriptionManagePost(domainCallback?: string, options?: any): AxiosPromise<StripeSessionOut>;
    /**
     * Remove subscription seat.
     * @summary Remove Subscription Seat
     * @param {string} email
     * @param {string} subscriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(email: string, subscriptionId: string, options?: any): AxiosPromise<boolean>;
};
/**
 * Request parameters for addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost operation in StripeApi.
 * @export
 * @interface StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPostRequest
 */
export interface StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPostRequest {
    /**
     *
     * @type {string}
     * @memberof StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost
     */
    readonly subscriptionId: string;
    /**
     *
     * @type {AddSubscriptionSeatIn}
     * @memberof StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost
     */
    readonly addSubscriptionSeatIn: AddSubscriptionSeatIn;
}
/**
 * Request parameters for getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet operation in StripeApi.
 * @export
 * @interface StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGetRequest
 */
export interface StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGetRequest {
    /**
     *
     * @type {string}
     * @memberof StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet
     */
    readonly subscriptionId: string;
}
/**
 * Request parameters for manageSubscriptionV1StripeSubscriptionManagePost operation in StripeApi.
 * @export
 * @interface StripeApiManageSubscriptionV1StripeSubscriptionManagePostRequest
 */
export interface StripeApiManageSubscriptionV1StripeSubscriptionManagePostRequest {
    /**
     *
     * @type {string}
     * @memberof StripeApiManageSubscriptionV1StripeSubscriptionManagePost
     */
    readonly domainCallback?: string;
}
/**
 * Request parameters for removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete operation in StripeApi.
 * @export
 * @interface StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDeleteRequest
 */
export interface StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete
     */
    readonly email: string;
    /**
     *
     * @type {string}
     * @memberof StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete
     */
    readonly subscriptionId: string;
}
/**
 * StripeApi - object-oriented interface
 * @export
 * @class StripeApi
 * @extends {BaseAPI}
 */
export declare class StripeApi extends BaseAPI {
    /**
     * Add subscription seats.
     * @summary Add Subscription Seats
     * @param {StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost(requestParameters: StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<boolean>>;
    /**
     * Get subscription seats.
     * @summary Get Subscription Seats
     * @param {StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(requestParameters: StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SubscriptionSeats>>;
    /**
     * Start stripe checkout session.
     * @summary Manage Subscription
     * @param {StripeApiManageSubscriptionV1StripeSubscriptionManagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    manageSubscriptionV1StripeSubscriptionManagePost(requestParameters?: StripeApiManageSubscriptionV1StripeSubscriptionManagePostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StripeSessionOut>>;
    /**
     * Remove subscription seat.
     * @summary Remove Subscription Seat
     * @param {StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(requestParameters: StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDeleteRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<boolean>>;
}
/**
 * StudyMetadataApi - axios parameter creator
 * @export
 */
export declare const StudyMetadataApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get study metadata from OpenAlex and DynamoDB via pmids.
     * @summary Get Study Metadata From Openalex For A Given List Of Pmids.
     * @param {StudyMetadataIn} studyMetadataIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost: (studyMetadataIn: StudyMetadataIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StudyMetadataApi - functional programming interface
 * @export
 */
export declare const StudyMetadataApiFp: (configuration?: Configuration) => {
    /**
     * Get study metadata from OpenAlex and DynamoDB via pmids.
     * @summary Get Study Metadata From Openalex For A Given List Of Pmids.
     * @param {StudyMetadataIn} studyMetadataIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost(studyMetadataIn: StudyMetadataIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyMetadataOut>>;
};
/**
 * StudyMetadataApi - factory interface
 * @export
 */
export declare const StudyMetadataApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get study metadata from OpenAlex and DynamoDB via pmids.
     * @summary Get Study Metadata From Openalex For A Given List Of Pmids.
     * @param {StudyMetadataIn} studyMetadataIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost(studyMetadataIn: StudyMetadataIn, options?: any): AxiosPromise<StudyMetadataOut>;
};
/**
 * Request parameters for getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost operation in StudyMetadataApi.
 * @export
 * @interface StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPostRequest
 */
export interface StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPostRequest {
    /**
     *
     * @type {StudyMetadataIn}
     * @memberof StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost
     */
    readonly studyMetadataIn: StudyMetadataIn;
}
/**
 * StudyMetadataApi - object-oriented interface
 * @export
 * @class StudyMetadataApi
 * @extends {BaseAPI}
 */
export declare class StudyMetadataApi extends BaseAPI {
    /**
     * Get study metadata from OpenAlex and DynamoDB via pmids.
     * @summary Get Study Metadata From Openalex For A Given List Of Pmids.
     * @param {StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyMetadataApi
     */
    getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost(requestParameters: StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudyMetadataOut>>;
}
/**
 * SystemGraphApi - axios parameter creator
 * @export
 */
export declare const SystemGraphApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get system graph from the database.
     * @summary Get One Degree From Topic
     * @param {string} topicId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet: (topicId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch semantic graph.
     * @summary Get Semantic Graph Endpoint
     * @param {string} [topic1] Topic 1
     * @param {string} [topic2] Topic 2
     * @param {Array<string>} [ids1] Topic 1 ids
     * @param {Array<string>} [ids2] Topic 2 ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticGraphEndpointV1SystemGraphSemanticGraphGet: (topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch single topic semantic graph.
     * @summary Get Semantic Topic Graph Endpoint
     * @param {string} [topicName] Topic name
     * @param {Array<string>} [topicIds] Topic ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet: (topicName?: string, topicIds?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get system graph from the database.
     * @summary Get System Graph Endpoint
     * @param {number} [numRelationships] Number of relationships to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemGraphEndpointV1SystemGraphSystemGraphGet: (numRelationships?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch semantic graph.
     * @summary Get Topological Categories Endpoint
     * @param {string} topic1 Topic 1
     * @param {Array<string>} ids1 Topic 1 ids
     * @param {string} [topic2] Topic 2
     * @param {Array<string>} [ids2] Topic 2 ids
     * @param {number} [pageSize] Page size
     * @param {number} [offset] Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet: (topic1: string, ids1: Array<string>, topic2?: string, ids2?: Array<string>, pageSize?: number, offset?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SystemGraphApi - functional programming interface
 * @export
 */
export declare const SystemGraphApiFp: (configuration?: Configuration) => {
    /**
     * Get system graph from the database.
     * @summary Get One Degree From Topic
     * @param {string} topicId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet(topicId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConceptRelationshipsOut>>;
    /**
     * Fetch semantic graph.
     * @summary Get Semantic Graph Endpoint
     * @param {string} [topic1] Topic 1
     * @param {string} [topic2] Topic 2
     * @param {Array<string>} [ids1] Topic 1 ids
     * @param {Array<string>} [ids2] Topic 2 ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticGraphEndpointV1SystemGraphSemanticGraphGet(topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>>;
    /**
     * Fetch single topic semantic graph.
     * @summary Get Semantic Topic Graph Endpoint
     * @param {string} [topicName] Topic name
     * @param {Array<string>} [topicIds] Topic ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet(topicName?: string, topicIds?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>>;
    /**
     * Get system graph from the database.
     * @summary Get System Graph Endpoint
     * @param {number} [numRelationships] Number of relationships to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemGraphEndpointV1SystemGraphSystemGraphGet(numRelationships?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphData>>;
    /**
     * Fetch semantic graph.
     * @summary Get Topological Categories Endpoint
     * @param {string} topic1 Topic 1
     * @param {Array<string>} ids1 Topic 1 ids
     * @param {string} [topic2] Topic 2
     * @param {Array<string>} [ids2] Topic 2 ids
     * @param {number} [pageSize] Page size
     * @param {number} [offset] Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet(topic1: string, ids1: Array<string>, topic2?: string, ids2?: Array<string>, pageSize?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicCategories>>;
};
/**
 * SystemGraphApi - factory interface
 * @export
 */
export declare const SystemGraphApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get system graph from the database.
     * @summary Get One Degree From Topic
     * @param {string} topicId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet(topicId: string, options?: any): AxiosPromise<ConceptRelationshipsOut>;
    /**
     * Fetch semantic graph.
     * @summary Get Semantic Graph Endpoint
     * @param {string} [topic1] Topic 1
     * @param {string} [topic2] Topic 2
     * @param {Array<string>} [ids1] Topic 1 ids
     * @param {Array<string>} [ids2] Topic 2 ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticGraphEndpointV1SystemGraphSemanticGraphGet(topic1?: string, topic2?: string, ids1?: Array<string>, ids2?: Array<string>, options?: any): AxiosPromise<GraphData>;
    /**
     * Fetch single topic semantic graph.
     * @summary Get Semantic Topic Graph Endpoint
     * @param {string} [topicName] Topic name
     * @param {Array<string>} [topicIds] Topic ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet(topicName?: string, topicIds?: Array<string>, options?: any): AxiosPromise<GraphData>;
    /**
     * Get system graph from the database.
     * @summary Get System Graph Endpoint
     * @param {number} [numRelationships] Number of relationships to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemGraphEndpointV1SystemGraphSystemGraphGet(numRelationships?: number, options?: any): AxiosPromise<GraphData>;
    /**
     * Fetch semantic graph.
     * @summary Get Topological Categories Endpoint
     * @param {string} topic1 Topic 1
     * @param {Array<string>} ids1 Topic 1 ids
     * @param {string} [topic2] Topic 2
     * @param {Array<string>} [ids2] Topic 2 ids
     * @param {number} [pageSize] Page size
     * @param {number} [offset] Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet(topic1: string, ids1: Array<string>, topic2?: string, ids2?: Array<string>, pageSize?: number, offset?: number, options?: any): AxiosPromise<TopicCategories>;
};
/**
 * Request parameters for getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGetRequest
 */
export interface SystemGraphApiGetOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGetRequest {
    /**
     *
     * @type {string}
     * @memberof SystemGraphApiGetOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet
     */
    readonly topicId: string;
}
/**
 * Request parameters for getSemanticGraphEndpointV1SystemGraphSemanticGraphGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGetRequest
 */
export interface SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGetRequest {
    /**
     * Topic 1
     * @type {string}
     * @memberof SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGet
     */
    readonly topic1?: string;
    /**
     * Topic 2
     * @type {string}
     * @memberof SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGet
     */
    readonly topic2?: string;
    /**
     * Topic 1 ids
     * @type {Array<string>}
     * @memberof SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGet
     */
    readonly ids1?: Array<string>;
    /**
     * Topic 2 ids
     * @type {Array<string>}
     * @memberof SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGet
     */
    readonly ids2?: Array<string>;
}
/**
 * Request parameters for getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGetRequest
 */
export interface SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGetRequest {
    /**
     * Topic name
     * @type {string}
     * @memberof SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet
     */
    readonly topicName?: string;
    /**
     * Topic ids
     * @type {Array<string>}
     * @memberof SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet
     */
    readonly topicIds?: Array<string>;
}
/**
 * Request parameters for getSystemGraphEndpointV1SystemGraphSystemGraphGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetSystemGraphEndpointV1SystemGraphSystemGraphGetRequest
 */
export interface SystemGraphApiGetSystemGraphEndpointV1SystemGraphSystemGraphGetRequest {
    /**
     * Number of relationships to return.
     * @type {number}
     * @memberof SystemGraphApiGetSystemGraphEndpointV1SystemGraphSystemGraphGet
     */
    readonly numRelationships?: number;
}
/**
 * Request parameters for getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet operation in SystemGraphApi.
 * @export
 * @interface SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGetRequest
 */
export interface SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGetRequest {
    /**
     * Topic 1
     * @type {string}
     * @memberof SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet
     */
    readonly topic1: string;
    /**
     * Topic 1 ids
     * @type {Array<string>}
     * @memberof SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet
     */
    readonly ids1: Array<string>;
    /**
     * Topic 2
     * @type {string}
     * @memberof SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet
     */
    readonly topic2?: string;
    /**
     * Topic 2 ids
     * @type {Array<string>}
     * @memberof SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet
     */
    readonly ids2?: Array<string>;
    /**
     * Page size
     * @type {number}
     * @memberof SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet
     */
    readonly pageSize?: number;
    /**
     * Offset
     * @type {number}
     * @memberof SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet
     */
    readonly offset?: number;
}
/**
 * SystemGraphApi - object-oriented interface
 * @export
 * @class SystemGraphApi
 * @extends {BaseAPI}
 */
export declare class SystemGraphApi extends BaseAPI {
    /**
     * Get system graph from the database.
     * @summary Get One Degree From Topic
     * @param {SystemGraphApiGetOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet(requestParameters: SystemGraphApiGetOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConceptRelationshipsOut>>;
    /**
     * Fetch semantic graph.
     * @summary Get Semantic Graph Endpoint
     * @param {SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getSemanticGraphEndpointV1SystemGraphSemanticGraphGet(requestParameters?: SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GraphData>>;
    /**
     * Fetch single topic semantic graph.
     * @summary Get Semantic Topic Graph Endpoint
     * @param {SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet(requestParameters?: SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GraphData>>;
    /**
     * Get system graph from the database.
     * @summary Get System Graph Endpoint
     * @param {SystemGraphApiGetSystemGraphEndpointV1SystemGraphSystemGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getSystemGraphEndpointV1SystemGraphSystemGraphGet(requestParameters?: SystemGraphApiGetSystemGraphEndpointV1SystemGraphSystemGraphGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GraphData>>;
    /**
     * Fetch semantic graph.
     * @summary Get Topological Categories Endpoint
     * @param {SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet(requestParameters: SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TopicCategories>>;
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new user.
     * @summary Create A User By Cognito Id.
     * @param {string} userId
     * @param {UpdateProfileIn} updateProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAUserByCognitoIdV1UsersPost: (userId: string, updateProfileIn: UpdateProfileIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new user.
     * @summary Create A User From Credentials.
     * @param {UserProfileIn} userProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAUserFromCredentialsV1UserPost: (userProfileIn: UserProfileIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatedUserV1UserGet: (includeAvatar?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {string} userId
     * @param {boolean} [includeAvatar]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserV1UsersUserIdGet: (userId: string, includeAvatar?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List public profiles.
     * @summary Get Users
     * @param {string} [teamId]
     * @param {string} [email] Email address
     * @param {boolean} [includeAvatar] Include avatar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersV1UsersGet: (teamId?: string, email?: string, includeAvatar?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new user.
     * @summary Update A User By Id.
     * @param {string} userId
     * @param {UpdateProfileIn} updateProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAUserByIdV1UsersUserIdPatch: (userId: string, updateProfileIn: UpdateProfileIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {UserProfileIn} userProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuthenticatedUserProfileV1UserPut: (userProfileIn: UserProfileIn, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     * Create a new user.
     * @summary Create A User By Cognito Id.
     * @param {string} userId
     * @param {UpdateProfileIn} updateProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAUserByCognitoIdV1UsersPost(userId: string, updateProfileIn: UpdateProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>>;
    /**
     * Create a new user.
     * @summary Create A User From Credentials.
     * @param {UserProfileIn} userProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAUserFromCredentialsV1UserPost(userProfileIn: UserProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>>;
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatedUserV1UserGet(includeAvatar?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>>;
    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {string} userId
     * @param {boolean} [includeAvatar]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserV1UsersUserIdGet(userId: string, includeAvatar?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPublicProfileOut>>;
    /**
     * List public profiles.
     * @summary Get Users
     * @param {string} [teamId]
     * @param {string} [email] Email address
     * @param {boolean} [includeAvatar] Include avatar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersV1UsersGet(teamId?: string, email?: string, includeAvatar?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserPublicProfileOut>>>;
    /**
     * Create a new user.
     * @summary Update A User By Id.
     * @param {string} userId
     * @param {UpdateProfileIn} updateProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAUserByIdV1UsersUserIdPatch(userId: string, updateProfileIn: UpdateProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>>;
    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {UserProfileIn} userProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuthenticatedUserProfileV1UserPut(userProfileIn: UserProfileIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateProfileOut>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new user.
     * @summary Create A User By Cognito Id.
     * @param {string} userId
     * @param {UpdateProfileIn} updateProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAUserByCognitoIdV1UsersPost(userId: string, updateProfileIn: UpdateProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut>;
    /**
     * Create a new user.
     * @summary Create A User From Credentials.
     * @param {UserProfileIn} userProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAUserFromCredentialsV1UserPost(userProfileIn: UserProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut>;
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatedUserV1UserGet(includeAvatar?: boolean, options?: any): AxiosPromise<UserPrivateProfileOut>;
    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {string} userId
     * @param {boolean} [includeAvatar]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserV1UsersUserIdGet(userId: string, includeAvatar?: boolean, options?: any): AxiosPromise<UserPublicProfileOut>;
    /**
     * List public profiles.
     * @summary Get Users
     * @param {string} [teamId]
     * @param {string} [email] Email address
     * @param {boolean} [includeAvatar] Include avatar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersV1UsersGet(teamId?: string, email?: string, includeAvatar?: boolean, options?: any): AxiosPromise<Array<UserPublicProfileOut>>;
    /**
     * Create a new user.
     * @summary Update A User By Id.
     * @param {string} userId
     * @param {UpdateProfileIn} updateProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAUserByIdV1UsersUserIdPatch(userId: string, updateProfileIn: UpdateProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut>;
    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {UserProfileIn} userProfileIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuthenticatedUserProfileV1UserPut(userProfileIn: UserProfileIn, options?: any): AxiosPromise<UserPrivateProfileOut>;
};
/**
 * Request parameters for createAUserByCognitoIdV1UsersPost operation in UsersApi.
 * @export
 * @interface UsersApiCreateAUserByCognitoIdV1UsersPostRequest
 */
export interface UsersApiCreateAUserByCognitoIdV1UsersPostRequest {
    /**
     *
     * @type {string}
     * @memberof UsersApiCreateAUserByCognitoIdV1UsersPost
     */
    readonly userId: string;
    /**
     *
     * @type {UpdateProfileIn}
     * @memberof UsersApiCreateAUserByCognitoIdV1UsersPost
     */
    readonly updateProfileIn: UpdateProfileIn;
}
/**
 * Request parameters for createAUserFromCredentialsV1UserPost operation in UsersApi.
 * @export
 * @interface UsersApiCreateAUserFromCredentialsV1UserPostRequest
 */
export interface UsersApiCreateAUserFromCredentialsV1UserPostRequest {
    /**
     *
     * @type {UserProfileIn}
     * @memberof UsersApiCreateAUserFromCredentialsV1UserPost
     */
    readonly userProfileIn: UserProfileIn;
}
/**
 * Request parameters for getAuthenticatedUserV1UserGet operation in UsersApi.
 * @export
 * @interface UsersApiGetAuthenticatedUserV1UserGetRequest
 */
export interface UsersApiGetAuthenticatedUserV1UserGetRequest {
    /**
     * Include the user\&#39;s avatar.
     * @type {boolean}
     * @memberof UsersApiGetAuthenticatedUserV1UserGet
     */
    readonly includeAvatar?: boolean;
}
/**
 * Request parameters for getUserV1UsersUserIdGet operation in UsersApi.
 * @export
 * @interface UsersApiGetUserV1UsersUserIdGetRequest
 */
export interface UsersApiGetUserV1UsersUserIdGetRequest {
    /**
     *
     * @type {string}
     * @memberof UsersApiGetUserV1UsersUserIdGet
     */
    readonly userId: string;
    /**
     *
     * @type {boolean}
     * @memberof UsersApiGetUserV1UsersUserIdGet
     */
    readonly includeAvatar?: boolean;
}
/**
 * Request parameters for getUsersV1UsersGet operation in UsersApi.
 * @export
 * @interface UsersApiGetUsersV1UsersGetRequest
 */
export interface UsersApiGetUsersV1UsersGetRequest {
    /**
     *
     * @type {string}
     * @memberof UsersApiGetUsersV1UsersGet
     */
    readonly teamId?: string;
    /**
     * Email address
     * @type {string}
     * @memberof UsersApiGetUsersV1UsersGet
     */
    readonly email?: string;
    /**
     * Include avatar
     * @type {boolean}
     * @memberof UsersApiGetUsersV1UsersGet
     */
    readonly includeAvatar?: boolean;
}
/**
 * Request parameters for updateAUserByIdV1UsersUserIdPatch operation in UsersApi.
 * @export
 * @interface UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest
 */
export interface UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest {
    /**
     *
     * @type {string}
     * @memberof UsersApiUpdateAUserByIdV1UsersUserIdPatch
     */
    readonly userId: string;
    /**
     *
     * @type {UpdateProfileIn}
     * @memberof UsersApiUpdateAUserByIdV1UsersUserIdPatch
     */
    readonly updateProfileIn: UpdateProfileIn;
}
/**
 * Request parameters for updateAuthenticatedUserProfileV1UserPut operation in UsersApi.
 * @export
 * @interface UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest
 */
export interface UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest {
    /**
     *
     * @type {UserProfileIn}
     * @memberof UsersApiUpdateAuthenticatedUserProfileV1UserPut
     */
    readonly userProfileIn: UserProfileIn;
}
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     * Create a new user.
     * @summary Create A User By Cognito Id.
     * @param {UsersApiCreateAUserByCognitoIdV1UsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createAUserByCognitoIdV1UsersPost(requestParameters: UsersApiCreateAUserByCognitoIdV1UsersPostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserPrivateProfileOut>>;
    /**
     * Create a new user.
     * @summary Create A User From Credentials.
     * @param {UsersApiCreateAUserFromCredentialsV1UserPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createAUserFromCredentialsV1UserPost(requestParameters: UsersApiCreateAUserFromCredentialsV1UserPostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserPrivateProfileOut>>;
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {UsersApiGetAuthenticatedUserV1UserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getAuthenticatedUserV1UserGet(requestParameters?: UsersApiGetAuthenticatedUserV1UserGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserPrivateProfileOut>>;
    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {UsersApiGetUserV1UsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserV1UsersUserIdGet(requestParameters: UsersApiGetUserV1UsersUserIdGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserPublicProfileOut>>;
    /**
     * List public profiles.
     * @summary Get Users
     * @param {UsersApiGetUsersV1UsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUsersV1UsersGet(requestParameters?: UsersApiGetUsersV1UsersGetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserPublicProfileOut[]>>;
    /**
     * Create a new user.
     * @summary Update A User By Id.
     * @param {UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateAUserByIdV1UsersUserIdPatch(requestParameters: UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserPrivateProfileOut>>;
    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateAuthenticatedUserProfileV1UserPut(requestParameters: UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserPrivateProfileOut>>;
}
