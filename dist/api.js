"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 * This is a REST API through which clients can interact with System - an **open**, **collaborative**, and **ever-growing knowledge base** of all the world\'s systems.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RdbApiFp = exports.RdbApiAxiosParamCreator = exports.QuerySuggestionsApi = exports.QuerySuggestionsApiFactory = exports.QuerySuggestionsApiFp = exports.QuerySuggestionsApiAxiosParamCreator = exports.PassthroughApi = exports.PassthroughApiFactory = exports.PassthroughApiFp = exports.PassthroughApiAxiosParamCreator = exports.MetricsApi = exports.MetricsApiFactory = exports.MetricsApiFp = exports.MetricsApiAxiosParamCreator = exports.KeyManagementApi = exports.KeyManagementApiFactory = exports.KeyManagementApiFp = exports.KeyManagementApiAxiosParamCreator = exports.FormsApi = exports.FormsApiFactory = exports.FormsApiFp = exports.FormsApiAxiosParamCreator = exports.FindingsApi = exports.FindingsApiFactory = exports.FindingsApiFp = exports.FindingsApiAxiosParamCreator = exports.FeedbackApi = exports.FeedbackApiFactory = exports.FeedbackApiFp = exports.FeedbackApiAxiosParamCreator = exports.AccessApi = exports.AccessApiFactory = exports.AccessApiFp = exports.AccessApiAxiosParamCreator = exports.SuggestedQueryType = exports.StripeAccountStatus = exports.SohServiceClientModelsRelationshipTypesRelationshipTypes = exports.SignificanceLevel = exports.SemanticSearchType = exports.SearchType = exports.Role = exports.ResourceAction = exports.PollingStatus = exports.Metrics = exports.GraphNodeType = exports.GraphLinkType = exports.FunctionStatus = exports.EvidenceCategory = exports.ClusteringMethods = exports.AppSchemaConceptsRelationshipTypes = void 0;
exports.VariableApi = exports.VariableApiFactory = exports.VariableApiFp = exports.VariableApiAxiosParamCreator = exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiAxiosParamCreator = exports.TopicApi = exports.TopicApiFactory = exports.TopicApiFp = exports.TopicApiAxiosParamCreator = exports.SystemGraphApi = exports.SystemGraphApiFactory = exports.SystemGraphApiFp = exports.SystemGraphApiAxiosParamCreator = exports.StudyStatsApi = exports.StudyStatsApiFactory = exports.StudyStatsApiFp = exports.StudyStatsApiAxiosParamCreator = exports.StudyMetadataApi = exports.StudyMetadataApiFactory = exports.StudyMetadataApiFp = exports.StudyMetadataApiAxiosParamCreator = exports.StripeApi = exports.StripeApiFactory = exports.StripeApiFp = exports.StripeApiAxiosParamCreator = exports.SsoApi = exports.SsoApiFactory = exports.SsoApiFp = exports.SsoApiAxiosParamCreator = exports.SohApi = exports.SohApiFactory = exports.SohApiFp = exports.SohApiAxiosParamCreator = exports.SemanticSearchApi = exports.SemanticSearchApiFactory = exports.SemanticSearchApiFp = exports.SemanticSearchApiAxiosParamCreator = exports.RdbApi = exports.RdbApiFactory = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * Relationship types.
 * @export
 * @enum {string}
 */
exports.AppSchemaConceptsRelationshipTypes = {
    Statistical: 'statistical',
    Mechanistic: 'mechanistic'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.ClusteringMethods = {
    Agglomerative: 'agglomerative',
    Dbscan: 'dbscan',
    Paraphrase: 'paraphrase'
};
/**
 * Evidence category.
 * @export
 * @enum {string}
 */
exports.EvidenceCategory = {
    Statistical: 'statistical',
    Mechanistic: 'mechanistic'
};
/**
 * Status for polling functions.
 * @export
 * @enum {string}
 */
exports.FunctionStatus = {
    Pending: 'pending',
    Running: 'running',
    Finished: 'finished',
    Error: 'error'
};
/**
 * Graph Link Type enum.
 * @export
 * @enum {string}
 */
exports.GraphLinkType = {
    DatasetRelationship: 'dataset_relationship',
    ConceptRelationship: 'concept_relationship',
    VariableRelationship: 'variable_relationship',
    FeatureRelationship: 'feature_relationship',
    FeatureVariable: 'feature_variable',
    Measures: 'measures'
};
/**
 * Graph Node Type enum.
 * @export
 * @enum {string}
 */
exports.GraphNodeType = {
    Dataset: 'dataset',
    Concept: 'concept',
    Variable: 'variable',
    Feature: 'feature'
};
/**
 * Metrics name enum.
 * @export
 * @enum {string}
 */
exports.Metrics = {
    SemanticSearchCreate: 'semantic_search.create',
    SemanticSearchClusterRead: 'semantic_search_cluster.read',
    FindingsLogDoiLookup: 'findings_log.doi_lookup'
};
/**
 * Polling status enum.
 * @export
 * @enum {string}
 */
exports.PollingStatus = {
    NotExists: 'not_exists',
    Submitted: 'submitted',
    Running: 'running',
    Success: 'success',
    Failed: 'failed',
    FailedNoCitations: 'failed_no_citations',
    FailedValidation: 'failed_validation'
};
/**
 * API resource action enum.
 * @export
 * @enum {string}
 */
exports.ResourceAction = {
    Create: 'create',
    View: 'view',
    Edit: 'edit',
    Delete: 'delete'
};
/**
 * Role.
 * @export
 * @enum {string}
 */
exports.Role = {
    Determinant: 'Determinant',
    Intervention: 'Intervention',
    Outcome: 'Outcome',
    Agent: 'Agent'
};
/**
 * Search type.
 * @export
 * @enum {string}
 */
exports.SearchType = {
    Semantic: 'semantic',
    Keyword: 'keyword'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.SemanticSearchType = {
    RiskFactorOf: 'risk_factor_of',
    Outcome: 'outcome',
    Relationship: 'relationship',
    Relationship2d: 'relationship_2d',
    SingleVariable2d: 'single_variable_2d'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.SignificanceLevel = {
    NinetyFive: 'ninety_five',
    NinetyNine: 'ninety_nine',
    NinetyNinePointNine: 'ninety_nine_point_nine',
    Invalid: 'invalid'
};
/**
 * Relationship types.
 * @export
 * @enum {string}
 */
exports.SohServiceClientModelsRelationshipTypesRelationshipTypes = {
    Statistical: 'statistical',
    Mechanistic: 'mechanistic'
};
/**
 * Stripe account status enum.
 * @export
 * @enum {string}
 */
exports.StripeAccountStatus = {
    Trial: 'trial',
    Subscribed: 'subscribed',
    Expired: 'expired',
    GroupSubscribed: 'group_subscribed',
    Unsubscribed: 'unsubscribed'
};
/**
 * Enum for query suggestion types.
 * @export
 * @enum {string}
 */
exports.SuggestedQueryType = {
    Expanded: 'expanded',
    Autocorrect: 'autocorrect'
};
/**
 * AccessApi - axios parameter creator
 * @export
 */
const AccessApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Register user\'s interest in access to Data Beta.
         * @summary Request Data Access
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestDataAccessV1AccessDataPost: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/v1/access/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Register user\'s interest in access to Maps Beta.
         * @summary Request Maps Access
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMapsAccessV1AccessMapsPost: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/v1/access/maps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AccessApiAxiosParamCreator = AccessApiAxiosParamCreator;
/**
 * AccessApi - functional programming interface
 * @export
 */
const AccessApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AccessApiAxiosParamCreator)(configuration);
    return {
        /**
         * Register user\'s interest in access to Data Beta.
         * @summary Request Data Access
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestDataAccessV1AccessDataPost(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.requestDataAccessV1AccessDataPost(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AccessApi.requestDataAccessV1AccessDataPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Register user\'s interest in access to Maps Beta.
         * @summary Request Maps Access
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMapsAccessV1AccessMapsPost(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.requestMapsAccessV1AccessMapsPost(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AccessApi.requestMapsAccessV1AccessMapsPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.AccessApiFp = AccessApiFp;
/**
 * AccessApi - factory interface
 * @export
 */
const AccessApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AccessApiFp)(configuration);
    return {
        /**
         * Register user\'s interest in access to Data Beta.
         * @summary Request Data Access
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestDataAccessV1AccessDataPost(options) {
            return localVarFp.requestDataAccessV1AccessDataPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Register user\'s interest in access to Maps Beta.
         * @summary Request Maps Access
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMapsAccessV1AccessMapsPost(options) {
            return localVarFp.requestMapsAccessV1AccessMapsPost(options).then((request) => request(axios, basePath));
        },
    };
};
exports.AccessApiFactory = AccessApiFactory;
/**
 * AccessApi - object-oriented interface
 * @export
 * @class AccessApi
 * @extends {BaseAPI}
 */
class AccessApi extends base_1.BaseAPI {
    /**
     * Register user\'s interest in access to Data Beta.
     * @summary Request Data Access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessApi
     */
    requestDataAccessV1AccessDataPost(options) {
        return (0, exports.AccessApiFp)(this.configuration).requestDataAccessV1AccessDataPost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Register user\'s interest in access to Maps Beta.
     * @summary Request Maps Access
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessApi
     */
    requestMapsAccessV1AccessMapsPost(options) {
        return (0, exports.AccessApiFp)(this.configuration).requestMapsAccessV1AccessMapsPost(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AccessApi = AccessApi;
/**
 * FeedbackApi - axios parameter creator
 * @export
 */
const FeedbackApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Save feedback on a finding.
         * @summary Post Finding Feedback
         * @param {string} findingId
         * @param {FindingFeedbackIn} findingFeedbackIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFindingFeedbackV1FeedbackFindingIdPost: (findingId_1, findingFeedbackIn_1, ...args_1) => __awaiter(this, [findingId_1, findingFeedbackIn_1, ...args_1], void 0, function* (findingId, findingFeedbackIn, options = {}) {
            // verify required parameter 'findingId' is not null or undefined
            (0, common_1.assertParamExists)('postFindingFeedbackV1FeedbackFindingIdPost', 'findingId', findingId);
            // verify required parameter 'findingFeedbackIn' is not null or undefined
            (0, common_1.assertParamExists)('postFindingFeedbackV1FeedbackFindingIdPost', 'findingFeedbackIn', findingFeedbackIn);
            const localVarPath = `/v1/feedback/{finding_id}`
                .replace(`{${"finding_id"}}`, encodeURIComponent(String(findingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(findingFeedbackIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Post user feedback on AI-generated relationship synthesis to s3.
         * @summary Post Synthesis Feedback
         * @param {SynthesisFeedbackIn} synthesisFeedbackIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSynthesisFeedbackV1FeedbackPost: (synthesisFeedbackIn_1, ...args_1) => __awaiter(this, [synthesisFeedbackIn_1, ...args_1], void 0, function* (synthesisFeedbackIn, options = {}) {
            // verify required parameter 'synthesisFeedbackIn' is not null or undefined
            (0, common_1.assertParamExists)('postSynthesisFeedbackV1FeedbackPost', 'synthesisFeedbackIn', synthesisFeedbackIn);
            const localVarPath = `/v1/feedback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(synthesisFeedbackIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.FeedbackApiAxiosParamCreator = FeedbackApiAxiosParamCreator;
/**
 * FeedbackApi - functional programming interface
 * @export
 */
const FeedbackApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.FeedbackApiAxiosParamCreator)(configuration);
    return {
        /**
         * Save feedback on a finding.
         * @summary Post Finding Feedback
         * @param {string} findingId
         * @param {FindingFeedbackIn} findingFeedbackIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFindingFeedbackV1FeedbackFindingIdPost(findingId, findingFeedbackIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.postFindingFeedbackV1FeedbackFindingIdPost(findingId, findingFeedbackIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FeedbackApi.postFindingFeedbackV1FeedbackFindingIdPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Post user feedback on AI-generated relationship synthesis to s3.
         * @summary Post Synthesis Feedback
         * @param {SynthesisFeedbackIn} synthesisFeedbackIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSynthesisFeedbackV1FeedbackPost(synthesisFeedbackIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.postSynthesisFeedbackV1FeedbackPost(synthesisFeedbackIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FeedbackApi.postSynthesisFeedbackV1FeedbackPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.FeedbackApiFp = FeedbackApiFp;
/**
 * FeedbackApi - factory interface
 * @export
 */
const FeedbackApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.FeedbackApiFp)(configuration);
    return {
        /**
         * Save feedback on a finding.
         * @summary Post Finding Feedback
         * @param {FeedbackApiPostFindingFeedbackV1FeedbackFindingIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFindingFeedbackV1FeedbackFindingIdPost(requestParameters, options) {
            return localVarFp.postFindingFeedbackV1FeedbackFindingIdPost(requestParameters.findingId, requestParameters.findingFeedbackIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Post user feedback on AI-generated relationship synthesis to s3.
         * @summary Post Synthesis Feedback
         * @param {FeedbackApiPostSynthesisFeedbackV1FeedbackPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSynthesisFeedbackV1FeedbackPost(requestParameters, options) {
            return localVarFp.postSynthesisFeedbackV1FeedbackPost(requestParameters.synthesisFeedbackIn, options).then((request) => request(axios, basePath));
        },
    };
};
exports.FeedbackApiFactory = FeedbackApiFactory;
/**
 * FeedbackApi - object-oriented interface
 * @export
 * @class FeedbackApi
 * @extends {BaseAPI}
 */
class FeedbackApi extends base_1.BaseAPI {
    /**
     * Save feedback on a finding.
     * @summary Post Finding Feedback
     * @param {FeedbackApiPostFindingFeedbackV1FeedbackFindingIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    postFindingFeedbackV1FeedbackFindingIdPost(requestParameters, options) {
        return (0, exports.FeedbackApiFp)(this.configuration).postFindingFeedbackV1FeedbackFindingIdPost(requestParameters.findingId, requestParameters.findingFeedbackIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Post user feedback on AI-generated relationship synthesis to s3.
     * @summary Post Synthesis Feedback
     * @param {FeedbackApiPostSynthesisFeedbackV1FeedbackPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    postSynthesisFeedbackV1FeedbackPost(requestParameters, options) {
        return (0, exports.FeedbackApiFp)(this.configuration).postSynthesisFeedbackV1FeedbackPost(requestParameters.synthesisFeedbackIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FeedbackApi = FeedbackApi;
/**
 * FindingsApi - axios parameter creator
 * @export
 */
const FindingsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get study findings via association ids or dois.
         * @summary Get Study Findings From Association Ids Or Dois
         * @param {StudyFindingsIn} studyFindingsIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost: (studyFindingsIn_1, ...args_1) => __awaiter(this, [studyFindingsIn_1, ...args_1], void 0, function* (studyFindingsIn, options = {}) {
            // verify required parameter 'studyFindingsIn' is not null or undefined
            (0, common_1.assertParamExists)('getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost', 'studyFindingsIn', studyFindingsIn);
            const localVarPath = `/v1/findings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(studyFindingsIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.FindingsApiAxiosParamCreator = FindingsApiAxiosParamCreator;
/**
 * FindingsApi - functional programming interface
 * @export
 */
const FindingsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.FindingsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get study findings via association ids or dois.
         * @summary Get Study Findings From Association Ids Or Dois
         * @param {StudyFindingsIn} studyFindingsIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost(studyFindingsIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost(studyFindingsIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FindingsApi.getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.FindingsApiFp = FindingsApiFp;
/**
 * FindingsApi - factory interface
 * @export
 */
const FindingsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.FindingsApiFp)(configuration);
    return {
        /**
         * Get study findings via association ids or dois.
         * @summary Get Study Findings From Association Ids Or Dois
         * @param {FindingsApiGetStudyFindingsFromAssociationIdsOrDOIsV1FindingsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost(requestParameters, options) {
            return localVarFp.getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost(requestParameters.studyFindingsIn, options).then((request) => request(axios, basePath));
        },
    };
};
exports.FindingsApiFactory = FindingsApiFactory;
/**
 * FindingsApi - object-oriented interface
 * @export
 * @class FindingsApi
 * @extends {BaseAPI}
 */
class FindingsApi extends base_1.BaseAPI {
    /**
     * Get study findings via association ids or dois.
     * @summary Get Study Findings From Association Ids Or Dois
     * @param {FindingsApiGetStudyFindingsFromAssociationIdsOrDOIsV1FindingsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FindingsApi
     */
    getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost(requestParameters, options) {
        return (0, exports.FindingsApiFp)(this.configuration).getStudyFindingsFromAssociationIdsOrDOIsV1FindingsPost(requestParameters.studyFindingsIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FindingsApi = FindingsApi;
/**
 * FormsApi - axios parameter creator
 * @export
 */
const FormsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Request Demo
         * @param {string} appName
         * @param {string} firstName
         * @param {string} lastName
         * @param {string} emailAddress
         * @param {string} company
         * @param {string} [title]
         * @param {string} [howDidYouHear]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestDemoV1FormsRequestDemoPost: (appName_1, firstName_1, lastName_1, emailAddress_1, company_1, title_1, howDidYouHear_1, ...args_1) => __awaiter(this, [appName_1, firstName_1, lastName_1, emailAddress_1, company_1, title_1, howDidYouHear_1, ...args_1], void 0, function* (appName, firstName, lastName, emailAddress, company, title, howDidYouHear, options = {}) {
            // verify required parameter 'appName' is not null or undefined
            (0, common_1.assertParamExists)('requestDemoV1FormsRequestDemoPost', 'appName', appName);
            // verify required parameter 'firstName' is not null or undefined
            (0, common_1.assertParamExists)('requestDemoV1FormsRequestDemoPost', 'firstName', firstName);
            // verify required parameter 'lastName' is not null or undefined
            (0, common_1.assertParamExists)('requestDemoV1FormsRequestDemoPost', 'lastName', lastName);
            // verify required parameter 'emailAddress' is not null or undefined
            (0, common_1.assertParamExists)('requestDemoV1FormsRequestDemoPost', 'emailAddress', emailAddress);
            // verify required parameter 'company' is not null or undefined
            (0, common_1.assertParamExists)('requestDemoV1FormsRequestDemoPost', 'company', company);
            const localVarPath = `/v1/forms/request-demo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (appName !== undefined) {
                localVarFormParams.set('app_name', appName);
            }
            if (firstName !== undefined) {
                localVarFormParams.set('first_name', firstName);
            }
            if (lastName !== undefined) {
                localVarFormParams.set('last_name', lastName);
            }
            if (emailAddress !== undefined) {
                localVarFormParams.set('email_address', emailAddress);
            }
            if (company !== undefined) {
                localVarFormParams.set('company', company);
            }
            if (title !== undefined) {
                localVarFormParams.set('title', title);
            }
            if (howDidYouHear !== undefined) {
                localVarFormParams.set('how_did_you_hear', howDidYouHear);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.FormsApiAxiosParamCreator = FormsApiAxiosParamCreator;
/**
 * FormsApi - functional programming interface
 * @export
 */
const FormsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.FormsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Request Demo
         * @param {string} appName
         * @param {string} firstName
         * @param {string} lastName
         * @param {string} emailAddress
         * @param {string} company
         * @param {string} [title]
         * @param {string} [howDidYouHear]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestDemoV1FormsRequestDemoPost(appName, firstName, lastName, emailAddress, company, title, howDidYouHear, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.requestDemoV1FormsRequestDemoPost(appName, firstName, lastName, emailAddress, company, title, howDidYouHear, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FormsApi.requestDemoV1FormsRequestDemoPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.FormsApiFp = FormsApiFp;
/**
 * FormsApi - factory interface
 * @export
 */
const FormsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.FormsApiFp)(configuration);
    return {
        /**
         *
         * @summary Request Demo
         * @param {FormsApiRequestDemoV1FormsRequestDemoPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestDemoV1FormsRequestDemoPost(requestParameters, options) {
            return localVarFp.requestDemoV1FormsRequestDemoPost(requestParameters.appName, requestParameters.firstName, requestParameters.lastName, requestParameters.emailAddress, requestParameters.company, requestParameters.title, requestParameters.howDidYouHear, options).then((request) => request(axios, basePath));
        },
    };
};
exports.FormsApiFactory = FormsApiFactory;
/**
 * FormsApi - object-oriented interface
 * @export
 * @class FormsApi
 * @extends {BaseAPI}
 */
class FormsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Request Demo
     * @param {FormsApiRequestDemoV1FormsRequestDemoPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    requestDemoV1FormsRequestDemoPost(requestParameters, options) {
        return (0, exports.FormsApiFp)(this.configuration).requestDemoV1FormsRequestDemoPost(requestParameters.appName, requestParameters.firstName, requestParameters.lastName, requestParameters.emailAddress, requestParameters.company, requestParameters.title, requestParameters.howDidYouHear, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FormsApi = FormsApi;
/**
 * KeyManagementApi - axios parameter creator
 * @export
 */
const KeyManagementApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get user\'s API keys.
         * @summary Get Client Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientKeysV1KeysMeGet: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/v1/keys/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.KeyManagementApiAxiosParamCreator = KeyManagementApiAxiosParamCreator;
/**
 * KeyManagementApi - functional programming interface
 * @export
 */
const KeyManagementApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.KeyManagementApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get user\'s API keys.
         * @summary Get Client Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientKeysV1KeysMeGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getClientKeysV1KeysMeGet(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['KeyManagementApi.getClientKeysV1KeysMeGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.KeyManagementApiFp = KeyManagementApiFp;
/**
 * KeyManagementApi - factory interface
 * @export
 */
const KeyManagementApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.KeyManagementApiFp)(configuration);
    return {
        /**
         * Get user\'s API keys.
         * @summary Get Client Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientKeysV1KeysMeGet(options) {
            return localVarFp.getClientKeysV1KeysMeGet(options).then((request) => request(axios, basePath));
        },
    };
};
exports.KeyManagementApiFactory = KeyManagementApiFactory;
/**
 * KeyManagementApi - object-oriented interface
 * @export
 * @class KeyManagementApi
 * @extends {BaseAPI}
 */
class KeyManagementApi extends base_1.BaseAPI {
    /**
     * Get user\'s API keys.
     * @summary Get Client Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyManagementApi
     */
    getClientKeysV1KeysMeGet(options) {
        return (0, exports.KeyManagementApiFp)(this.configuration).getClientKeysV1KeysMeGet(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.KeyManagementApi = KeyManagementApi;
/**
 * MetricsApi - axios parameter creator
 * @export
 */
const MetricsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get metrics on the graph.
         * @summary Get Graph Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGraphMetricsV1MetricsGraphGet: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/v1/metrics/graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.MetricsApiAxiosParamCreator = MetricsApiAxiosParamCreator;
/**
 * MetricsApi - functional programming interface
 * @export
 */
const MetricsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.MetricsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get metrics on the graph.
         * @summary Get Graph Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGraphMetricsV1MetricsGraphGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getGraphMetricsV1MetricsGraphGet(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MetricsApi.getGraphMetricsV1MetricsGraphGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.MetricsApiFp = MetricsApiFp;
/**
 * MetricsApi - factory interface
 * @export
 */
const MetricsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.MetricsApiFp)(configuration);
    return {
        /**
         * Get metrics on the graph.
         * @summary Get Graph Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGraphMetricsV1MetricsGraphGet(options) {
            return localVarFp.getGraphMetricsV1MetricsGraphGet(options).then((request) => request(axios, basePath));
        },
    };
};
exports.MetricsApiFactory = MetricsApiFactory;
/**
 * MetricsApi - object-oriented interface
 * @export
 * @class MetricsApi
 * @extends {BaseAPI}
 */
class MetricsApi extends base_1.BaseAPI {
    /**
     * Get metrics on the graph.
     * @summary Get Graph Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    getGraphMetricsV1MetricsGraphGet(options) {
        return (0, exports.MetricsApiFp)(this.configuration).getGraphMetricsV1MetricsGraphGet(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.MetricsApi = MetricsApi;
/**
 * PassthroughApi - axios parameter creator
 * @export
 */
const PassthroughApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Forward request to crossref.
         * @summary Get Crossref
         * @param {any} restOfPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCrossrefV1CrossrefRestOfPathGet: (restOfPath_1, ...args_1) => __awaiter(this, [restOfPath_1, ...args_1], void 0, function* (restOfPath, options = {}) {
            // verify required parameter 'restOfPath' is not null or undefined
            (0, common_1.assertParamExists)('getCrossrefV1CrossrefRestOfPathGet', 'restOfPath', restOfPath);
            const localVarPath = `/v1/crossref/{rest_of_path}`
                .replace(`{${"rest_of_path"}}`, encodeURIComponent(String(restOfPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Post GetFTR entitlements endpoint.
         * @summary Get Ftr Entitlements
         * @param {GetFTREntitlementsIn} getFTREntitlementsIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFtrEntitlementsV1GetftrEntitlementsPost: (getFTREntitlementsIn_1, ...args_1) => __awaiter(this, [getFTREntitlementsIn_1, ...args_1], void 0, function* (getFTREntitlementsIn, options = {}) {
            // verify required parameter 'getFTREntitlementsIn' is not null or undefined
            (0, common_1.assertParamExists)('getFtrEntitlementsV1GetftrEntitlementsPost', 'getFTREntitlementsIn', getFTREntitlementsIn);
            const localVarPath = `/v1/getftr/entitlements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getFTREntitlementsIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Forward request to ORCID.
         * @summary Get Orcid
         * @param {any} restOfPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrcidV1OrcidRestOfPathGet: (restOfPath_1, ...args_1) => __awaiter(this, [restOfPath_1, ...args_1], void 0, function* (restOfPath, options = {}) {
            // verify required parameter 'restOfPath' is not null or undefined
            (0, common_1.assertParamExists)('getOrcidV1OrcidRestOfPathGet', 'restOfPath', restOfPath);
            const localVarPath = `/v1/orcid/{rest_of_path}`
                .replace(`{${"rest_of_path"}}`, encodeURIComponent(String(restOfPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Forward request to SearchGraph.
         * @summary Get Semantic Graph
         * @param {string} restOfPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1SemanticGraphRestOfPathGet: (restOfPath_1, ...args_1) => __awaiter(this, [restOfPath_1, ...args_1], void 0, function* (restOfPath, options = {}) {
            // verify required parameter 'restOfPath' is not null or undefined
            (0, common_1.assertParamExists)('getSemanticGraphV1SemanticGraphRestOfPathGet', 'restOfPath', restOfPath);
            const localVarPath = `/v1/semantic_graph/{rest_of_path}`
                .replace(`{${"rest_of_path"}}`, encodeURIComponent(String(restOfPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Forward request to UMLS.
         * @summary Get Umls Concepts
         * @param {any} restOfPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUmlsConceptsV1UmlsRestOfPathGet: (restOfPath_1, ...args_1) => __awaiter(this, [restOfPath_1, ...args_1], void 0, function* (restOfPath, options = {}) {
            // verify required parameter 'restOfPath' is not null or undefined
            (0, common_1.assertParamExists)('getUmlsConceptsV1UmlsRestOfPathGet', 'restOfPath', restOfPath);
            const localVarPath = `/v1/umls/{rest_of_path}`
                .replace(`{${"rest_of_path"}}`, encodeURIComponent(String(restOfPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Forward request to SearchGraph.
         * @summary Get Variable Concepts
         * @param {string} restOfPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableConceptsV1VariableConceptsRestOfPathGet: (restOfPath_1, ...args_1) => __awaiter(this, [restOfPath_1, ...args_1], void 0, function* (restOfPath, options = {}) {
            // verify required parameter 'restOfPath' is not null or undefined
            (0, common_1.assertParamExists)('getVariableConceptsV1VariableConceptsRestOfPathGet', 'restOfPath', restOfPath);
            const localVarPath = `/v1/variable_concepts/{rest_of_path}`
                .replace(`{${"rest_of_path"}}`, encodeURIComponent(String(restOfPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.PassthroughApiAxiosParamCreator = PassthroughApiAxiosParamCreator;
/**
 * PassthroughApi - functional programming interface
 * @export
 */
const PassthroughApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PassthroughApiAxiosParamCreator)(configuration);
    return {
        /**
         * Forward request to crossref.
         * @summary Get Crossref
         * @param {any} restOfPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCrossrefV1CrossrefRestOfPathGet(restOfPath, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getCrossrefV1CrossrefRestOfPathGet(restOfPath, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PassthroughApi.getCrossrefV1CrossrefRestOfPathGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Post GetFTR entitlements endpoint.
         * @summary Get Ftr Entitlements
         * @param {GetFTREntitlementsIn} getFTREntitlementsIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFtrEntitlementsV1GetftrEntitlementsPost(getFTREntitlementsIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFtrEntitlementsV1GetftrEntitlementsPost(getFTREntitlementsIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PassthroughApi.getFtrEntitlementsV1GetftrEntitlementsPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Forward request to ORCID.
         * @summary Get Orcid
         * @param {any} restOfPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrcidV1OrcidRestOfPathGet(restOfPath, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrcidV1OrcidRestOfPathGet(restOfPath, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PassthroughApi.getOrcidV1OrcidRestOfPathGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Forward request to SearchGraph.
         * @summary Get Semantic Graph
         * @param {string} restOfPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1SemanticGraphRestOfPathGet(restOfPath, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSemanticGraphV1SemanticGraphRestOfPathGet(restOfPath, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PassthroughApi.getSemanticGraphV1SemanticGraphRestOfPathGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Forward request to UMLS.
         * @summary Get Umls Concepts
         * @param {any} restOfPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUmlsConceptsV1UmlsRestOfPathGet(restOfPath, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUmlsConceptsV1UmlsRestOfPathGet(restOfPath, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PassthroughApi.getUmlsConceptsV1UmlsRestOfPathGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Forward request to SearchGraph.
         * @summary Get Variable Concepts
         * @param {string} restOfPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableConceptsV1VariableConceptsRestOfPathGet(restOfPath, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getVariableConceptsV1VariableConceptsRestOfPathGet(restOfPath, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PassthroughApi.getVariableConceptsV1VariableConceptsRestOfPathGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.PassthroughApiFp = PassthroughApiFp;
/**
 * PassthroughApi - factory interface
 * @export
 */
const PassthroughApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PassthroughApiFp)(configuration);
    return {
        /**
         * Forward request to crossref.
         * @summary Get Crossref
         * @param {PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCrossrefV1CrossrefRestOfPathGet(requestParameters, options) {
            return localVarFp.getCrossrefV1CrossrefRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(axios, basePath));
        },
        /**
         * Post GetFTR entitlements endpoint.
         * @summary Get Ftr Entitlements
         * @param {PassthroughApiGetFtrEntitlementsV1GetftrEntitlementsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFtrEntitlementsV1GetftrEntitlementsPost(requestParameters, options) {
            return localVarFp.getFtrEntitlementsV1GetftrEntitlementsPost(requestParameters.getFTREntitlementsIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Forward request to ORCID.
         * @summary Get Orcid
         * @param {PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrcidV1OrcidRestOfPathGet(requestParameters, options) {
            return localVarFp.getOrcidV1OrcidRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(axios, basePath));
        },
        /**
         * Forward request to SearchGraph.
         * @summary Get Semantic Graph
         * @param {PassthroughApiGetSemanticGraphV1SemanticGraphRestOfPathGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1SemanticGraphRestOfPathGet(requestParameters, options) {
            return localVarFp.getSemanticGraphV1SemanticGraphRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(axios, basePath));
        },
        /**
         * Forward request to UMLS.
         * @summary Get Umls Concepts
         * @param {PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUmlsConceptsV1UmlsRestOfPathGet(requestParameters, options) {
            return localVarFp.getUmlsConceptsV1UmlsRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(axios, basePath));
        },
        /**
         * Forward request to SearchGraph.
         * @summary Get Variable Concepts
         * @param {PassthroughApiGetVariableConceptsV1VariableConceptsRestOfPathGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableConceptsV1VariableConceptsRestOfPathGet(requestParameters, options) {
            return localVarFp.getVariableConceptsV1VariableConceptsRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PassthroughApiFactory = PassthroughApiFactory;
/**
 * PassthroughApi - object-oriented interface
 * @export
 * @class PassthroughApi
 * @extends {BaseAPI}
 */
class PassthroughApi extends base_1.BaseAPI {
    /**
     * Forward request to crossref.
     * @summary Get Crossref
     * @param {PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getCrossrefV1CrossrefRestOfPathGet(requestParameters, options) {
        return (0, exports.PassthroughApiFp)(this.configuration).getCrossrefV1CrossrefRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Post GetFTR entitlements endpoint.
     * @summary Get Ftr Entitlements
     * @param {PassthroughApiGetFtrEntitlementsV1GetftrEntitlementsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getFtrEntitlementsV1GetftrEntitlementsPost(requestParameters, options) {
        return (0, exports.PassthroughApiFp)(this.configuration).getFtrEntitlementsV1GetftrEntitlementsPost(requestParameters.getFTREntitlementsIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Forward request to ORCID.
     * @summary Get Orcid
     * @param {PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getOrcidV1OrcidRestOfPathGet(requestParameters, options) {
        return (0, exports.PassthroughApiFp)(this.configuration).getOrcidV1OrcidRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Forward request to SearchGraph.
     * @summary Get Semantic Graph
     * @param {PassthroughApiGetSemanticGraphV1SemanticGraphRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getSemanticGraphV1SemanticGraphRestOfPathGet(requestParameters, options) {
        return (0, exports.PassthroughApiFp)(this.configuration).getSemanticGraphV1SemanticGraphRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Forward request to UMLS.
     * @summary Get Umls Concepts
     * @param {PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getUmlsConceptsV1UmlsRestOfPathGet(requestParameters, options) {
        return (0, exports.PassthroughApiFp)(this.configuration).getUmlsConceptsV1UmlsRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Forward request to SearchGraph.
     * @summary Get Variable Concepts
     * @param {PassthroughApiGetVariableConceptsV1VariableConceptsRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getVariableConceptsV1VariableConceptsRestOfPathGet(requestParameters, options) {
        return (0, exports.PassthroughApiFp)(this.configuration).getVariableConceptsV1VariableConceptsRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PassthroughApi = PassthroughApi;
/**
 * QuerySuggestionsApi - axios parameter creator
 * @export
 */
const QuerySuggestionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get query suggestions.
         * @summary Get Query Suggestions.
         * @param {SuggestedQueriesIn} suggestedQueriesIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySuggestionsV1QuerySuggestionsPost: (suggestedQueriesIn_1, ...args_1) => __awaiter(this, [suggestedQueriesIn_1, ...args_1], void 0, function* (suggestedQueriesIn, options = {}) {
            // verify required parameter 'suggestedQueriesIn' is not null or undefined
            (0, common_1.assertParamExists)('getQuerySuggestionsV1QuerySuggestionsPost', 'suggestedQueriesIn', suggestedQueriesIn);
            const localVarPath = `/v1/query_suggestions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(suggestedQueriesIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.QuerySuggestionsApiAxiosParamCreator = QuerySuggestionsApiAxiosParamCreator;
/**
 * QuerySuggestionsApi - functional programming interface
 * @export
 */
const QuerySuggestionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.QuerySuggestionsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get query suggestions.
         * @summary Get Query Suggestions.
         * @param {SuggestedQueriesIn} suggestedQueriesIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySuggestionsV1QuerySuggestionsPost(suggestedQueriesIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getQuerySuggestionsV1QuerySuggestionsPost(suggestedQueriesIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['QuerySuggestionsApi.getQuerySuggestionsV1QuerySuggestionsPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.QuerySuggestionsApiFp = QuerySuggestionsApiFp;
/**
 * QuerySuggestionsApi - factory interface
 * @export
 */
const QuerySuggestionsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.QuerySuggestionsApiFp)(configuration);
    return {
        /**
         * Get query suggestions.
         * @summary Get Query Suggestions.
         * @param {QuerySuggestionsApiGetQuerySuggestionsV1QuerySuggestionsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuerySuggestionsV1QuerySuggestionsPost(requestParameters, options) {
            return localVarFp.getQuerySuggestionsV1QuerySuggestionsPost(requestParameters.suggestedQueriesIn, options).then((request) => request(axios, basePath));
        },
    };
};
exports.QuerySuggestionsApiFactory = QuerySuggestionsApiFactory;
/**
 * QuerySuggestionsApi - object-oriented interface
 * @export
 * @class QuerySuggestionsApi
 * @extends {BaseAPI}
 */
class QuerySuggestionsApi extends base_1.BaseAPI {
    /**
     * Get query suggestions.
     * @summary Get Query Suggestions.
     * @param {QuerySuggestionsApiGetQuerySuggestionsV1QuerySuggestionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuerySuggestionsApi
     */
    getQuerySuggestionsV1QuerySuggestionsPost(requestParameters, options) {
        return (0, exports.QuerySuggestionsApiFp)(this.configuration).getQuerySuggestionsV1QuerySuggestionsPost(requestParameters.suggestedQueriesIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.QuerySuggestionsApi = QuerySuggestionsApi;
/**
 * RdbApi - axios parameter creator
 * @export
 */
const RdbApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Read evidences.
         * @summary Read Evidences
         * @param {Array<string>} [ids] Evidence ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readEvidencesV1RdbEvidencesGet: (ids_3, ...args_1) => __awaiter(this, [ids_3, ...args_1], void 0, function* (ids, options = {}) {
            const localVarPath = `/v1/rdb/evidences`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Read studies.
         * @summary Read Studies
         * @param {Array<string>} [ids] Study ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudiesV1RdbStudiesGet: (ids_3, ...args_1) => __awaiter(this, [ids_3, ...args_1], void 0, function* (ids, options = {}) {
            const localVarPath = `/v1/rdb/studies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.RdbApiAxiosParamCreator = RdbApiAxiosParamCreator;
/**
 * RdbApi - functional programming interface
 * @export
 */
const RdbApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.RdbApiAxiosParamCreator)(configuration);
    return {
        /**
         * Read evidences.
         * @summary Read Evidences
         * @param {Array<string>} [ids] Evidence ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readEvidencesV1RdbEvidencesGet(ids, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.readEvidencesV1RdbEvidencesGet(ids, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['RdbApi.readEvidencesV1RdbEvidencesGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Read studies.
         * @summary Read Studies
         * @param {Array<string>} [ids] Study ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudiesV1RdbStudiesGet(ids, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.readStudiesV1RdbStudiesGet(ids, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['RdbApi.readStudiesV1RdbStudiesGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.RdbApiFp = RdbApiFp;
/**
 * RdbApi - factory interface
 * @export
 */
const RdbApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.RdbApiFp)(configuration);
    return {
        /**
         * Read evidences.
         * @summary Read Evidences
         * @param {RdbApiReadEvidencesV1RdbEvidencesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readEvidencesV1RdbEvidencesGet(requestParameters = {}, options) {
            return localVarFp.readEvidencesV1RdbEvidencesGet(requestParameters.ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Read studies.
         * @summary Read Studies
         * @param {RdbApiReadStudiesV1RdbStudiesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudiesV1RdbStudiesGet(requestParameters = {}, options) {
            return localVarFp.readStudiesV1RdbStudiesGet(requestParameters.ids, options).then((request) => request(axios, basePath));
        },
    };
};
exports.RdbApiFactory = RdbApiFactory;
/**
 * RdbApi - object-oriented interface
 * @export
 * @class RdbApi
 * @extends {BaseAPI}
 */
class RdbApi extends base_1.BaseAPI {
    /**
     * Read evidences.
     * @summary Read Evidences
     * @param {RdbApiReadEvidencesV1RdbEvidencesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RdbApi
     */
    readEvidencesV1RdbEvidencesGet(requestParameters = {}, options) {
        return (0, exports.RdbApiFp)(this.configuration).readEvidencesV1RdbEvidencesGet(requestParameters.ids, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Read studies.
     * @summary Read Studies
     * @param {RdbApiReadStudiesV1RdbStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RdbApi
     */
    readStudiesV1RdbStudiesGet(requestParameters = {}, options) {
        return (0, exports.RdbApiFp)(this.configuration).readStudiesV1RdbStudiesGet(requestParameters.ids, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RdbApi = RdbApi;
/**
 * SemanticSearchApi - axios parameter creator
 * @export
 */
const SemanticSearchApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Async Cluster Relationships
         * @param {SystemSearchIn} systemSearchIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost: (systemSearchIn_1, ...args_1) => __awaiter(this, [systemSearchIn_1, ...args_1], void 0, function* (systemSearchIn, options = {}) {
            // verify required parameter 'systemSearchIn' is not null or undefined
            (0, common_1.assertParamExists)('asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost', 'systemSearchIn', systemSearchIn);
            const localVarPath = `/v1/semantic-search/cluster_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(systemSearchIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Async Semantic Search
         * @param {SystemSearchIn} systemSearchIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        asyncSemanticSearchV1SemanticSearchClusterPost: (systemSearchIn_1, ...args_1) => __awaiter(this, [systemSearchIn_1, ...args_1], void 0, function* (systemSearchIn, options = {}) {
            // verify required parameter 'systemSearchIn' is not null or undefined
            (0, common_1.assertParamExists)('asyncSemanticSearchV1SemanticSearchClusterPost', 'systemSearchIn', systemSearchIn);
            const localVarPath = `/v1/semantic-search/cluster`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(systemSearchIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Fetch Cluster Response
         * @param {string} runId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet: (runId_1, ...args_1) => __awaiter(this, [runId_1, ...args_1], void 0, function* (runId, options = {}) {
            // verify required parameter 'runId' is not null or undefined
            (0, common_1.assertParamExists)('fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet', 'runId', runId);
            const localVarPath = `/v1/semantic-search/cluster_async/{run_id}`
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get semantic search.  Values from semantic search. Logs freemium usage on success
         * @summary Fetch Synthesis
         * @param {string} cacheKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSynthesisV1SemanticSearchFetchGet: (cacheKey_1, ...args_1) => __awaiter(this, [cacheKey_1, ...args_1], void 0, function* (cacheKey, options = {}) {
            // verify required parameter 'cacheKey' is not null or undefined
            (0, common_1.assertParamExists)('fetchSynthesisV1SemanticSearchFetchGet', 'cacheKey', cacheKey);
            const localVarPath = `/v1/semantic-search/fetch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (cacheKey !== undefined) {
                localVarQueryParameter['cache_key'] = cacheKey;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get semantic search relationship map.
         * @summary Get Relationship Map Endpoint
         * @param {SystemSearchIn} systemSearchIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipMapEndpointV1SemanticSearchRelationshipMapPost: (systemSearchIn_1, ...args_1) => __awaiter(this, [systemSearchIn_1, ...args_1], void 0, function* (systemSearchIn, options = {}) {
            // verify required parameter 'systemSearchIn' is not null or undefined
            (0, common_1.assertParamExists)('getRelationshipMapEndpointV1SemanticSearchRelationshipMapPost', 'systemSearchIn', systemSearchIn);
            const localVarPath = `/v1/semantic-search/relationship_map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(systemSearchIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get semantic search usage.  date defaults to Jan 1st 2023 - before releasing tracking. Ommiting the date query param is equivalent of getting usage regardless of the date  metric defaults to Metrics.semantic_search_create for backward compatibility so that API consumers that don\'t pass a metric query param still get the original behaviour.
         * @summary Get Semantic Search Usage
         * @param {string} [dateFrom]
         * @param {Metrics} [metric]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticSearchUsageV1SemanticSearchUsageGet: (dateFrom_1, metric_1, ...args_1) => __awaiter(this, [dateFrom_1, metric_1, ...args_1], void 0, function* (dateFrom, metric, options = {}) {
            const localVarPath = `/v1/semantic-search/usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom instanceof Date) ?
                    dateFrom.toISOString().substring(0, 10) :
                    dateFrom;
            }
            if (metric !== undefined) {
                localVarQueryParameter['metric'] = metric;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get semantic search findings.  Values from semantic search.
         * @summary Get System Search Findings Data
         * @param {SystemSearchIn} systemSearchIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSearchFindingsDataV1SemanticSearchDataPost: (systemSearchIn_1, ...args_1) => __awaiter(this, [systemSearchIn_1, ...args_1], void 0, function* (systemSearchIn, options = {}) {
            // verify required parameter 'systemSearchIn' is not null or undefined
            (0, common_1.assertParamExists)('getSystemSearchFindingsDataV1SemanticSearchDataPost', 'systemSearchIn', systemSearchIn);
            const localVarPath = `/v1/semantic-search/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(systemSearchIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get statistical findings.
         * @summary Get System Search Mechanistic Data
         * @param {SystemSearchDataIn} systemSearchDataIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPost: (systemSearchDataIn_1, ...args_1) => __awaiter(this, [systemSearchDataIn_1, ...args_1], void 0, function* (systemSearchDataIn, options = {}) {
            // verify required parameter 'systemSearchDataIn' is not null or undefined
            (0, common_1.assertParamExists)('getSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPost', 'systemSearchDataIn', systemSearchDataIn);
            const localVarPath = `/v1/semantic-search/data/mechanistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(systemSearchDataIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get mechanistic findings.
         * @summary Get System Search Statistical Data
         * @param {SystemSearchDataIn} systemSearchDataIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPost: (systemSearchDataIn_1, ...args_1) => __awaiter(this, [systemSearchDataIn_1, ...args_1], void 0, function* (systemSearchDataIn, options = {}) {
            // verify required parameter 'systemSearchDataIn' is not null or undefined
            (0, common_1.assertParamExists)('getSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPost', 'systemSearchDataIn', systemSearchDataIn);
            const localVarPath = `/v1/semantic-search/data/statistical`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(systemSearchDataIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Regenerate Synthesis
         * @param {string} cacheKey
         * @param {boolean} [forceRerun]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regenerateSynthesisV1SemanticSearchRegeneratePost: (cacheKey_1, forceRerun_1, ...args_1) => __awaiter(this, [cacheKey_1, forceRerun_1, ...args_1], void 0, function* (cacheKey, forceRerun, options = {}) {
            // verify required parameter 'cacheKey' is not null or undefined
            (0, common_1.assertParamExists)('regenerateSynthesisV1SemanticSearchRegeneratePost', 'cacheKey', cacheKey);
            const localVarPath = `/v1/semantic-search/regenerate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (cacheKey !== undefined) {
                localVarQueryParameter['cache_key'] = cacheKey;
            }
            if (forceRerun !== undefined) {
                localVarQueryParameter['force_rerun'] = forceRerun;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.SemanticSearchApiAxiosParamCreator = SemanticSearchApiAxiosParamCreator;
/**
 * SemanticSearchApi - functional programming interface
 * @export
 */
const SemanticSearchApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SemanticSearchApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Async Cluster Relationships
         * @param {SystemSearchIn} systemSearchIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost(systemSearchIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost(systemSearchIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SemanticSearchApi.asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Async Semantic Search
         * @param {SystemSearchIn} systemSearchIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        asyncSemanticSearchV1SemanticSearchClusterPost(systemSearchIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.asyncSemanticSearchV1SemanticSearchClusterPost(systemSearchIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SemanticSearchApi.asyncSemanticSearchV1SemanticSearchClusterPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Fetch Cluster Response
         * @param {string} runId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet(runId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet(runId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SemanticSearchApi.fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get semantic search.  Values from semantic search. Logs freemium usage on success
         * @summary Fetch Synthesis
         * @param {string} cacheKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSynthesisV1SemanticSearchFetchGet(cacheKey, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchSynthesisV1SemanticSearchFetchGet(cacheKey, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SemanticSearchApi.fetchSynthesisV1SemanticSearchFetchGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get semantic search relationship map.
         * @summary Get Relationship Map Endpoint
         * @param {SystemSearchIn} systemSearchIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipMapEndpointV1SemanticSearchRelationshipMapPost(systemSearchIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipMapEndpointV1SemanticSearchRelationshipMapPost(systemSearchIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SemanticSearchApi.getRelationshipMapEndpointV1SemanticSearchRelationshipMapPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get semantic search usage.  date defaults to Jan 1st 2023 - before releasing tracking. Ommiting the date query param is equivalent of getting usage regardless of the date  metric defaults to Metrics.semantic_search_create for backward compatibility so that API consumers that don\'t pass a metric query param still get the original behaviour.
         * @summary Get Semantic Search Usage
         * @param {string} [dateFrom]
         * @param {Metrics} [metric]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticSearchUsageV1SemanticSearchUsageGet(dateFrom, metric, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSemanticSearchUsageV1SemanticSearchUsageGet(dateFrom, metric, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SemanticSearchApi.getSemanticSearchUsageV1SemanticSearchUsageGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get semantic search findings.  Values from semantic search.
         * @summary Get System Search Findings Data
         * @param {SystemSearchIn} systemSearchIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSearchFindingsDataV1SemanticSearchDataPost(systemSearchIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSystemSearchFindingsDataV1SemanticSearchDataPost(systemSearchIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SemanticSearchApi.getSystemSearchFindingsDataV1SemanticSearchDataPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get statistical findings.
         * @summary Get System Search Mechanistic Data
         * @param {SystemSearchDataIn} systemSearchDataIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPost(systemSearchDataIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPost(systemSearchDataIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SemanticSearchApi.getSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get mechanistic findings.
         * @summary Get System Search Statistical Data
         * @param {SystemSearchDataIn} systemSearchDataIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPost(systemSearchDataIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPost(systemSearchDataIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SemanticSearchApi.getSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Regenerate Synthesis
         * @param {string} cacheKey
         * @param {boolean} [forceRerun]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regenerateSynthesisV1SemanticSearchRegeneratePost(cacheKey, forceRerun, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.regenerateSynthesisV1SemanticSearchRegeneratePost(cacheKey, forceRerun, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SemanticSearchApi.regenerateSynthesisV1SemanticSearchRegeneratePost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.SemanticSearchApiFp = SemanticSearchApiFp;
/**
 * SemanticSearchApi - factory interface
 * @export
 */
const SemanticSearchApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SemanticSearchApiFp)(configuration);
    return {
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Async Cluster Relationships
         * @param {SemanticSearchApiAsyncClusterRelationshipsV1SemanticSearchClusterAsyncPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost(requestParameters, options) {
            return localVarFp.asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost(requestParameters.systemSearchIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Async Semantic Search
         * @param {SemanticSearchApiAsyncSemanticSearchV1SemanticSearchClusterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        asyncSemanticSearchV1SemanticSearchClusterPost(requestParameters, options) {
            return localVarFp.asyncSemanticSearchV1SemanticSearchClusterPost(requestParameters.systemSearchIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Fetch Cluster Response
         * @param {SemanticSearchApiFetchClusterResponseV1SemanticSearchClusterAsyncRunIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet(requestParameters, options) {
            return localVarFp.fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet(requestParameters.runId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get semantic search.  Values from semantic search. Logs freemium usage on success
         * @summary Fetch Synthesis
         * @param {SemanticSearchApiFetchSynthesisV1SemanticSearchFetchGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSynthesisV1SemanticSearchFetchGet(requestParameters, options) {
            return localVarFp.fetchSynthesisV1SemanticSearchFetchGet(requestParameters.cacheKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Get semantic search relationship map.
         * @summary Get Relationship Map Endpoint
         * @param {SemanticSearchApiGetRelationshipMapEndpointV1SemanticSearchRelationshipMapPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipMapEndpointV1SemanticSearchRelationshipMapPost(requestParameters, options) {
            return localVarFp.getRelationshipMapEndpointV1SemanticSearchRelationshipMapPost(requestParameters.systemSearchIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get semantic search usage.  date defaults to Jan 1st 2023 - before releasing tracking. Ommiting the date query param is equivalent of getting usage regardless of the date  metric defaults to Metrics.semantic_search_create for backward compatibility so that API consumers that don\'t pass a metric query param still get the original behaviour.
         * @summary Get Semantic Search Usage
         * @param {SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticSearchUsageV1SemanticSearchUsageGet(requestParameters = {}, options) {
            return localVarFp.getSemanticSearchUsageV1SemanticSearchUsageGet(requestParameters.dateFrom, requestParameters.metric, options).then((request) => request(axios, basePath));
        },
        /**
         * Get semantic search findings.  Values from semantic search.
         * @summary Get System Search Findings Data
         * @param {SemanticSearchApiGetSystemSearchFindingsDataV1SemanticSearchDataPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSearchFindingsDataV1SemanticSearchDataPost(requestParameters, options) {
            return localVarFp.getSystemSearchFindingsDataV1SemanticSearchDataPost(requestParameters.systemSearchIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get statistical findings.
         * @summary Get System Search Mechanistic Data
         * @param {SemanticSearchApiGetSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPost(requestParameters, options) {
            return localVarFp.getSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPost(requestParameters.systemSearchDataIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get mechanistic findings.
         * @summary Get System Search Statistical Data
         * @param {SemanticSearchApiGetSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPost(requestParameters, options) {
            return localVarFp.getSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPost(requestParameters.systemSearchDataIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Regenerate Synthesis
         * @param {SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regenerateSynthesisV1SemanticSearchRegeneratePost(requestParameters, options) {
            return localVarFp.regenerateSynthesisV1SemanticSearchRegeneratePost(requestParameters.cacheKey, requestParameters.forceRerun, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SemanticSearchApiFactory = SemanticSearchApiFactory;
/**
 * SemanticSearchApi - object-oriented interface
 * @export
 * @class SemanticSearchApi
 * @extends {BaseAPI}
 */
class SemanticSearchApi extends base_1.BaseAPI {
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Cluster Relationships
     * @param {SemanticSearchApiAsyncClusterRelationshipsV1SemanticSearchClusterAsyncPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost(requestParameters, options) {
        return (0, exports.SemanticSearchApiFp)(this.configuration).asyncClusterRelationshipsV1SemanticSearchClusterAsyncPost(requestParameters.systemSearchIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Async Semantic Search
     * @param {SemanticSearchApiAsyncSemanticSearchV1SemanticSearchClusterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    asyncSemanticSearchV1SemanticSearchClusterPost(requestParameters, options) {
        return (0, exports.SemanticSearchApiFp)(this.configuration).asyncSemanticSearchV1SemanticSearchClusterPost(requestParameters.systemSearchIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Fetch Cluster Response
     * @param {SemanticSearchApiFetchClusterResponseV1SemanticSearchClusterAsyncRunIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet(requestParameters, options) {
        return (0, exports.SemanticSearchApiFp)(this.configuration).fetchClusterResponseV1SemanticSearchClusterAsyncRunIdGet(requestParameters.runId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get semantic search.  Values from semantic search. Logs freemium usage on success
     * @summary Fetch Synthesis
     * @param {SemanticSearchApiFetchSynthesisV1SemanticSearchFetchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    fetchSynthesisV1SemanticSearchFetchGet(requestParameters, options) {
        return (0, exports.SemanticSearchApiFp)(this.configuration).fetchSynthesisV1SemanticSearchFetchGet(requestParameters.cacheKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get semantic search relationship map.
     * @summary Get Relationship Map Endpoint
     * @param {SemanticSearchApiGetRelationshipMapEndpointV1SemanticSearchRelationshipMapPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    getRelationshipMapEndpointV1SemanticSearchRelationshipMapPost(requestParameters, options) {
        return (0, exports.SemanticSearchApiFp)(this.configuration).getRelationshipMapEndpointV1SemanticSearchRelationshipMapPost(requestParameters.systemSearchIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get semantic search usage.  date defaults to Jan 1st 2023 - before releasing tracking. Ommiting the date query param is equivalent of getting usage regardless of the date  metric defaults to Metrics.semantic_search_create for backward compatibility so that API consumers that don\'t pass a metric query param still get the original behaviour.
     * @summary Get Semantic Search Usage
     * @param {SemanticSearchApiGetSemanticSearchUsageV1SemanticSearchUsageGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    getSemanticSearchUsageV1SemanticSearchUsageGet(requestParameters = {}, options) {
        return (0, exports.SemanticSearchApiFp)(this.configuration).getSemanticSearchUsageV1SemanticSearchUsageGet(requestParameters.dateFrom, requestParameters.metric, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get semantic search findings.  Values from semantic search.
     * @summary Get System Search Findings Data
     * @param {SemanticSearchApiGetSystemSearchFindingsDataV1SemanticSearchDataPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    getSystemSearchFindingsDataV1SemanticSearchDataPost(requestParameters, options) {
        return (0, exports.SemanticSearchApiFp)(this.configuration).getSystemSearchFindingsDataV1SemanticSearchDataPost(requestParameters.systemSearchIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get statistical findings.
     * @summary Get System Search Mechanistic Data
     * @param {SemanticSearchApiGetSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    getSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPost(requestParameters, options) {
        return (0, exports.SemanticSearchApiFp)(this.configuration).getSystemSearchMechanisticDataV1SemanticSearchDataMechanisticPost(requestParameters.systemSearchDataIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get mechanistic findings.
     * @summary Get System Search Statistical Data
     * @param {SemanticSearchApiGetSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    getSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPost(requestParameters, options) {
        return (0, exports.SemanticSearchApiFp)(this.configuration).getSystemSearchStatisticalDataV1SemanticSearchDataStatisticalPost(requestParameters.systemSearchDataIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Regenerate Synthesis
     * @param {SemanticSearchApiRegenerateSynthesisV1SemanticSearchRegeneratePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    regenerateSynthesisV1SemanticSearchRegeneratePost(requestParameters, options) {
        return (0, exports.SemanticSearchApiFp)(this.configuration).regenerateSynthesisV1SemanticSearchRegeneratePost(requestParameters.cacheKey, requestParameters.forceRerun, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SemanticSearchApi = SemanticSearchApi;
/**
 * SohApi - axios parameter creator
 * @export
 */
const SohApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Fetch graph.
         * @summary Fetch Full Mech Graph
         * @param {string} topicId
         * @param {GraphPayloadTyped} graphPayloadTyped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPost: (topicId_1, graphPayloadTyped_1, ...args_1) => __awaiter(this, [topicId_1, graphPayloadTyped_1, ...args_1], void 0, function* (topicId, graphPayloadTyped, options = {}) {
            // verify required parameter 'topicId' is not null or undefined
            (0, common_1.assertParamExists)('fetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPost', 'topicId', topicId);
            // verify required parameter 'graphPayloadTyped' is not null or undefined
            (0, common_1.assertParamExists)('fetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPost', 'graphPayloadTyped', graphPayloadTyped);
            const localVarPath = `/v1/soh/mech_relationships/{topic_id}/graph`
                .replace(`{${"topic_id"}}`, encodeURIComponent(String(topicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(graphPayloadTyped, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch graph.
         * @summary Fetch Full Stat Graph
         * @param {string} topicId
         * @param {GraphPayloadTyped} graphPayloadTyped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPost: (topicId_1, graphPayloadTyped_1, ...args_1) => __awaiter(this, [topicId_1, graphPayloadTyped_1, ...args_1], void 0, function* (topicId, graphPayloadTyped, options = {}) {
            // verify required parameter 'topicId' is not null or undefined
            (0, common_1.assertParamExists)('fetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPost', 'topicId', topicId);
            // verify required parameter 'graphPayloadTyped' is not null or undefined
            (0, common_1.assertParamExists)('fetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPost', 'graphPayloadTyped', graphPayloadTyped);
            const localVarPath = `/v1/soh/stat_relationships/{topic_id}/graph`
                .replace(`{${"topic_id"}}`, encodeURIComponent(String(topicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(graphPayloadTyped, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch time series data for relationships, findings, and topics.
         * @summary Fetch Graph Time Series Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGraphTimeSeriesDataV1SohMetricsTimeSeriesGet: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/v1/soh/metrics/time-series`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get hierarchical topics.
         * @summary Fetch Hierarchical Topics
         * @param {string} query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHierarchicalTopicsV1SohHierarchicalTopicsGet: (query_1, ...args_1) => __awaiter(this, [query_1, ...args_1], void 0, function* (query, options = {}) {
            // verify required parameter 'query' is not null or undefined
            (0, common_1.assertParamExists)('fetchHierarchicalTopicsV1SohHierarchicalTopicsGet', 'query', query);
            const localVarPath = `/v1/soh/hierarchical-topics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch graph.
         * @summary Fetch Mech Graph
         * @param {string} topicId
         * @param {string} traversalDirection
         * @param {PathsPayloadTyped} pathsPayloadTyped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPost: (topicId_1, traversalDirection_1, pathsPayloadTyped_1, ...args_1) => __awaiter(this, [topicId_1, traversalDirection_1, pathsPayloadTyped_1, ...args_1], void 0, function* (topicId, traversalDirection, pathsPayloadTyped, options = {}) {
            // verify required parameter 'topicId' is not null or undefined
            (0, common_1.assertParamExists)('fetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPost', 'topicId', topicId);
            // verify required parameter 'traversalDirection' is not null or undefined
            (0, common_1.assertParamExists)('fetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPost', 'traversalDirection', traversalDirection);
            // verify required parameter 'pathsPayloadTyped' is not null or undefined
            (0, common_1.assertParamExists)('fetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPost', 'pathsPayloadTyped', pathsPayloadTyped);
            const localVarPath = `/v1/soh/mech_relationships/{topic_id}/graph/{traversal_direction}`
                .replace(`{${"topic_id"}}`, encodeURIComponent(String(topicId)))
                .replace(`{${"traversal_direction"}}`, encodeURIComponent(String(traversalDirection)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(pathsPayloadTyped, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch mediators.
         * @summary Fetch Mech Mediators
         * @param {string} topicId
         * @param {string} targetTopicId
         * @param {PathsPayloadTyped} pathsPayloadTyped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPost: (topicId_1, targetTopicId_1, pathsPayloadTyped_1, ...args_1) => __awaiter(this, [topicId_1, targetTopicId_1, pathsPayloadTyped_1, ...args_1], void 0, function* (topicId, targetTopicId, pathsPayloadTyped, options = {}) {
            // verify required parameter 'topicId' is not null or undefined
            (0, common_1.assertParamExists)('fetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPost', 'topicId', topicId);
            // verify required parameter 'targetTopicId' is not null or undefined
            (0, common_1.assertParamExists)('fetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPost', 'targetTopicId', targetTopicId);
            // verify required parameter 'pathsPayloadTyped' is not null or undefined
            (0, common_1.assertParamExists)('fetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPost', 'pathsPayloadTyped', pathsPayloadTyped);
            const localVarPath = `/v1/soh/mech_relationships/{topic_id}/paths/mediators`
                .replace(`{${"topic_id"}}`, encodeURIComponent(String(topicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (targetTopicId !== undefined) {
                localVarQueryParameter['target_topic_id'] = targetTopicId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(pathsPayloadTyped, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch paths.
         * @summary Fetch Mech Paths
         * @param {string} topicId
         * @param {string} traversalDirection
         * @param {PathsPayloadTyped} pathsPayloadTyped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPost: (topicId_1, traversalDirection_1, pathsPayloadTyped_1, ...args_1) => __awaiter(this, [topicId_1, traversalDirection_1, pathsPayloadTyped_1, ...args_1], void 0, function* (topicId, traversalDirection, pathsPayloadTyped, options = {}) {
            // verify required parameter 'topicId' is not null or undefined
            (0, common_1.assertParamExists)('fetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPost', 'topicId', topicId);
            // verify required parameter 'traversalDirection' is not null or undefined
            (0, common_1.assertParamExists)('fetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPost', 'traversalDirection', traversalDirection);
            // verify required parameter 'pathsPayloadTyped' is not null or undefined
            (0, common_1.assertParamExists)('fetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPost', 'pathsPayloadTyped', pathsPayloadTyped);
            const localVarPath = `/v1/soh/mech_relationships/{topic_id}/paths/{traversal_direction}`
                .replace(`{${"topic_id"}}`, encodeURIComponent(String(topicId)))
                .replace(`{${"traversal_direction"}}`, encodeURIComponent(String(traversalDirection)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(pathsPayloadTyped, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch graph.
         * @summary Fetch Stat Graph
         * @param {string} topicId
         * @param {string} traversalDirection
         * @param {PathsPayloadTyped} pathsPayloadTyped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPost: (topicId_1, traversalDirection_1, pathsPayloadTyped_1, ...args_1) => __awaiter(this, [topicId_1, traversalDirection_1, pathsPayloadTyped_1, ...args_1], void 0, function* (topicId, traversalDirection, pathsPayloadTyped, options = {}) {
            // verify required parameter 'topicId' is not null or undefined
            (0, common_1.assertParamExists)('fetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPost', 'topicId', topicId);
            // verify required parameter 'traversalDirection' is not null or undefined
            (0, common_1.assertParamExists)('fetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPost', 'traversalDirection', traversalDirection);
            // verify required parameter 'pathsPayloadTyped' is not null or undefined
            (0, common_1.assertParamExists)('fetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPost', 'pathsPayloadTyped', pathsPayloadTyped);
            const localVarPath = `/v1/soh/stat_relationships/{topic_id}/graph/{traversal_direction}`
                .replace(`{${"topic_id"}}`, encodeURIComponent(String(topicId)))
                .replace(`{${"traversal_direction"}}`, encodeURIComponent(String(traversalDirection)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(pathsPayloadTyped, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch mediators.
         * @summary Fetch Stat Mediators
         * @param {string} topicId
         * @param {string} targetTopicId
         * @param {PathsPayloadTyped} pathsPayloadTyped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPost: (topicId_1, targetTopicId_1, pathsPayloadTyped_1, ...args_1) => __awaiter(this, [topicId_1, targetTopicId_1, pathsPayloadTyped_1, ...args_1], void 0, function* (topicId, targetTopicId, pathsPayloadTyped, options = {}) {
            // verify required parameter 'topicId' is not null or undefined
            (0, common_1.assertParamExists)('fetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPost', 'topicId', topicId);
            // verify required parameter 'targetTopicId' is not null or undefined
            (0, common_1.assertParamExists)('fetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPost', 'targetTopicId', targetTopicId);
            // verify required parameter 'pathsPayloadTyped' is not null or undefined
            (0, common_1.assertParamExists)('fetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPost', 'pathsPayloadTyped', pathsPayloadTyped);
            const localVarPath = `/v1/soh/stat_relationships/{topic_id}/paths/mediators`
                .replace(`{${"topic_id"}}`, encodeURIComponent(String(topicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (targetTopicId !== undefined) {
                localVarQueryParameter['target_topic_id'] = targetTopicId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(pathsPayloadTyped, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch paths.
         * @summary Fetch Stat Paths
         * @param {string} topicId
         * @param {string} traversalDirection
         * @param {PathsPayloadTyped} pathsPayloadTyped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPost: (topicId_1, traversalDirection_1, pathsPayloadTyped_1, ...args_1) => __awaiter(this, [topicId_1, traversalDirection_1, pathsPayloadTyped_1, ...args_1], void 0, function* (topicId, traversalDirection, pathsPayloadTyped, options = {}) {
            // verify required parameter 'topicId' is not null or undefined
            (0, common_1.assertParamExists)('fetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPost', 'topicId', topicId);
            // verify required parameter 'traversalDirection' is not null or undefined
            (0, common_1.assertParamExists)('fetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPost', 'traversalDirection', traversalDirection);
            // verify required parameter 'pathsPayloadTyped' is not null or undefined
            (0, common_1.assertParamExists)('fetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPost', 'pathsPayloadTyped', pathsPayloadTyped);
            const localVarPath = `/v1/soh/stat_relationships/{topic_id}/paths/{traversal_direction}`
                .replace(`{${"topic_id"}}`, encodeURIComponent(String(topicId)))
                .replace(`{${"traversal_direction"}}`, encodeURIComponent(String(traversalDirection)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(pathsPayloadTyped, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get system of health data.
         * @summary Fetch Topics
         * @param {string} query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicsV1SohTopicsGet: (query_1, ...args_1) => __awaiter(this, [query_1, ...args_1], void 0, function* (query, options = {}) {
            // verify required parameter 'query' is not null or undefined
            (0, common_1.assertParamExists)('fetchTopicsV1SohTopicsGet', 'query', query);
            const localVarPath = `/v1/soh/topics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get system of health findings and related study if doi provided.
         * @summary Get List Of Soh Findings
         * @param {string} [doi]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListOfSohFindingsV1SohFindingsLogGet: (doi_1, ...args_1) => __awaiter(this, [doi_1, ...args_1], void 0, function* (doi, options = {}) {
            const localVarPath = `/v1/soh/findings-log`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (doi !== undefined) {
                localVarQueryParameter['doi'] = doi;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get system of health summary.
         * @summary Get Relationship Summary Between Two Topics.
         * @param {string} topic1Id
         * @param {string} topic2Id
         * @param {boolean} [recent]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipSummaryBetweenTwoTopicsV1SohSummaryGet: (topic1Id_1, topic2Id_1, recent_1, ...args_1) => __awaiter(this, [topic1Id_1, topic2Id_1, recent_1, ...args_1], void 0, function* (topic1Id, topic2Id, recent, options = {}) {
            // verify required parameter 'topic1Id' is not null or undefined
            (0, common_1.assertParamExists)('getRelationshipSummaryBetweenTwoTopicsV1SohSummaryGet', 'topic1Id', topic1Id);
            // verify required parameter 'topic2Id' is not null or undefined
            (0, common_1.assertParamExists)('getRelationshipSummaryBetweenTwoTopicsV1SohSummaryGet', 'topic2Id', topic2Id);
            const localVarPath = `/v1/soh/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (topic1Id !== undefined) {
                localVarQueryParameter['topic_1_id'] = topic1Id;
            }
            if (topic2Id !== undefined) {
                localVarQueryParameter['topic_2_id'] = topic2Id;
            }
            if (recent !== undefined) {
                localVarQueryParameter['recent'] = recent;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get system of health data.
         * @summary Get Soh Evidence Metadata
         * @param {SohIn} sohIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSohEvidenceMetadataV1SohEvidencesPost: (sohIn_1, ...args_1) => __awaiter(this, [sohIn_1, ...args_1], void 0, function* (sohIn, options = {}) {
            // verify required parameter 'sohIn' is not null or undefined
            (0, common_1.assertParamExists)('getSohEvidenceMetadataV1SohEvidencesPost', 'sohIn', sohIn);
            const localVarPath = `/v1/soh/evidences`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sohIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get system of health data.
         * @summary Get Soh Graph Metadata
         * @param {number} [limit] Number of relationships to return.
         * @param {boolean} [clearCache] Clear cache and fetch new graph.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSohGraphMetadataV1SohGraphGet: (limit_1, clearCache_1, ...args_1) => __awaiter(this, [limit_1, clearCache_1, ...args_1], void 0, function* (limit, clearCache, options = {}) {
            const localVarPath = `/v1/soh/graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (clearCache !== undefined) {
                localVarQueryParameter['clear_cache'] = clearCache;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get system of health data.
         * @summary Get Soh Of Metadata
         * @param {SohIn} sohIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSohOfMetadataV1SohFindingsPost: (sohIn_1, ...args_1) => __awaiter(this, [sohIn_1, ...args_1], void 0, function* (sohIn, options = {}) {
            // verify required parameter 'sohIn' is not null or undefined
            (0, common_1.assertParamExists)('getSohOfMetadataV1SohFindingsPost', 'sohIn', sohIn);
            const localVarPath = `/v1/soh/findings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sohIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get system of health data.
         * @summary Get Topic By Id
         * @param {string} topicId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicByIDV1SohTopicsTopicIdGet: (topicId_1, ...args_1) => __awaiter(this, [topicId_1, ...args_1], void 0, function* (topicId, options = {}) {
            // verify required parameter 'topicId' is not null or undefined
            (0, common_1.assertParamExists)('getTopicByIDV1SohTopicsTopicIdGet', 'topicId', topicId);
            const localVarPath = `/v1/soh/topics/{topic_id}`
                .replace(`{${"topic_id"}}`, encodeURIComponent(String(topicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.SohApiAxiosParamCreator = SohApiAxiosParamCreator;
/**
 * SohApi - functional programming interface
 * @export
 */
const SohApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SohApiAxiosParamCreator)(configuration);
    return {
        /**
         * Fetch graph.
         * @summary Fetch Full Mech Graph
         * @param {string} topicId
         * @param {GraphPayloadTyped} graphPayloadTyped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPost(topicId, graphPayloadTyped, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPost(topicId, graphPayloadTyped, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SohApi.fetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Fetch graph.
         * @summary Fetch Full Stat Graph
         * @param {string} topicId
         * @param {GraphPayloadTyped} graphPayloadTyped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPost(topicId, graphPayloadTyped, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPost(topicId, graphPayloadTyped, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SohApi.fetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Fetch time series data for relationships, findings, and topics.
         * @summary Fetch Graph Time Series Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGraphTimeSeriesDataV1SohMetricsTimeSeriesGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchGraphTimeSeriesDataV1SohMetricsTimeSeriesGet(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SohApi.fetchGraphTimeSeriesDataV1SohMetricsTimeSeriesGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get hierarchical topics.
         * @summary Fetch Hierarchical Topics
         * @param {string} query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHierarchicalTopicsV1SohHierarchicalTopicsGet(query, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchHierarchicalTopicsV1SohHierarchicalTopicsGet(query, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SohApi.fetchHierarchicalTopicsV1SohHierarchicalTopicsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Fetch graph.
         * @summary Fetch Mech Graph
         * @param {string} topicId
         * @param {string} traversalDirection
         * @param {PathsPayloadTyped} pathsPayloadTyped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPost(topicId, traversalDirection, pathsPayloadTyped, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPost(topicId, traversalDirection, pathsPayloadTyped, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SohApi.fetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Fetch mediators.
         * @summary Fetch Mech Mediators
         * @param {string} topicId
         * @param {string} targetTopicId
         * @param {PathsPayloadTyped} pathsPayloadTyped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPost(topicId, targetTopicId, pathsPayloadTyped, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPost(topicId, targetTopicId, pathsPayloadTyped, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SohApi.fetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Fetch paths.
         * @summary Fetch Mech Paths
         * @param {string} topicId
         * @param {string} traversalDirection
         * @param {PathsPayloadTyped} pathsPayloadTyped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPost(topicId, traversalDirection, pathsPayloadTyped, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPost(topicId, traversalDirection, pathsPayloadTyped, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SohApi.fetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Fetch graph.
         * @summary Fetch Stat Graph
         * @param {string} topicId
         * @param {string} traversalDirection
         * @param {PathsPayloadTyped} pathsPayloadTyped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPost(topicId, traversalDirection, pathsPayloadTyped, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPost(topicId, traversalDirection, pathsPayloadTyped, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SohApi.fetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Fetch mediators.
         * @summary Fetch Stat Mediators
         * @param {string} topicId
         * @param {string} targetTopicId
         * @param {PathsPayloadTyped} pathsPayloadTyped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPost(topicId, targetTopicId, pathsPayloadTyped, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPost(topicId, targetTopicId, pathsPayloadTyped, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SohApi.fetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Fetch paths.
         * @summary Fetch Stat Paths
         * @param {string} topicId
         * @param {string} traversalDirection
         * @param {PathsPayloadTyped} pathsPayloadTyped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPost(topicId, traversalDirection, pathsPayloadTyped, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPost(topicId, traversalDirection, pathsPayloadTyped, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SohApi.fetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get system of health data.
         * @summary Fetch Topics
         * @param {string} query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicsV1SohTopicsGet(query, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchTopicsV1SohTopicsGet(query, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SohApi.fetchTopicsV1SohTopicsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get system of health findings and related study if doi provided.
         * @summary Get List Of Soh Findings
         * @param {string} [doi]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListOfSohFindingsV1SohFindingsLogGet(doi, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getListOfSohFindingsV1SohFindingsLogGet(doi, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SohApi.getListOfSohFindingsV1SohFindingsLogGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get system of health summary.
         * @summary Get Relationship Summary Between Two Topics.
         * @param {string} topic1Id
         * @param {string} topic2Id
         * @param {boolean} [recent]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipSummaryBetweenTwoTopicsV1SohSummaryGet(topic1Id, topic2Id, recent, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipSummaryBetweenTwoTopicsV1SohSummaryGet(topic1Id, topic2Id, recent, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SohApi.getRelationshipSummaryBetweenTwoTopicsV1SohSummaryGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get system of health data.
         * @summary Get Soh Evidence Metadata
         * @param {SohIn} sohIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSohEvidenceMetadataV1SohEvidencesPost(sohIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSohEvidenceMetadataV1SohEvidencesPost(sohIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SohApi.getSohEvidenceMetadataV1SohEvidencesPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get system of health data.
         * @summary Get Soh Graph Metadata
         * @param {number} [limit] Number of relationships to return.
         * @param {boolean} [clearCache] Clear cache and fetch new graph.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSohGraphMetadataV1SohGraphGet(limit, clearCache, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSohGraphMetadataV1SohGraphGet(limit, clearCache, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SohApi.getSohGraphMetadataV1SohGraphGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get system of health data.
         * @summary Get Soh Of Metadata
         * @param {SohIn} sohIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSohOfMetadataV1SohFindingsPost(sohIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSohOfMetadataV1SohFindingsPost(sohIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SohApi.getSohOfMetadataV1SohFindingsPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get system of health data.
         * @summary Get Topic By Id
         * @param {string} topicId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicByIDV1SohTopicsTopicIdGet(topicId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTopicByIDV1SohTopicsTopicIdGet(topicId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SohApi.getTopicByIDV1SohTopicsTopicIdGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.SohApiFp = SohApiFp;
/**
 * SohApi - factory interface
 * @export
 */
const SohApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SohApiFp)(configuration);
    return {
        /**
         * Fetch graph.
         * @summary Fetch Full Mech Graph
         * @param {SohApiFetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPost(requestParameters, options) {
            return localVarFp.fetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPost(requestParameters.topicId, requestParameters.graphPayloadTyped, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch graph.
         * @summary Fetch Full Stat Graph
         * @param {SohApiFetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPost(requestParameters, options) {
            return localVarFp.fetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPost(requestParameters.topicId, requestParameters.graphPayloadTyped, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch time series data for relationships, findings, and topics.
         * @summary Fetch Graph Time Series Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGraphTimeSeriesDataV1SohMetricsTimeSeriesGet(options) {
            return localVarFp.fetchGraphTimeSeriesDataV1SohMetricsTimeSeriesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get hierarchical topics.
         * @summary Fetch Hierarchical Topics
         * @param {SohApiFetchHierarchicalTopicsV1SohHierarchicalTopicsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHierarchicalTopicsV1SohHierarchicalTopicsGet(requestParameters, options) {
            return localVarFp.fetchHierarchicalTopicsV1SohHierarchicalTopicsGet(requestParameters.query, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch graph.
         * @summary Fetch Mech Graph
         * @param {SohApiFetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPost(requestParameters, options) {
            return localVarFp.fetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPost(requestParameters.topicId, requestParameters.traversalDirection, requestParameters.pathsPayloadTyped, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch mediators.
         * @summary Fetch Mech Mediators
         * @param {SohApiFetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPost(requestParameters, options) {
            return localVarFp.fetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPost(requestParameters.topicId, requestParameters.targetTopicId, requestParameters.pathsPayloadTyped, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch paths.
         * @summary Fetch Mech Paths
         * @param {SohApiFetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPost(requestParameters, options) {
            return localVarFp.fetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPost(requestParameters.topicId, requestParameters.traversalDirection, requestParameters.pathsPayloadTyped, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch graph.
         * @summary Fetch Stat Graph
         * @param {SohApiFetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPost(requestParameters, options) {
            return localVarFp.fetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPost(requestParameters.topicId, requestParameters.traversalDirection, requestParameters.pathsPayloadTyped, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch mediators.
         * @summary Fetch Stat Mediators
         * @param {SohApiFetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPost(requestParameters, options) {
            return localVarFp.fetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPost(requestParameters.topicId, requestParameters.targetTopicId, requestParameters.pathsPayloadTyped, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch paths.
         * @summary Fetch Stat Paths
         * @param {SohApiFetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPost(requestParameters, options) {
            return localVarFp.fetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPost(requestParameters.topicId, requestParameters.traversalDirection, requestParameters.pathsPayloadTyped, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system of health data.
         * @summary Fetch Topics
         * @param {SohApiFetchTopicsV1SohTopicsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicsV1SohTopicsGet(requestParameters, options) {
            return localVarFp.fetchTopicsV1SohTopicsGet(requestParameters.query, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system of health findings and related study if doi provided.
         * @summary Get List Of Soh Findings
         * @param {SohApiGetListOfSohFindingsV1SohFindingsLogGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListOfSohFindingsV1SohFindingsLogGet(requestParameters = {}, options) {
            return localVarFp.getListOfSohFindingsV1SohFindingsLogGet(requestParameters.doi, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system of health summary.
         * @summary Get Relationship Summary Between Two Topics.
         * @param {SohApiGetRelationshipSummaryBetweenTwoTopicsV1SohSummaryGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipSummaryBetweenTwoTopicsV1SohSummaryGet(requestParameters, options) {
            return localVarFp.getRelationshipSummaryBetweenTwoTopicsV1SohSummaryGet(requestParameters.topic1Id, requestParameters.topic2Id, requestParameters.recent, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system of health data.
         * @summary Get Soh Evidence Metadata
         * @param {SohApiGetSohEvidenceMetadataV1SohEvidencesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSohEvidenceMetadataV1SohEvidencesPost(requestParameters, options) {
            return localVarFp.getSohEvidenceMetadataV1SohEvidencesPost(requestParameters.sohIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system of health data.
         * @summary Get Soh Graph Metadata
         * @param {SohApiGetSohGraphMetadataV1SohGraphGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSohGraphMetadataV1SohGraphGet(requestParameters = {}, options) {
            return localVarFp.getSohGraphMetadataV1SohGraphGet(requestParameters.limit, requestParameters.clearCache, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system of health data.
         * @summary Get Soh Of Metadata
         * @param {SohApiGetSohOfMetadataV1SohFindingsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSohOfMetadataV1SohFindingsPost(requestParameters, options) {
            return localVarFp.getSohOfMetadataV1SohFindingsPost(requestParameters.sohIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system of health data.
         * @summary Get Topic By Id
         * @param {SohApiGetTopicByIDV1SohTopicsTopicIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicByIDV1SohTopicsTopicIdGet(requestParameters, options) {
            return localVarFp.getTopicByIDV1SohTopicsTopicIdGet(requestParameters.topicId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SohApiFactory = SohApiFactory;
/**
 * SohApi - object-oriented interface
 * @export
 * @class SohApi
 * @extends {BaseAPI}
 */
class SohApi extends base_1.BaseAPI {
    /**
     * Fetch graph.
     * @summary Fetch Full Mech Graph
     * @param {SohApiFetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPost(requestParameters, options) {
        return (0, exports.SohApiFp)(this.configuration).fetchFullMechGraphV1SohMechRelationshipsTopicIdGraphPost(requestParameters.topicId, requestParameters.graphPayloadTyped, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch graph.
     * @summary Fetch Full Stat Graph
     * @param {SohApiFetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPost(requestParameters, options) {
        return (0, exports.SohApiFp)(this.configuration).fetchFullStatGraphV1SohStatRelationshipsTopicIdGraphPost(requestParameters.topicId, requestParameters.graphPayloadTyped, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch time series data for relationships, findings, and topics.
     * @summary Fetch Graph Time Series Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchGraphTimeSeriesDataV1SohMetricsTimeSeriesGet(options) {
        return (0, exports.SohApiFp)(this.configuration).fetchGraphTimeSeriesDataV1SohMetricsTimeSeriesGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get hierarchical topics.
     * @summary Fetch Hierarchical Topics
     * @param {SohApiFetchHierarchicalTopicsV1SohHierarchicalTopicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchHierarchicalTopicsV1SohHierarchicalTopicsGet(requestParameters, options) {
        return (0, exports.SohApiFp)(this.configuration).fetchHierarchicalTopicsV1SohHierarchicalTopicsGet(requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch graph.
     * @summary Fetch Mech Graph
     * @param {SohApiFetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPost(requestParameters, options) {
        return (0, exports.SohApiFp)(this.configuration).fetchMechGraphV1SohMechRelationshipsTopicIdGraphTraversalDirectionPost(requestParameters.topicId, requestParameters.traversalDirection, requestParameters.pathsPayloadTyped, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch mediators.
     * @summary Fetch Mech Mediators
     * @param {SohApiFetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPost(requestParameters, options) {
        return (0, exports.SohApiFp)(this.configuration).fetchMechMediatorsV1SohMechRelationshipsTopicIdPathsMediatorsPost(requestParameters.topicId, requestParameters.targetTopicId, requestParameters.pathsPayloadTyped, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch paths.
     * @summary Fetch Mech Paths
     * @param {SohApiFetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPost(requestParameters, options) {
        return (0, exports.SohApiFp)(this.configuration).fetchMechPathsV1SohMechRelationshipsTopicIdPathsTraversalDirectionPost(requestParameters.topicId, requestParameters.traversalDirection, requestParameters.pathsPayloadTyped, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch graph.
     * @summary Fetch Stat Graph
     * @param {SohApiFetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPost(requestParameters, options) {
        return (0, exports.SohApiFp)(this.configuration).fetchStatGraphV1SohStatRelationshipsTopicIdGraphTraversalDirectionPost(requestParameters.topicId, requestParameters.traversalDirection, requestParameters.pathsPayloadTyped, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch mediators.
     * @summary Fetch Stat Mediators
     * @param {SohApiFetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPost(requestParameters, options) {
        return (0, exports.SohApiFp)(this.configuration).fetchStatMediatorsV1SohStatRelationshipsTopicIdPathsMediatorsPost(requestParameters.topicId, requestParameters.targetTopicId, requestParameters.pathsPayloadTyped, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch paths.
     * @summary Fetch Stat Paths
     * @param {SohApiFetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPost(requestParameters, options) {
        return (0, exports.SohApiFp)(this.configuration).fetchStatPathsV1SohStatRelationshipsTopicIdPathsTraversalDirectionPost(requestParameters.topicId, requestParameters.traversalDirection, requestParameters.pathsPayloadTyped, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get system of health data.
     * @summary Fetch Topics
     * @param {SohApiFetchTopicsV1SohTopicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    fetchTopicsV1SohTopicsGet(requestParameters, options) {
        return (0, exports.SohApiFp)(this.configuration).fetchTopicsV1SohTopicsGet(requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get system of health findings and related study if doi provided.
     * @summary Get List Of Soh Findings
     * @param {SohApiGetListOfSohFindingsV1SohFindingsLogGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    getListOfSohFindingsV1SohFindingsLogGet(requestParameters = {}, options) {
        return (0, exports.SohApiFp)(this.configuration).getListOfSohFindingsV1SohFindingsLogGet(requestParameters.doi, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get system of health summary.
     * @summary Get Relationship Summary Between Two Topics.
     * @param {SohApiGetRelationshipSummaryBetweenTwoTopicsV1SohSummaryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    getRelationshipSummaryBetweenTwoTopicsV1SohSummaryGet(requestParameters, options) {
        return (0, exports.SohApiFp)(this.configuration).getRelationshipSummaryBetweenTwoTopicsV1SohSummaryGet(requestParameters.topic1Id, requestParameters.topic2Id, requestParameters.recent, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get system of health data.
     * @summary Get Soh Evidence Metadata
     * @param {SohApiGetSohEvidenceMetadataV1SohEvidencesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    getSohEvidenceMetadataV1SohEvidencesPost(requestParameters, options) {
        return (0, exports.SohApiFp)(this.configuration).getSohEvidenceMetadataV1SohEvidencesPost(requestParameters.sohIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get system of health data.
     * @summary Get Soh Graph Metadata
     * @param {SohApiGetSohGraphMetadataV1SohGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    getSohGraphMetadataV1SohGraphGet(requestParameters = {}, options) {
        return (0, exports.SohApiFp)(this.configuration).getSohGraphMetadataV1SohGraphGet(requestParameters.limit, requestParameters.clearCache, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get system of health data.
     * @summary Get Soh Of Metadata
     * @param {SohApiGetSohOfMetadataV1SohFindingsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    getSohOfMetadataV1SohFindingsPost(requestParameters, options) {
        return (0, exports.SohApiFp)(this.configuration).getSohOfMetadataV1SohFindingsPost(requestParameters.sohIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get system of health data.
     * @summary Get Topic By Id
     * @param {SohApiGetTopicByIDV1SohTopicsTopicIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SohApi
     */
    getTopicByIDV1SohTopicsTopicIdGet(requestParameters, options) {
        return (0, exports.SohApiFp)(this.configuration).getTopicByIDV1SohTopicsTopicIdGet(requestParameters.topicId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SohApi = SohApi;
/**
 * SsoApi - axios parameter creator
 * @export
 */
const SsoApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get Identity Provider name for given email domain.
         * @summary Get Identity Provider Name
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityProviderNameV1IdpNameEmailGet: (email_1, ...args_1) => __awaiter(this, [email_1, ...args_1], void 0, function* (email, options = {}) {
            // verify required parameter 'email' is not null or undefined
            (0, common_1.assertParamExists)('getIdentityProviderNameV1IdpNameEmailGet', 'email', email);
            const localVarPath = `/v1/idp_name/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.SsoApiAxiosParamCreator = SsoApiAxiosParamCreator;
/**
 * SsoApi - functional programming interface
 * @export
 */
const SsoApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SsoApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get Identity Provider name for given email domain.
         * @summary Get Identity Provider Name
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityProviderNameV1IdpNameEmailGet(email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getIdentityProviderNameV1IdpNameEmailGet(email, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SsoApi.getIdentityProviderNameV1IdpNameEmailGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.SsoApiFp = SsoApiFp;
/**
 * SsoApi - factory interface
 * @export
 */
const SsoApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SsoApiFp)(configuration);
    return {
        /**
         * Get Identity Provider name for given email domain.
         * @summary Get Identity Provider Name
         * @param {SsoApiGetIdentityProviderNameV1IdpNameEmailGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityProviderNameV1IdpNameEmailGet(requestParameters, options) {
            return localVarFp.getIdentityProviderNameV1IdpNameEmailGet(requestParameters.email, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SsoApiFactory = SsoApiFactory;
/**
 * SsoApi - object-oriented interface
 * @export
 * @class SsoApi
 * @extends {BaseAPI}
 */
class SsoApi extends base_1.BaseAPI {
    /**
     * Get Identity Provider name for given email domain.
     * @summary Get Identity Provider Name
     * @param {SsoApiGetIdentityProviderNameV1IdpNameEmailGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsoApi
     */
    getIdentityProviderNameV1IdpNameEmailGet(requestParameters, options) {
        return (0, exports.SsoApiFp)(this.configuration).getIdentityProviderNameV1IdpNameEmailGet(requestParameters.email, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SsoApi = SsoApi;
/**
 * StripeApi - axios parameter creator
 * @export
 */
const StripeApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add subscription seats.
         * @summary Add Subscription Seats
         * @param {string} subscriptionId
         * @param {AddSubscriptionSeatIn} addSubscriptionSeatIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost: (subscriptionId_1, addSubscriptionSeatIn_1, ...args_1) => __awaiter(this, [subscriptionId_1, addSubscriptionSeatIn_1, ...args_1], void 0, function* (subscriptionId, addSubscriptionSeatIn, options = {}) {
            // verify required parameter 'subscriptionId' is not null or undefined
            (0, common_1.assertParamExists)('addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost', 'subscriptionId', subscriptionId);
            // verify required parameter 'addSubscriptionSeatIn' is not null or undefined
            (0, common_1.assertParamExists)('addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost', 'addSubscriptionSeatIn', addSubscriptionSeatIn);
            const localVarPath = `/v1/stripe/subscriptions/{subscription_id}/seats`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(addSubscriptionSeatIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get subscription seats.
         * @summary Get Subscription Seats
         * @param {string} subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet: (subscriptionId_1, ...args_1) => __awaiter(this, [subscriptionId_1, ...args_1], void 0, function* (subscriptionId, options = {}) {
            // verify required parameter 'subscriptionId' is not null or undefined
            (0, common_1.assertParamExists)('getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet', 'subscriptionId', subscriptionId);
            const localVarPath = `/v1/stripe/subscriptions/{subscription_id}/seats`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Start stripe checkout session.
         * @summary Manage Subscription
         * @param {string} [domainCallback]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageSubscriptionV1StripeSubscriptionManagePost: (domainCallback_1, ...args_1) => __awaiter(this, [domainCallback_1, ...args_1], void 0, function* (domainCallback, options = {}) {
            const localVarPath = `/v1/stripe/subscription-manage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (domainCallback !== undefined) {
                localVarQueryParameter['domain_callback'] = domainCallback;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove subscription seat.
         * @summary Remove Subscription Seat
         * @param {string} email
         * @param {string} subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete: (email_1, subscriptionId_1, ...args_1) => __awaiter(this, [email_1, subscriptionId_1, ...args_1], void 0, function* (email, subscriptionId, options = {}) {
            // verify required parameter 'email' is not null or undefined
            (0, common_1.assertParamExists)('removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete', 'email', email);
            // verify required parameter 'subscriptionId' is not null or undefined
            (0, common_1.assertParamExists)('removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete', 'subscriptionId', subscriptionId);
            const localVarPath = `/v1/stripe/subscriptions/{subscription_id}/seats/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)))
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.StripeApiAxiosParamCreator = StripeApiAxiosParamCreator;
/**
 * StripeApi - functional programming interface
 * @export
 */
const StripeApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.StripeApiAxiosParamCreator)(configuration);
    return {
        /**
         * Add subscription seats.
         * @summary Add Subscription Seats
         * @param {string} subscriptionId
         * @param {AddSubscriptionSeatIn} addSubscriptionSeatIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost(subscriptionId, addSubscriptionSeatIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost(subscriptionId, addSubscriptionSeatIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StripeApi.addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get subscription seats.
         * @summary Get Subscription Seats
         * @param {string} subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(subscriptionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(subscriptionId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StripeApi.getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Start stripe checkout session.
         * @summary Manage Subscription
         * @param {string} [domainCallback]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageSubscriptionV1StripeSubscriptionManagePost(domainCallback, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.manageSubscriptionV1StripeSubscriptionManagePost(domainCallback, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StripeApi.manageSubscriptionV1StripeSubscriptionManagePost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Remove subscription seat.
         * @summary Remove Subscription Seat
         * @param {string} email
         * @param {string} subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(email, subscriptionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(email, subscriptionId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StripeApi.removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.StripeApiFp = StripeApiFp;
/**
 * StripeApi - factory interface
 * @export
 */
const StripeApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.StripeApiFp)(configuration);
    return {
        /**
         * Add subscription seats.
         * @summary Add Subscription Seats
         * @param {StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost(requestParameters, options) {
            return localVarFp.addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost(requestParameters.subscriptionId, requestParameters.addSubscriptionSeatIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get subscription seats.
         * @summary Get Subscription Seats
         * @param {StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(requestParameters, options) {
            return localVarFp.getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(requestParameters.subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Start stripe checkout session.
         * @summary Manage Subscription
         * @param {StripeApiManageSubscriptionV1StripeSubscriptionManagePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageSubscriptionV1StripeSubscriptionManagePost(requestParameters = {}, options) {
            return localVarFp.manageSubscriptionV1StripeSubscriptionManagePost(requestParameters.domainCallback, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove subscription seat.
         * @summary Remove Subscription Seat
         * @param {StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(requestParameters, options) {
            return localVarFp.removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(requestParameters.email, requestParameters.subscriptionId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.StripeApiFactory = StripeApiFactory;
/**
 * StripeApi - object-oriented interface
 * @export
 * @class StripeApi
 * @extends {BaseAPI}
 */
class StripeApi extends base_1.BaseAPI {
    /**
     * Add subscription seats.
     * @summary Add Subscription Seats
     * @param {StripeApiAddSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost(requestParameters, options) {
        return (0, exports.StripeApiFp)(this.configuration).addSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsPost(requestParameters.subscriptionId, requestParameters.addSubscriptionSeatIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get subscription seats.
     * @summary Get Subscription Seats
     * @param {StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(requestParameters, options) {
        return (0, exports.StripeApiFp)(this.configuration).getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(requestParameters.subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Start stripe checkout session.
     * @summary Manage Subscription
     * @param {StripeApiManageSubscriptionV1StripeSubscriptionManagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    manageSubscriptionV1StripeSubscriptionManagePost(requestParameters = {}, options) {
        return (0, exports.StripeApiFp)(this.configuration).manageSubscriptionV1StripeSubscriptionManagePost(requestParameters.domainCallback, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove subscription seat.
     * @summary Remove Subscription Seat
     * @param {StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(requestParameters, options) {
        return (0, exports.StripeApiFp)(this.configuration).removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(requestParameters.email, requestParameters.subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.StripeApi = StripeApi;
/**
 * StudyMetadataApi - axios parameter creator
 * @export
 */
const StudyMetadataApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get study metadata from OpenAlex and DynamoDB via pmids.
         * @summary Get Study Metadata From Openalex For A Given List Of Pmids.
         * @param {StudyMetadataIn} studyMetadataIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost: (studyMetadataIn_1, ...args_1) => __awaiter(this, [studyMetadataIn_1, ...args_1], void 0, function* (studyMetadataIn, options = {}) {
            // verify required parameter 'studyMetadataIn' is not null or undefined
            (0, common_1.assertParamExists)('getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost', 'studyMetadataIn', studyMetadataIn);
            const localVarPath = `/v1/study-metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(studyMetadataIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get study metadata from SystemRDB via pmids.
         * @summary Get Study Metadata From Systemrdb For A Given List Of Pmids.
         * @param {StudyMetadataIn} studyMetadataIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPost: (studyMetadataIn_1, ...args_1) => __awaiter(this, [studyMetadataIn_1, ...args_1], void 0, function* (studyMetadataIn, options = {}) {
            // verify required parameter 'studyMetadataIn' is not null or undefined
            (0, common_1.assertParamExists)('getStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPost', 'studyMetadataIn', studyMetadataIn);
            const localVarPath = `/v1/study-metadata/new`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(studyMetadataIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.StudyMetadataApiAxiosParamCreator = StudyMetadataApiAxiosParamCreator;
/**
 * StudyMetadataApi - functional programming interface
 * @export
 */
const StudyMetadataApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.StudyMetadataApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get study metadata from OpenAlex and DynamoDB via pmids.
         * @summary Get Study Metadata From Openalex For A Given List Of Pmids.
         * @param {StudyMetadataIn} studyMetadataIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost(studyMetadataIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost(studyMetadataIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StudyMetadataApi.getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get study metadata from SystemRDB via pmids.
         * @summary Get Study Metadata From Systemrdb For A Given List Of Pmids.
         * @param {StudyMetadataIn} studyMetadataIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPost(studyMetadataIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPost(studyMetadataIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StudyMetadataApi.getStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.StudyMetadataApiFp = StudyMetadataApiFp;
/**
 * StudyMetadataApi - factory interface
 * @export
 */
const StudyMetadataApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.StudyMetadataApiFp)(configuration);
    return {
        /**
         * Get study metadata from OpenAlex and DynamoDB via pmids.
         * @summary Get Study Metadata From Openalex For A Given List Of Pmids.
         * @param {StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost(requestParameters, options) {
            return localVarFp.getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost(requestParameters.studyMetadataIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get study metadata from SystemRDB via pmids.
         * @summary Get Study Metadata From Systemrdb For A Given List Of Pmids.
         * @param {StudyMetadataApiGetStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPost(requestParameters, options) {
            return localVarFp.getStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPost(requestParameters.studyMetadataIn, options).then((request) => request(axios, basePath));
        },
    };
};
exports.StudyMetadataApiFactory = StudyMetadataApiFactory;
/**
 * StudyMetadataApi - object-oriented interface
 * @export
 * @class StudyMetadataApi
 * @extends {BaseAPI}
 */
class StudyMetadataApi extends base_1.BaseAPI {
    /**
     * Get study metadata from OpenAlex and DynamoDB via pmids.
     * @summary Get Study Metadata From Openalex For A Given List Of Pmids.
     * @param {StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyMetadataApi
     */
    getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost(requestParameters, options) {
        return (0, exports.StudyMetadataApiFp)(this.configuration).getStudyMetadataFromOpenAlexForAGivenListOfPmidsV1StudyMetadataPost(requestParameters.studyMetadataIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get study metadata from SystemRDB via pmids.
     * @summary Get Study Metadata From Systemrdb For A Given List Of Pmids.
     * @param {StudyMetadataApiGetStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyMetadataApi
     */
    getStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPost(requestParameters, options) {
        return (0, exports.StudyMetadataApiFp)(this.configuration).getStudyMetadataFromSystemRDBForAGivenListOfPmidsV1StudyMetadataNewPost(requestParameters.studyMetadataIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.StudyMetadataApi = StudyMetadataApi;
/**
 * StudyStatsApi - axios parameter creator
 * @export
 */
const StudyStatsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get Study Stats
         * @param {string} [relationshipId] Relationship ID
         * @param {AppSchemaConceptsRelationshipTypes} [relationshipType] Relationship type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyStats: (relationshipId_1, relationshipType_1, ...args_1) => __awaiter(this, [relationshipId_1, relationshipType_1, ...args_1], void 0, function* (relationshipId, relationshipType, options = {}) {
            const localVarPath = `/v1/study_stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (relationshipId !== undefined) {
                localVarQueryParameter['relationship_id'] = relationshipId;
            }
            if (relationshipType !== undefined) {
                localVarQueryParameter['relationship_type'] = relationshipType;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.StudyStatsApiAxiosParamCreator = StudyStatsApiAxiosParamCreator;
/**
 * StudyStatsApi - functional programming interface
 * @export
 */
const StudyStatsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.StudyStatsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get Study Stats
         * @param {string} [relationshipId] Relationship ID
         * @param {AppSchemaConceptsRelationshipTypes} [relationshipType] Relationship type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyStats(relationshipId, relationshipType, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStudyStats(relationshipId, relationshipType, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StudyStatsApi.getStudyStats']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.StudyStatsApiFp = StudyStatsApiFp;
/**
 * StudyStatsApi - factory interface
 * @export
 */
const StudyStatsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.StudyStatsApiFp)(configuration);
    return {
        /**
         *
         * @summary Get Study Stats
         * @param {StudyStatsApiGetStudyStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyStats(requestParameters = {}, options) {
            return localVarFp.getStudyStats(requestParameters.relationshipId, requestParameters.relationshipType, options).then((request) => request(axios, basePath));
        },
    };
};
exports.StudyStatsApiFactory = StudyStatsApiFactory;
/**
 * StudyStatsApi - object-oriented interface
 * @export
 * @class StudyStatsApi
 * @extends {BaseAPI}
 */
class StudyStatsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get Study Stats
     * @param {StudyStatsApiGetStudyStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyStatsApi
     */
    getStudyStats(requestParameters = {}, options) {
        return (0, exports.StudyStatsApiFp)(this.configuration).getStudyStats(requestParameters.relationshipId, requestParameters.relationshipType, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.StudyStatsApi = StudyStatsApi;
/**
 * SystemGraphApi - axios parameter creator
 * @export
 */
const SystemGraphApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get downstream paths.
         * @summary Get Downstream Endpoint
         * @param {string} node System ID of topic node
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {number} [nHops] Number of hops
         * @param {Array<string>} [additionalNodes] Additional nodes
         * @param {string} [relationshipTypes] Comma separated list of relationship types
         * @param {boolean} [includeNonSignificant] Significant relationships only
         * @param {string} [semanticTypes] Comma separated list of semantic_types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownstreamEndpointV1SystemGraphPathsDownstreamGet: (node_1, page_1, pageSize_1, nHops_1, additionalNodes_1, relationshipTypes_1, includeNonSignificant_1, semanticTypes_1, ...args_1) => __awaiter(this, [node_1, page_1, pageSize_1, nHops_1, additionalNodes_1, relationshipTypes_1, includeNonSignificant_1, semanticTypes_1, ...args_1], void 0, function* (node, page, pageSize, nHops, additionalNodes, relationshipTypes, includeNonSignificant, semanticTypes, options = {}) {
            // verify required parameter 'node' is not null or undefined
            (0, common_1.assertParamExists)('getDownstreamEndpointV1SystemGraphPathsDownstreamGet', 'node', node);
            const localVarPath = `/v1/system_graph/paths/downstream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (node !== undefined) {
                localVarQueryParameter['node'] = node;
            }
            if (nHops !== undefined) {
                localVarQueryParameter['n_hops'] = nHops;
            }
            if (additionalNodes) {
                localVarQueryParameter['additional_nodes'] = additionalNodes;
            }
            if (relationshipTypes !== undefined) {
                localVarQueryParameter['relationship_types'] = relationshipTypes;
            }
            if (includeNonSignificant !== undefined) {
                localVarQueryParameter['include_non_significant'] = includeNonSignificant;
            }
            if (semanticTypes !== undefined) {
                localVarQueryParameter['semantic_types'] = semanticTypes;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get relationship path.
         * @summary Get Mediators Endpoint
         * @param {string} source System ID of source
         * @param {string} target System ID of target
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {Array<string>} [additionalSources] Additional sources
         * @param {Array<string>} [additionalTargets] Additional targets
         * @param {string} [relationshipTypes] Comma separated list of relationship types
         * @param {boolean} [includeNonSignificant] Significant relationships only
         * @param {string} [semanticTypes] Comma separated list of semantic_types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediatorsEndpointV1SystemGraphPathsMediatorsGet: (source_1, target_1, page_1, pageSize_1, additionalSources_1, additionalTargets_1, relationshipTypes_1, includeNonSignificant_1, semanticTypes_1, ...args_1) => __awaiter(this, [source_1, target_1, page_1, pageSize_1, additionalSources_1, additionalTargets_1, relationshipTypes_1, includeNonSignificant_1, semanticTypes_1, ...args_1], void 0, function* (source, target, page, pageSize, additionalSources, additionalTargets, relationshipTypes, includeNonSignificant, semanticTypes, options = {}) {
            // verify required parameter 'source' is not null or undefined
            (0, common_1.assertParamExists)('getMediatorsEndpointV1SystemGraphPathsMediatorsGet', 'source', source);
            // verify required parameter 'target' is not null or undefined
            (0, common_1.assertParamExists)('getMediatorsEndpointV1SystemGraphPathsMediatorsGet', 'target', target);
            const localVarPath = `/v1/system_graph/paths/mediators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }
            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }
            if (additionalSources) {
                localVarQueryParameter['additional_sources'] = additionalSources;
            }
            if (additionalTargets) {
                localVarQueryParameter['additional_targets'] = additionalTargets;
            }
            if (relationshipTypes !== undefined) {
                localVarQueryParameter['relationship_types'] = relationshipTypes;
            }
            if (includeNonSignificant !== undefined) {
                localVarQueryParameter['include_non_significant'] = includeNonSignificant;
            }
            if (semanticTypes !== undefined) {
                localVarQueryParameter['semantic_types'] = semanticTypes;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get system graph from the database.
         * @summary Get One Degree From Topic
         * @param {string} topicId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet: (topicId_1, ...args_1) => __awaiter(this, [topicId_1, ...args_1], void 0, function* (topicId, options = {}) {
            // verify required parameter 'topicId' is not null or undefined
            (0, common_1.assertParamExists)('getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet', 'topicId', topicId);
            const localVarPath = `/v1/system_graph/topic/{topic_id}/one_degree`
                .replace(`{${"topic_id"}}`, encodeURIComponent(String(topicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get relationship path.
         * @summary Get Relationship Endpoint
         * @param {string} source System ID of source
         * @param {string} target System ID of target
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {Array<string>} [additionalSources] Additional sources
         * @param {Array<string>} [additionalTargets] Additional targets
         * @param {string} [relationshipTypes] Comma separated list of relationship types
         * @param {boolean} [includeNonSignificant] Significant relationships only
         * @param {string} [semanticTypes] Comma separated list of semantic_types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipEndpointV1SystemGraphPathsRelationshipGet: (source_1, target_1, page_1, pageSize_1, additionalSources_1, additionalTargets_1, relationshipTypes_1, includeNonSignificant_1, semanticTypes_1, ...args_1) => __awaiter(this, [source_1, target_1, page_1, pageSize_1, additionalSources_1, additionalTargets_1, relationshipTypes_1, includeNonSignificant_1, semanticTypes_1, ...args_1], void 0, function* (source, target, page, pageSize, additionalSources, additionalTargets, relationshipTypes, includeNonSignificant, semanticTypes, options = {}) {
            // verify required parameter 'source' is not null or undefined
            (0, common_1.assertParamExists)('getRelationshipEndpointV1SystemGraphPathsRelationshipGet', 'source', source);
            // verify required parameter 'target' is not null or undefined
            (0, common_1.assertParamExists)('getRelationshipEndpointV1SystemGraphPathsRelationshipGet', 'target', target);
            const localVarPath = `/v1/system_graph/paths/relationship`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }
            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }
            if (additionalSources) {
                localVarQueryParameter['additional_sources'] = additionalSources;
            }
            if (additionalTargets) {
                localVarQueryParameter['additional_targets'] = additionalTargets;
            }
            if (relationshipTypes !== undefined) {
                localVarQueryParameter['relationship_types'] = relationshipTypes;
            }
            if (includeNonSignificant !== undefined) {
                localVarQueryParameter['include_non_significant'] = includeNonSignificant;
            }
            if (semanticTypes !== undefined) {
                localVarQueryParameter['semantic_types'] = semanticTypes;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph Endpoint
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphEndpointV1SystemGraphSemanticGraphGet: (topic1_1, topic2_1, ids1_1, ids2_1, ...args_1) => __awaiter(this, [topic1_1, topic2_1, ids1_1, ids2_1, ...args_1], void 0, function* (topic1, topic2, ids1, ids2, options = {}) {
            const localVarPath = `/v1/system_graph/semantic_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (topic1 !== undefined) {
                localVarQueryParameter['topic_1'] = topic1;
            }
            if (topic2 !== undefined) {
                localVarQueryParameter['topic_2'] = topic2;
            }
            if (ids1) {
                localVarQueryParameter['ids_1'] = ids1;
            }
            if (ids2) {
                localVarQueryParameter['ids_2'] = ids2;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch single topic semantic graph.
         * @summary Get Semantic Topic Graph Endpoint
         * @param {string} [topicName] Topic name
         * @param {Array<string>} [topicIds] Topic ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet: (topicName_1, topicIds_1, ...args_1) => __awaiter(this, [topicName_1, topicIds_1, ...args_1], void 0, function* (topicName, topicIds, options = {}) {
            const localVarPath = `/v1/system_graph/semantic_topic_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (topicName !== undefined) {
                localVarQueryParameter['topic_name'] = topicName;
            }
            if (topicIds) {
                localVarQueryParameter['topic_ids'] = topicIds;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get relationship path.
         * @summary Get Shared Sources Endpoint
         * @param {string} source System ID of source
         * @param {string} target System ID of target
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {Array<string>} [additionalSources] Additional sources
         * @param {Array<string>} [additionalTargets] Additional targets
         * @param {string} [relationshipTypes] Comma separated list of relationship types
         * @param {boolean} [includeNonSignificant] Significant relationships only
         * @param {string} [semanticTypes] Comma separated list of semantic_types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet: (source_1, target_1, page_1, pageSize_1, additionalSources_1, additionalTargets_1, relationshipTypes_1, includeNonSignificant_1, semanticTypes_1, ...args_1) => __awaiter(this, [source_1, target_1, page_1, pageSize_1, additionalSources_1, additionalTargets_1, relationshipTypes_1, includeNonSignificant_1, semanticTypes_1, ...args_1], void 0, function* (source, target, page, pageSize, additionalSources, additionalTargets, relationshipTypes, includeNonSignificant, semanticTypes, options = {}) {
            // verify required parameter 'source' is not null or undefined
            (0, common_1.assertParamExists)('getSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet', 'source', source);
            // verify required parameter 'target' is not null or undefined
            (0, common_1.assertParamExists)('getSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet', 'target', target);
            const localVarPath = `/v1/system_graph/paths/shared-sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }
            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }
            if (additionalSources) {
                localVarQueryParameter['additional_sources'] = additionalSources;
            }
            if (additionalTargets) {
                localVarQueryParameter['additional_targets'] = additionalTargets;
            }
            if (relationshipTypes !== undefined) {
                localVarQueryParameter['relationship_types'] = relationshipTypes;
            }
            if (includeNonSignificant !== undefined) {
                localVarQueryParameter['include_non_significant'] = includeNonSignificant;
            }
            if (semanticTypes !== undefined) {
                localVarQueryParameter['semantic_types'] = semanticTypes;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get relationship path.
         * @summary Get Shared Targets Endpoint
         * @param {string} source System ID of source
         * @param {string} target System ID of target
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {Array<string>} [additionalSources] Additional sources
         * @param {Array<string>} [additionalTargets] Additional targets
         * @param {string} [relationshipTypes] Comma separated list of relationship types
         * @param {boolean} [includeNonSignificant] Significant relationships only
         * @param {string} [semanticTypes] Comma separated list of semantic_types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet: (source_1, target_1, page_1, pageSize_1, additionalSources_1, additionalTargets_1, relationshipTypes_1, includeNonSignificant_1, semanticTypes_1, ...args_1) => __awaiter(this, [source_1, target_1, page_1, pageSize_1, additionalSources_1, additionalTargets_1, relationshipTypes_1, includeNonSignificant_1, semanticTypes_1, ...args_1], void 0, function* (source, target, page, pageSize, additionalSources, additionalTargets, relationshipTypes, includeNonSignificant, semanticTypes, options = {}) {
            // verify required parameter 'source' is not null or undefined
            (0, common_1.assertParamExists)('getSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet', 'source', source);
            // verify required parameter 'target' is not null or undefined
            (0, common_1.assertParamExists)('getSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet', 'target', target);
            const localVarPath = `/v1/system_graph/paths/shared-targets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }
            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }
            if (additionalSources) {
                localVarQueryParameter['additional_sources'] = additionalSources;
            }
            if (additionalTargets) {
                localVarQueryParameter['additional_targets'] = additionalTargets;
            }
            if (relationshipTypes !== undefined) {
                localVarQueryParameter['relationship_types'] = relationshipTypes;
            }
            if (includeNonSignificant !== undefined) {
                localVarQueryParameter['include_non_significant'] = includeNonSignificant;
            }
            if (semanticTypes !== undefined) {
                localVarQueryParameter['semantic_types'] = semanticTypes;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get system graph from the database.
         * @summary Get System Graph Endpoint
         * @param {number} [numRelationships] Number of relationships to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemGraphEndpointV1SystemGraphSystemGraphGet: (numRelationships_1, ...args_1) => __awaiter(this, [numRelationships_1, ...args_1], void 0, function* (numRelationships, options = {}) {
            const localVarPath = `/v1/system_graph/system_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (numRelationships !== undefined) {
                localVarQueryParameter['num_relationships'] = numRelationships;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch semantic graph.
         * @summary Get Topological Categories Endpoint
         * @param {string} topic1 Topic 1
         * @param {Array<string>} ids1 Topic 1 ids
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [pageSize] Page size
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet: (topic1_1, ids1_1, topic2_1, ids2_1, pageSize_1, offset_1, ...args_1) => __awaiter(this, [topic1_1, ids1_1, topic2_1, ids2_1, pageSize_1, offset_1, ...args_1], void 0, function* (topic1, ids1, topic2, ids2, pageSize, offset, options = {}) {
            // verify required parameter 'topic1' is not null or undefined
            (0, common_1.assertParamExists)('getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet', 'topic1', topic1);
            // verify required parameter 'ids1' is not null or undefined
            (0, common_1.assertParamExists)('getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet', 'ids1', ids1);
            const localVarPath = `/v1/system_graph/topological_categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (topic1 !== undefined) {
                localVarQueryParameter['topic_1'] = topic1;
            }
            if (topic2 !== undefined) {
                localVarQueryParameter['topic_2'] = topic2;
            }
            if (ids1) {
                localVarQueryParameter['ids_1'] = ids1;
            }
            if (ids2) {
                localVarQueryParameter['ids_2'] = ids2;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get relationship path.
         * @summary Get Two Hop Mediators Endpoint
         * @param {string} source System ID of source
         * @param {string} target System ID of target
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {Array<string>} [additionalSources] Additional sources
         * @param {Array<string>} [additionalTargets] Additional targets
         * @param {string} [relationshipTypes] Comma separated list of relationship types
         * @param {boolean} [includeNonSignificant] Significant relationships only
         * @param {string} [semanticTypes] Comma separated list of semantic_types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet: (source_1, target_1, page_1, pageSize_1, additionalSources_1, additionalTargets_1, relationshipTypes_1, includeNonSignificant_1, semanticTypes_1, ...args_1) => __awaiter(this, [source_1, target_1, page_1, pageSize_1, additionalSources_1, additionalTargets_1, relationshipTypes_1, includeNonSignificant_1, semanticTypes_1, ...args_1], void 0, function* (source, target, page, pageSize, additionalSources, additionalTargets, relationshipTypes, includeNonSignificant, semanticTypes, options = {}) {
            // verify required parameter 'source' is not null or undefined
            (0, common_1.assertParamExists)('getTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet', 'source', source);
            // verify required parameter 'target' is not null or undefined
            (0, common_1.assertParamExists)('getTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet', 'target', target);
            const localVarPath = `/v1/system_graph/paths/two-hop-mediators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }
            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }
            if (additionalSources) {
                localVarQueryParameter['additional_sources'] = additionalSources;
            }
            if (additionalTargets) {
                localVarQueryParameter['additional_targets'] = additionalTargets;
            }
            if (relationshipTypes !== undefined) {
                localVarQueryParameter['relationship_types'] = relationshipTypes;
            }
            if (includeNonSignificant !== undefined) {
                localVarQueryParameter['include_non_significant'] = includeNonSignificant;
            }
            if (semanticTypes !== undefined) {
                localVarQueryParameter['semantic_types'] = semanticTypes;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get upstream paths.
         * @summary Get Upstream Endpoint
         * @param {string} node System ID of topic node
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {number} [nHops] Number of hops
         * @param {Array<string>} [additionalNodes] Additional nodes
         * @param {string} [relationshipTypes] Comma separated list of relationship types
         * @param {boolean} [includeNonSignificant] Significant relationships only
         * @param {string} [semanticTypes] Comma separated list of semantic_types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUpstreamEndpointV1SystemGraphPathsUpstreamGet: (node_1, page_1, pageSize_1, nHops_1, additionalNodes_1, relationshipTypes_1, includeNonSignificant_1, semanticTypes_1, ...args_1) => __awaiter(this, [node_1, page_1, pageSize_1, nHops_1, additionalNodes_1, relationshipTypes_1, includeNonSignificant_1, semanticTypes_1, ...args_1], void 0, function* (node, page, pageSize, nHops, additionalNodes, relationshipTypes, includeNonSignificant, semanticTypes, options = {}) {
            // verify required parameter 'node' is not null or undefined
            (0, common_1.assertParamExists)('getUpstreamEndpointV1SystemGraphPathsUpstreamGet', 'node', node);
            const localVarPath = `/v1/system_graph/paths/upstream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (node !== undefined) {
                localVarQueryParameter['node'] = node;
            }
            if (nHops !== undefined) {
                localVarQueryParameter['n_hops'] = nHops;
            }
            if (additionalNodes) {
                localVarQueryParameter['additional_nodes'] = additionalNodes;
            }
            if (relationshipTypes !== undefined) {
                localVarQueryParameter['relationship_types'] = relationshipTypes;
            }
            if (includeNonSignificant !== undefined) {
                localVarQueryParameter['include_non_significant'] = includeNonSignificant;
            }
            if (semanticTypes !== undefined) {
                localVarQueryParameter['semantic_types'] = semanticTypes;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Search topics.
         * @summary Search Topics Endpoint
         * @param {string} q Search query
         * @param {Array<string>} [subgraphTopics] Topic ids in subgraph
         * @param {number} [subgraphDepth] Depth of subgraph
         * @param {SearchType} [searchType] Search type (semantic or keyword)
         * @param {number} [autocut] Autocut for semantic search
         * @param {number} [limit] Limit for semantic search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTopicsEndpointV1SystemGraphSearchGet: (q_1, subgraphTopics_1, subgraphDepth_1, searchType_1, autocut_1, limit_1, ...args_1) => __awaiter(this, [q_1, subgraphTopics_1, subgraphDepth_1, searchType_1, autocut_1, limit_1, ...args_1], void 0, function* (q, subgraphTopics, subgraphDepth, searchType, autocut, limit, options = {}) {
            // verify required parameter 'q' is not null or undefined
            (0, common_1.assertParamExists)('searchTopicsEndpointV1SystemGraphSearchGet', 'q', q);
            const localVarPath = `/v1/system_graph/search/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (subgraphTopics) {
                localVarQueryParameter['subgraph_topics'] = subgraphTopics;
            }
            if (subgraphDepth !== undefined) {
                localVarQueryParameter['subgraph_depth'] = subgraphDepth;
            }
            if (searchType !== undefined) {
                localVarQueryParameter['search_type'] = searchType;
            }
            if (autocut !== undefined) {
                localVarQueryParameter['autocut'] = autocut;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.SystemGraphApiAxiosParamCreator = SystemGraphApiAxiosParamCreator;
/**
 * SystemGraphApi - functional programming interface
 * @export
 */
const SystemGraphApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SystemGraphApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get downstream paths.
         * @summary Get Downstream Endpoint
         * @param {string} node System ID of topic node
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {number} [nHops] Number of hops
         * @param {Array<string>} [additionalNodes] Additional nodes
         * @param {string} [relationshipTypes] Comma separated list of relationship types
         * @param {boolean} [includeNonSignificant] Significant relationships only
         * @param {string} [semanticTypes] Comma separated list of semantic_types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownstreamEndpointV1SystemGraphPathsDownstreamGet(node, page, pageSize, nHops, additionalNodes, relationshipTypes, includeNonSignificant, semanticTypes, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDownstreamEndpointV1SystemGraphPathsDownstreamGet(node, page, pageSize, nHops, additionalNodes, relationshipTypes, includeNonSignificant, semanticTypes, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemGraphApi.getDownstreamEndpointV1SystemGraphPathsDownstreamGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get relationship path.
         * @summary Get Mediators Endpoint
         * @param {string} source System ID of source
         * @param {string} target System ID of target
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {Array<string>} [additionalSources] Additional sources
         * @param {Array<string>} [additionalTargets] Additional targets
         * @param {string} [relationshipTypes] Comma separated list of relationship types
         * @param {boolean} [includeNonSignificant] Significant relationships only
         * @param {string} [semanticTypes] Comma separated list of semantic_types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediatorsEndpointV1SystemGraphPathsMediatorsGet(source, target, page, pageSize, additionalSources, additionalTargets, relationshipTypes, includeNonSignificant, semanticTypes, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMediatorsEndpointV1SystemGraphPathsMediatorsGet(source, target, page, pageSize, additionalSources, additionalTargets, relationshipTypes, includeNonSignificant, semanticTypes, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemGraphApi.getMediatorsEndpointV1SystemGraphPathsMediatorsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get system graph from the database.
         * @summary Get One Degree From Topic
         * @param {string} topicId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet(topicId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet(topicId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemGraphApi.getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get relationship path.
         * @summary Get Relationship Endpoint
         * @param {string} source System ID of source
         * @param {string} target System ID of target
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {Array<string>} [additionalSources] Additional sources
         * @param {Array<string>} [additionalTargets] Additional targets
         * @param {string} [relationshipTypes] Comma separated list of relationship types
         * @param {boolean} [includeNonSignificant] Significant relationships only
         * @param {string} [semanticTypes] Comma separated list of semantic_types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipEndpointV1SystemGraphPathsRelationshipGet(source, target, page, pageSize, additionalSources, additionalTargets, relationshipTypes, includeNonSignificant, semanticTypes, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipEndpointV1SystemGraphPathsRelationshipGet(source, target, page, pageSize, additionalSources, additionalTargets, relationshipTypes, includeNonSignificant, semanticTypes, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemGraphApi.getRelationshipEndpointV1SystemGraphPathsRelationshipGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph Endpoint
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphEndpointV1SystemGraphSemanticGraphGet(topic1, topic2, ids1, ids2, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSemanticGraphEndpointV1SystemGraphSemanticGraphGet(topic1, topic2, ids1, ids2, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemGraphApi.getSemanticGraphEndpointV1SystemGraphSemanticGraphGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Fetch single topic semantic graph.
         * @summary Get Semantic Topic Graph Endpoint
         * @param {string} [topicName] Topic name
         * @param {Array<string>} [topicIds] Topic ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet(topicName, topicIds, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet(topicName, topicIds, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemGraphApi.getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get relationship path.
         * @summary Get Shared Sources Endpoint
         * @param {string} source System ID of source
         * @param {string} target System ID of target
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {Array<string>} [additionalSources] Additional sources
         * @param {Array<string>} [additionalTargets] Additional targets
         * @param {string} [relationshipTypes] Comma separated list of relationship types
         * @param {boolean} [includeNonSignificant] Significant relationships only
         * @param {string} [semanticTypes] Comma separated list of semantic_types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet(source, target, page, pageSize, additionalSources, additionalTargets, relationshipTypes, includeNonSignificant, semanticTypes, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet(source, target, page, pageSize, additionalSources, additionalTargets, relationshipTypes, includeNonSignificant, semanticTypes, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemGraphApi.getSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get relationship path.
         * @summary Get Shared Targets Endpoint
         * @param {string} source System ID of source
         * @param {string} target System ID of target
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {Array<string>} [additionalSources] Additional sources
         * @param {Array<string>} [additionalTargets] Additional targets
         * @param {string} [relationshipTypes] Comma separated list of relationship types
         * @param {boolean} [includeNonSignificant] Significant relationships only
         * @param {string} [semanticTypes] Comma separated list of semantic_types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet(source, target, page, pageSize, additionalSources, additionalTargets, relationshipTypes, includeNonSignificant, semanticTypes, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet(source, target, page, pageSize, additionalSources, additionalTargets, relationshipTypes, includeNonSignificant, semanticTypes, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemGraphApi.getSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get system graph from the database.
         * @summary Get System Graph Endpoint
         * @param {number} [numRelationships] Number of relationships to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemGraphEndpointV1SystemGraphSystemGraphGet(numRelationships, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSystemGraphEndpointV1SystemGraphSystemGraphGet(numRelationships, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemGraphApi.getSystemGraphEndpointV1SystemGraphSystemGraphGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Fetch semantic graph.
         * @summary Get Topological Categories Endpoint
         * @param {string} topic1 Topic 1
         * @param {Array<string>} ids1 Topic 1 ids
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [pageSize] Page size
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet(topic1, ids1, topic2, ids2, pageSize, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet(topic1, ids1, topic2, ids2, pageSize, offset, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemGraphApi.getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get relationship path.
         * @summary Get Two Hop Mediators Endpoint
         * @param {string} source System ID of source
         * @param {string} target System ID of target
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {Array<string>} [additionalSources] Additional sources
         * @param {Array<string>} [additionalTargets] Additional targets
         * @param {string} [relationshipTypes] Comma separated list of relationship types
         * @param {boolean} [includeNonSignificant] Significant relationships only
         * @param {string} [semanticTypes] Comma separated list of semantic_types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet(source, target, page, pageSize, additionalSources, additionalTargets, relationshipTypes, includeNonSignificant, semanticTypes, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet(source, target, page, pageSize, additionalSources, additionalTargets, relationshipTypes, includeNonSignificant, semanticTypes, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemGraphApi.getTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get upstream paths.
         * @summary Get Upstream Endpoint
         * @param {string} node System ID of topic node
         * @param {number} [page] Page number
         * @param {number} [pageSize] Page size
         * @param {number} [nHops] Number of hops
         * @param {Array<string>} [additionalNodes] Additional nodes
         * @param {string} [relationshipTypes] Comma separated list of relationship types
         * @param {boolean} [includeNonSignificant] Significant relationships only
         * @param {string} [semanticTypes] Comma separated list of semantic_types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUpstreamEndpointV1SystemGraphPathsUpstreamGet(node, page, pageSize, nHops, additionalNodes, relationshipTypes, includeNonSignificant, semanticTypes, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUpstreamEndpointV1SystemGraphPathsUpstreamGet(node, page, pageSize, nHops, additionalNodes, relationshipTypes, includeNonSignificant, semanticTypes, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemGraphApi.getUpstreamEndpointV1SystemGraphPathsUpstreamGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Search topics.
         * @summary Search Topics Endpoint
         * @param {string} q Search query
         * @param {Array<string>} [subgraphTopics] Topic ids in subgraph
         * @param {number} [subgraphDepth] Depth of subgraph
         * @param {SearchType} [searchType] Search type (semantic or keyword)
         * @param {number} [autocut] Autocut for semantic search
         * @param {number} [limit] Limit for semantic search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTopicsEndpointV1SystemGraphSearchGet(q, subgraphTopics, subgraphDepth, searchType, autocut, limit, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.searchTopicsEndpointV1SystemGraphSearchGet(q, subgraphTopics, subgraphDepth, searchType, autocut, limit, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemGraphApi.searchTopicsEndpointV1SystemGraphSearchGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.SystemGraphApiFp = SystemGraphApiFp;
/**
 * SystemGraphApi - factory interface
 * @export
 */
const SystemGraphApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SystemGraphApiFp)(configuration);
    return {
        /**
         * Get downstream paths.
         * @summary Get Downstream Endpoint
         * @param {SystemGraphApiGetDownstreamEndpointV1SystemGraphPathsDownstreamGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownstreamEndpointV1SystemGraphPathsDownstreamGet(requestParameters, options) {
            return localVarFp.getDownstreamEndpointV1SystemGraphPathsDownstreamGet(requestParameters.node, requestParameters.page, requestParameters.pageSize, requestParameters.nHops, requestParameters.additionalNodes, requestParameters.relationshipTypes, requestParameters.includeNonSignificant, requestParameters.semanticTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Get relationship path.
         * @summary Get Mediators Endpoint
         * @param {SystemGraphApiGetMediatorsEndpointV1SystemGraphPathsMediatorsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediatorsEndpointV1SystemGraphPathsMediatorsGet(requestParameters, options) {
            return localVarFp.getMediatorsEndpointV1SystemGraphPathsMediatorsGet(requestParameters.source, requestParameters.target, requestParameters.page, requestParameters.pageSize, requestParameters.additionalSources, requestParameters.additionalTargets, requestParameters.relationshipTypes, requestParameters.includeNonSignificant, requestParameters.semanticTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system graph from the database.
         * @summary Get One Degree From Topic
         * @param {SystemGraphApiGetOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet(requestParameters, options) {
            return localVarFp.getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet(requestParameters.topicId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get relationship path.
         * @summary Get Relationship Endpoint
         * @param {SystemGraphApiGetRelationshipEndpointV1SystemGraphPathsRelationshipGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipEndpointV1SystemGraphPathsRelationshipGet(requestParameters, options) {
            return localVarFp.getRelationshipEndpointV1SystemGraphPathsRelationshipGet(requestParameters.source, requestParameters.target, requestParameters.page, requestParameters.pageSize, requestParameters.additionalSources, requestParameters.additionalTargets, requestParameters.relationshipTypes, requestParameters.includeNonSignificant, requestParameters.semanticTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph Endpoint
         * @param {SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphEndpointV1SystemGraphSemanticGraphGet(requestParameters = {}, options) {
            return localVarFp.getSemanticGraphEndpointV1SystemGraphSemanticGraphGet(requestParameters.topic1, requestParameters.topic2, requestParameters.ids1, requestParameters.ids2, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch single topic semantic graph.
         * @summary Get Semantic Topic Graph Endpoint
         * @param {SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet(requestParameters = {}, options) {
            return localVarFp.getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet(requestParameters.topicName, requestParameters.topicIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Get relationship path.
         * @summary Get Shared Sources Endpoint
         * @param {SystemGraphApiGetSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet(requestParameters, options) {
            return localVarFp.getSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet(requestParameters.source, requestParameters.target, requestParameters.page, requestParameters.pageSize, requestParameters.additionalSources, requestParameters.additionalTargets, requestParameters.relationshipTypes, requestParameters.includeNonSignificant, requestParameters.semanticTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Get relationship path.
         * @summary Get Shared Targets Endpoint
         * @param {SystemGraphApiGetSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet(requestParameters, options) {
            return localVarFp.getSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet(requestParameters.source, requestParameters.target, requestParameters.page, requestParameters.pageSize, requestParameters.additionalSources, requestParameters.additionalTargets, requestParameters.relationshipTypes, requestParameters.includeNonSignificant, requestParameters.semanticTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system graph from the database.
         * @summary Get System Graph Endpoint
         * @param {SystemGraphApiGetSystemGraphEndpointV1SystemGraphSystemGraphGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemGraphEndpointV1SystemGraphSystemGraphGet(requestParameters = {}, options) {
            return localVarFp.getSystemGraphEndpointV1SystemGraphSystemGraphGet(requestParameters.numRelationships, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch semantic graph.
         * @summary Get Topological Categories Endpoint
         * @param {SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet(requestParameters, options) {
            return localVarFp.getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet(requestParameters.topic1, requestParameters.ids1, requestParameters.topic2, requestParameters.ids2, requestParameters.pageSize, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get relationship path.
         * @summary Get Two Hop Mediators Endpoint
         * @param {SystemGraphApiGetTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet(requestParameters, options) {
            return localVarFp.getTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet(requestParameters.source, requestParameters.target, requestParameters.page, requestParameters.pageSize, requestParameters.additionalSources, requestParameters.additionalTargets, requestParameters.relationshipTypes, requestParameters.includeNonSignificant, requestParameters.semanticTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Get upstream paths.
         * @summary Get Upstream Endpoint
         * @param {SystemGraphApiGetUpstreamEndpointV1SystemGraphPathsUpstreamGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUpstreamEndpointV1SystemGraphPathsUpstreamGet(requestParameters, options) {
            return localVarFp.getUpstreamEndpointV1SystemGraphPathsUpstreamGet(requestParameters.node, requestParameters.page, requestParameters.pageSize, requestParameters.nHops, requestParameters.additionalNodes, requestParameters.relationshipTypes, requestParameters.includeNonSignificant, requestParameters.semanticTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Search topics.
         * @summary Search Topics Endpoint
         * @param {SystemGraphApiSearchTopicsEndpointV1SystemGraphSearchGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTopicsEndpointV1SystemGraphSearchGet(requestParameters, options) {
            return localVarFp.searchTopicsEndpointV1SystemGraphSearchGet(requestParameters.q, requestParameters.subgraphTopics, requestParameters.subgraphDepth, requestParameters.searchType, requestParameters.autocut, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SystemGraphApiFactory = SystemGraphApiFactory;
/**
 * SystemGraphApi - object-oriented interface
 * @export
 * @class SystemGraphApi
 * @extends {BaseAPI}
 */
class SystemGraphApi extends base_1.BaseAPI {
    /**
     * Get downstream paths.
     * @summary Get Downstream Endpoint
     * @param {SystemGraphApiGetDownstreamEndpointV1SystemGraphPathsDownstreamGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getDownstreamEndpointV1SystemGraphPathsDownstreamGet(requestParameters, options) {
        return (0, exports.SystemGraphApiFp)(this.configuration).getDownstreamEndpointV1SystemGraphPathsDownstreamGet(requestParameters.node, requestParameters.page, requestParameters.pageSize, requestParameters.nHops, requestParameters.additionalNodes, requestParameters.relationshipTypes, requestParameters.includeNonSignificant, requestParameters.semanticTypes, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get relationship path.
     * @summary Get Mediators Endpoint
     * @param {SystemGraphApiGetMediatorsEndpointV1SystemGraphPathsMediatorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getMediatorsEndpointV1SystemGraphPathsMediatorsGet(requestParameters, options) {
        return (0, exports.SystemGraphApiFp)(this.configuration).getMediatorsEndpointV1SystemGraphPathsMediatorsGet(requestParameters.source, requestParameters.target, requestParameters.page, requestParameters.pageSize, requestParameters.additionalSources, requestParameters.additionalTargets, requestParameters.relationshipTypes, requestParameters.includeNonSignificant, requestParameters.semanticTypes, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get system graph from the database.
     * @summary Get One Degree From Topic
     * @param {SystemGraphApiGetOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet(requestParameters, options) {
        return (0, exports.SystemGraphApiFp)(this.configuration).getOneDegreeFromTopicV1SystemGraphTopicTopicIdOneDegreeGet(requestParameters.topicId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get relationship path.
     * @summary Get Relationship Endpoint
     * @param {SystemGraphApiGetRelationshipEndpointV1SystemGraphPathsRelationshipGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getRelationshipEndpointV1SystemGraphPathsRelationshipGet(requestParameters, options) {
        return (0, exports.SystemGraphApiFp)(this.configuration).getRelationshipEndpointV1SystemGraphPathsRelationshipGet(requestParameters.source, requestParameters.target, requestParameters.page, requestParameters.pageSize, requestParameters.additionalSources, requestParameters.additionalTargets, requestParameters.relationshipTypes, requestParameters.includeNonSignificant, requestParameters.semanticTypes, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch semantic graph.
     * @summary Get Semantic Graph Endpoint
     * @param {SystemGraphApiGetSemanticGraphEndpointV1SystemGraphSemanticGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getSemanticGraphEndpointV1SystemGraphSemanticGraphGet(requestParameters = {}, options) {
        return (0, exports.SystemGraphApiFp)(this.configuration).getSemanticGraphEndpointV1SystemGraphSemanticGraphGet(requestParameters.topic1, requestParameters.topic2, requestParameters.ids1, requestParameters.ids2, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch single topic semantic graph.
     * @summary Get Semantic Topic Graph Endpoint
     * @param {SystemGraphApiGetSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet(requestParameters = {}, options) {
        return (0, exports.SystemGraphApiFp)(this.configuration).getSemanticTopicGraphEndpointV1SystemGraphSemanticTopicGraphGet(requestParameters.topicName, requestParameters.topicIds, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get relationship path.
     * @summary Get Shared Sources Endpoint
     * @param {SystemGraphApiGetSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet(requestParameters, options) {
        return (0, exports.SystemGraphApiFp)(this.configuration).getSharedSourcesEndpointV1SystemGraphPathsSharedSourcesGet(requestParameters.source, requestParameters.target, requestParameters.page, requestParameters.pageSize, requestParameters.additionalSources, requestParameters.additionalTargets, requestParameters.relationshipTypes, requestParameters.includeNonSignificant, requestParameters.semanticTypes, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get relationship path.
     * @summary Get Shared Targets Endpoint
     * @param {SystemGraphApiGetSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet(requestParameters, options) {
        return (0, exports.SystemGraphApiFp)(this.configuration).getSharedTargetsEndpointV1SystemGraphPathsSharedTargetsGet(requestParameters.source, requestParameters.target, requestParameters.page, requestParameters.pageSize, requestParameters.additionalSources, requestParameters.additionalTargets, requestParameters.relationshipTypes, requestParameters.includeNonSignificant, requestParameters.semanticTypes, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get system graph from the database.
     * @summary Get System Graph Endpoint
     * @param {SystemGraphApiGetSystemGraphEndpointV1SystemGraphSystemGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getSystemGraphEndpointV1SystemGraphSystemGraphGet(requestParameters = {}, options) {
        return (0, exports.SystemGraphApiFp)(this.configuration).getSystemGraphEndpointV1SystemGraphSystemGraphGet(requestParameters.numRelationships, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch semantic graph.
     * @summary Get Topological Categories Endpoint
     * @param {SystemGraphApiGetTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet(requestParameters, options) {
        return (0, exports.SystemGraphApiFp)(this.configuration).getTopologicalCategoriesEndpointV1SystemGraphTopologicalCategoriesGet(requestParameters.topic1, requestParameters.ids1, requestParameters.topic2, requestParameters.ids2, requestParameters.pageSize, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get relationship path.
     * @summary Get Two Hop Mediators Endpoint
     * @param {SystemGraphApiGetTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet(requestParameters, options) {
        return (0, exports.SystemGraphApiFp)(this.configuration).getTwoHopMediatorsEndpointV1SystemGraphPathsTwoHopMediatorsGet(requestParameters.source, requestParameters.target, requestParameters.page, requestParameters.pageSize, requestParameters.additionalSources, requestParameters.additionalTargets, requestParameters.relationshipTypes, requestParameters.includeNonSignificant, requestParameters.semanticTypes, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get upstream paths.
     * @summary Get Upstream Endpoint
     * @param {SystemGraphApiGetUpstreamEndpointV1SystemGraphPathsUpstreamGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    getUpstreamEndpointV1SystemGraphPathsUpstreamGet(requestParameters, options) {
        return (0, exports.SystemGraphApiFp)(this.configuration).getUpstreamEndpointV1SystemGraphPathsUpstreamGet(requestParameters.node, requestParameters.page, requestParameters.pageSize, requestParameters.nHops, requestParameters.additionalNodes, requestParameters.relationshipTypes, requestParameters.includeNonSignificant, requestParameters.semanticTypes, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Search topics.
     * @summary Search Topics Endpoint
     * @param {SystemGraphApiSearchTopicsEndpointV1SystemGraphSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemGraphApi
     */
    searchTopicsEndpointV1SystemGraphSearchGet(requestParameters, options) {
        return (0, exports.SystemGraphApiFp)(this.configuration).searchTopicsEndpointV1SystemGraphSearchGet(requestParameters.q, requestParameters.subgraphTopics, requestParameters.subgraphDepth, requestParameters.searchType, requestParameters.autocut, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SystemGraphApi = SystemGraphApi;
/**
 * TopicApi - axios parameter creator
 * @export
 */
const TopicApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get topic data.
         * @summary Get Information For A Topic.
         * @param {Array<string>} [topicIds] List of topic IDs to fetch information from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformationForATopicV1TopicInfoGet: (topicIds_1, ...args_1) => __awaiter(this, [topicIds_1, ...args_1], void 0, function* (topicIds, options = {}) {
            const localVarPath = `/v1/topic/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (topicIds) {
                localVarQueryParameter['topic_ids'] = topicIds;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get information for variables related to a topic.
         * @summary Get Variables Related To A Topic.
         * @param {string} topicId
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariablesRelatedToATopicV1TopicVariablesGet: (topicId_1, limit_1, offset_1, ...args_1) => __awaiter(this, [topicId_1, limit_1, offset_1, ...args_1], void 0, function* (topicId, limit, offset, options = {}) {
            // verify required parameter 'topicId' is not null or undefined
            (0, common_1.assertParamExists)('getVariablesRelatedToATopicV1TopicVariablesGet', 'topicId', topicId);
            const localVarPath = `/v1/topic/variables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (topicId !== undefined) {
                localVarQueryParameter['topic_id'] = topicId;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.TopicApiAxiosParamCreator = TopicApiAxiosParamCreator;
/**
 * TopicApi - functional programming interface
 * @export
 */
const TopicApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.TopicApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get topic data.
         * @summary Get Information For A Topic.
         * @param {Array<string>} [topicIds] List of topic IDs to fetch information from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformationForATopicV1TopicInfoGet(topicIds, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getInformationForATopicV1TopicInfoGet(topicIds, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TopicApi.getInformationForATopicV1TopicInfoGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get information for variables related to a topic.
         * @summary Get Variables Related To A Topic.
         * @param {string} topicId
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariablesRelatedToATopicV1TopicVariablesGet(topicId, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getVariablesRelatedToATopicV1TopicVariablesGet(topicId, limit, offset, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TopicApi.getVariablesRelatedToATopicV1TopicVariablesGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.TopicApiFp = TopicApiFp;
/**
 * TopicApi - factory interface
 * @export
 */
const TopicApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.TopicApiFp)(configuration);
    return {
        /**
         * Get topic data.
         * @summary Get Information For A Topic.
         * @param {TopicApiGetInformationForATopicV1TopicInfoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformationForATopicV1TopicInfoGet(requestParameters = {}, options) {
            return localVarFp.getInformationForATopicV1TopicInfoGet(requestParameters.topicIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information for variables related to a topic.
         * @summary Get Variables Related To A Topic.
         * @param {TopicApiGetVariablesRelatedToATopicV1TopicVariablesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariablesRelatedToATopicV1TopicVariablesGet(requestParameters, options) {
            return localVarFp.getVariablesRelatedToATopicV1TopicVariablesGet(requestParameters.topicId, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TopicApiFactory = TopicApiFactory;
/**
 * TopicApi - object-oriented interface
 * @export
 * @class TopicApi
 * @extends {BaseAPI}
 */
class TopicApi extends base_1.BaseAPI {
    /**
     * Get topic data.
     * @summary Get Information For A Topic.
     * @param {TopicApiGetInformationForATopicV1TopicInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    getInformationForATopicV1TopicInfoGet(requestParameters = {}, options) {
        return (0, exports.TopicApiFp)(this.configuration).getInformationForATopicV1TopicInfoGet(requestParameters.topicIds, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information for variables related to a topic.
     * @summary Get Variables Related To A Topic.
     * @param {TopicApiGetVariablesRelatedToATopicV1TopicVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    getVariablesRelatedToATopicV1TopicVariablesGet(requestParameters, options) {
        return (0, exports.TopicApiFp)(this.configuration).getVariablesRelatedToATopicV1TopicVariablesGet(requestParameters.topicId, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TopicApi = TopicApi;
/**
 * UsersApi - axios parameter creator
 * @export
 */
const UsersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} userId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1UsersPost: (userId_1, updateProfileIn_1, ...args_1) => __awaiter(this, [userId_1, updateProfileIn_1, ...args_1], void 0, function* (userId, updateProfileIn, options = {}) {
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('createAUserByCognitoIdV1UsersPost', 'userId', userId);
            // verify required parameter 'updateProfileIn' is not null or undefined
            (0, common_1.assertParamExists)('createAUserByCognitoIdV1UsersPost', 'updateProfileIn', updateProfileIn);
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateProfileIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1UserPost: (userProfileIn_1, ...args_1) => __awaiter(this, [userProfileIn_1, ...args_1], void 0, function* (userProfileIn, options = {}) {
            // verify required parameter 'userProfileIn' is not null or undefined
            (0, common_1.assertParamExists)('createAUserFromCredentialsV1UserPost', 'userProfileIn', userProfileIn);
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userProfileIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet: (includeAvatar_1, ...args_1) => __awaiter(this, [includeAvatar_1, ...args_1], void 0, function* (includeAvatar, options = {}) {
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet: (userId_1, includeAvatar_1, ...args_1) => __awaiter(this, [userId_1, includeAvatar_1, ...args_1], void 0, function* (userId, includeAvatar, options = {}) {
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('getUserV1UsersUserIdGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} [teamId]
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1UsersGet: (teamId_1, email_1, includeAvatar_1, ...args_1) => __awaiter(this, [teamId_1, email_1, includeAvatar_1, ...args_1], void 0, function* (teamId, email, includeAvatar, options = {}) {
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1UsersUserIdPatch: (userId_1, updateProfileIn_1, ...args_1) => __awaiter(this, [userId_1, updateProfileIn_1, ...args_1], void 0, function* (userId, updateProfileIn, options = {}) {
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('updateAUserByIdV1UsersUserIdPatch', 'userId', userId);
            // verify required parameter 'updateProfileIn' is not null or undefined
            (0, common_1.assertParamExists)('updateAUserByIdV1UsersUserIdPatch', 'updateProfileIn', updateProfileIn);
            const localVarPath = `/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateProfileIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1UserPut: (userProfileIn_1, ...args_1) => __awaiter(this, [userProfileIn_1, ...args_1], void 0, function* (userProfileIn, options = {}) {
            // verify required parameter 'userProfileIn' is not null or undefined
            (0, common_1.assertParamExists)('updateAuthenticatedUserProfileV1UserPut', 'userProfileIn', userProfileIn);
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userProfileIn, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.UsersApiAxiosParamCreator = UsersApiAxiosParamCreator;
/**
 * UsersApi - functional programming interface
 * @export
 */
const UsersApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.UsersApiAxiosParamCreator)(configuration);
    return {
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} userId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1UsersPost(userId, updateProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAUserByCognitoIdV1UsersPost(userId, updateProfileIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.createAUserByCognitoIdV1UsersPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1UserPost(userProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAUserFromCredentialsV1UserPost(userProfileIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.createAUserFromCredentialsV1UserPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet(includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAuthenticatedUserV1UserGet(includeAvatar, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.getAuthenticatedUserV1UserGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet(userId, includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserV1UsersUserIdGet(userId, includeAvatar, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.getUserV1UsersUserIdGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} [teamId]
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1UsersGet(teamId, email, includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUsersV1UsersGet(teamId, email, includeAvatar, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.getUsersV1UsersGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1UsersUserIdPatch(userId, updateProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateAUserByIdV1UsersUserIdPatch(userId, updateProfileIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.updateAUserByIdV1UsersUserIdPatch']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1UserPut(userProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateAuthenticatedUserProfileV1UserPut(userProfileIn, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.updateAuthenticatedUserProfileV1UserPut']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.UsersApiFp = UsersApiFp;
/**
 * UsersApi - factory interface
 * @export
 */
const UsersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.UsersApiFp)(configuration);
    return {
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {UsersApiCreateAUserByCognitoIdV1UsersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1UsersPost(requestParameters, options) {
            return localVarFp.createAUserByCognitoIdV1UsersPost(requestParameters.userId, requestParameters.updateProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {UsersApiCreateAUserFromCredentialsV1UserPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1UserPost(requestParameters, options) {
            return localVarFp.createAUserFromCredentialsV1UserPost(requestParameters.userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {UsersApiGetAuthenticatedUserV1UserGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet(requestParameters = {}, options) {
            return localVarFp.getAuthenticatedUserV1UserGet(requestParameters.includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {UsersApiGetUserV1UsersUserIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet(requestParameters, options) {
            return localVarFp.getUserV1UsersUserIdGet(requestParameters.userId, requestParameters.includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {UsersApiGetUsersV1UsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1UsersGet(requestParameters = {}, options) {
            return localVarFp.getUsersV1UsersGet(requestParameters.teamId, requestParameters.email, requestParameters.includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1UsersUserIdPatch(requestParameters, options) {
            return localVarFp.updateAUserByIdV1UsersUserIdPatch(requestParameters.userId, requestParameters.updateProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1UserPut(requestParameters, options) {
            return localVarFp.updateAuthenticatedUserProfileV1UserPut(requestParameters.userProfileIn, options).then((request) => request(axios, basePath));
        },
    };
};
exports.UsersApiFactory = UsersApiFactory;
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
class UsersApi extends base_1.BaseAPI {
    /**
     * Create a new user.
     * @summary Create A User By Cognito Id.
     * @param {UsersApiCreateAUserByCognitoIdV1UsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createAUserByCognitoIdV1UsersPost(requestParameters, options) {
        return (0, exports.UsersApiFp)(this.configuration).createAUserByCognitoIdV1UsersPost(requestParameters.userId, requestParameters.updateProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new user.
     * @summary Create A User From Credentials.
     * @param {UsersApiCreateAUserFromCredentialsV1UserPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createAUserFromCredentialsV1UserPost(requestParameters, options) {
        return (0, exports.UsersApiFp)(this.configuration).createAUserFromCredentialsV1UserPost(requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {UsersApiGetAuthenticatedUserV1UserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getAuthenticatedUserV1UserGet(requestParameters = {}, options) {
        return (0, exports.UsersApiFp)(this.configuration).getAuthenticatedUserV1UserGet(requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {UsersApiGetUserV1UsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserV1UsersUserIdGet(requestParameters, options) {
        return (0, exports.UsersApiFp)(this.configuration).getUserV1UsersUserIdGet(requestParameters.userId, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List public profiles.
     * @summary Get Users
     * @param {UsersApiGetUsersV1UsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUsersV1UsersGet(requestParameters = {}, options) {
        return (0, exports.UsersApiFp)(this.configuration).getUsersV1UsersGet(requestParameters.teamId, requestParameters.email, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new user.
     * @summary Update A User By Id.
     * @param {UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateAUserByIdV1UsersUserIdPatch(requestParameters, options) {
        return (0, exports.UsersApiFp)(this.configuration).updateAUserByIdV1UsersUserIdPatch(requestParameters.userId, requestParameters.updateProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateAuthenticatedUserProfileV1UserPut(requestParameters, options) {
        return (0, exports.UsersApiFp)(this.configuration).updateAuthenticatedUserProfileV1UserPut(requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.UsersApi = UsersApi;
/**
 * VariableApi - axios parameter creator
 * @export
 */
const VariableApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get information for variable findings.
         * @summary Get Findings Of A Variable.
         * @param {string} variableId
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFindingsOfAVariableV1VariableVariableIdFindingsGet: (variableId_1, limit_1, offset_1, ...args_1) => __awaiter(this, [variableId_1, limit_1, offset_1, ...args_1], void 0, function* (variableId, limit, offset, options = {}) {
            // verify required parameter 'variableId' is not null or undefined
            (0, common_1.assertParamExists)('getFindingsOfAVariableV1VariableVariableIdFindingsGet', 'variableId', variableId);
            const localVarPath = `/v1/variable/{variable_id}/findings`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.VariableApiAxiosParamCreator = VariableApiAxiosParamCreator;
/**
 * VariableApi - functional programming interface
 * @export
 */
const VariableApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.VariableApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get information for variable findings.
         * @summary Get Findings Of A Variable.
         * @param {string} variableId
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFindingsOfAVariableV1VariableVariableIdFindingsGet(variableId, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFindingsOfAVariableV1VariableVariableIdFindingsGet(variableId, limit, offset, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VariableApi.getFindingsOfAVariableV1VariableVariableIdFindingsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.VariableApiFp = VariableApiFp;
/**
 * VariableApi - factory interface
 * @export
 */
const VariableApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.VariableApiFp)(configuration);
    return {
        /**
         * Get information for variable findings.
         * @summary Get Findings Of A Variable.
         * @param {VariableApiGetFindingsOfAVariableV1VariableVariableIdFindingsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFindingsOfAVariableV1VariableVariableIdFindingsGet(requestParameters, options) {
            return localVarFp.getFindingsOfAVariableV1VariableVariableIdFindingsGet(requestParameters.variableId, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
    };
};
exports.VariableApiFactory = VariableApiFactory;
/**
 * VariableApi - object-oriented interface
 * @export
 * @class VariableApi
 * @extends {BaseAPI}
 */
class VariableApi extends base_1.BaseAPI {
    /**
     * Get information for variable findings.
     * @summary Get Findings Of A Variable.
     * @param {VariableApiGetFindingsOfAVariableV1VariableVariableIdFindingsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariableApi
     */
    getFindingsOfAVariableV1VariableVariableIdFindingsGet(requestParameters, options) {
        return (0, exports.VariableApiFp)(this.configuration).getFindingsOfAVariableV1VariableVariableIdFindingsGet(requestParameters.variableId, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.VariableApi = VariableApi;
