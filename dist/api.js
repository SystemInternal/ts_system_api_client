"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 * This is a REST API through which clients can interact with System - an **open**, **collaborative**, and **ever-growing knowledge base** of all the world\'s systems.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariablesApi = exports.VariablesApiFactory = exports.VariablesApiFp = exports.VariablesApiAxiosParamCreator = exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiAxiosParamCreator = exports.TimelineApi = exports.TimelineApiFactory = exports.TimelineApiFp = exports.TimelineApiAxiosParamCreator = exports.TeamsApi = exports.TeamsApiFactory = exports.TeamsApiFp = exports.TeamsApiAxiosParamCreator = exports.SystemApi = exports.SystemApiFactory = exports.SystemApiFp = exports.SystemApiAxiosParamCreator = exports.StudiesApi = exports.StudiesApiFactory = exports.StudiesApiFp = exports.StudiesApiAxiosParamCreator = exports.PopulationAttributesApi = exports.PopulationAttributesApiFactory = exports.PopulationAttributesApiFp = exports.PopulationAttributesApiAxiosParamCreator = exports.PopulationAttributeValuesApi = exports.PopulationAttributeValuesApiFactory = exports.PopulationAttributeValuesApiFp = exports.PopulationAttributeValuesApiAxiosParamCreator = exports.ModelsApi = exports.ModelsApiFactory = exports.ModelsApiFp = exports.ModelsApiAxiosParamCreator = exports.ModeldbApi = exports.ModeldbApiFactory = exports.ModeldbApiFp = exports.ModeldbApiAxiosParamCreator = exports.GraphqlApi = exports.GraphqlApiFactory = exports.GraphqlApiFp = exports.GraphqlApiAxiosParamCreator = exports.GraphApi = exports.GraphApiFactory = exports.GraphApiFp = exports.GraphApiAxiosParamCreator = exports.FeaturesApi = exports.FeaturesApiFactory = exports.FeaturesApiFp = exports.FeaturesApiAxiosParamCreator = exports.EnterpriseApi = exports.EnterpriseApiFactory = exports.EnterpriseApiFp = exports.EnterpriseApiAxiosParamCreator = exports.DatasetsApi = exports.DatasetsApiFactory = exports.DatasetsApiFp = exports.DatasetsApiAxiosParamCreator = exports.DashboardsApi = exports.DashboardsApiFactory = exports.DashboardsApiFp = exports.DashboardsApiAxiosParamCreator = exports.ConceptsApi = exports.ConceptsApiFactory = exports.ConceptsApiFp = exports.ConceptsApiAxiosParamCreator = exports.AuthorsApi = exports.AuthorsApiFactory = exports.AuthorsApiFp = exports.AuthorsApiAxiosParamCreator = exports.AssociationsApi = exports.AssociationsApiFactory = exports.AssociationsApiFp = exports.AssociationsApiAxiosParamCreator = exports.VariableTypeEnum = exports.VariableToVariableSystemOfSortEnum = exports.VariableToFeatureSystemOfSortEnum = exports.VariableSortEnum = exports.ValueSourceEnum = exports.ValidValueSource = exports.ValidTransformationTypeEnum = exports.ValidStatisticalTestType = exports.ValidSignificanceLevel = exports.ValidReproducibilityEnum = exports.ValidRelationshipStrengthEnum = exports.ValidRelationshipDirectionEnum = exports.ValidModelScoreEnum = exports.ValidFeatureContributionMethod = exports.ValidDatasetLicenseEnum = exports.ValidCalibratedRelationshipType = exports.SystemObjectResources = exports.StudyTypeEnum = exports.StudySortEnum = exports.StatisticalTestType = exports.SignificanceLevel = exports.RetrievalStatus = exports.ResourceAction = exports.PopulationAttributeValueSortEnum = exports.PopulationAttributeSortEnum = exports.PatchOp = exports.Ordering = exports.ModelSortEnum = exports.ModelScoreEnum = exports.MessageType = exports.IntegrationType = exports.IntegrationState = exports.GraphNodeType = exports.GraphLinkType = exports.FilterValueType = exports.FeatureTypeEnum = exports.FeatureToFeatureSystemOfSortEnum = exports.FeatureSourceEnum = exports.FeatureSortEnum = exports.FeatureContributionMethod = exports.ExternalToolEnum = exports.ExternalAssetTypeEnum = exports.DeploymentStageEnum = exports.DatasetSortEnum = exports.DatasetLicenseEnum = exports.DashboardSortEnum = exports.ConceptToConceptSystemOfSortEnum = exports.ConceptSortEnum = exports.AuthorSortEnum = exports.AttributeTypeEnum = exports.AssociationSortEnum = exports.AddFlowContext = void 0;
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("./base");
/**
 * Add study flow context enum.
 * @export
 * @enum {string}
 */
var AddFlowContext;
(function (AddFlowContext) {
    AddFlowContext["Relationship"] = "relationship";
    AddFlowContext["QuickProject"] = "quick_project";
})(AddFlowContext = exports.AddFlowContext || (exports.AddFlowContext = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var AssociationSortEnum;
(function (AssociationSortEnum) {
    AssociationSortEnum["CreatedAt"] = "created_at";
    AssociationSortEnum["LastUpdatedAt"] = "last_updated_at";
})(AssociationSortEnum = exports.AssociationSortEnum || (exports.AssociationSortEnum = {}));
/**
 * Enum for attribute types.
 * @export
 * @enum {string}
 */
var AttributeTypeEnum;
(function (AttributeTypeEnum) {
    AttributeTypeEnum["Invalid"] = "invalid";
    AttributeTypeEnum["Categorical"] = "categorical";
    AttributeTypeEnum["DateRange"] = "date_range";
    AttributeTypeEnum["NumberRange"] = "number_range";
    AttributeTypeEnum["FreeText"] = "free_text";
    AttributeTypeEnum["Location"] = "location";
})(AttributeTypeEnum = exports.AttributeTypeEnum || (exports.AttributeTypeEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var AuthorSortEnum;
(function (AuthorSortEnum) {
    AuthorSortEnum["CreatedAt"] = "created_at";
    AuthorSortEnum["LastUpdatedAt"] = "last_updated_at";
    AuthorSortEnum["Name"] = "name";
})(AuthorSortEnum = exports.AuthorSortEnum || (exports.AuthorSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var ConceptSortEnum;
(function (ConceptSortEnum) {
    ConceptSortEnum["CreatedAt"] = "created_at";
    ConceptSortEnum["LastUpdatedAt"] = "last_updated_at";
    ConceptSortEnum["Name"] = "name";
})(ConceptSortEnum = exports.ConceptSortEnum || (exports.ConceptSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var ConceptToConceptSystemOfSortEnum;
(function (ConceptToConceptSystemOfSortEnum) {
    ConceptToConceptSystemOfSortEnum["PathCount"] = "path_count";
    ConceptToConceptSystemOfSortEnum["CreatedAt"] = "created_at";
})(ConceptToConceptSystemOfSortEnum = exports.ConceptToConceptSystemOfSortEnum || (exports.ConceptToConceptSystemOfSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var DashboardSortEnum;
(function (DashboardSortEnum) {
    DashboardSortEnum["CreatedAt"] = "created_at";
    DashboardSortEnum["LastUpdatedAt"] = "last_updated_at";
    DashboardSortEnum["Name"] = "name";
})(DashboardSortEnum = exports.DashboardSortEnum || (exports.DashboardSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var DatasetLicenseEnum;
(function (DatasetLicenseEnum) {
    DatasetLicenseEnum["PublicDomain"] = "public_domain";
    DatasetLicenseEnum["CreativeCommonsPublicDomainDedication"] = "creative_commons_public_domain_dedication";
    DatasetLicenseEnum["OpendataCommonsPublicDomainDedicationAndLicense"] = "opendata_commons_public_domain_dedication_and_license";
    DatasetLicenseEnum["CreativeCommonsAttributionInternational"] = "creative_commons_attribution_international";
    DatasetLicenseEnum["CommunityDataLicenseAgreementVersion1Permissive"] = "community_data_license_agreement_version_1_permissive";
    DatasetLicenseEnum["OpenDataCommonsAttributionLicense"] = "open_data_commons_attribution_license";
    DatasetLicenseEnum["CreativeCommonsAttributionShareAlike4International"] = "creative_commons_attribution_share_alike_4_international";
    DatasetLicenseEnum["CommunityDataLicenseAgreementVersion1Sharing"] = "community_data_license_agreement_version_1_sharing";
    DatasetLicenseEnum["OpenDataCommonsOpenDatabaseLicense"] = "open_data_commons_open_database_license";
    DatasetLicenseEnum["CreativeCommonsAttributionNoncommercial4International"] = "creative_commons_attribution_noncommercial_4_international";
    DatasetLicenseEnum["CreativeCommonsAttributionNoderivatives4International"] = "creative_commons_attribution_noderivatives_4_international";
    DatasetLicenseEnum["CreativeCommonsAttributionNoncommercialShareAlike4International"] = "creative_commons_attribution_noncommercial_share_alike_4_international";
    DatasetLicenseEnum["CreativeCommonsAttributionNoncommercialNoderivatives4International"] = "creative_commons_attribution_noncommercial_noderivatives_4_international";
    DatasetLicenseEnum["Other"] = "other";
    DatasetLicenseEnum["Invalid"] = "invalid";
})(DatasetLicenseEnum = exports.DatasetLicenseEnum || (exports.DatasetLicenseEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var DatasetSortEnum;
(function (DatasetSortEnum) {
    DatasetSortEnum["Popularity"] = "popularity";
    DatasetSortEnum["CreatedAt"] = "created_at";
    DatasetSortEnum["LastUpdatedAt"] = "last_updated_at";
    DatasetSortEnum["Name"] = "name";
})(DatasetSortEnum = exports.DatasetSortEnum || (exports.DatasetSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var DeploymentStageEnum;
(function (DeploymentStageEnum) {
    DeploymentStageEnum["Development"] = "development";
    DeploymentStageEnum["Testing"] = "testing";
    DeploymentStageEnum["Staging"] = "staging";
    DeploymentStageEnum["Production"] = "production";
    DeploymentStageEnum["Invalid"] = "invalid";
})(DeploymentStageEnum = exports.DeploymentStageEnum || (exports.DeploymentStageEnum = {}));
/**
 * External asset type enum.
 * @export
 * @enum {string}
 */
var ExternalAssetTypeEnum;
(function (ExternalAssetTypeEnum) {
    ExternalAssetTypeEnum["Invalid"] = "invalid";
    ExternalAssetTypeEnum["Document"] = "document";
    ExternalAssetTypeEnum["Notebook"] = "notebook";
})(ExternalAssetTypeEnum = exports.ExternalAssetTypeEnum || (exports.ExternalAssetTypeEnum = {}));
/**
 * Enum for external tools.
 * @export
 * @enum {string}
 */
var ExternalToolEnum;
(function (ExternalToolEnum) {
    ExternalToolEnum["LOOKER"] = "LOOKER";
    ExternalToolEnum["MODE"] = "MODE";
    ExternalToolEnum["TABLEAU"] = "TABLEAU";
})(ExternalToolEnum = exports.ExternalToolEnum || (exports.ExternalToolEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var FeatureContributionMethod;
(function (FeatureContributionMethod) {
    FeatureContributionMethod["Gini"] = "gini";
    FeatureContributionMethod["Gain"] = "gain";
    FeatureContributionMethod["Shap"] = "shap";
    FeatureContributionMethod["Coefficient"] = "coefficient";
    FeatureContributionMethod["Lime"] = "lime";
    FeatureContributionMethod["Permutation"] = "permutation";
    FeatureContributionMethod["PearsonR"] = "pearson_r";
    FeatureContributionMethod["KendallTau"] = "kendall_tau";
    FeatureContributionMethod["CramerV"] = "cramer_v";
    FeatureContributionMethod["KruskalWallisHTest"] = "kruskal_wallis_h_test";
    FeatureContributionMethod["ControlVariable"] = "control_variable";
    FeatureContributionMethod["ProductMomentR"] = "product_moment_r";
    FeatureContributionMethod["FrequencyScore"] = "frequency_score";
    FeatureContributionMethod["OddsRatio"] = "odds_ratio";
    FeatureContributionMethod["RelativeRiskRatio"] = "relative_risk_ratio";
    FeatureContributionMethod["HazardRatio"] = "hazard_ratio";
    FeatureContributionMethod["MeanGainUnstandardized"] = "mean_gain_unstandardized";
    FeatureContributionMethod["MeanGainStandardized"] = "mean_gain_standardized";
    FeatureContributionMethod["MeanDifferenceUnstandardized"] = "mean_difference_unstandardized";
    FeatureContributionMethod["MeanDifferenceStandardized"] = "mean_difference_standardized";
    FeatureContributionMethod["ProportionDifference"] = "proportion_difference";
    FeatureContributionMethod["LogOddsRatio"] = "log_odds_ratio";
    FeatureContributionMethod["PearsonChiSquaredTest"] = "pearson_chi_squared_test";
    FeatureContributionMethod["Forecast"] = "forecast";
    FeatureContributionMethod["Invalid"] = "invalid";
})(FeatureContributionMethod = exports.FeatureContributionMethod || (exports.FeatureContributionMethod = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var FeatureSortEnum;
(function (FeatureSortEnum) {
    FeatureSortEnum["ModelCount"] = "model_count";
    FeatureSortEnum["CreatedAt"] = "created_at";
    FeatureSortEnum["LastUpdatedAt"] = "last_updated_at";
    FeatureSortEnum["Name"] = "name";
})(FeatureSortEnum = exports.FeatureSortEnum || (exports.FeatureSortEnum = {}));
/**
 * Enum for feature source.
 * @export
 * @enum {string}
 */
var FeatureSourceEnum;
(function (FeatureSourceEnum) {
    FeatureSourceEnum["Invalid"] = "invalid";
    FeatureSourceEnum["LocalEvaluator"] = "local_evaluator";
    FeatureSourceEnum["RemoteEvaluator"] = "remote_evaluator";
    FeatureSourceEnum["User"] = "user";
})(FeatureSourceEnum = exports.FeatureSourceEnum || (exports.FeatureSourceEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var FeatureToFeatureSystemOfSortEnum;
(function (FeatureToFeatureSystemOfSortEnum) {
    FeatureToFeatureSystemOfSortEnum["PathCount"] = "path_count";
    FeatureToFeatureSystemOfSortEnum["CreatedAt"] = "created_at";
    FeatureToFeatureSystemOfSortEnum["ModelCount"] = "model_count";
})(FeatureToFeatureSystemOfSortEnum = exports.FeatureToFeatureSystemOfSortEnum || (exports.FeatureToFeatureSystemOfSortEnum = {}));
/**
 * Enum for feature types.
 * @export
 * @enum {string}
 */
var FeatureTypeEnum;
(function (FeatureTypeEnum) {
    FeatureTypeEnum["Invalid"] = "invalid";
    FeatureTypeEnum["Numerical"] = "numerical";
    FeatureTypeEnum["Categorical"] = "categorical";
    FeatureTypeEnum["Datetime"] = "datetime";
    FeatureTypeEnum["Text"] = "text";
    FeatureTypeEnum["Image"] = "image";
    FeatureTypeEnum["Audio"] = "audio";
    FeatureTypeEnum["Video"] = "video";
    FeatureTypeEnum["File"] = "file";
    FeatureTypeEnum["TimeSeries"] = "time_series";
    FeatureTypeEnum["Dynamic"] = "dynamic";
    FeatureTypeEnum["String"] = "string";
})(FeatureTypeEnum = exports.FeatureTypeEnum || (exports.FeatureTypeEnum = {}));
/**
 * Filter value types.
 * @export
 * @enum {string}
 */
var FilterValueType;
(function (FilterValueType) {
    FilterValueType["Filter"] = "filter";
    FilterValueType["Sort"] = "sort";
})(FilterValueType = exports.FilterValueType || (exports.FilterValueType = {}));
/**
 * Graph Link Type enum.
 * @export
 * @enum {string}
 */
var GraphLinkType;
(function (GraphLinkType) {
    GraphLinkType["DatasetRelationship"] = "dataset_relationship";
    GraphLinkType["ConceptRelationship"] = "concept_relationship";
    GraphLinkType["VariableRelationship"] = "variable_relationship";
    GraphLinkType["FeatureRelationship"] = "feature_relationship";
    GraphLinkType["FeatureVariable"] = "feature_variable";
    GraphLinkType["Measures"] = "measures";
})(GraphLinkType = exports.GraphLinkType || (exports.GraphLinkType = {}));
/**
 * Graph Node Type enum.
 * @export
 * @enum {string}
 */
var GraphNodeType;
(function (GraphNodeType) {
    GraphNodeType["Dataset"] = "dataset";
    GraphNodeType["Concept"] = "concept";
    GraphNodeType["Variable"] = "variable";
    GraphNodeType["Feature"] = "feature";
})(GraphNodeType = exports.GraphNodeType || (exports.GraphNodeType = {}));
/**
 * Integration service state.
 * @export
 * @enum {string}
 */
var IntegrationState;
(function (IntegrationState) {
    IntegrationState["INITIAL"] = "INITIAL";
    IntegrationState["ACTIVE"] = "ACTIVE";
    IntegrationState["INACTIVE"] = "INACTIVE";
})(IntegrationState = exports.IntegrationState || (exports.IntegrationState = {}));
/**
 * Integration retrieval types.
 * @export
 * @enum {string}
 */
var IntegrationType;
(function (IntegrationType) {
    IntegrationType["REDSHIFT"] = "REDSHIFT";
    IntegrationType["SNOWFLAKE"] = "SNOWFLAKE";
    IntegrationType["BIGQUERY"] = "BIGQUERY";
})(IntegrationType = exports.IntegrationType || (exports.IntegrationType = {}));
/**
 * Message type.
 * @export
 * @enum {string}
 */
var MessageType;
(function (MessageType) {
    MessageType["ERROR"] = "ERROR";
    MessageType["DATASETCREATED"] = "DATASET_CREATED";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var ModelScoreEnum;
(function (ModelScoreEnum) {
    ModelScoreEnum["AccuracyScore"] = "accuracy_score";
    ModelScoreEnum["AveragePrecisionScore"] = "average_precision_score";
    ModelScoreEnum["BalancedAccuracyScore"] = "balanced_accuracy_score";
    ModelScoreEnum["BrierScoreLoss"] = "brier_score_loss";
    ModelScoreEnum["CohenKappaScore"] = "cohen_kappa_score";
    ModelScoreEnum["F1Score"] = "f1_score";
    ModelScoreEnum["HammingLoss"] = "hamming_loss";
    ModelScoreEnum["HingeLoss"] = "hinge_loss";
    ModelScoreEnum["JaccardScore"] = "jaccard_score";
    ModelScoreEnum["LogLoss"] = "log_loss";
    ModelScoreEnum["MatthewsCorrCoef"] = "matthews_corr_coef";
    ModelScoreEnum["PrecisionScore"] = "precision_score";
    ModelScoreEnum["RecallScore"] = "recall_score";
    ModelScoreEnum["RocAucScore"] = "roc_auc_score";
    ModelScoreEnum["ZeroOneLoss"] = "zero_one_loss";
    ModelScoreEnum["ExplainedVarianceScore"] = "explained_variance_score";
    ModelScoreEnum["MaxError"] = "max_error";
    ModelScoreEnum["MeanAbsoluteError"] = "mean_absolute_error";
    ModelScoreEnum["MeanAbsolutePercentageError"] = "mean_absolute_percentage_error";
    ModelScoreEnum["MeanSquaredError"] = "mean_squared_error";
    ModelScoreEnum["MeanSquaredLogError"] = "mean_squared_log_error";
    ModelScoreEnum["MedianAbsoluteError"] = "median_absolute_error";
    ModelScoreEnum["R2Score"] = "r2_score";
    ModelScoreEnum["CoverageError"] = "coverage_error";
    ModelScoreEnum["LabelRankingAveragePrecisionScore"] = "label_ranking_average_precision_score";
    ModelScoreEnum["LabelRankingLoss"] = "label_ranking_loss";
    ModelScoreEnum["AdjustedR2Score"] = "adjusted_r2_score";
    ModelScoreEnum["MutualInformationScore"] = "mutual_information_score";
    ModelScoreEnum["AdjMutualInformationScore"] = "adj_mutual_information_score";
    ModelScoreEnum["NormalizedMutualInformationScore"] = "normalized_mutual_information_score";
    ModelScoreEnum["AdjRandScore"] = "adj_rand_score";
    ModelScoreEnum["CompletenessScore"] = "completeness_score";
    ModelScoreEnum["FowlkesMallowsScore"] = "fowlkes_mallows_score";
    ModelScoreEnum["HomogeneityScore"] = "homogeneity_score";
    ModelScoreEnum["VMeasureScore"] = "v_measure_score";
    ModelScoreEnum["NegMeanAbsoluteError"] = "neg_mean_absolute_error";
    ModelScoreEnum["NegMeanSquaredError"] = "neg_mean_squared_error";
    ModelScoreEnum["RootMeanSquaredError"] = "root_mean_squared_error";
    ModelScoreEnum["NegRootMeanSquaredError"] = "neg_root_mean_squared_error";
    ModelScoreEnum["RootMeanSquaredLogError"] = "root_mean_squared_log_error";
    ModelScoreEnum["NegMedianAbsoluteError"] = "neg_median_absolute_error";
    ModelScoreEnum["CosineProximity"] = "cosine_proximity";
    ModelScoreEnum["KullbackLeiblerDivergence"] = "kullback_leibler_divergence";
    ModelScoreEnum["PoissonMetric"] = "poisson_metric";
    ModelScoreEnum["MulticlassLogLoss"] = "multiclass_log_loss";
    ModelScoreEnum["NormalizedDiscountedCumulativeGain"] = "normalized_discounted_cumulative_gain";
    ModelScoreEnum["GammaDeviance"] = "gamma_deviance";
    ModelScoreEnum["HuberMetric"] = "huber_metric";
    ModelScoreEnum["FBetaScore"] = "f_beta_score";
    ModelScoreEnum["EuclideanDistance"] = "euclidean_distance";
    ModelScoreEnum["HaversineDistance"] = "haversine_distance";
    ModelScoreEnum["MeanSquaredPredictioneRror"] = "mean_squared_predictione_rror";
    ModelScoreEnum["PseudoR2Mcfadden"] = "pseudo_r2_mcfadden";
    ModelScoreEnum["AdjustedPseudoR2Mcfadden"] = "adjusted_pseudo_r2_mcfadden";
    ModelScoreEnum["PseudoR2Nagelkerke"] = "pseudo_r2_nagelkerke";
    ModelScoreEnum["PseudoR2CoxSnell"] = "pseudo_r2_cox_snell";
    ModelScoreEnum["PseudoR2Effron"] = "pseudo_r2_effron";
    ModelScoreEnum["Bic"] = "bic";
    ModelScoreEnum["Aic"] = "aic";
    ModelScoreEnum["CorrelationActualForecast"] = "correlation_actual_forecast";
    ModelScoreEnum["ForecastVsActual"] = "forecast_vs_actual";
    ModelScoreEnum["MeanSquaredPercentageError"] = "mean_squared_percentage_error";
    ModelScoreEnum["ConfusionMatrix"] = "confusion_matrix";
    ModelScoreEnum["MulticlassConfusionMatrix"] = "multiclass_confusion_matrix";
    ModelScoreEnum["RocCurve"] = "roc_curve";
    ModelScoreEnum["Invalid"] = "invalid";
})(ModelScoreEnum = exports.ModelScoreEnum || (exports.ModelScoreEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var ModelSortEnum;
(function (ModelSortEnum) {
    ModelSortEnum["TargetName"] = "target_name";
    ModelSortEnum["CreatedAt"] = "created_at";
    ModelSortEnum["LastUpdatedAt"] = "last_updated_at";
})(ModelSortEnum = exports.ModelSortEnum || (exports.ModelSortEnum = {}));
/**
 * Ordering direction enum.
 * @export
 * @enum {string}
 */
var Ordering;
(function (Ordering) {
    Ordering["Asc"] = "asc";
    Ordering["Desc"] = "desc";
})(Ordering = exports.Ordering || (exports.Ordering = {}));
/**
 * Enum for PATCH operations.
 * @export
 * @enum {string}
 */
var PatchOp;
(function (PatchOp) {
    PatchOp["Update"] = "update";
    PatchOp["Append"] = "append";
    PatchOp["Delete"] = "delete";
})(PatchOp = exports.PatchOp || (exports.PatchOp = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var PopulationAttributeSortEnum;
(function (PopulationAttributeSortEnum) {
    PopulationAttributeSortEnum["CreatedAt"] = "created_at";
    PopulationAttributeSortEnum["LastUpdatedAt"] = "last_updated_at";
    PopulationAttributeSortEnum["Name"] = "name";
})(PopulationAttributeSortEnum = exports.PopulationAttributeSortEnum || (exports.PopulationAttributeSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var PopulationAttributeValueSortEnum;
(function (PopulationAttributeValueSortEnum) {
    PopulationAttributeValueSortEnum["CreatedAt"] = "created_at";
    PopulationAttributeValueSortEnum["LastUpdatedAt"] = "last_updated_at";
    PopulationAttributeValueSortEnum["Name"] = "name";
})(PopulationAttributeValueSortEnum = exports.PopulationAttributeValueSortEnum || (exports.PopulationAttributeValueSortEnum = {}));
/**
 * API resource action enum.
 * @export
 * @enum {string}
 */
var ResourceAction;
(function (ResourceAction) {
    ResourceAction["Create"] = "create";
    ResourceAction["View"] = "view";
    ResourceAction["Edit"] = "edit";
    ResourceAction["Delete"] = "delete";
})(ResourceAction = exports.ResourceAction || (exports.ResourceAction = {}));
/**
 * Table retrieval status.
 * @export
 * @enum {string}
 */
var RetrievalStatus;
(function (RetrievalStatus) {
    RetrievalStatus["Pending"] = "pending";
    RetrievalStatus["Success"] = "success";
    RetrievalStatus["Failure"] = "failure";
})(RetrievalStatus = exports.RetrievalStatus || (exports.RetrievalStatus = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var SignificanceLevel;
(function (SignificanceLevel) {
    SignificanceLevel["NinetyFive"] = "ninety_five";
    SignificanceLevel["NinetyNine"] = "ninety_nine";
    SignificanceLevel["NinetyNinePointNine"] = "ninety_nine_point_nine";
    SignificanceLevel["Invalid"] = "invalid";
})(SignificanceLevel = exports.SignificanceLevel || (exports.SignificanceLevel = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var StatisticalTestType;
(function (StatisticalTestType) {
    StatisticalTestType["Ttest"] = "ttest";
    StatisticalTestType["Ztest"] = "ztest";
    StatisticalTestType["Anova"] = "anova";
    StatisticalTestType["Chisquared"] = "chisquared";
    StatisticalTestType["Htest"] = "htest";
    StatisticalTestType["Invalid"] = "invalid";
})(StatisticalTestType = exports.StatisticalTestType || (exports.StatisticalTestType = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var StudySortEnum;
(function (StudySortEnum) {
    StudySortEnum["CreatedAt"] = "created_at";
    StudySortEnum["LastUpdatedAt"] = "last_updated_at";
    StudySortEnum["Name"] = "name";
})(StudySortEnum = exports.StudySortEnum || (exports.StudySortEnum = {}));
/**
 * Enum for study types.
 * @export
 * @enum {string}
 */
var StudyTypeEnum;
(function (StudyTypeEnum) {
    StudyTypeEnum["Invalid"] = "invalid";
    StudyTypeEnum["SupervisedMl"] = "supervised_ml";
    StudyTypeEnum["UnsupervisedMl"] = "unsupervised_ml";
    StudyTypeEnum["StatisticalInference"] = "statistical_inference";
    StudyTypeEnum["RandomizedControlTrial"] = "randomized_control_trial";
})(StudyTypeEnum = exports.StudyTypeEnum || (exports.StudyTypeEnum = {}));
/**
 * Enum System object resource names.
 * @export
 * @enum {string}
 */
var SystemObjectResources;
(function (SystemObjectResources) {
    SystemObjectResources["Variable"] = "variable";
    SystemObjectResources["Dataset"] = "dataset";
    SystemObjectResources["Feature"] = "feature";
    SystemObjectResources["Study"] = "study";
    SystemObjectResources["Model"] = "model";
    SystemObjectResources["Author"] = "author";
    SystemObjectResources["Concept"] = "concept";
    SystemObjectResources["PopulationAttribute"] = "population_attribute";
    SystemObjectResources["PopulationAttributeValue"] = "population_attribute_value";
    SystemObjectResources["Association"] = "association";
    SystemObjectResources["Team"] = "team";
    SystemObjectResources["Dashboard"] = "dashboard";
})(SystemObjectResources = exports.SystemObjectResources || (exports.SystemObjectResources = {}));
/**
 * Enum for valid calibrated relationship type.
 * @export
 * @enum {string}
 */
var ValidCalibratedRelationshipType;
(function (ValidCalibratedRelationshipType) {
    ValidCalibratedRelationshipType["Invalid"] = "invalid";
    ValidCalibratedRelationshipType["SiPearsonR"] = "si_pearson_r";
    ValidCalibratedRelationshipType["SiKendallTau"] = "si_kendall_tau";
    ValidCalibratedRelationshipType["SiCramerV"] = "si_cramer_v";
    ValidCalibratedRelationshipType["MlPermutationF1"] = "ml_permutation_f1";
    ValidCalibratedRelationshipType["MlPermutationR2"] = "ml_permutation_r2";
    ValidCalibratedRelationshipType["SiEffectSizeR"] = "si_effect_size_r";
    ValidCalibratedRelationshipType["SiEffectSizeD"] = "si_effect_size_d";
})(ValidCalibratedRelationshipType = exports.ValidCalibratedRelationshipType || (exports.ValidCalibratedRelationshipType = {}));
/**
 * Enum for valid dataset license.
 * @export
 * @enum {string}
 */
var ValidDatasetLicenseEnum;
(function (ValidDatasetLicenseEnum) {
    ValidDatasetLicenseEnum["PublicDomain"] = "public_domain";
    ValidDatasetLicenseEnum["CreativeCommonsPublicDomainDedication"] = "creative_commons_public_domain_dedication";
    ValidDatasetLicenseEnum["OpendataCommonsPublicDomainDedicationAndLicense"] = "opendata_commons_public_domain_dedication_and_license";
    ValidDatasetLicenseEnum["CreativeCommonsAttributionInternational"] = "creative_commons_attribution_international";
    ValidDatasetLicenseEnum["CommunityDataLicenseAgreementVersion1Permissive"] = "community_data_license_agreement_version_1_permissive";
    ValidDatasetLicenseEnum["OpenDataCommonsAttributionLicense"] = "open_data_commons_attribution_license";
    ValidDatasetLicenseEnum["CreativeCommonsAttributionShareAlike4International"] = "creative_commons_attribution_share_alike_4_international";
    ValidDatasetLicenseEnum["CommunityDataLicenseAgreementVersion1Sharing"] = "community_data_license_agreement_version_1_sharing";
    ValidDatasetLicenseEnum["OpenDataCommonsOpenDatabaseLicense"] = "open_data_commons_open_database_license";
    ValidDatasetLicenseEnum["CreativeCommonsAttributionNoncommercial4International"] = "creative_commons_attribution_noncommercial_4_international";
    ValidDatasetLicenseEnum["CreativeCommonsAttributionNoderivatives4International"] = "creative_commons_attribution_noderivatives_4_international";
    ValidDatasetLicenseEnum["CreativeCommonsAttributionNoncommercialShareAlike4International"] = "creative_commons_attribution_noncommercial_share_alike_4_international";
    ValidDatasetLicenseEnum["CreativeCommonsAttributionNoncommercialNoderivatives4International"] = "creative_commons_attribution_noncommercial_noderivatives_4_international";
    ValidDatasetLicenseEnum["Other"] = "other";
})(ValidDatasetLicenseEnum = exports.ValidDatasetLicenseEnum || (exports.ValidDatasetLicenseEnum = {}));
/**
 * Valid feature contribution method enums.
 * @export
 * @enum {string}
 */
var ValidFeatureContributionMethod;
(function (ValidFeatureContributionMethod) {
    ValidFeatureContributionMethod["Gini"] = "gini";
    ValidFeatureContributionMethod["Gain"] = "gain";
    ValidFeatureContributionMethod["Shap"] = "shap";
    ValidFeatureContributionMethod["Coefficient"] = "coefficient";
    ValidFeatureContributionMethod["Lime"] = "lime";
    ValidFeatureContributionMethod["Permutation"] = "permutation";
    ValidFeatureContributionMethod["PearsonR"] = "pearson_r";
    ValidFeatureContributionMethod["KendallTau"] = "kendall_tau";
    ValidFeatureContributionMethod["CramerV"] = "cramer_v";
    ValidFeatureContributionMethod["KruskalWallisHTest"] = "kruskal_wallis_h_test";
    ValidFeatureContributionMethod["ControlVariable"] = "control_variable";
    ValidFeatureContributionMethod["ProductMomentR"] = "product_moment_r";
    ValidFeatureContributionMethod["FrequencyScore"] = "frequency_score";
    ValidFeatureContributionMethod["OddsRatio"] = "odds_ratio";
    ValidFeatureContributionMethod["RelativeRiskRatio"] = "relative_risk_ratio";
    ValidFeatureContributionMethod["HazardRatio"] = "hazard_ratio";
    ValidFeatureContributionMethod["MeanGainUnstandardized"] = "mean_gain_unstandardized";
    ValidFeatureContributionMethod["MeanGainStandardized"] = "mean_gain_standardized";
    ValidFeatureContributionMethod["MeanDifferenceUnstandardized"] = "mean_difference_unstandardized";
    ValidFeatureContributionMethod["MeanDifferenceStandardized"] = "mean_difference_standardized";
    ValidFeatureContributionMethod["ProportionDifference"] = "proportion_difference";
    ValidFeatureContributionMethod["LogOddsRatio"] = "log_odds_ratio";
    ValidFeatureContributionMethod["PearsonChiSquaredTest"] = "pearson_chi_squared_test";
    ValidFeatureContributionMethod["Forecast"] = "forecast";
})(ValidFeatureContributionMethod = exports.ValidFeatureContributionMethod || (exports.ValidFeatureContributionMethod = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var ValidModelScoreEnum;
(function (ValidModelScoreEnum) {
    ValidModelScoreEnum["AccuracyScore"] = "accuracy_score";
    ValidModelScoreEnum["AveragePrecisionScore"] = "average_precision_score";
    ValidModelScoreEnum["BalancedAccuracyScore"] = "balanced_accuracy_score";
    ValidModelScoreEnum["BrierScoreLoss"] = "brier_score_loss";
    ValidModelScoreEnum["CohenKappaScore"] = "cohen_kappa_score";
    ValidModelScoreEnum["F1Score"] = "f1_score";
    ValidModelScoreEnum["HammingLoss"] = "hamming_loss";
    ValidModelScoreEnum["HingeLoss"] = "hinge_loss";
    ValidModelScoreEnum["JaccardScore"] = "jaccard_score";
    ValidModelScoreEnum["LogLoss"] = "log_loss";
    ValidModelScoreEnum["MatthewsCorrCoef"] = "matthews_corr_coef";
    ValidModelScoreEnum["PrecisionScore"] = "precision_score";
    ValidModelScoreEnum["RecallScore"] = "recall_score";
    ValidModelScoreEnum["RocAucScore"] = "roc_auc_score";
    ValidModelScoreEnum["ZeroOneLoss"] = "zero_one_loss";
    ValidModelScoreEnum["ExplainedVarianceScore"] = "explained_variance_score";
    ValidModelScoreEnum["MaxError"] = "max_error";
    ValidModelScoreEnum["MeanAbsoluteError"] = "mean_absolute_error";
    ValidModelScoreEnum["MeanAbsolutePercentageError"] = "mean_absolute_percentage_error";
    ValidModelScoreEnum["MeanSquaredError"] = "mean_squared_error";
    ValidModelScoreEnum["MeanSquaredLogError"] = "mean_squared_log_error";
    ValidModelScoreEnum["MedianAbsoluteError"] = "median_absolute_error";
    ValidModelScoreEnum["R2Score"] = "r2_score";
    ValidModelScoreEnum["CoverageError"] = "coverage_error";
    ValidModelScoreEnum["LabelRankingAveragePrecisionScore"] = "label_ranking_average_precision_score";
    ValidModelScoreEnum["LabelRankingLoss"] = "label_ranking_loss";
    ValidModelScoreEnum["AdjustedR2Score"] = "adjusted_r2_score";
    ValidModelScoreEnum["MutualInformationScore"] = "mutual_information_score";
    ValidModelScoreEnum["AdjMutualInformationScore"] = "adj_mutual_information_score";
    ValidModelScoreEnum["NormalizedMutualInformationScore"] = "normalized_mutual_information_score";
    ValidModelScoreEnum["AdjRandScore"] = "adj_rand_score";
    ValidModelScoreEnum["CompletenessScore"] = "completeness_score";
    ValidModelScoreEnum["FowlkesMallowsScore"] = "fowlkes_mallows_score";
    ValidModelScoreEnum["HomogeneityScore"] = "homogeneity_score";
    ValidModelScoreEnum["VMeasureScore"] = "v_measure_score";
    ValidModelScoreEnum["NegMeanAbsoluteError"] = "neg_mean_absolute_error";
    ValidModelScoreEnum["NegMeanSquaredError"] = "neg_mean_squared_error";
    ValidModelScoreEnum["RootMeanSquaredError"] = "root_mean_squared_error";
    ValidModelScoreEnum["NegRootMeanSquaredError"] = "neg_root_mean_squared_error";
    ValidModelScoreEnum["RootMeanSquaredLogError"] = "root_mean_squared_log_error";
    ValidModelScoreEnum["NegMedianAbsoluteError"] = "neg_median_absolute_error";
    ValidModelScoreEnum["CosineProximity"] = "cosine_proximity";
    ValidModelScoreEnum["KullbackLeiblerDivergence"] = "kullback_leibler_divergence";
    ValidModelScoreEnum["PoissonMetric"] = "poisson_metric";
    ValidModelScoreEnum["MulticlassLogLoss"] = "multiclass_log_loss";
    ValidModelScoreEnum["NormalizedDiscountedCumulativeGain"] = "normalized_discounted_cumulative_gain";
    ValidModelScoreEnum["GammaDeviance"] = "gamma_deviance";
    ValidModelScoreEnum["HuberMetric"] = "huber_metric";
    ValidModelScoreEnum["FBetaScore"] = "f_beta_score";
    ValidModelScoreEnum["EuclideanDistance"] = "euclidean_distance";
    ValidModelScoreEnum["HaversineDistance"] = "haversine_distance";
    ValidModelScoreEnum["MeanSquaredPredictioneRror"] = "mean_squared_predictione_rror";
    ValidModelScoreEnum["PseudoR2Mcfadden"] = "pseudo_r2_mcfadden";
    ValidModelScoreEnum["AdjustedPseudoR2Mcfadden"] = "adjusted_pseudo_r2_mcfadden";
    ValidModelScoreEnum["PseudoR2Nagelkerke"] = "pseudo_r2_nagelkerke";
    ValidModelScoreEnum["PseudoR2CoxSnell"] = "pseudo_r2_cox_snell";
    ValidModelScoreEnum["PseudoR2Effron"] = "pseudo_r2_effron";
    ValidModelScoreEnum["Bic"] = "bic";
    ValidModelScoreEnum["Aic"] = "aic";
    ValidModelScoreEnum["CorrelationActualForecast"] = "correlation_actual_forecast";
    ValidModelScoreEnum["ForecastVsActual"] = "forecast_vs_actual";
    ValidModelScoreEnum["MeanSquaredPercentageError"] = "mean_squared_percentage_error";
    ValidModelScoreEnum["ConfusionMatrix"] = "confusion_matrix";
    ValidModelScoreEnum["MulticlassConfusionMatrix"] = "multiclass_confusion_matrix";
    ValidModelScoreEnum["RocCurve"] = "roc_curve";
})(ValidModelScoreEnum = exports.ValidModelScoreEnum || (exports.ValidModelScoreEnum = {}));
/**
 * Enum for valid relationship direction.
 * @export
 * @enum {string}
 */
var ValidRelationshipDirectionEnum;
(function (ValidRelationshipDirectionEnum) {
    ValidRelationshipDirectionEnum["Positive"] = "positive";
    ValidRelationshipDirectionEnum["Negative"] = "negative";
    ValidRelationshipDirectionEnum["Zero"] = "zero";
    ValidRelationshipDirectionEnum["Invalid"] = "invalid";
})(ValidRelationshipDirectionEnum = exports.ValidRelationshipDirectionEnum || (exports.ValidRelationshipDirectionEnum = {}));
/**
 * Enum for valid relationship strength.
 * @export
 * @enum {string}
 */
var ValidRelationshipStrengthEnum;
(function (ValidRelationshipStrengthEnum) {
    ValidRelationshipStrengthEnum["Invalid"] = "invalid";
    ValidRelationshipStrengthEnum["VeryWeak"] = "very_weak";
    ValidRelationshipStrengthEnum["Weak"] = "weak";
    ValidRelationshipStrengthEnum["Moderate"] = "moderate";
    ValidRelationshipStrengthEnum["Strong"] = "strong";
    ValidRelationshipStrengthEnum["VeryStrong"] = "very_strong";
})(ValidRelationshipStrengthEnum = exports.ValidRelationshipStrengthEnum || (exports.ValidRelationshipStrengthEnum = {}));
/**
 * Enum for valid reproducibility level.
 * @export
 * @enum {string}
 */
var ValidReproducibilityEnum;
(function (ValidReproducibilityEnum) {
    ValidReproducibilityEnum["Invalid"] = "invalid";
    ValidReproducibilityEnum["Low"] = "low";
    ValidReproducibilityEnum["Medium"] = "medium";
    ValidReproducibilityEnum["High"] = "high";
})(ValidReproducibilityEnum = exports.ValidReproducibilityEnum || (exports.ValidReproducibilityEnum = {}));
/**
 * Valid significance level enums.
 * @export
 * @enum {string}
 */
var ValidSignificanceLevel;
(function (ValidSignificanceLevel) {
    ValidSignificanceLevel["Five"] = "ninety_five";
    ValidSignificanceLevel["Nine"] = "ninety_nine";
    ValidSignificanceLevel["NinePointNine"] = "ninety_nine_point_nine";
})(ValidSignificanceLevel = exports.ValidSignificanceLevel || (exports.ValidSignificanceLevel = {}));
/**
 * Valid statistical test type enums.
 * @export
 * @enum {string}
 */
var ValidStatisticalTestType;
(function (ValidStatisticalTestType) {
    ValidStatisticalTestType["Ttest"] = "ttest";
    ValidStatisticalTestType["Ztest"] = "ztest";
    ValidStatisticalTestType["Anova"] = "anova";
    ValidStatisticalTestType["Chisquared"] = "chisquared";
    ValidStatisticalTestType["Htest"] = "htest";
})(ValidStatisticalTestType = exports.ValidStatisticalTestType || (exports.ValidStatisticalTestType = {}));
/**
 * Valid transformation type enums.
 * @export
 * @enum {string}
 */
var ValidTransformationTypeEnum;
(function (ValidTransformationTypeEnum) {
    ValidTransformationTypeEnum["NoTransformation"] = "no_transformation";
    ValidTransformationTypeEnum["Kfold"] = "kfold";
    ValidTransformationTypeEnum["LeavePOut"] = "leave_p_out";
    ValidTransformationTypeEnum["Holdout"] = "holdout";
    ValidTransformationTypeEnum["Independent"] = "independent";
})(ValidTransformationTypeEnum = exports.ValidTransformationTypeEnum || (exports.ValidTransformationTypeEnum = {}));
/**
 * Valid value source enum.
 * @export
 * @enum {string}
 */
var ValidValueSource;
(function (ValidValueSource) {
    ValidValueSource["LocalEvaluator"] = "local_evaluator";
    ValidValueSource["RemoteEvaluator"] = "remote_evaluator";
    ValidValueSource["User"] = "user";
})(ValidValueSource = exports.ValidValueSource || (exports.ValidValueSource = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var ValueSourceEnum;
(function (ValueSourceEnum) {
    ValueSourceEnum["LocalEvaluator"] = "local_evaluator";
    ValueSourceEnum["RemoteEvaluator"] = "remote_evaluator";
    ValueSourceEnum["User"] = "user";
    ValueSourceEnum["Invalid"] = "invalid";
})(ValueSourceEnum = exports.ValueSourceEnum || (exports.ValueSourceEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var VariableSortEnum;
(function (VariableSortEnum) {
    VariableSortEnum["ModelCount"] = "model_count";
    VariableSortEnum["CreatedAt"] = "created_at";
    VariableSortEnum["LastUpdatedAt"] = "last_updated_at";
    VariableSortEnum["Name"] = "name";
})(VariableSortEnum = exports.VariableSortEnum || (exports.VariableSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var VariableToFeatureSystemOfSortEnum;
(function (VariableToFeatureSystemOfSortEnum) {
    VariableToFeatureSystemOfSortEnum["PathCount"] = "path_count";
    VariableToFeatureSystemOfSortEnum["CreatedAt"] = "created_at";
    VariableToFeatureSystemOfSortEnum["ModelCount"] = "model_count";
})(VariableToFeatureSystemOfSortEnum = exports.VariableToFeatureSystemOfSortEnum || (exports.VariableToFeatureSystemOfSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var VariableToVariableSystemOfSortEnum;
(function (VariableToVariableSystemOfSortEnum) {
    VariableToVariableSystemOfSortEnum["PathCount"] = "path_count";
    VariableToVariableSystemOfSortEnum["CreatedAt"] = "created_at";
    VariableToVariableSystemOfSortEnum["ModelCount"] = "model_count";
})(VariableToVariableSystemOfSortEnum = exports.VariableToVariableSystemOfSortEnum || (exports.VariableToVariableSystemOfSortEnum = {}));
/**
 * Enum for variable types.
 * @export
 * @enum {string}
 */
var VariableTypeEnum;
(function (VariableTypeEnum) {
    VariableTypeEnum["Unknown"] = "unknown";
    VariableTypeEnum["CategoricalNominal"] = "categorical_nominal";
    VariableTypeEnum["CategoricalOrdinal"] = "categorical_ordinal";
    VariableTypeEnum["CategoricalBinary"] = "categorical_binary";
    VariableTypeEnum["NumericalDiscrete"] = "numerical_discrete";
    VariableTypeEnum["NumericalContinuous"] = "numerical_continuous";
})(VariableTypeEnum = exports.VariableTypeEnum || (exports.VariableTypeEnum = {}));
/**
 * AssociationsApi - axios parameter creator
 * @export
 */
exports.AssociationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost: (datasetId, associationInArrayAssociationIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling createAssociationsV1DatasetsDatasetIdAssociationsPost.');
            }
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            if (associationInArrayAssociationIn === null || associationInArrayAssociationIn === undefined) {
                throw new base_1.RequiredError('associationInArrayAssociationIn', 'Required parameter associationInArrayAssociationIn was null or undefined when calling createAssociationsV1DatasetsDatasetIdAssociationsPost.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof associationInArrayAssociationIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(associationInArrayAssociationIn !== undefined ? associationInArrayAssociationIn : {}) : (associationInArrayAssociationIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost: (modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling createAssociationsV1ModelsModelIdAssociationsPost.');
            }
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            if (associationInArrayAssociationIn === null || associationInArrayAssociationIn === undefined) {
                throw new base_1.RequiredError('associationInArrayAssociationIn', 'Required parameter associationInArrayAssociationIn was null or undefined when calling createAssociationsV1ModelsModelIdAssociationsPost.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof associationInArrayAssociationIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(associationInArrayAssociationIn !== undefined ? associationInArrayAssociationIn : {}) : (associationInArrayAssociationIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost: (teamId, datasetId, associationInArrayAssociationIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost.');
            }
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            if (associationInArrayAssociationIn === null || associationInArrayAssociationIn === undefined) {
                throw new base_1.RequiredError('associationInArrayAssociationIn', 'Required parameter associationInArrayAssociationIn was null or undefined when calling createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof associationInArrayAssociationIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(associationInArrayAssociationIn !== undefined ? associationInArrayAssociationIn : {}) : (associationInArrayAssociationIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost: (teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost.');
            }
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            if (associationInArrayAssociationIn === null || associationInArrayAssociationIn === undefined) {
                throw new base_1.RequiredError('associationInArrayAssociationIn', 'Required parameter associationInArrayAssociationIn was null or undefined when calling createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof associationInArrayAssociationIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(associationInArrayAssociationIn !== undefined ? associationInArrayAssociationIn : {}) : (associationInArrayAssociationIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete: (modelId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete.');
            }
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete.');
            }
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete: (teamId, modelId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete.');
            }
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete: (modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling deleteAssociationsV1ModelsModelIdAssociationsDelete.');
            }
            // verify required parameter 'bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete' is not null or undefined
            if (bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete === null || bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete === undefined) {
                throw new base_1.RequiredError('bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete', 'Required parameter bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete was null or undefined when calling deleteAssociationsV1ModelsModelIdAssociationsDelete.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete !== undefined ? bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete : {}) : (bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: (teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete.');
            }
            // verify required parameter 'bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete' is not null or undefined
            if (bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete === null || bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete === undefined) {
                throw new base_1.RequiredError('bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'Required parameter bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete was null or undefined when calling deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete !== undefined ? bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete : {}) : (bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: (datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete.');
            }
            // verify required parameter 'bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete' is not null or undefined
            if (bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete === null || bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete === undefined) {
                throw new base_1.RequiredError('bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', 'Required parameter bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete was null or undefined when calling deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete !== undefined ? bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete : {}) : (bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: (teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete.');
            }
            // verify required parameter 'bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete' is not null or undefined
            if (bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete === null || bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete === undefined) {
                throw new base_1.RequiredError('bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'Required parameter bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete was null or undefined when calling deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete !== undefined ? bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete : {}) : (bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet: (associationId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling getAssociationV1ModelsModelIdAssociationsAssociationIdGet.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling getAssociationV1ModelsModelIdAssociationsAssociationIdGet.');
            }
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet: (teamId, associationId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet.');
            }
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1AssociationsAssociationIdDirectionGet: (associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling getRelationshipDirectionV1AssociationsAssociationIdDirectionGet.');
            }
            const localVarPath = `/v1/associations/{association_id}/direction`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet: (teamId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet.');
            }
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/direction`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet: (associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet.');
            }
            const localVarPath = `/v1/associations/{association_id}/reproducibility`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet: (teamId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet.');
            }
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/reproducibility`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1AssociationsAssociationIdStrengthGet: (associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling getRelationshipStrengthV1AssociationsAssociationIdStrengthGet.');
            }
            const localVarPath = `/v1/associations/{association_id}/strength`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet: (teamId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet.');
            }
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/strength`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/studies/{study_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet: (studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet.');
            }
            const localVarPath = `/v1/user/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1AssociationsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/associations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            if (conceptRelationship !== undefined) {
                localVarQueryParameter['concept_relationship'] = conceptRelationship;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet: (datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling listAssociationsV1DatasetsDatasetIdAssociationsGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet: (modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling listAssociationsV1ModelsModelIdAssociationsGet.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet: (studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling listAssociationsV1StudiesStudyIdAssociationsGet.');
            }
            const localVarPath = `/v1/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdAssociationsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAssociationsV1TeamsTeamIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            if (conceptRelationship !== undefined) {
                localVarQueryParameter['concept_relationship'] = conceptRelationship;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet: (teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet: (teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet: (variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listAssociationsV1VariablesVariableIdAssociationsGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}/associations`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch: (modelId, bulkPatchAssociationOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling patchAssociationsV1ModelsModelIdAssociationsPatch.');
            }
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            if (bulkPatchAssociationOp === null || bulkPatchAssociationOp === undefined) {
                throw new base_1.RequiredError('bulkPatchAssociationOp', 'Required parameter bulkPatchAssociationOp was null or undefined when calling patchAssociationsV1ModelsModelIdAssociationsPatch.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bulkPatchAssociationOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bulkPatchAssociationOp !== undefined ? bulkPatchAssociationOp : {}) : (bulkPatchAssociationOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch: (teamId, modelId, bulkPatchAssociationOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch.');
            }
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            if (bulkPatchAssociationOp === null || bulkPatchAssociationOp === undefined) {
                throw new base_1.RequiredError('bulkPatchAssociationOp', 'Required parameter bulkPatchAssociationOp was null or undefined when calling patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bulkPatchAssociationOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bulkPatchAssociationOp !== undefined ? bulkPatchAssociationOp : {}) : (bulkPatchAssociationOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AssociationsApi - functional programming interface
 * @export
 */
exports.AssociationsApiFp = function (configuration) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1AssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).listAssociationsV1AssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AssociationsApiAxiosParamCreator(configuration).patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * AssociationsApi - factory interface
 * @export
 */
exports.AssociationsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options) {
            return exports.AssociationsApiFp(configuration).createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options) {
            return exports.AssociationsApiFp(configuration).createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options) {
            return exports.AssociationsApiFp(configuration).createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options) {
            return exports.AssociationsApiFp(configuration).createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options) {
            return exports.AssociationsApiFp(configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options) {
            return exports.AssociationsApiFp(configuration).deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options) {
            return exports.AssociationsApiFp(configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options) {
            return exports.AssociationsApiFp(configuration).deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options) {
            return exports.AssociationsApiFp(configuration).deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options) {
            return exports.AssociationsApiFp(configuration).deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options) {
            return exports.AssociationsApiFp(configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options) {
            return exports.AssociationsApiFp(configuration).getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId, options) {
            return exports.AssociationsApiFp(configuration).getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options) {
            return exports.AssociationsApiFp(configuration).getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId, options) {
            return exports.AssociationsApiFp(configuration).getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options) {
            return exports.AssociationsApiFp(configuration).getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId, options) {
            return exports.AssociationsApiFp(configuration).getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options) {
            return exports.AssociationsApiFp(configuration).getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.AssociationsApiFp(configuration).listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.AssociationsApiFp(configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1AssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options) {
            return exports.AssociationsApiFp(configuration).listAssociationsV1AssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.AssociationsApiFp(configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.AssociationsApiFp(configuration).listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.AssociationsApiFp(configuration).listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options) {
            return exports.AssociationsApiFp(configuration).listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.AssociationsApiFp(configuration).listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.AssociationsApiFp(configuration).listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.AssociationsApiFp(configuration).listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.AssociationsApiFp(configuration).listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.AssociationsApiFp(configuration).listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options) {
            return exports.AssociationsApiFp(configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options) {
            return exports.AssociationsApiFp(configuration).patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AssociationsApi - object-oriented interface
 * @export
 * @class AssociationsApi
 * @extends {BaseAPI}
 */
class AssociationsApi extends base_1.BaseAPI {
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {AssociationsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {AssociationsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    createAssociationsV1ModelsModelIdAssociationsPost(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).createAssociationsV1ModelsModelIdAssociationsPost(requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {AssociationsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(requestParameters.teamId, requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {AssociationsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(requestParameters.teamId, requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {AssociationsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {AssociationsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(requestParameters.teamId, requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {AssociationsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {AssociationsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(requestParameters.teamId, requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {AssociationsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {AssociationsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Get Association
     * @param {AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Get Association
     * @param {AssociationsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(requestParameters.teamId, requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get direction of this association.
     * @summary Get Relationship Direction
     * @param {AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get direction of this association.
     * @summary Get Relationship Direction
     * @param {AssociationsApiGetRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(requestParameters.teamId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get reproducibility of this association.
     * @summary Get Relationship Reproducibility
     * @param {AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get reproducibility of this association.
     * @summary Get Relationship Reproducibility
     * @param {AssociationsApiGetRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(requestParameters.teamId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get strength of this association.
     * @summary Get Relationship Strength
     * @param {AssociationsApiGetRelationshipStrengthV1AssociationsAssociationIdStrengthGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get strength of this association.
     * @summary Get Relationship Strength
     * @param {AssociationsApiGetRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(requestParameters.teamId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Associations.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1AssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1AssociationsGet(requestParameters = {}, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1AssociationsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.conceptRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in model.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1ModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1ModelsModelIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1ModelsModelIdAssociationsGet(requestParameters.modelId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Associations.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1TeamsTeamIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamIdAssociationsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.conceptRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in model.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(requestParameters.teamId, requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(requestParameters.teamId, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters.variableId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {AssociationsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {AssociationsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(requestParameters.teamId, requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AssociationsApi = AssociationsApi;
/**
 * AuthorsApi - axios parameter creator
 * @export
 */
exports.AuthorsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut: (studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new base_1.RequiredError('authorId', 'Required parameter authorId was null or undefined when calling addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut.');
            }
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut: (teamId, studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new base_1.RequiredError('authorId', 'Required parameter authorId was null or undefined when calling addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an Author.
         * @summary Create Author
         * @param {AuthorIn} authorIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1AuthorsPost: (authorIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'authorIn' is not null or undefined
            if (authorIn === null || authorIn === undefined) {
                throw new base_1.RequiredError('authorIn', 'Required parameter authorIn was null or undefined when calling createAuthorV1AuthorsPost.');
            }
            const localVarPath = `/v1/authors`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof authorIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(authorIn !== undefined ? authorIn : {}) : (authorIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamId
         * @param {AuthorIn} authorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamIdAuthorsPost: (teamId, authorIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createAuthorV1TeamsTeamIdAuthorsPost.');
            }
            // verify required parameter 'authorIn' is not null or undefined
            if (authorIn === null || authorIn === undefined) {
                throw new base_1.RequiredError('authorIn', 'Required parameter authorIn was null or undefined when calling createAuthorV1TeamsTeamIdAuthorsPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/authors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof authorIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(authorIn !== undefined ? authorIn : {}) : (authorIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1AuthorsAuthorIdDelete: (authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new base_1.RequiredError('authorId', 'Required parameter authorId was null or undefined when calling deleteAuthorV1AuthorsAuthorIdDelete.');
            }
            const localVarPath = `/v1/authors/{author_id}`
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete: (teamId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new base_1.RequiredError('authorId', 'Required parameter authorId was null or undefined when calling deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1AuthorsAuthorIdGet: (authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new base_1.RequiredError('authorId', 'Required parameter authorId was null or undefined when calling getAuthorV1AuthorsAuthorIdGet.');
            }
            const localVarPath = `/v1/authors/{author_id}`
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamIdAuthorsAuthorIdGet: (teamId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getAuthorV1TeamsTeamIdAuthorsAuthorIdGet.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new base_1.RequiredError('authorId', 'Required parameter authorId was null or undefined when calling getAuthorV1TeamsTeamIdAuthorsAuthorIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1AuthorsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/authors`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdAuthorsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthorsV1TeamsTeamIdAuthorsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/authors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete: (studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new base_1.RequiredError('authorId', 'Required parameter authorId was null or undefined when calling removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete.');
            }
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete: (teamId, studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new base_1.RequiredError('authorId', 'Required parameter authorId was null or undefined when calling removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AuthorsApi - functional programming interface
 * @export
 */
exports.AuthorsApiFp = function (configuration) {
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AuthorsApiAxiosParamCreator(configuration).addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AuthorsApiAxiosParamCreator(configuration).addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {AuthorIn} authorIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1AuthorsPost(authorIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AuthorsApiAxiosParamCreator(configuration).createAuthorV1AuthorsPost(authorIn, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamId
         * @param {AuthorIn} authorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AuthorsApiAxiosParamCreator(configuration).createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1AuthorsAuthorIdDelete(authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AuthorsApiAxiosParamCreator(configuration).deleteAuthorV1AuthorsAuthorIdDelete(authorId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AuthorsApiAxiosParamCreator(configuration).deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1AuthorsAuthorIdGet(authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AuthorsApiAxiosParamCreator(configuration).getAuthorV1AuthorsAuthorIdGet(authorId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AuthorsApiAxiosParamCreator(configuration).getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1AuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AuthorsApiAxiosParamCreator(configuration).listAuthorsV1AuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AuthorsApiAxiosParamCreator(configuration).listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AuthorsApiAxiosParamCreator(configuration).removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.AuthorsApiAxiosParamCreator(configuration).removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * AuthorsApi - factory interface
 * @export
 */
exports.AuthorsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options) {
            return exports.AuthorsApiFp(configuration).addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options) {
            return exports.AuthorsApiFp(configuration).addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {AuthorIn} authorIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1AuthorsPost(authorIn, teamId, options) {
            return exports.AuthorsApiFp(configuration).createAuthorV1AuthorsPost(authorIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamId
         * @param {AuthorIn} authorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options) {
            return exports.AuthorsApiFp(configuration).createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1AuthorsAuthorIdDelete(authorId, options) {
            return exports.AuthorsApiFp(configuration).deleteAuthorV1AuthorsAuthorIdDelete(authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options) {
            return exports.AuthorsApiFp(configuration).deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1AuthorsAuthorIdGet(authorId, options) {
            return exports.AuthorsApiFp(configuration).getAuthorV1AuthorsAuthorIdGet(authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options) {
            return exports.AuthorsApiFp(configuration).getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1AuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return exports.AuthorsApiFp(configuration).listAuthorsV1AuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return exports.AuthorsApiFp(configuration).listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options) {
            return exports.AuthorsApiFp(configuration).removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options) {
            return exports.AuthorsApiFp(configuration).removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AuthorsApi - object-oriented interface
 * @export
 * @class AuthorsApi
 * @extends {BaseAPI}
 */
class AuthorsApi extends base_1.BaseAPI {
    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {AuthorsApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {AuthorsApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(requestParameters.teamId, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Author.
     * @summary Create Author
     * @param {AuthorsApiCreateAuthorV1AuthorsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    createAuthorV1AuthorsPost(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).createAuthorV1AuthorsPost(requestParameters.authorIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Author.
     * @summary Create Author
     * @param {AuthorsApiCreateAuthorV1TeamsTeamIdAuthorsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    createAuthorV1TeamsTeamIdAuthorsPost(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).createAuthorV1TeamsTeamIdAuthorsPost(requestParameters.teamId, requestParameters.authorIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Author.
     * @summary Delete Author
     * @param {AuthorsApiDeleteAuthorV1AuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    deleteAuthorV1AuthorsAuthorIdDelete(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).deleteAuthorV1AuthorsAuthorIdDelete(requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Author.
     * @summary Delete Author
     * @param {AuthorsApiDeleteAuthorV1TeamsTeamIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(requestParameters.teamId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Author.
     * @summary Get Author
     * @param {AuthorsApiGetAuthorV1AuthorsAuthorIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    getAuthorV1AuthorsAuthorIdGet(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).getAuthorV1AuthorsAuthorIdGet(requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Author.
     * @summary Get Author
     * @param {AuthorsApiGetAuthorV1TeamsTeamIdAuthorsAuthorIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(requestParameters.teamId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
     * @summary List Authors
     * @param {AuthorsApiListAuthorsV1AuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    listAuthorsV1AuthorsGet(requestParameters = {}, options) {
        return exports.AuthorsApiFp(this.configuration).listAuthorsV1AuthorsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
     * @summary List Authors
     * @param {AuthorsApiListAuthorsV1TeamsTeamIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    listAuthorsV1TeamsTeamIdAuthorsGet(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).listAuthorsV1TeamsTeamIdAuthorsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {AuthorsApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {AuthorsApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(requestParameters.teamId, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AuthorsApi = AuthorsApi;
/**
 * ConceptsApi - axios parameter creator
 * @export
 */
exports.ConceptsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {ConceptIn} conceptIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1ConceptsPost: (conceptIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptIn' is not null or undefined
            if (conceptIn === null || conceptIn === undefined) {
                throw new base_1.RequiredError('conceptIn', 'Required parameter conceptIn was null or undefined when calling createConceptV1ConceptsPost.');
            }
            const localVarPath = `/v1/concepts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof conceptIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(conceptIn !== undefined ? conceptIn : {}) : (conceptIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {string} teamId
         * @param {ConceptIn} conceptIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1TeamsTeamIdConceptsPost: (teamId, conceptIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createConceptV1TeamsTeamIdConceptsPost.');
            }
            // verify required parameter 'conceptIn' is not null or undefined
            if (conceptIn === null || conceptIn === undefined) {
                throw new base_1.RequiredError('conceptIn', 'Required parameter conceptIn was null or undefined when calling createConceptV1TeamsTeamIdConceptsPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof conceptIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(conceptIn !== undefined ? conceptIn : {}) : (conceptIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1ConceptsConceptIdDelete: (conceptId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptId' is not null or undefined
            if (conceptId === null || conceptId === undefined) {
                throw new base_1.RequiredError('conceptId', 'Required parameter conceptId was null or undefined when calling deleteConceptV1ConceptsConceptIdDelete.');
            }
            const localVarPath = `/v1/concepts/{concept_id}`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1TeamsTeamIdConceptsConceptIdDelete: (teamId, conceptId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteConceptV1TeamsTeamIdConceptsConceptIdDelete.');
            }
            // verify required parameter 'conceptId' is not null or undefined
            if (conceptId === null || conceptId === undefined) {
                throw new base_1.RequiredError('conceptId', 'Required parameter conceptId was null or undefined when calling deleteConceptV1TeamsTeamIdConceptsConceptIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1ConceptsConceptIdGet: (conceptId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptId' is not null or undefined
            if (conceptId === null || conceptId === undefined) {
                throw new base_1.RequiredError('conceptId', 'Required parameter conceptId was null or undefined when calling getConceptV1ConceptsConceptIdGet.');
            }
            const localVarPath = `/v1/concepts/{concept_id}`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1TeamsTeamIdConceptsConceptIdGet: (teamId, conceptId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getConceptV1TeamsTeamIdConceptsConceptIdGet.');
            }
            // verify required parameter 'conceptId' is not null or undefined
            if (conceptId === null || conceptId === undefined) {
                throw new base_1.RequiredError('conceptId', 'Required parameter conceptId was null or undefined when calling getConceptV1TeamsTeamIdConceptsConceptIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/concepts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1ConceptsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/concepts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1TeamsTeamIdConceptsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listConceptsV1TeamsTeamIdConceptsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet: (conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptId' is not null or undefined
            if (conceptId === null || conceptId === undefined) {
                throw new base_1.RequiredError('conceptId', 'Required parameter conceptId was null or undefined when calling listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet.');
            }
            const localVarPath = `/v1/concepts/{concept_id}/system/concepts`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} teamId
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet: (teamId, conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet.');
            }
            // verify required parameter 'conceptId' is not null or undefined
            if (conceptId === null || conceptId === undefined) {
                throw new base_1.RequiredError('conceptId', 'Required parameter conceptId was null or undefined when calling listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}/system/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet: (userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserConceptsV1UsersUserIdConceptsGet.');
            }
            const localVarPath = `/v1/users/{user_id}/concepts`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ConceptsApi - functional programming interface
 * @export
 */
exports.ConceptsApiFp = function (configuration) {
    return {
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {ConceptIn} conceptIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1ConceptsPost(conceptIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).createConceptV1ConceptsPost(conceptIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {string} teamId
         * @param {ConceptIn} conceptIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1ConceptsConceptIdDelete(conceptId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).deleteConceptV1ConceptsConceptIdDelete(conceptId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1ConceptsConceptIdGet(conceptId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).getConceptV1ConceptsConceptIdGet(conceptId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).listAuthenticatedUserConceptsV1UserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1ConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).listConceptsV1ConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1TeamsTeamIdConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).listConceptsV1TeamsTeamIdConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} teamId
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet(teamId, conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet(teamId, conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ConceptsApiAxiosParamCreator(configuration).listUserConceptsV1UsersUserIdConceptsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * ConceptsApi - factory interface
 * @export
 */
exports.ConceptsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {ConceptIn} conceptIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1ConceptsPost(conceptIn, options) {
            return exports.ConceptsApiFp(configuration).createConceptV1ConceptsPost(conceptIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {string} teamId
         * @param {ConceptIn} conceptIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, options) {
            return exports.ConceptsApiFp(configuration).createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1ConceptsConceptIdDelete(conceptId, options) {
            return exports.ConceptsApiFp(configuration).deleteConceptV1ConceptsConceptIdDelete(conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options) {
            return exports.ConceptsApiFp(configuration).deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1ConceptsConceptIdGet(conceptId, options) {
            return exports.ConceptsApiFp(configuration).getConceptV1ConceptsConceptIdGet(conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options) {
            return exports.ConceptsApiFp(configuration).getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return exports.ConceptsApiFp(configuration).listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return exports.ConceptsApiFp(configuration).listAuthenticatedUserConceptsV1UserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1ConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return exports.ConceptsApiFp(configuration).listConceptsV1ConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1TeamsTeamIdConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return exports.ConceptsApiFp(configuration).listConceptsV1TeamsTeamIdConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return exports.ConceptsApiFp(configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} teamId
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet(teamId, conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return exports.ConceptsApiFp(configuration).listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet(teamId, conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return exports.ConceptsApiFp(configuration).listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return exports.ConceptsApiFp(configuration).listUserConceptsV1UsersUserIdConceptsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ConceptsApi - object-oriented interface
 * @export
 * @class ConceptsApi
 * @extends {BaseAPI}
 */
class ConceptsApi extends base_1.BaseAPI {
    /**
     * Create a Concept.
     * @summary Create Concept
     * @param {ConceptsApiCreateConceptV1ConceptsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    createConceptV1ConceptsPost(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).createConceptV1ConceptsPost(requestParameters.conceptIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Concept.
     * @summary Create Concept
     * @param {ConceptsApiCreateConceptV1TeamsTeamIdConceptsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    createConceptV1TeamsTeamIdConceptsPost(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).createConceptV1TeamsTeamIdConceptsPost(requestParameters.teamId, requestParameters.conceptIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
     * @summary Delete Concept
     * @param {ConceptsApiDeleteConceptV1ConceptsConceptIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    deleteConceptV1ConceptsConceptIdDelete(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).deleteConceptV1ConceptsConceptIdDelete(requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
     * @summary Delete Concept
     * @param {ConceptsApiDeleteConceptV1TeamsTeamIdConceptsConceptIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(requestParameters.teamId, requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Concept.
     * @summary Get Concept
     * @param {ConceptsApiGetConceptV1ConceptsConceptIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    getConceptV1ConceptsConceptIdGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).getConceptV1ConceptsConceptIdGet(requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Concept.
     * @summary Get Concept
     * @param {ConceptsApiGetConceptV1TeamsTeamIdConceptsConceptIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    getConceptV1TeamsTeamIdConceptsConceptIdGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).getConceptV1TeamsTeamIdConceptsConceptIdGet(requestParameters.teamId, requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {ConceptsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters = {}, options) {
        return exports.ConceptsApiFp(this.configuration).listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Concepts.
     * @summary List Concepts
     * @param {ConceptsApiListConceptsV1ConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listConceptsV1ConceptsGet(requestParameters = {}, options) {
        return exports.ConceptsApiFp(this.configuration).listConceptsV1ConceptsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Concepts.
     * @summary List Concepts
     * @param {ConceptsApiListConceptsV1TeamsTeamIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listConceptsV1TeamsTeamIdConceptsGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).listConceptsV1TeamsTeamIdConceptsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the concepts in the requested concept\'s system.
     * @summary List System Of Concepts
     * @param {ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(requestParameters.conceptId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the concepts in the requested concept\'s system.
     * @summary List System Of Concepts
     * @param {ConceptsApiListSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet(requestParameters.teamId, requestParameters.conceptId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {ConceptsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {ConceptsApiListUserConceptsV1UsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listUserConceptsV1UsersUserIdConceptsGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).listUserConceptsV1UsersUserIdConceptsGet(requestParameters.userId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ConceptsApi = ConceptsApi;
/**
 * DashboardsApi - axios parameter creator
 * @export
 */
exports.DashboardsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut: (dashboardId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new base_1.RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut.');
            }
            const localVarPath = `/v1/dashboards/{dashboard_id}/features/{feature_id}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut: (teamId, dashboardId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new base_1.RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {DashboardIn} dashboardIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1DashboardsPost: (dashboardIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'dashboardIn' is not null or undefined
            if (dashboardIn === null || dashboardIn === undefined) {
                throw new base_1.RequiredError('dashboardIn', 'Required parameter dashboardIn was null or undefined when calling createDashboardPostV1DashboardsPost.');
            }
            const localVarPath = `/v1/dashboards`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof dashboardIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(dashboardIn !== undefined ? dashboardIn : {}) : (dashboardIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {string} teamId
         * @param {DashboardIn} dashboardIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1TeamsTeamIdDashboardsPost: (teamId, dashboardIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createDashboardPostV1TeamsTeamIdDashboardsPost.');
            }
            // verify required parameter 'dashboardIn' is not null or undefined
            if (dashboardIn === null || dashboardIn === undefined) {
                throw new base_1.RequiredError('dashboardIn', 'Required parameter dashboardIn was null or undefined when calling createDashboardPostV1TeamsTeamIdDashboardsPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/dashboards`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof dashboardIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(dashboardIn !== undefined ? dashboardIn : {}) : (dashboardIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1DashboardsDashboardIdDelete: (dashboardId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new base_1.RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling deleteDashboardV1DashboardsDashboardIdDelete.');
            }
            const localVarPath = `/v1/dashboards/{dashboard_id}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete: (teamId, dashboardId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete.');
            }
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new base_1.RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1DashboardsDashboardIdGet: (dashboardId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new base_1.RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling getDashboardV1DashboardsDashboardIdGet.');
            }
            const localVarPath = `/v1/dashboards/{dashboard_id}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1TeamsTeamIdDashboardsDashboardIdGet: (teamId, dashboardId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getDashboardV1TeamsTeamIdDashboardsDashboardIdGet.');
            }
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new base_1.RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling getDashboardV1TeamsTeamIdDashboardsDashboardIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet: (dashboardId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new base_1.RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet.');
            }
            const localVarPath = `/v1/dashboards/{dashboard_id}/features`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet: (teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet.');
            }
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new base_1.RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1DashboardsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/dashboards`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdDashboardsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listDashboardsV1TeamsTeamIdDashboardsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/dashboards`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * DashboardsApi - functional programming interface
 * @export
 */
exports.DashboardsApiFp = function (configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DashboardsApiAxiosParamCreator(configuration).addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DashboardsApiAxiosParamCreator(configuration).addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {DashboardIn} dashboardIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1DashboardsPost(dashboardIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DashboardsApiAxiosParamCreator(configuration).createDashboardPostV1DashboardsPost(dashboardIn, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {string} teamId
         * @param {DashboardIn} dashboardIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DashboardsApiAxiosParamCreator(configuration).createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1DashboardsDashboardIdDelete(dashboardId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DashboardsApiAxiosParamCreator(configuration).deleteDashboardV1DashboardsDashboardIdDelete(dashboardId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DashboardsApiAxiosParamCreator(configuration).deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1DashboardsDashboardIdGet(dashboardId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DashboardsApiAxiosParamCreator(configuration).getDashboardV1DashboardsDashboardIdGet(dashboardId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DashboardsApiAxiosParamCreator(configuration).getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DashboardsApiAxiosParamCreator(configuration).listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DashboardsApiAxiosParamCreator(configuration).listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1DashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DashboardsApiAxiosParamCreator(configuration).listDashboardsV1DashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DashboardsApiAxiosParamCreator(configuration).listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * DashboardsApi - factory interface
 * @export
 */
exports.DashboardsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, options) {
            return exports.DashboardsApiFp(configuration).addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options) {
            return exports.DashboardsApiFp(configuration).addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {DashboardIn} dashboardIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1DashboardsPost(dashboardIn, teamId, options) {
            return exports.DashboardsApiFp(configuration).createDashboardPostV1DashboardsPost(dashboardIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {string} teamId
         * @param {DashboardIn} dashboardIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options) {
            return exports.DashboardsApiFp(configuration).createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1DashboardsDashboardIdDelete(dashboardId, options) {
            return exports.DashboardsApiFp(configuration).deleteDashboardV1DashboardsDashboardIdDelete(dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options) {
            return exports.DashboardsApiFp(configuration).deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1DashboardsDashboardIdGet(dashboardId, options) {
            return exports.DashboardsApiFp(configuration).getDashboardV1DashboardsDashboardIdGet(dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options) {
            return exports.DashboardsApiFp(configuration).getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.DashboardsApiFp(configuration).listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.DashboardsApiFp(configuration).listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1DashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return exports.DashboardsApiFp(configuration).listDashboardsV1DashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return exports.DashboardsApiFp(configuration).listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * DashboardsApi - object-oriented interface
 * @export
 * @class DashboardsApi
 * @extends {BaseAPI}
 */
class DashboardsApi extends base_1.BaseAPI {
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dashboard Endpoint
     * @param {DashboardsApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(requestParameters.dashboardId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dashboard Endpoint
     * @param {DashboardsApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.dashboardId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Dashboard.
     * @summary Create Dashboard Post
     * @param {DashboardsApiCreateDashboardPostV1DashboardsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    createDashboardPostV1DashboardsPost(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).createDashboardPostV1DashboardsPost(requestParameters.dashboardIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Dashboard.
     * @summary Create Dashboard Post
     * @param {DashboardsApiCreateDashboardPostV1TeamsTeamIdDashboardsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    createDashboardPostV1TeamsTeamIdDashboardsPost(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).createDashboardPostV1TeamsTeamIdDashboardsPost(requestParameters.teamId, requestParameters.dashboardIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dashboard
     * @param {DashboardsApiDeleteDashboardV1DashboardsDashboardIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    deleteDashboardV1DashboardsDashboardIdDelete(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).deleteDashboardV1DashboardsDashboardIdDelete(requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dashboard
     * @param {DashboardsApiDeleteDashboardV1TeamsTeamIdDashboardsDashboardIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(requestParameters.teamId, requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Dashboard.
     * @summary Get Dashboard
     * @param {DashboardsApiGetDashboardV1DashboardsDashboardIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    getDashboardV1DashboardsDashboardIdGet(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).getDashboardV1DashboardsDashboardIdGet(requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Dashboard.
     * @summary Get Dashboard
     * @param {DashboardsApiGetDashboardV1TeamsTeamIdDashboardsDashboardIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(requestParameters.teamId, requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dashboard Features
     * @param {DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(requestParameters.dashboardId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dashboard Features
     * @param {DashboardsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(requestParameters.teamId, requestParameters.dashboardId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Dashboards.  Paginated list of all Dashboards.
     * @summary List Dashboards
     * @param {DashboardsApiListDashboardsV1DashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    listDashboardsV1DashboardsGet(requestParameters = {}, options) {
        return exports.DashboardsApiFp(this.configuration).listDashboardsV1DashboardsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Dashboards.  Paginated list of all Dashboards.
     * @summary List Dashboards
     * @param {DashboardsApiListDashboardsV1TeamsTeamIdDashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    listDashboardsV1TeamsTeamIdDashboardsGet(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).listDashboardsV1TeamsTeamIdDashboardsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DashboardsApi = DashboardsApi;
/**
 * DatasetsApi - axios parameter creator
 * @export
 */
exports.DatasetsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut: (datasetId, featureId, index, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut: (teamId, datasetId, featureId, index, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1DatasetsDatasetIdParentsParentIdPut: (datasetId, parentId, reconcileFeatures, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling addParentDatasetV1DatasetsDatasetIdParentsParentIdPut.');
            }
            // verify required parameter 'parentId' is not null or undefined
            if (parentId === null || parentId === undefined) {
                throw new base_1.RequiredError('parentId', 'Required parameter parentId was null or undefined when calling addParentDatasetV1DatasetsDatasetIdParentsParentIdPut.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (reconcileFeatures !== undefined) {
                localVarQueryParameter['reconcile_features'] = reconcileFeatures;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut: (teamId, datasetId, parentId, reconcileFeatures, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut.');
            }
            // verify required parameter 'parentId' is not null or undefined
            if (parentId === null || parentId === undefined) {
                throw new base_1.RequiredError('parentId', 'Required parameter parentId was null or undefined when calling addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (reconcileFeatures !== undefined) {
                localVarQueryParameter['reconcile_features'] = reconcileFeatures;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: (datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new base_1.RequiredError('populationAttributeValueId', 'Required parameter populationAttributeValueId was null or undefined when calling addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: (teamId, datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new base_1.RequiredError('populationAttributeValueId', 'Required parameter populationAttributeValueId was null or undefined when calling addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost: (datasetId, featureIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost.');
            }
            // verify required parameter 'featureIn' is not null or undefined
            if (featureIn === null || featureIn === undefined) {
                throw new base_1.RequiredError('featureIn', 'Required parameter featureIn was null or undefined when calling createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof featureIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(featureIn !== undefined ? featureIn : {}) : (featureIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost: (teamId, datasetId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost.');
            }
            // verify required parameter 'featureIn' is not null or undefined
            if (featureIn === null || featureIn === undefined) {
                throw new base_1.RequiredError('featureIn', 'Required parameter featureIn was null or undefined when calling createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof featureIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(featureIn !== undefined ? featureIn : {}) : (featureIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost: (datasetId, associationInArrayAssociationIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling createAssociationsV1DatasetsDatasetIdAssociationsPost.');
            }
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            if (associationInArrayAssociationIn === null || associationInArrayAssociationIn === undefined) {
                throw new base_1.RequiredError('associationInArrayAssociationIn', 'Required parameter associationInArrayAssociationIn was null or undefined when calling createAssociationsV1DatasetsDatasetIdAssociationsPost.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof associationInArrayAssociationIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(associationInArrayAssociationIn !== undefined ? associationInArrayAssociationIn : {}) : (associationInArrayAssociationIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost: (teamId, datasetId, associationInArrayAssociationIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost.');
            }
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            if (associationInArrayAssociationIn === null || associationInArrayAssociationIn === undefined) {
                throw new base_1.RequiredError('associationInArrayAssociationIn', 'Required parameter associationInArrayAssociationIn was null or undefined when calling createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof associationInArrayAssociationIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(associationInArrayAssociationIn !== undefined ? associationInArrayAssociationIn : {}) : (associationInArrayAssociationIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {DatasetIn} datasetIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1DatasetsPost: (datasetIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetIn' is not null or undefined
            if (datasetIn === null || datasetIn === undefined) {
                throw new base_1.RequiredError('datasetIn', 'Required parameter datasetIn was null or undefined when calling createDatasetV1DatasetsPost.');
            }
            const localVarPath = `/v1/datasets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof datasetIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(datasetIn !== undefined ? datasetIn : {}) : (datasetIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamIdDatasetsPost: (teamId, datasetIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createDatasetV1TeamsTeamIdDatasetsPost.');
            }
            // verify required parameter 'datasetIn' is not null or undefined
            if (datasetIn === null || datasetIn === undefined) {
                throw new base_1.RequiredError('datasetIn', 'Required parameter datasetIn was null or undefined when calling createDatasetV1TeamsTeamIdDatasetsPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof datasetIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(datasetIn !== undefined ? datasetIn : {}) : (datasetIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1DatasetsDatasetIdDelete: (datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling deleteDatasetV1DatasetsDatasetIdDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete: (teamId, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: (datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete.');
            }
            // verify required parameter 'bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete' is not null or undefined
            if (bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete === null || bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete === undefined) {
                throw new base_1.RequiredError('bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', 'Required parameter bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete was null or undefined when calling deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete !== undefined ? bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete : {}) : (bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: (teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete.');
            }
            // verify required parameter 'bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete' is not null or undefined
            if (bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete === null || bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete === undefined) {
                throw new base_1.RequiredError('bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'Required parameter bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete was null or undefined when calling deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete !== undefined ? bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete : {}) : (bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet: (datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet: (teamId, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1DatasetsDatasetIdGet: (datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling getDatasetV1DatasetsDatasetIdGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamIdDatasetsDatasetIdGet: (teamId, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getDatasetV1TeamsTeamIdDatasetsDatasetIdGet.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling getDatasetV1TeamsTeamIdDatasetsDatasetIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet: (datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling listAssociationsV1DatasetsDatasetIdAssociationsGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/datasets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet: (datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1DatasetsDatasetIdParentsGet: (datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling listDatasetParentsV1DatasetsDatasetIdParentsGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/parents`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/parents`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1DatasetsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/datasets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamIdDatasetsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listDatasetsV1TeamsTeamIdDatasetsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1DatasetsDatasetIdModelsGet: (datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling listModelsUsingDatasetV1DatasetsDatasetIdModelsGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/models`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet: (userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserDatasetsV1UsersUserIdDatasetsGet.');
            }
            const localVarPath = `/v1/users/{user_id}/datasets`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1DatasetsDatasetIdPatch: (datasetId, patchDatasetOpArrayPatchDatasetOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling patchDatasetV1DatasetsDatasetIdPatch.');
            }
            // verify required parameter 'patchDatasetOpArrayPatchDatasetOp' is not null or undefined
            if (patchDatasetOpArrayPatchDatasetOp === null || patchDatasetOpArrayPatchDatasetOp === undefined) {
                throw new base_1.RequiredError('patchDatasetOpArrayPatchDatasetOp', 'Required parameter patchDatasetOpArrayPatchDatasetOp was null or undefined when calling patchDatasetV1DatasetsDatasetIdPatch.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchDatasetOpArrayPatchDatasetOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchDatasetOpArrayPatchDatasetOp !== undefined ? patchDatasetOpArrayPatchDatasetOp : {}) : (patchDatasetOpArrayPatchDatasetOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch: (teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch.');
            }
            // verify required parameter 'patchDatasetOpArrayPatchDatasetOp' is not null or undefined
            if (patchDatasetOpArrayPatchDatasetOp === null || patchDatasetOpArrayPatchDatasetOp === undefined) {
                throw new base_1.RequiredError('patchDatasetOpArrayPatchDatasetOp', 'Required parameter patchDatasetOpArrayPatchDatasetOp was null or undefined when calling patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchDatasetOpArrayPatchDatasetOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchDatasetOpArrayPatchDatasetOp !== undefined ? patchDatasetOpArrayPatchDatasetOp : {}) : (patchDatasetOpArrayPatchDatasetOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete: (datasetId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete: (teamId, datasetId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete: (datasetId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete.');
            }
            // verify required parameter 'tagObjectId' is not null or undefined
            if (tagObjectId === null || tagObjectId === undefined) {
                throw new base_1.RequiredError('tagObjectId', 'Required parameter tagObjectId was null or undefined when calling removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete: (teamId, datasetId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete.');
            }
            // verify required parameter 'tagObjectId' is not null or undefined
            if (tagObjectId === null || tagObjectId === undefined) {
                throw new base_1.RequiredError('tagObjectId', 'Required parameter tagObjectId was null or undefined when calling removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete: (datasetId, parentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete.');
            }
            // verify required parameter 'parentId' is not null or undefined
            if (parentId === null || parentId === undefined) {
                throw new base_1.RequiredError('parentId', 'Required parameter parentId was null or undefined when calling removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete: (teamId, datasetId, parentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete.');
            }
            // verify required parameter 'parentId' is not null or undefined
            if (parentId === null || parentId === undefined) {
                throw new base_1.RequiredError('parentId', 'Required parameter parentId was null or undefined when calling removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: (datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new base_1.RequiredError('populationAttributeValueId', 'Required parameter populationAttributeValueId was null or undefined when calling removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: (teamId, datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new base_1.RequiredError('populationAttributeValueId', 'Required parameter populationAttributeValueId was null or undefined when calling removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1DatasetsDatasetIdPut: (datasetId, datasetIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling replaceDatasetV1DatasetsDatasetIdPut.');
            }
            // verify required parameter 'datasetIn' is not null or undefined
            if (datasetIn === null || datasetIn === undefined) {
                throw new base_1.RequiredError('datasetIn', 'Required parameter datasetIn was null or undefined when calling replaceDatasetV1DatasetsDatasetIdPut.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof datasetIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(datasetIn !== undefined ? datasetIn : {}) : (datasetIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut: (teamId, datasetId, datasetIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut.');
            }
            // verify required parameter 'datasetIn' is not null or undefined
            if (datasetIn === null || datasetIn === undefined) {
                throw new base_1.RequiredError('datasetIn', 'Required parameter datasetIn was null or undefined when calling replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof datasetIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(datasetIn !== undefined ? datasetIn : {}) : (datasetIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut: (datasetId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut.');
            }
            // verify required parameter 'tagObjectId' is not null or undefined
            if (tagObjectId === null || tagObjectId === undefined) {
                throw new base_1.RequiredError('tagObjectId', 'Required parameter tagObjectId was null or undefined when calling tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut: (teamId, datasetId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut.');
            }
            // verify required parameter 'tagObjectId' is not null or undefined
            if (tagObjectId === null || tagObjectId === undefined) {
                throw new base_1.RequiredError('tagObjectId', 'Required parameter tagObjectId was null or undefined when calling tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * DatasetsApi - functional programming interface
 * @export
 */
exports.DatasetsApiFp = function (configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId, parentId, reconcileFeatures, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId, parentId, reconcileFeatures, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {DatasetIn} datasetIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1DatasetsPost(datasetIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).createDatasetV1DatasetsPost(datasetIn, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1DatasetsDatasetIdDelete(datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).deleteDatasetV1DatasetsDatasetIdDelete(datasetId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1DatasetsDatasetIdGet(datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).getDatasetV1DatasetsDatasetIdGet(datasetId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1DatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).listDatasetsV1DatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).listUserDatasetsV1UsersUserIdDatasetsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId, tagObjectId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId, parentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId, parentId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId, tagObjectId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DatasetsApiAxiosParamCreator(configuration).tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * DatasetsApi - factory interface
 * @export
 */
exports.DatasetsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options) {
            return exports.DatasetsApiFp(configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options) {
            return exports.DatasetsApiFp(configuration).addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId, parentId, reconcileFeatures, options) {
            return exports.DatasetsApiFp(configuration).addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId, parentId, reconcileFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options) {
            return exports.DatasetsApiFp(configuration).addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options) {
            return exports.DatasetsApiFp(configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options) {
            return exports.DatasetsApiFp(configuration).addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options) {
            return exports.DatasetsApiFp(configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options) {
            return exports.DatasetsApiFp(configuration).createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options) {
            return exports.DatasetsApiFp(configuration).createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options) {
            return exports.DatasetsApiFp(configuration).createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {DatasetIn} datasetIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1DatasetsPost(datasetIn, teamId, options) {
            return exports.DatasetsApiFp(configuration).createDatasetV1DatasetsPost(datasetIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options) {
            return exports.DatasetsApiFp(configuration).createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1DatasetsDatasetIdDelete(datasetId, options) {
            return exports.DatasetsApiFp(configuration).deleteDatasetV1DatasetsDatasetIdDelete(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options) {
            return exports.DatasetsApiFp(configuration).deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options) {
            return exports.DatasetsApiFp(configuration).deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options) {
            return exports.DatasetsApiFp(configuration).deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options) {
            return exports.DatasetsApiFp(configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options) {
            return exports.DatasetsApiFp(configuration).fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1DatasetsDatasetIdGet(datasetId, options) {
            return exports.DatasetsApiFp(configuration).getDatasetV1DatasetsDatasetIdGet(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options) {
            return exports.DatasetsApiFp(configuration).getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.DatasetsApiFp(configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.DatasetsApiFp(configuration).listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.DatasetsApiFp(configuration).listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.DatasetsApiFp(configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.DatasetsApiFp(configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.DatasetsApiFp(configuration).listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.DatasetsApiFp(configuration).listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.DatasetsApiFp(configuration).listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1DatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return exports.DatasetsApiFp(configuration).listDatasetsV1DatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return exports.DatasetsApiFp(configuration).listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.DatasetsApiFp(configuration).listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.DatasetsApiFp(configuration).listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.DatasetsApiFp(configuration).listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.DatasetsApiFp(configuration).listUserDatasetsV1UsersUserIdDatasetsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, options) {
            return exports.DatasetsApiFp(configuration).patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options) {
            return exports.DatasetsApiFp(configuration).patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options) {
            return exports.DatasetsApiFp(configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options) {
            return exports.DatasetsApiFp(configuration).removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId, tagObjectId, options) {
            return exports.DatasetsApiFp(configuration).removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options) {
            return exports.DatasetsApiFp(configuration).removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId, parentId, options) {
            return exports.DatasetsApiFp(configuration).removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId, parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options) {
            return exports.DatasetsApiFp(configuration).removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options) {
            return exports.DatasetsApiFp(configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options) {
            return exports.DatasetsApiFp(configuration).removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, options) {
            return exports.DatasetsApiFp(configuration).replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options) {
            return exports.DatasetsApiFp(configuration).replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId, tagObjectId, options) {
            return exports.DatasetsApiFp(configuration).tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options) {
            return exports.DatasetsApiFp(configuration).tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * DatasetsApi - object-oriented interface
 * @export
 * @class DatasetsApi
 * @extends {BaseAPI}
 */
class DatasetsApi extends base_1.BaseAPI {
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {DatasetsApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {DatasetsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a parent dataset.
     * @summary Add Parent Dataset
     * @param {DatasetsApiAddParentDatasetV1DatasetsDatasetIdParentsParentIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(requestParameters.datasetId, requestParameters.parentId, requestParameters.reconcileFeatures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a parent dataset.
     * @summary Add Parent Dataset
     * @param {DatasetsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.parentId, requestParameters.reconcileFeatures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {DatasetsApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {DatasetsApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {DatasetsApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters.datasetId, requestParameters.featureIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {DatasetsApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {DatasetsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {DatasetsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(requestParameters.teamId, requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Dataset.
     * @summary Create Dataset
     * @param {DatasetsApiCreateDatasetV1DatasetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createDatasetV1DatasetsPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createDatasetV1DatasetsPost(requestParameters.datasetIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Dataset.
     * @summary Create Dataset
     * @param {DatasetsApiCreateDatasetV1TeamsTeamIdDatasetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createDatasetV1TeamsTeamIdDatasetsPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createDatasetV1TeamsTeamIdDatasetsPost(requestParameters.teamId, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dataset
     * @param {DatasetsApiDeleteDatasetV1DatasetsDatasetIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    deleteDatasetV1DatasetsDatasetIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).deleteDatasetV1DatasetsDatasetIdDelete(requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dataset
     * @param {DatasetsApiDeleteDatasetV1TeamsTeamIdDatasetsDatasetIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {DatasetsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {DatasetsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {DatasetsApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {DatasetsApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a Dataset.
     * @summary Get Dataset
     * @param {DatasetsApiGetDatasetV1DatasetsDatasetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    getDatasetV1DatasetsDatasetIdGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).getDatasetV1DatasetsDatasetIdGet(requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a Dataset.
     * @summary Get Dataset
     * @param {DatasetsApiGetDatasetV1TeamsTeamIdDatasetsDatasetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {DatasetsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters = {}, options) {
        return exports.DatasetsApiFp(this.configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {DatasetsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get parents of this dataset.
     * @summary List Dataset Parents
     * @param {DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetParentsV1DatasetsDatasetIdParentsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetParentsV1DatasetsDatasetIdParentsGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get parents of this dataset.
     * @summary List Dataset Parents
     * @param {DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all Datasets.
     * @summary List Datasets
     * @param {DatasetsApiListDatasetsV1DatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetsV1DatasetsGet(requestParameters = {}, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetsV1DatasetsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all Datasets.
     * @summary List Datasets
     * @param {DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetsV1TeamsTeamIdDatasetsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetsV1TeamsTeamIdDatasetsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models that use the dataset either directly or through child datasets.
     * @summary List Models Using Dataset
     * @param {DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models that use the dataset either directly or through child datasets.
     * @summary List Models Using Dataset
     * @param {DatasetsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters.userId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Dataset resource with partial update.
     * @summary Patch Dataset
     * @param {DatasetsApiPatchDatasetV1DatasetsDatasetIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    patchDatasetV1DatasetsDatasetIdPatch(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).patchDatasetV1DatasetsDatasetIdPatch(requestParameters.datasetId, requestParameters.patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Dataset resource with partial update.
     * @summary Patch Dataset
     * @param {DatasetsApiPatchDatasetV1TeamsTeamIdDatasetsDatasetIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(requestParameters.teamId, requestParameters.datasetId, requestParameters.patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {DatasetsApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {DatasetsApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the dataset with object with provided id.
     * @summary Remove Object Tag From Dataset
     * @param {DatasetsApiRemoveObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the dataset with object with provided id.
     * @summary Remove Object Tag From Dataset
     * @param {DatasetsApiRemoveObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a parent dataset.
     * @summary Remove Parent Dataset
     * @param {DatasetsApiRemoveParentDatasetV1DatasetsDatasetIdParentsParentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(requestParameters.datasetId, requestParameters.parentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a parent dataset.
     * @summary Remove Parent Dataset
     * @param {DatasetsApiRemoveParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.parentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {DatasetsApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {DatasetsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Dataset.
     * @summary Replace Dataset
     * @param {DatasetsApiReplaceDatasetV1DatasetsDatasetIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    replaceDatasetV1DatasetsDatasetIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).replaceDatasetV1DatasetsDatasetIdPut(requestParameters.datasetId, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Dataset.
     * @summary Replace Dataset
     * @param {DatasetsApiReplaceDatasetV1TeamsTeamIdDatasetsDatasetIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the dataset with object with provided id.
     * @summary Tag Study With Object
     * @param {DatasetsApiTagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the dataset with object with provided id.
     * @summary Tag Study With Object
     * @param {DatasetsApiTagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DatasetsApi = DatasetsApi;
/**
 * EnterpriseApi - axios parameter creator
 * @export
 */
exports.EnterpriseApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationCreate} integrationCreate
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1EnterpriseIntegrationsPost: (integrationCreate, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'integrationCreate' is not null or undefined
            if (integrationCreate === null || integrationCreate === undefined) {
                throw new base_1.RequiredError('integrationCreate', 'Required parameter integrationCreate was null or undefined when calling createIntegrationV1EnterpriseIntegrationsPost.');
            }
            const localVarPath = `/v1/enterprise/integrations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof integrationCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(integrationCreate !== undefined ? integrationCreate : {}) : (integrationCreate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new message.
         * @summary Create Message
         * @param {MessageIn} messageIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1EnterpriseMessagesPost: (messageIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'messageIn' is not null or undefined
            if (messageIn === null || messageIn === undefined) {
                throw new base_1.RequiredError('messageIn', 'Required parameter messageIn was null or undefined when calling createMessageV1EnterpriseMessagesPost.');
            }
            const localVarPath = `/v1/enterprise/messages`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof messageIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(messageIn !== undefined ? messageIn : {}) : (messageIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseV1EnterpriseGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/enterprise`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1EnterpriseIntegrationsIntegrationIdGet: (integrationId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'integrationId' is not null or undefined
            if (integrationId === null || integrationId === undefined) {
                throw new base_1.RequiredError('integrationId', 'Required parameter integrationId was null or undefined when calling getIntegrationV1EnterpriseIntegrationsIntegrationIdGet.');
            }
            const localVarPath = `/v1/enterprise/integrations/{integration_id}`
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationsV1EnterpriseIntegrationsGet: (teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/enterprise/integrations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} messageId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1EnterpriseMessagesMessageIdGet: (messageId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'messageId' is not null or undefined
            if (messageId === null || messageId === undefined) {
                throw new base_1.RequiredError('messageId', 'Required parameter messageId was null or undefined when calling getMessageV1EnterpriseMessagesMessageIdGet.');
            }
            const localVarPath = `/v1/enterprise/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} integrationId
         * @param {IntegrationUpdateIn} integrationUpdateIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch: (integrationId, integrationUpdateIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'integrationId' is not null or undefined
            if (integrationId === null || integrationId === undefined) {
                throw new base_1.RequiredError('integrationId', 'Required parameter integrationId was null or undefined when calling updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch.');
            }
            // verify required parameter 'integrationUpdateIn' is not null or undefined
            if (integrationUpdateIn === null || integrationUpdateIn === undefined) {
                throw new base_1.RequiredError('integrationUpdateIn', 'Required parameter integrationUpdateIn was null or undefined when calling updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch.');
            }
            const localVarPath = `/v1/enterprise/integrations/{integration_id}`
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof integrationUpdateIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(integrationUpdateIn !== undefined ? integrationUpdateIn : {}) : (integrationUpdateIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} messageId
         * @param {MessageIn} messageIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1EnterpriseMessagesMessageIdPatch: (messageId, messageIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'messageId' is not null or undefined
            if (messageId === null || messageId === undefined) {
                throw new base_1.RequiredError('messageId', 'Required parameter messageId was null or undefined when calling updateMessageV1EnterpriseMessagesMessageIdPatch.');
            }
            // verify required parameter 'messageIn' is not null or undefined
            if (messageIn === null || messageIn === undefined) {
                throw new base_1.RequiredError('messageIn', 'Required parameter messageIn was null or undefined when calling updateMessageV1EnterpriseMessagesMessageIdPatch.');
            }
            const localVarPath = `/v1/enterprise/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof messageIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(messageIn !== undefined ? messageIn : {}) : (messageIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * EnterpriseApi - functional programming interface
 * @export
 */
exports.EnterpriseApiFp = function (configuration) {
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationCreate} integrationCreate
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1EnterpriseIntegrationsPost(integrationCreate, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EnterpriseApiAxiosParamCreator(configuration).createIntegrationV1EnterpriseIntegrationsPost(integrationCreate, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {MessageIn} messageIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1EnterpriseMessagesPost(messageIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EnterpriseApiAxiosParamCreator(configuration).createMessageV1EnterpriseMessagesPost(messageIn, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseV1EnterpriseGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EnterpriseApiAxiosParamCreator(configuration).getEnterpriseV1EnterpriseGet(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EnterpriseApiAxiosParamCreator(configuration).getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationsV1EnterpriseIntegrationsGet(teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EnterpriseApiAxiosParamCreator(configuration).getIntegrationsV1EnterpriseIntegrationsGet(teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} messageId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1EnterpriseMessagesMessageIdGet(messageId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EnterpriseApiAxiosParamCreator(configuration).getMessageV1EnterpriseMessagesMessageIdGet(messageId, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} integrationId
         * @param {IntegrationUpdateIn} integrationUpdateIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationUpdateIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EnterpriseApiAxiosParamCreator(configuration).updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationUpdateIn, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} messageId
         * @param {MessageIn} messageIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1EnterpriseMessagesMessageIdPatch(messageId, messageIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.EnterpriseApiAxiosParamCreator(configuration).updateMessageV1EnterpriseMessagesMessageIdPatch(messageId, messageIn, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * EnterpriseApi - factory interface
 * @export
 */
exports.EnterpriseApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationCreate} integrationCreate
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1EnterpriseIntegrationsPost(integrationCreate, teamId, options) {
            return exports.EnterpriseApiFp(configuration).createIntegrationV1EnterpriseIntegrationsPost(integrationCreate, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {MessageIn} messageIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1EnterpriseMessagesPost(messageIn, teamId, options) {
            return exports.EnterpriseApiFp(configuration).createMessageV1EnterpriseMessagesPost(messageIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseV1EnterpriseGet(options) {
            return exports.EnterpriseApiFp(configuration).getEnterpriseV1EnterpriseGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, teamId, options) {
            return exports.EnterpriseApiFp(configuration).getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationsV1EnterpriseIntegrationsGet(teamId, options) {
            return exports.EnterpriseApiFp(configuration).getIntegrationsV1EnterpriseIntegrationsGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} messageId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1EnterpriseMessagesMessageIdGet(messageId, teamId, options) {
            return exports.EnterpriseApiFp(configuration).getMessageV1EnterpriseMessagesMessageIdGet(messageId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} integrationId
         * @param {IntegrationUpdateIn} integrationUpdateIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationUpdateIn, teamId, options) {
            return exports.EnterpriseApiFp(configuration).updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationUpdateIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} messageId
         * @param {MessageIn} messageIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1EnterpriseMessagesMessageIdPatch(messageId, messageIn, teamId, options) {
            return exports.EnterpriseApiFp(configuration).updateMessageV1EnterpriseMessagesMessageIdPatch(messageId, messageIn, teamId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * EnterpriseApi - object-oriented interface
 * @export
 * @class EnterpriseApi
 * @extends {BaseAPI}
 */
class EnterpriseApi extends base_1.BaseAPI {
    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    createIntegrationV1EnterpriseIntegrationsPost(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).createIntegrationV1EnterpriseIntegrationsPost(requestParameters.integrationCreate, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new message.
     * @summary Create Message
     * @param {EnterpriseApiCreateMessageV1EnterpriseMessagesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    createMessageV1EnterpriseMessagesPost(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).createMessageV1EnterpriseMessagesPost(requestParameters.messageIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the Enterprise.
     * @summary Get Enterprise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    getEnterpriseV1EnterpriseGet(options) {
        return exports.EnterpriseApiFp(this.configuration).getEnterpriseV1EnterpriseGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Integration.
     * @summary Get Integration
     * @param {EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(requestParameters.integrationId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get team integrations.
     * @summary Get Integrations
     * @param {EnterpriseApiGetIntegrationsV1EnterpriseIntegrationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    getIntegrationsV1EnterpriseIntegrationsGet(requestParameters = {}, options) {
        return exports.EnterpriseApiFp(this.configuration).getIntegrationsV1EnterpriseIntegrationsGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a Message.
     * @summary Get Message
     * @param {EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    getMessageV1EnterpriseMessagesMessageIdGet(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).getMessageV1EnterpriseMessagesMessageIdGet(requestParameters.messageId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update Integration.
     * @summary Update Integration
     * @param {EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(requestParameters.integrationId, requestParameters.integrationUpdateIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a Message.
     * @summary Update Message
     * @param {EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    updateMessageV1EnterpriseMessagesMessageIdPatch(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).updateMessageV1EnterpriseMessagesMessageIdPatch(requestParameters.messageId, requestParameters.messageIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.EnterpriseApi = EnterpriseApi;
/**
 * FeaturesApi - axios parameter creator
 * @export
 */
exports.FeaturesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut: (dashboardId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new base_1.RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut.');
            }
            const localVarPath = `/v1/dashboards/{dashboard_id}/features/{feature_id}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut: (teamId, dashboardId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new base_1.RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut: (datasetId, featureId, index, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut: (teamId, datasetId, featureId, index, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost: (datasetId, featureIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost.');
            }
            // verify required parameter 'featureIn' is not null or undefined
            if (featureIn === null || featureIn === undefined) {
                throw new base_1.RequiredError('featureIn', 'Required parameter featureIn was null or undefined when calling createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof featureIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(featureIn !== undefined ? featureIn : {}) : (featureIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost: (teamId, datasetId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost.');
            }
            // verify required parameter 'featureIn' is not null or undefined
            if (featureIn === null || featureIn === undefined) {
                throw new base_1.RequiredError('featureIn', 'Required parameter featureIn was null or undefined when calling createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof featureIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(featureIn !== undefined ? featureIn : {}) : (featureIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {FeatureIn} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1FeaturesPost: (featureIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureIn' is not null or undefined
            if (featureIn === null || featureIn === undefined) {
                throw new base_1.RequiredError('featureIn', 'Required parameter featureIn was null or undefined when calling createFeatureV1FeaturesPost.');
            }
            const localVarPath = `/v1/features`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof featureIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(featureIn !== undefined ? featureIn : {}) : (featureIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamIdFeaturesPost: (teamId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createFeatureV1TeamsTeamIdFeaturesPost.');
            }
            // verify required parameter 'featureIn' is not null or undefined
            if (featureIn === null || featureIn === undefined) {
                throw new base_1.RequiredError('featureIn', 'Required parameter featureIn was null or undefined when calling createFeatureV1TeamsTeamIdFeaturesPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof featureIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(featureIn !== undefined ? featureIn : {}) : (featureIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1FeaturesFeatureIdDelete: (featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling deleteFeatureV1FeaturesFeatureIdDelete.');
            }
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete: (teamId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1FeaturesFeatureIdGet: (featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling getFeatureV1FeaturesFeatureIdGet.');
            }
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamIdFeaturesFeatureIdGet: (teamId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getFeatureV1TeamsTeamIdFeaturesFeatureIdGet.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling getFeatureV1TeamsTeamIdFeaturesFeatureIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/features`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet: (dashboardId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new base_1.RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet.');
            }
            const localVarPath = `/v1/dashboards/{dashboard_id}/features`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet: (teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet.');
            }
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new base_1.RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet: (datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Features.
         * @summary List Features
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1FeaturesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/features`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamIdFeaturesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listFeaturesV1TeamsTeamIdFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet: (featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/features/{feature_id}/system/features`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet: (teamId, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}/system/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet: (userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserFeaturesV1UsersUserIdFeaturesGet.');
            }
            const localVarPath = `/v1/users/{user_id}/features`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1FeaturesFeatureIdPatch: (featureId, patchFeatureOpArrayPatchFeatureOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling patchFeatureV1FeaturesFeatureIdPatch.');
            }
            // verify required parameter 'patchFeatureOpArrayPatchFeatureOp' is not null or undefined
            if (patchFeatureOpArrayPatchFeatureOp === null || patchFeatureOpArrayPatchFeatureOp === undefined) {
                throw new base_1.RequiredError('patchFeatureOpArrayPatchFeatureOp', 'Required parameter patchFeatureOpArrayPatchFeatureOp was null or undefined when calling patchFeatureV1FeaturesFeatureIdPatch.');
            }
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchFeatureOpArrayPatchFeatureOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchFeatureOpArrayPatchFeatureOp !== undefined ? patchFeatureOpArrayPatchFeatureOp : {}) : (patchFeatureOpArrayPatchFeatureOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch: (teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch.');
            }
            // verify required parameter 'patchFeatureOpArrayPatchFeatureOp' is not null or undefined
            if (patchFeatureOpArrayPatchFeatureOp === null || patchFeatureOpArrayPatchFeatureOp === undefined) {
                throw new base_1.RequiredError('patchFeatureOpArrayPatchFeatureOp', 'Required parameter patchFeatureOpArrayPatchFeatureOp was null or undefined when calling patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch.');
            }
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchFeatureOpArrayPatchFeatureOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchFeatureOpArrayPatchFeatureOp !== undefined ? patchFeatureOpArrayPatchFeatureOp : {}) : (patchFeatureOpArrayPatchFeatureOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1FeaturesPatch: (bulkPatchFeatureOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bulkPatchFeatureOp' is not null or undefined
            if (bulkPatchFeatureOp === null || bulkPatchFeatureOp === undefined) {
                throw new base_1.RequiredError('bulkPatchFeatureOp', 'Required parameter bulkPatchFeatureOp was null or undefined when calling patchMultipleFeaturesV1FeaturesPatch.');
            }
            const localVarPath = `/v1/features`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bulkPatchFeatureOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bulkPatchFeatureOp !== undefined ? bulkPatchFeatureOp : {}) : (bulkPatchFeatureOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamId
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch: (teamId, bulkPatchFeatureOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch.');
            }
            // verify required parameter 'bulkPatchFeatureOp' is not null or undefined
            if (bulkPatchFeatureOp === null || bulkPatchFeatureOp === undefined) {
                throw new base_1.RequiredError('bulkPatchFeatureOp', 'Required parameter bulkPatchFeatureOp was null or undefined when calling patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch.');
            }
            const localVarPath = `/v1/teams/{team_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bulkPatchFeatureOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bulkPatchFeatureOp !== undefined ? bulkPatchFeatureOp : {}) : (bulkPatchFeatureOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete: (datasetId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete: (teamId, datasetId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1FeaturesFeatureIdPut: (featureId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling replaceFeatureV1FeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureIn' is not null or undefined
            if (featureIn === null || featureIn === undefined) {
                throw new base_1.RequiredError('featureIn', 'Required parameter featureIn was null or undefined when calling replaceFeatureV1FeaturesFeatureIdPut.');
            }
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof featureIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(featureIn !== undefined ? featureIn : {}) : (featureIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut: (teamId, featureId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureIn' is not null or undefined
            if (featureIn === null || featureIn === undefined) {
                throw new base_1.RequiredError('featureIn', 'Required parameter featureIn was null or undefined when calling replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof featureIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(featureIn !== undefined ? featureIn : {}) : (featureIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * FeaturesApi - functional programming interface
 * @export
 */
exports.FeaturesApiFp = function (configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {FeatureIn} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1FeaturesPost(featureIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).createFeatureV1FeaturesPost(featureIn, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1FeaturesFeatureIdDelete(featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).deleteFeatureV1FeaturesFeatureIdDelete(featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1FeaturesFeatureIdGet(featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).getFeatureV1FeaturesFeatureIdGet(featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1FeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).listFeaturesV1FeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet(teamId, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet(teamId, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).listUserFeaturesV1UsersUserIdFeaturesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamId
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.FeaturesApiAxiosParamCreator(configuration).replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * FeaturesApi - factory interface
 * @export
 */
exports.FeaturesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, options) {
            return exports.FeaturesApiFp(configuration).addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options) {
            return exports.FeaturesApiFp(configuration).addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options) {
            return exports.FeaturesApiFp(configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options) {
            return exports.FeaturesApiFp(configuration).addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options) {
            return exports.FeaturesApiFp(configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options) {
            return exports.FeaturesApiFp(configuration).createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {FeatureIn} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1FeaturesPost(featureIn, teamId, options) {
            return exports.FeaturesApiFp(configuration).createFeatureV1FeaturesPost(featureIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options) {
            return exports.FeaturesApiFp(configuration).createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1FeaturesFeatureIdDelete(featureId, options) {
            return exports.FeaturesApiFp(configuration).deleteFeatureV1FeaturesFeatureIdDelete(featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options) {
            return exports.FeaturesApiFp(configuration).deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1FeaturesFeatureIdGet(featureId, options) {
            return exports.FeaturesApiFp(configuration).getFeatureV1FeaturesFeatureIdGet(featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options) {
            return exports.FeaturesApiFp(configuration).getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.FeaturesApiFp(configuration).listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.FeaturesApiFp(configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.FeaturesApiFp(configuration).listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.FeaturesApiFp(configuration).listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.FeaturesApiFp(configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.FeaturesApiFp(configuration).listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1FeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.FeaturesApiFp(configuration).listFeaturesV1FeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.FeaturesApiFp(configuration).listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return exports.FeaturesApiFp(configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet(teamId, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return exports.FeaturesApiFp(configuration).listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet(teamId, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.FeaturesApiFp(configuration).listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.FeaturesApiFp(configuration).listUserFeaturesV1UsersUserIdFeaturesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, options) {
            return exports.FeaturesApiFp(configuration).patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options) {
            return exports.FeaturesApiFp(configuration).patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options) {
            return exports.FeaturesApiFp(configuration).patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamId
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options) {
            return exports.FeaturesApiFp(configuration).patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options) {
            return exports.FeaturesApiFp(configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options) {
            return exports.FeaturesApiFp(configuration).removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, options) {
            return exports.FeaturesApiFp(configuration).replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options) {
            return exports.FeaturesApiFp(configuration).replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * FeaturesApi - object-oriented interface
 * @export
 * @class FeaturesApi
 * @extends {BaseAPI}
 */
class FeaturesApi extends base_1.BaseAPI {
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dashboard Endpoint
     * @param {FeaturesApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(requestParameters.dashboardId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dashboard Endpoint
     * @param {FeaturesApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.dashboardId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {FeaturesApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {FeaturesApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {FeaturesApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters.datasetId, requestParameters.featureIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {FeaturesApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Feature.
     * @summary Create Feature
     * @param {FeaturesApiCreateFeatureV1FeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    createFeatureV1FeaturesPost(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).createFeatureV1FeaturesPost(requestParameters.featureIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Feature.
     * @summary Create Feature
     * @param {FeaturesApiCreateFeatureV1TeamsTeamIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    createFeatureV1TeamsTeamIdFeaturesPost(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).createFeatureV1TeamsTeamIdFeaturesPost(requestParameters.teamId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a feature.
     * @summary Delete Feature
     * @param {FeaturesApiDeleteFeatureV1FeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    deleteFeatureV1FeaturesFeatureIdDelete(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).deleteFeatureV1FeaturesFeatureIdDelete(requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a feature.
     * @summary Delete Feature
     * @param {FeaturesApiDeleteFeatureV1TeamsTeamIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(requestParameters.teamId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get feature.
     * @summary Get Feature
     * @param {FeaturesApiGetFeatureV1FeaturesFeatureIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    getFeatureV1FeaturesFeatureIdGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).getFeatureV1FeaturesFeatureIdGet(requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get feature.
     * @summary Get Feature
     * @param {FeaturesApiGetFeatureV1TeamsTeamIdFeaturesFeatureIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(requestParameters.teamId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {FeaturesApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters = {}, options) {
        return exports.FeaturesApiFp(this.configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dashboard Features
     * @param {FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(requestParameters.dashboardId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dashboard Features
     * @param {FeaturesApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(requestParameters.teamId, requestParameters.dashboardId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {FeaturesApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Features.
     * @summary List Features
     * @param {FeaturesApiListFeaturesV1FeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listFeaturesV1FeaturesGet(requestParameters = {}, options) {
        return exports.FeaturesApiFp(this.configuration).listFeaturesV1FeaturesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Features.
     * @summary List Features
     * @param {FeaturesApiListFeaturesV1TeamsTeamIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listFeaturesV1TeamsTeamIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listFeaturesV1TeamsTeamIdFeaturesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested feature\'s system.
     * @summary List System Of Features
     * @param {FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(requestParameters.featureId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested feature\'s system.
     * @summary List System Of Features
     * @param {FeaturesApiListSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet(requestParameters.teamId, requestParameters.featureId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {FeaturesApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters.userId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
     * @summary Patch Feature
     * @param {FeaturesApiPatchFeatureV1FeaturesFeatureIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    patchFeatureV1FeaturesFeatureIdPatch(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).patchFeatureV1FeaturesFeatureIdPatch(requestParameters.featureId, requestParameters.patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
     * @summary Patch Feature
     * @param {FeaturesApiPatchFeatureV1TeamsTeamIdFeaturesFeatureIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(requestParameters.teamId, requestParameters.featureId, requestParameters.patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Batch feature patching.
     * @summary Patch Multiple Features
     * @param {FeaturesApiPatchMultipleFeaturesV1FeaturesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    patchMultipleFeaturesV1FeaturesPatch(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).patchMultipleFeaturesV1FeaturesPatch(requestParameters.bulkPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Batch feature patching.
     * @summary Patch Multiple Features
     * @param {FeaturesApiPatchMultipleFeaturesV1TeamsTeamIdFeaturesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(requestParameters.teamId, requestParameters.bulkPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {FeaturesApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {FeaturesApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Feature.
     * @summary Replace Feature
     * @param {FeaturesApiReplaceFeatureV1FeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    replaceFeatureV1FeaturesFeatureIdPut(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).replaceFeatureV1FeaturesFeatureIdPut(requestParameters.featureId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Feature.
     * @summary Replace Feature
     * @param {FeaturesApiReplaceFeatureV1TeamsTeamIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.featureId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FeaturesApi = FeaturesApi;
/**
 * GraphApi - axios parameter creator
 * @export
 */
exports.GraphApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Fetch dataset graph.
         * @summary Get Concept Graph
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1GraphConceptGraphGet: (teamId, minRelationshipStrength, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getConceptGraphV1GraphConceptGraphGet.');
            }
            const localVarPath = `/v1/graph/concept_graph`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (minRelationshipStrength !== undefined) {
                localVarQueryParameter['min_relationship_strength'] = minRelationshipStrength;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch dataset graph.
         * @summary Get Concept Graph
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1TeamsTeamIdGraphConceptGraphGet: (teamId, minRelationshipStrength, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getConceptGraphV1TeamsTeamIdGraphConceptGraphGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/graph/concept_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (minRelationshipStrength !== undefined) {
                localVarQueryParameter['min_relationship_strength'] = minRelationshipStrength;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1GraphDatasetGraphGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/graph/dataset_graph`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet: (teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/graph/dataset_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * GraphApi - functional programming interface
 * @export
 */
exports.GraphApiFp = function (configuration) {
    return {
        /**
         * Fetch dataset graph.
         * @summary Get Concept Graph
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1GraphConceptGraphGet(teamId, minRelationshipStrength, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.GraphApiAxiosParamCreator(configuration).getConceptGraphV1GraphConceptGraphGet(teamId, minRelationshipStrength, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch dataset graph.
         * @summary Get Concept Graph
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.GraphApiAxiosParamCreator(configuration).getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1GraphDatasetGraphGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.GraphApiAxiosParamCreator(configuration).getDatasetGraphV1GraphDatasetGraphGet(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.GraphApiAxiosParamCreator(configuration).getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * GraphApi - factory interface
 * @export
 */
exports.GraphApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Fetch dataset graph.
         * @summary Get Concept Graph
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1GraphConceptGraphGet(teamId, minRelationshipStrength, options) {
            return exports.GraphApiFp(configuration).getConceptGraphV1GraphConceptGraphGet(teamId, minRelationshipStrength, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Concept Graph
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, options) {
            return exports.GraphApiFp(configuration).getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1GraphDatasetGraphGet(options) {
            return exports.GraphApiFp(configuration).getDatasetGraphV1GraphDatasetGraphGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options) {
            return exports.GraphApiFp(configuration).getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * GraphApi - object-oriented interface
 * @export
 * @class GraphApi
 * @extends {BaseAPI}
 */
class GraphApi extends base_1.BaseAPI {
    /**
     * Fetch dataset graph.
     * @summary Get Concept Graph
     * @param {GraphApiGetConceptGraphV1GraphConceptGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getConceptGraphV1GraphConceptGraphGet(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getConceptGraphV1GraphConceptGraphGet(requestParameters.teamId, requestParameters.minRelationshipStrength, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch dataset graph.
     * @summary Get Concept Graph
     * @param {GraphApiGetConceptGraphV1TeamsTeamIdGraphConceptGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(requestParameters.teamId, requestParameters.minRelationshipStrength, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch dataset graph.
     * @summary Get Dataset Graph
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getDatasetGraphV1GraphDatasetGraphGet(options) {
        return exports.GraphApiFp(this.configuration).getDatasetGraphV1GraphDatasetGraphGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch dataset graph.
     * @summary Get Dataset Graph
     * @param {GraphApiGetDatasetGraphV1TeamsTeamIdGraphDatasetGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.GraphApi = GraphApi;
/**
 * GraphqlApi - axios parameter creator
 * @export
 */
exports.GraphqlApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Forward GraphQL request to SystemDB.
         * @summary Post Graphql
         * @param {GraphQLQuery} graphQLQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphqlV1GraphqlPost: (graphQLQuery, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'graphQLQuery' is not null or undefined
            if (graphQLQuery === null || graphQLQuery === undefined) {
                throw new base_1.RequiredError('graphQLQuery', 'Required parameter graphQLQuery was null or undefined when calling postGraphqlV1GraphqlPost.');
            }
            const localVarPath = `/v1/graphql`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof graphQLQuery !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(graphQLQuery !== undefined ? graphQLQuery : {}) : (graphQLQuery || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * GraphqlApi - functional programming interface
 * @export
 */
exports.GraphqlApiFp = function (configuration) {
    return {
        /**
         * Forward GraphQL request to SystemDB.
         * @summary Post Graphql
         * @param {GraphQLQuery} graphQLQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphqlV1GraphqlPost(graphQLQuery, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.GraphqlApiAxiosParamCreator(configuration).postGraphqlV1GraphqlPost(graphQLQuery, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * GraphqlApi - factory interface
 * @export
 */
exports.GraphqlApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Forward GraphQL request to SystemDB.
         * @summary Post Graphql
         * @param {GraphQLQuery} graphQLQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphqlV1GraphqlPost(graphQLQuery, options) {
            return exports.GraphqlApiFp(configuration).postGraphqlV1GraphqlPost(graphQLQuery, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * GraphqlApi - object-oriented interface
 * @export
 * @class GraphqlApi
 * @extends {BaseAPI}
 */
class GraphqlApi extends base_1.BaseAPI {
    /**
     * Forward GraphQL request to SystemDB.
     * @summary Post Graphql
     * @param {GraphqlApiPostGraphqlV1GraphqlPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    postGraphqlV1GraphqlPost(requestParameters, options) {
        return exports.GraphqlApiFp(this.configuration).postGraphqlV1GraphqlPost(requestParameters.graphQLQuery, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.GraphqlApi = GraphqlApi;
/**
 * ModeldbApi - axios parameter creator
 * @export
 */
exports.ModeldbApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get algorithms by id.
         * @summary Get Algorithm
         * @param {string} algorithmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet: (algorithmId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'algorithmId' is not null or undefined
            if (algorithmId === null || algorithmId === undefined) {
                throw new base_1.RequiredError('algorithmId', 'Required parameter algorithmId was null or undefined when calling getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet.');
            }
            const localVarPath = `/v1/modeldb/algorithms/{algorithm_id}`
                .replace(`{${"algorithm_id"}}`, encodeURIComponent(String(algorithmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List available algorithms in ModelDB. Search with algorithm class if passed.
         * @summary List Algorithms
         * @param {string} [algorithmClass]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlgorithmsV1ModeldbAlgorithmsGet: (algorithmClass, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/modeldb/algorithms`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (algorithmClass !== undefined) {
                localVarQueryParameter['algorithm_class'] = algorithmClass;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ModeldbApi - functional programming interface
 * @export
 */
exports.ModeldbApiFp = function (configuration) {
    return {
        /**
         * Get algorithms by id.
         * @summary Get Algorithm
         * @param {string} algorithmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModeldbApiAxiosParamCreator(configuration).getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List available algorithms in ModelDB. Search with algorithm class if passed.
         * @summary List Algorithms
         * @param {string} [algorithmClass]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModeldbApiAxiosParamCreator(configuration).listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * ModeldbApi - factory interface
 * @export
 */
exports.ModeldbApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Get algorithms by id.
         * @summary Get Algorithm
         * @param {string} algorithmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId, options) {
            return exports.ModeldbApiFp(configuration).getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId, options).then((request) => request(axios, basePath));
        },
        /**
         * List available algorithms in ModelDB. Search with algorithm class if passed.
         * @summary List Algorithms
         * @param {string} [algorithmClass]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass, options) {
            return exports.ModeldbApiFp(configuration).listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ModeldbApi - object-oriented interface
 * @export
 * @class ModeldbApi
 * @extends {BaseAPI}
 */
class ModeldbApi extends base_1.BaseAPI {
    /**
     * Get algorithms by id.
     * @summary Get Algorithm
     * @param {ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeldbApi
     */
    getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(requestParameters, options) {
        return exports.ModeldbApiFp(this.configuration).getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(requestParameters.algorithmId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List available algorithms in ModelDB. Search with algorithm class if passed.
     * @summary List Algorithms
     * @param {ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeldbApi
     */
    listAlgorithmsV1ModeldbAlgorithmsGet(requestParameters = {}, options) {
        return exports.ModeldbApiFp(this.configuration).listAlgorithmsV1ModeldbAlgorithmsGet(requestParameters.algorithmClass, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ModeldbApi = ModeldbApi;
/**
 * ModelsApi - axios parameter creator
 * @export
 */
exports.ModelsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost: (modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling createAssociationsV1ModelsModelIdAssociationsPost.');
            }
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            if (associationInArrayAssociationIn === null || associationInArrayAssociationIn === undefined) {
                throw new base_1.RequiredError('associationInArrayAssociationIn', 'Required parameter associationInArrayAssociationIn was null or undefined when calling createAssociationsV1ModelsModelIdAssociationsPost.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof associationInArrayAssociationIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(associationInArrayAssociationIn !== undefined ? associationInArrayAssociationIn : {}) : (associationInArrayAssociationIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost: (teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost.');
            }
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            if (associationInArrayAssociationIn === null || associationInArrayAssociationIn === undefined) {
                throw new base_1.RequiredError('associationInArrayAssociationIn', 'Required parameter associationInArrayAssociationIn was null or undefined when calling createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof associationInArrayAssociationIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(associationInArrayAssociationIn !== undefined ? associationInArrayAssociationIn : {}) : (associationInArrayAssociationIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost: (studyId, modelIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling createModelsV1StudiesStudyIdModelsPost.');
            }
            // verify required parameter 'modelIn' is not null or undefined
            if (modelIn === null || modelIn === undefined) {
                throw new base_1.RequiredError('modelIn', 'Required parameter modelIn was null or undefined when calling createModelsV1StudiesStudyIdModelsPost.');
            }
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof modelIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(modelIn !== undefined ? modelIn : {}) : (modelIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost: (teamId, studyId, modelIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createModelsV1TeamsTeamIdStudiesStudyIdModelsPost.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling createModelsV1TeamsTeamIdStudiesStudyIdModelsPost.');
            }
            // verify required parameter 'modelIn' is not null or undefined
            if (modelIn === null || modelIn === undefined) {
                throw new base_1.RequiredError('modelIn', 'Required parameter modelIn was null or undefined when calling createModelsV1TeamsTeamIdStudiesStudyIdModelsPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof modelIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(modelIn !== undefined ? modelIn : {}) : (modelIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete: (modelId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete.');
            }
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete.');
            }
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete: (teamId, modelId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete.');
            }
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete: (modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling deleteAssociationsV1ModelsModelIdAssociationsDelete.');
            }
            // verify required parameter 'bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete' is not null or undefined
            if (bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete === null || bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete === undefined) {
                throw new base_1.RequiredError('bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete', 'Required parameter bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete was null or undefined when calling deleteAssociationsV1ModelsModelIdAssociationsDelete.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete !== undefined ? bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete : {}) : (bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: (teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete.');
            }
            // verify required parameter 'bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete' is not null or undefined
            if (bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete === null || bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete === undefined) {
                throw new base_1.RequiredError('bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'Required parameter bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete was null or undefined when calling deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete !== undefined ? bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete : {}) : (bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1ModelsModelIdDelete: (modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling deleteModelV1ModelsModelIdDelete.');
            }
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamIdModelsModelIdDelete: (teamId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteModelV1TeamsTeamIdModelsModelIdDelete.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling deleteModelV1TeamsTeamIdModelsModelIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet: (associationId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling getAssociationV1ModelsModelIdAssociationsAssociationIdGet.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling getAssociationV1ModelsModelIdAssociationsAssociationIdGet.');
            }
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet: (teamId, associationId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet.');
            }
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1ModelsModelIdGet: (modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling getModelV1ModelsModelIdGet.');
            }
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamIdModelsModelIdGet: (teamId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getModelV1TeamsTeamIdModelsModelIdGet.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling getModelV1TeamsTeamIdModelsModelIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet: (modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling listAssociationsV1ModelsModelIdAssociationsGet.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet: (teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/models`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet: (studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling listModelsInStudyV1StudiesStudyIdModelsGet.');
            }
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Models.
         * @summary List Models
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1ModelsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/models`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamIdModelsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listModelsV1TeamsTeamIdModelsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listUserModelsV1TeamsTeamIdUsersUserIdModelsGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserModelsV1TeamsTeamIdUsersUserIdModelsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet: (userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserModelsV1UsersUserIdModelsGet.');
            }
            const localVarPath = `/v1/users/{user_id}/models`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch: (modelId, bulkPatchAssociationOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling patchAssociationsV1ModelsModelIdAssociationsPatch.');
            }
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            if (bulkPatchAssociationOp === null || bulkPatchAssociationOp === undefined) {
                throw new base_1.RequiredError('bulkPatchAssociationOp', 'Required parameter bulkPatchAssociationOp was null or undefined when calling patchAssociationsV1ModelsModelIdAssociationsPatch.');
            }
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bulkPatchAssociationOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bulkPatchAssociationOp !== undefined ? bulkPatchAssociationOp : {}) : (bulkPatchAssociationOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch: (teamId, modelId, bulkPatchAssociationOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch.');
            }
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            if (bulkPatchAssociationOp === null || bulkPatchAssociationOp === undefined) {
                throw new base_1.RequiredError('bulkPatchAssociationOp', 'Required parameter bulkPatchAssociationOp was null or undefined when calling patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bulkPatchAssociationOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bulkPatchAssociationOp !== undefined ? bulkPatchAssociationOp : {}) : (bulkPatchAssociationOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1ModelsModelIdPatch: (modelId, patchModelOpArrayPatchModelOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling patchModelV1ModelsModelIdPatch.');
            }
            // verify required parameter 'patchModelOpArrayPatchModelOp' is not null or undefined
            if (patchModelOpArrayPatchModelOp === null || patchModelOpArrayPatchModelOp === undefined) {
                throw new base_1.RequiredError('patchModelOpArrayPatchModelOp', 'Required parameter patchModelOpArrayPatchModelOp was null or undefined when calling patchModelV1ModelsModelIdPatch.');
            }
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchModelOpArrayPatchModelOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchModelOpArrayPatchModelOp !== undefined ? patchModelOpArrayPatchModelOp : {}) : (patchModelOpArrayPatchModelOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamIdModelsModelIdPatch: (teamId, modelId, patchModelOpArrayPatchModelOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling patchModelV1TeamsTeamIdModelsModelIdPatch.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling patchModelV1TeamsTeamIdModelsModelIdPatch.');
            }
            // verify required parameter 'patchModelOpArrayPatchModelOp' is not null or undefined
            if (patchModelOpArrayPatchModelOp === null || patchModelOpArrayPatchModelOp === undefined) {
                throw new base_1.RequiredError('patchModelOpArrayPatchModelOp', 'Required parameter patchModelOpArrayPatchModelOp was null or undefined when calling patchModelV1TeamsTeamIdModelsModelIdPatch.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchModelOpArrayPatchModelOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchModelOpArrayPatchModelOp !== undefined ? patchModelOpArrayPatchModelOp : {}) : (patchModelOpArrayPatchModelOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1ModelsModelIdPut: (modelId, modelIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling replaceModelV1ModelsModelIdPut.');
            }
            // verify required parameter 'modelIn' is not null or undefined
            if (modelIn === null || modelIn === undefined) {
                throw new base_1.RequiredError('modelIn', 'Required parameter modelIn was null or undefined when calling replaceModelV1ModelsModelIdPut.');
            }
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof modelIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(modelIn !== undefined ? modelIn : {}) : (modelIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamIdModelsModelIdPut: (teamId, modelId, modelIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling replaceModelV1TeamsTeamIdModelsModelIdPut.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling replaceModelV1TeamsTeamIdModelsModelIdPut.');
            }
            // verify required parameter 'modelIn' is not null or undefined
            if (modelIn === null || modelIn === undefined) {
                throw new base_1.RequiredError('modelIn', 'Required parameter modelIn was null or undefined when calling replaceModelV1TeamsTeamIdModelsModelIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof modelIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(modelIn !== undefined ? modelIn : {}) : (modelIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ModelsApi - functional programming interface
 * @export
 */
exports.ModelsApiFp = function (configuration) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1ModelsModelIdDelete(modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).deleteModelV1ModelsModelIdDelete(modelId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1ModelsModelIdGet(modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).getModelV1ModelsModelIdGet(modelId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).listAuthenticatedUserModelsV1UserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1ModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).listModelsV1ModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).listUserModelsV1UsersUserIdModelsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1ModelsModelIdPut(modelId, modelIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).replaceModelV1ModelsModelIdPut(modelId, modelIn, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.ModelsApiAxiosParamCreator(configuration).replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * ModelsApi - factory interface
 * @export
 */
exports.ModelsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options) {
            return exports.ModelsApiFp(configuration).createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options) {
            return exports.ModelsApiFp(configuration).createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options) {
            return exports.ModelsApiFp(configuration).createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options) {
            return exports.ModelsApiFp(configuration).createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options) {
            return exports.ModelsApiFp(configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options) {
            return exports.ModelsApiFp(configuration).deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options) {
            return exports.ModelsApiFp(configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options) {
            return exports.ModelsApiFp(configuration).deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1ModelsModelIdDelete(modelId, options) {
            return exports.ModelsApiFp(configuration).deleteModelV1ModelsModelIdDelete(modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options) {
            return exports.ModelsApiFp(configuration).deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options) {
            return exports.ModelsApiFp(configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options) {
            return exports.ModelsApiFp(configuration).getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1ModelsModelIdGet(modelId, options) {
            return exports.ModelsApiFp(configuration).getModelV1ModelsModelIdGet(modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options) {
            return exports.ModelsApiFp(configuration).getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.ModelsApiFp(configuration).listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.ModelsApiFp(configuration).listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.ModelsApiFp(configuration).listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.ModelsApiFp(configuration).listAuthenticatedUserModelsV1UserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.ModelsApiFp(configuration).listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.ModelsApiFp(configuration).listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1ModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.ModelsApiFp(configuration).listModelsV1ModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.ModelsApiFp(configuration).listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.ModelsApiFp(configuration).listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.ModelsApiFp(configuration).listUserModelsV1UsersUserIdModelsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options) {
            return exports.ModelsApiFp(configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options) {
            return exports.ModelsApiFp(configuration).patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, options) {
            return exports.ModelsApiFp(configuration).patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options) {
            return exports.ModelsApiFp(configuration).patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1ModelsModelIdPut(modelId, modelIn, teamId, options) {
            return exports.ModelsApiFp(configuration).replaceModelV1ModelsModelIdPut(modelId, modelIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options) {
            return exports.ModelsApiFp(configuration).replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ModelsApi - object-oriented interface
 * @export
 * @class ModelsApi
 * @extends {BaseAPI}
 */
class ModelsApi extends base_1.BaseAPI {
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {ModelsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    createAssociationsV1ModelsModelIdAssociationsPost(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).createAssociationsV1ModelsModelIdAssociationsPost(requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {ModelsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(requestParameters.teamId, requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {ModelsApiCreateModelsV1StudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    createModelsV1StudiesStudyIdModelsPost(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).createModelsV1StudiesStudyIdModelsPost(requestParameters.studyId, requestParameters.modelIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {ModelsApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(requestParameters.teamId, requestParameters.studyId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {ModelsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {ModelsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(requestParameters.teamId, requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {ModelsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {ModelsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(requestParameters.teamId, requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
     * @summary Delete Model
     * @param {ModelsApiDeleteModelV1ModelsModelIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteModelV1ModelsModelIdDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteModelV1ModelsModelIdDelete(requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
     * @summary Delete Model
     * @param {ModelsApiDeleteModelV1TeamsTeamIdModelsModelIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteModelV1TeamsTeamIdModelsModelIdDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteModelV1TeamsTeamIdModelsModelIdDelete(requestParameters.teamId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Get Association
     * @param {ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Get Association
     * @param {ModelsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(requestParameters.teamId, requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Model.
     * @summary Get Model
     * @param {ModelsApiGetModelV1ModelsModelIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    getModelV1ModelsModelIdGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).getModelV1ModelsModelIdGet(requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Model.
     * @summary Get Model
     * @param {ModelsApiGetModelV1TeamsTeamIdModelsModelIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    getModelV1TeamsTeamIdModelsModelIdGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).getModelV1TeamsTeamIdModelsModelIdGet(requestParameters.teamId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in model.
     * @summary List Associations
     * @param {ModelsApiListAssociationsV1ModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listAssociationsV1ModelsModelIdAssociationsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listAssociationsV1ModelsModelIdAssociationsGet(requestParameters.modelId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in model.
     * @summary List Associations
     * @param {ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(requestParameters.teamId, requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {ModelsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {ModelsApiListAuthenticatedUserModelsV1UserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listAuthenticatedUserModelsV1UserModelsGet(requestParameters = {}, options) {
        return exports.ModelsApiFp(this.configuration).listAuthenticatedUserModelsV1UserModelsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {ModelsApiListModelsInStudyV1StudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters.studyId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {ModelsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Models.
     * @summary List Models
     * @param {ModelsApiListModelsV1ModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listModelsV1ModelsGet(requestParameters = {}, options) {
        return exports.ModelsApiFp(this.configuration).listModelsV1ModelsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Models.
     * @summary List Models
     * @param {ModelsApiListModelsV1TeamsTeamIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listModelsV1TeamsTeamIdModelsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listModelsV1TeamsTeamIdModelsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {ModelsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {ModelsApiListUserModelsV1UsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listUserModelsV1UsersUserIdModelsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listUserModelsV1UsersUserIdModelsGet(requestParameters.userId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {ModelsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {ModelsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(requestParameters.teamId, requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Model resource with partial update.
     * @summary Patch Model
     * @param {ModelsApiPatchModelV1ModelsModelIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    patchModelV1ModelsModelIdPatch(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).patchModelV1ModelsModelIdPatch(requestParameters.modelId, requestParameters.patchModelOpArrayPatchModelOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Model resource with partial update.
     * @summary Patch Model
     * @param {ModelsApiPatchModelV1TeamsTeamIdModelsModelIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    patchModelV1TeamsTeamIdModelsModelIdPatch(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).patchModelV1TeamsTeamIdModelsModelIdPatch(requestParameters.teamId, requestParameters.modelId, requestParameters.patchModelOpArrayPatchModelOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Model.
     * @summary Replace Model
     * @param {ModelsApiReplaceModelV1ModelsModelIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    replaceModelV1ModelsModelIdPut(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).replaceModelV1ModelsModelIdPut(requestParameters.modelId, requestParameters.modelIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Model.
     * @summary Replace Model
     * @param {ModelsApiReplaceModelV1TeamsTeamIdModelsModelIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    replaceModelV1TeamsTeamIdModelsModelIdPut(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).replaceModelV1TeamsTeamIdModelsModelIdPut(requestParameters.teamId, requestParameters.modelId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ModelsApi = ModelsApi;
/**
 * PopulationAttributeValuesApi - axios parameter creator
 * @export
 */
exports.PopulationAttributeValuesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: (datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new base_1.RequiredError('populationAttributeValueId', 'Required parameter populationAttributeValueId was null or undefined when calling addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: (teamId, datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new base_1.RequiredError('populationAttributeValueId', 'Required parameter populationAttributeValueId was null or undefined when calling addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete population attribute value.
         * @summary Delete Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete: (populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new base_1.RequiredError('populationAttributeValueId', 'Required parameter populationAttributeValueId was null or undefined when calling deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            const localVarPath = `/v1/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet: (datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet: (teamId, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get population attribute value.
         * @summary Get Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet: (populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new base_1.RequiredError('populationAttributeValueId', 'Required parameter populationAttributeValueId was null or undefined when calling getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet.');
            }
            const localVarPath = `/v1/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List population attribute values.
         * @summary List Population Attribute Values
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributeValuesV1PopulationAttributeValuesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/population_attribute_values`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: (datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new base_1.RequiredError('populationAttributeValueId', 'Required parameter populationAttributeValueId was null or undefined when calling removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: (teamId, datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new base_1.RequiredError('populationAttributeValueId', 'Required parameter populationAttributeValueId was null or undefined when calling removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PopulationAttributeValuesApi - functional programming interface
 * @export
 */
exports.PopulationAttributeValuesApiFp = function (configuration) {
    return {
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributeValuesApiAxiosParamCreator(configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributeValuesApiAxiosParamCreator(configuration).addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete population attribute value.
         * @summary Delete Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributeValuesApiAxiosParamCreator(configuration).deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributeValuesApiAxiosParamCreator(configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributeValuesApiAxiosParamCreator(configuration).fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get population attribute value.
         * @summary Get Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributeValuesApiAxiosParamCreator(configuration).getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List population attribute values.
         * @summary List Population Attribute Values
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributeValuesV1PopulationAttributeValuesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributeValuesApiAxiosParamCreator(configuration).listPopulationAttributeValuesV1PopulationAttributeValuesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributeValuesApiAxiosParamCreator(configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributeValuesApiAxiosParamCreator(configuration).removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * PopulationAttributeValuesApi - factory interface
 * @export
 */
exports.PopulationAttributeValuesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options) {
            return exports.PopulationAttributeValuesApiFp(configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options) {
            return exports.PopulationAttributeValuesApiFp(configuration).addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete population attribute value.
         * @summary Delete Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, options) {
            return exports.PopulationAttributeValuesApiFp(configuration).deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options) {
            return exports.PopulationAttributeValuesApiFp(configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options) {
            return exports.PopulationAttributeValuesApiFp(configuration).fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get population attribute value.
         * @summary Get Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, options) {
            return exports.PopulationAttributeValuesApiFp(configuration).getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * List population attribute values.
         * @summary List Population Attribute Values
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributeValuesV1PopulationAttributeValuesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return exports.PopulationAttributeValuesApiFp(configuration).listPopulationAttributeValuesV1PopulationAttributeValuesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options) {
            return exports.PopulationAttributeValuesApiFp(configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options) {
            return exports.PopulationAttributeValuesApiFp(configuration).removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PopulationAttributeValuesApi - object-oriented interface
 * @export
 * @class PopulationAttributeValuesApi
 * @extends {BaseAPI}
 */
class PopulationAttributeValuesApi extends base_1.BaseAPI {
    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete population attribute value.
     * @summary Delete Population Attribute Value
     * @param {PopulationAttributeValuesApiDeletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get population attribute value.
     * @summary Get Population Attribute Value
     * @param {PopulationAttributeValuesApiGetPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List population attribute values.
     * @summary List Population Attribute Values
     * @param {PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    listPopulationAttributeValuesV1PopulationAttributeValuesGet(requestParameters = {}, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).listPopulationAttributeValuesV1PopulationAttributeValuesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PopulationAttributeValuesApi = PopulationAttributeValuesApi;
/**
 * PopulationAttributesApi - axios parameter creator
 * @export
 */
exports.PopulationAttributesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a population attribute.
         * @summary Create Population Attribute
         * @param {PopulationAttributeIn} populationAttributeIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeV1PopulationAttributesPost: (populationAttributeIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeIn' is not null or undefined
            if (populationAttributeIn === null || populationAttributeIn === undefined) {
                throw new base_1.RequiredError('populationAttributeIn', 'Required parameter populationAttributeIn was null or undefined when calling createPopulationAttributeV1PopulationAttributesPost.');
            }
            const localVarPath = `/v1/population_attributes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof populationAttributeIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(populationAttributeIn !== undefined ? populationAttributeIn : {}) : (populationAttributeIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a population attribute value.
         * @summary Create Population Attribute Value
         * @param {string} populationAttributeId
         * @param {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn} dateRangeInLocationInNumberRangeInCategoryInFreeTextIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost: (populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeId' is not null or undefined
            if (populationAttributeId === null || populationAttributeId === undefined) {
                throw new base_1.RequiredError('populationAttributeId', 'Required parameter populationAttributeId was null or undefined when calling createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost.');
            }
            // verify required parameter 'dateRangeInLocationInNumberRangeInCategoryInFreeTextIn' is not null or undefined
            if (dateRangeInLocationInNumberRangeInCategoryInFreeTextIn === null || dateRangeInLocationInNumberRangeInCategoryInFreeTextIn === undefined) {
                throw new base_1.RequiredError('dateRangeInLocationInNumberRangeInCategoryInFreeTextIn', 'Required parameter dateRangeInLocationInNumberRangeInCategoryInFreeTextIn was null or undefined when calling createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost.');
            }
            const localVarPath = `/v1/population_attributes/{population_attribute_id}/values`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof dateRangeInLocationInNumberRangeInCategoryInFreeTextIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(dateRangeInLocationInNumberRangeInCategoryInFreeTextIn !== undefined ? dateRangeInLocationInNumberRangeInCategoryInFreeTextIn : {}) : (dateRangeInLocationInNumberRangeInCategoryInFreeTextIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete population attribute.
         * @summary Delete Population Attribute
         * @param {string} populationAttributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete: (populationAttributeId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeId' is not null or undefined
            if (populationAttributeId === null || populationAttributeId === undefined) {
                throw new base_1.RequiredError('populationAttributeId', 'Required parameter populationAttributeId was null or undefined when calling deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete.');
            }
            const localVarPath = `/v1/population_attributes/{population_attribute_id}`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get population attribute.
         * @summary Get Population Attribute
         * @param {string} populationAttributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet: (populationAttributeId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeId' is not null or undefined
            if (populationAttributeId === null || populationAttributeId === undefined) {
                throw new base_1.RequiredError('populationAttributeId', 'Required parameter populationAttributeId was null or undefined when calling getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet.');
            }
            const localVarPath = `/v1/population_attributes/{population_attribute_id}`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a population attribute\'s values.
         * @summary List A Population Attributes Values
         * @param {string} populationAttributeId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet: (populationAttributeId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeId' is not null or undefined
            if (populationAttributeId === null || populationAttributeId === undefined) {
                throw new base_1.RequiredError('populationAttributeId', 'Required parameter populationAttributeId was null or undefined when calling listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet.');
            }
            const localVarPath = `/v1/population_attributes/{population_attribute_id}/values`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List population attributes.
         * @summary List Population Attributes
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributesV1PopulationAttributesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/population_attributes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PopulationAttributesApi - functional programming interface
 * @export
 */
exports.PopulationAttributesApiFp = function (configuration) {
    return {
        /**
         * Create a population attribute.
         * @summary Create Population Attribute
         * @param {PopulationAttributeIn} populationAttributeIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributesApiAxiosParamCreator(configuration).createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a population attribute value.
         * @summary Create Population Attribute Value
         * @param {string} populationAttributeId
         * @param {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn} dateRangeInLocationInNumberRangeInCategoryInFreeTextIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributesApiAxiosParamCreator(configuration).createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete population attribute.
         * @summary Delete Population Attribute
         * @param {string} populationAttributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributesApiAxiosParamCreator(configuration).deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get population attribute.
         * @summary Get Population Attribute
         * @param {string} populationAttributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributesApiAxiosParamCreator(configuration).getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a population attribute\'s values.
         * @summary List A Population Attributes Values
         * @param {string} populationAttributeId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributesApiAxiosParamCreator(configuration).listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List population attributes.
         * @summary List Population Attributes
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributesV1PopulationAttributesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.PopulationAttributesApiAxiosParamCreator(configuration).listPopulationAttributesV1PopulationAttributesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * PopulationAttributesApi - factory interface
 * @export
 */
exports.PopulationAttributesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Create a population attribute.
         * @summary Create Population Attribute
         * @param {PopulationAttributeIn} populationAttributeIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options) {
            return exports.PopulationAttributesApiFp(configuration).createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a population attribute value.
         * @summary Create Population Attribute Value
         * @param {string} populationAttributeId
         * @param {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn} dateRangeInLocationInNumberRangeInCategoryInFreeTextIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options) {
            return exports.PopulationAttributesApiFp(configuration).createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete population attribute.
         * @summary Delete Population Attribute
         * @param {string} populationAttributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, options) {
            return exports.PopulationAttributesApiFp(configuration).deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get population attribute.
         * @summary Get Population Attribute
         * @param {string} populationAttributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, options) {
            return exports.PopulationAttributesApiFp(configuration).getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a population attribute\'s values.
         * @summary List A Population Attributes Values
         * @param {string} populationAttributeId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return exports.PopulationAttributesApiFp(configuration).listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List population attributes.
         * @summary List Population Attributes
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributesV1PopulationAttributesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return exports.PopulationAttributesApiFp(configuration).listPopulationAttributesV1PopulationAttributesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PopulationAttributesApi - object-oriented interface
 * @export
 * @class PopulationAttributesApi
 * @extends {BaseAPI}
 */
class PopulationAttributesApi extends base_1.BaseAPI {
    /**
     * Create a population attribute.
     * @summary Create Population Attribute
     * @param {PopulationAttributesApiCreatePopulationAttributeV1PopulationAttributesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    createPopulationAttributeV1PopulationAttributesPost(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).createPopulationAttributeV1PopulationAttributesPost(requestParameters.populationAttributeIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a population attribute value.
     * @summary Create Population Attribute Value
     * @param {PopulationAttributesApiCreatePopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(requestParameters.populationAttributeId, requestParameters.dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete population attribute.
     * @summary Delete Population Attribute
     * @param {PopulationAttributesApiDeletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(requestParameters.populationAttributeId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get population attribute.
     * @summary Get Population Attribute
     * @param {PopulationAttributesApiGetPopulationAttributeV1PopulationAttributesPopulationAttributeIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(requestParameters.populationAttributeId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a population attribute\'s values.
     * @summary List A Population Attributes Values
     * @param {PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(requestParameters.populationAttributeId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List population attributes.
     * @summary List Population Attributes
     * @param {PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    listPopulationAttributesV1PopulationAttributesGet(requestParameters = {}, options) {
        return exports.PopulationAttributesApiFp(this.configuration).listPopulationAttributesV1PopulationAttributesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PopulationAttributesApi = PopulationAttributesApi;
/**
 * StudiesApi - axios parameter creator
 * @export
 */
exports.StudiesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut: (studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new base_1.RequiredError('authorId', 'Required parameter authorId was null or undefined when calling addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut.');
            }
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut: (teamId, studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new base_1.RequiredError('authorId', 'Required parameter authorId was null or undefined when calling addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {StudyIn} studyIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1StudiesPost: (studyIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyIn' is not null or undefined
            if (studyIn === null || studyIn === undefined) {
                throw new base_1.RequiredError('studyIn', 'Required parameter studyIn was null or undefined when calling createAStudyV1StudiesPost.');
            }
            const localVarPath = `/v1/studies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof studyIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(studyIn !== undefined ? studyIn : {}) : (studyIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamId
         * @param {StudyIn} studyIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamIdStudiesPost: (teamId, studyIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createAStudyV1TeamsTeamIdStudiesPost.');
            }
            // verify required parameter 'studyIn' is not null or undefined
            if (studyIn === null || studyIn === undefined) {
                throw new base_1.RequiredError('studyIn', 'Required parameter studyIn was null or undefined when calling createAStudyV1TeamsTeamIdStudiesPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof studyIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(studyIn !== undefined ? studyIn : {}) : (studyIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost: (studyId, modelIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling createModelsV1StudiesStudyIdModelsPost.');
            }
            // verify required parameter 'modelIn' is not null or undefined
            if (modelIn === null || modelIn === undefined) {
                throw new base_1.RequiredError('modelIn', 'Required parameter modelIn was null or undefined when calling createModelsV1StudiesStudyIdModelsPost.');
            }
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof modelIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(modelIn !== undefined ? modelIn : {}) : (modelIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost: (teamId, studyId, modelIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createModelsV1TeamsTeamIdStudiesStudyIdModelsPost.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling createModelsV1TeamsTeamIdStudiesStudyIdModelsPost.');
            }
            // verify required parameter 'modelIn' is not null or undefined
            if (modelIn === null || modelIn === undefined) {
                throw new base_1.RequiredError('modelIn', 'Required parameter modelIn was null or undefined when calling createModelsV1TeamsTeamIdStudiesStudyIdModelsPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof modelIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(modelIn !== undefined ? modelIn : {}) : (modelIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1StudiesStudyIdDelete: (studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling deleteStudyV1StudiesStudyIdDelete.');
            }
            const localVarPath = `/v1/studies/{study_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamIdStudiesStudyIdDelete: (teamId, studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteStudyV1TeamsTeamIdStudiesStudyIdDelete.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling deleteStudyV1TeamsTeamIdStudiesStudyIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1StudiesStudyIdGet: (studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling getStudyV1StudiesStudyIdGet.');
            }
            const localVarPath = `/v1/studies/{study_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamIdStudiesStudyIdGet: (teamId, studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getStudyV1TeamsTeamIdStudiesStudyIdGet.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling getStudyV1TeamsTeamIdStudiesStudyIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet: (studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling listAssociationsV1StudiesStudyIdAssociationsGet.');
            }
            const localVarPath = `/v1/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/studies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1StudiesStudyIdAuthorsGet: (studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling listAuthorsV1StudiesStudyIdAuthorsGet.');
            }
            const localVarPath = `/v1/studies/{study_id}/authors`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet: (studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling listModelsInStudyV1StudiesStudyIdModelsGet.');
            }
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1StudiesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/studies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamIdStudiesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listStudiesV1TeamsTeamIdStudiesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet: (userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserStudiesV1UsersUserIdStudiesGet.');
            }
            const localVarPath = `/v1/users/{user_id}/studies`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1StudiesStudyIdPatch: (studyId, patchStudyOpArrayPatchStudyOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling patchStudyEndpointV1StudiesStudyIdPatch.');
            }
            // verify required parameter 'patchStudyOpArrayPatchStudyOp' is not null or undefined
            if (patchStudyOpArrayPatchStudyOp === null || patchStudyOpArrayPatchStudyOp === undefined) {
                throw new base_1.RequiredError('patchStudyOpArrayPatchStudyOp', 'Required parameter patchStudyOpArrayPatchStudyOp was null or undefined when calling patchStudyEndpointV1StudiesStudyIdPatch.');
            }
            const localVarPath = `/v1/studies/{study_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchStudyOpArrayPatchStudyOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchStudyOpArrayPatchStudyOp !== undefined ? patchStudyOpArrayPatchStudyOp : {}) : (patchStudyOpArrayPatchStudyOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamId
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch: (teamId, studyId, patchStudyOpArrayPatchStudyOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch.');
            }
            // verify required parameter 'patchStudyOpArrayPatchStudyOp' is not null or undefined
            if (patchStudyOpArrayPatchStudyOp === null || patchStudyOpArrayPatchStudyOp === undefined) {
                throw new base_1.RequiredError('patchStudyOpArrayPatchStudyOp', 'Required parameter patchStudyOpArrayPatchStudyOp was null or undefined when calling patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchStudyOpArrayPatchStudyOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchStudyOpArrayPatchStudyOp !== undefined ? patchStudyOpArrayPatchStudyOp : {}) : (patchStudyOpArrayPatchStudyOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1StudiesStudyIdPublishPost: (studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling publishStudyV1StudiesStudyIdPublishPost.');
            }
            const localVarPath = `/v1/studies/{study_id}/publish`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost: (teamId, studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/publish`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete: (studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new base_1.RequiredError('authorId', 'Required parameter authorId was null or undefined when calling removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete.');
            }
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete: (teamId, studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new base_1.RequiredError('authorId', 'Required parameter authorId was null or undefined when calling removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete: (studyId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete.');
            }
            // verify required parameter 'tagObjectId' is not null or undefined
            if (tagObjectId === null || tagObjectId === undefined) {
                throw new base_1.RequiredError('tagObjectId', 'Required parameter tagObjectId was null or undefined when calling removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete.');
            }
            const localVarPath = `/v1/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete: (teamId, studyId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete.');
            }
            // verify required parameter 'tagObjectId' is not null or undefined
            if (tagObjectId === null || tagObjectId === undefined) {
                throw new base_1.RequiredError('tagObjectId', 'Required parameter tagObjectId was null or undefined when calling removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut: (studyId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut.');
            }
            // verify required parameter 'tagObjectId' is not null or undefined
            if (tagObjectId === null || tagObjectId === undefined) {
                throw new base_1.RequiredError('tagObjectId', 'Required parameter tagObjectId was null or undefined when calling tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut.');
            }
            const localVarPath = `/v1/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut: (teamId, studyId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut.');
            }
            // verify required parameter 'tagObjectId' is not null or undefined
            if (tagObjectId === null || tagObjectId === undefined) {
                throw new base_1.RequiredError('tagObjectId', 'Required parameter tagObjectId was null or undefined when calling tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * StudiesApi - functional programming interface
 * @export
 */
exports.StudiesApiFp = function (configuration) {
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {StudyIn} studyIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1StudiesPost(studyIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).createAStudyV1StudiesPost(studyIn, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamId
         * @param {StudyIn} studyIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamIdStudiesPost(teamId, studyIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).createAStudyV1TeamsTeamIdStudiesPost(teamId, studyIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1StudiesStudyIdDelete(studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).deleteStudyV1StudiesStudyIdDelete(studyId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1StudiesStudyIdGet(studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).getStudyV1StudiesStudyIdGet(studyId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).listAuthenticatedUserStudiesV1UserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1StudiesStudyIdAuthorsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).listAuthorsV1StudiesStudyIdAuthorsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1StudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).listStudiesV1StudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).listUserStudiesV1UsersUserIdStudiesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).patchStudyEndpointV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamId
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1StudiesStudyIdPublishPost(studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).publishStudyV1StudiesStudyIdPublishPost(studyId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId, tagObjectId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId, tagObjectId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.StudiesApiAxiosParamCreator(configuration).tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * StudiesApi - factory interface
 * @export
 */
exports.StudiesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options) {
            return exports.StudiesApiFp(configuration).addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options) {
            return exports.StudiesApiFp(configuration).addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {StudyIn} studyIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1StudiesPost(studyIn, teamId, options) {
            return exports.StudiesApiFp(configuration).createAStudyV1StudiesPost(studyIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamId
         * @param {StudyIn} studyIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamIdStudiesPost(teamId, studyIn, options) {
            return exports.StudiesApiFp(configuration).createAStudyV1TeamsTeamIdStudiesPost(teamId, studyIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options) {
            return exports.StudiesApiFp(configuration).createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options) {
            return exports.StudiesApiFp(configuration).createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1StudiesStudyIdDelete(studyId, options) {
            return exports.StudiesApiFp(configuration).deleteStudyV1StudiesStudyIdDelete(studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options) {
            return exports.StudiesApiFp(configuration).deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1StudiesStudyIdGet(studyId, options) {
            return exports.StudiesApiFp(configuration).getStudyV1StudiesStudyIdGet(studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options) {
            return exports.StudiesApiFp(configuration).getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.StudiesApiFp(configuration).listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.StudiesApiFp(configuration).listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.StudiesApiFp(configuration).listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.StudiesApiFp(configuration).listAuthenticatedUserStudiesV1UserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1StudiesStudyIdAuthorsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return exports.StudiesApiFp(configuration).listAuthorsV1StudiesStudyIdAuthorsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return exports.StudiesApiFp(configuration).listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.StudiesApiFp(configuration).listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.StudiesApiFp(configuration).listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1StudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return exports.StudiesApiFp(configuration).listStudiesV1StudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return exports.StudiesApiFp(configuration).listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.StudiesApiFp(configuration).listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.StudiesApiFp(configuration).listUserStudiesV1UsersUserIdStudiesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, options) {
            return exports.StudiesApiFp(configuration).patchStudyEndpointV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamId
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options) {
            return exports.StudiesApiFp(configuration).patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1StudiesStudyIdPublishPost(studyId, options) {
            return exports.StudiesApiFp(configuration).publishStudyV1StudiesStudyIdPublishPost(studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options) {
            return exports.StudiesApiFp(configuration).publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options) {
            return exports.StudiesApiFp(configuration).removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options) {
            return exports.StudiesApiFp(configuration).removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId, tagObjectId, options) {
            return exports.StudiesApiFp(configuration).removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options) {
            return exports.StudiesApiFp(configuration).removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId, tagObjectId, options) {
            return exports.StudiesApiFp(configuration).tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options) {
            return exports.StudiesApiFp(configuration).tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * StudiesApi - object-oriented interface
 * @export
 * @class StudiesApi
 * @extends {BaseAPI}
 */
class StudiesApi extends base_1.BaseAPI {
    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {StudiesApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {StudiesApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(requestParameters.teamId, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Study.
     * @summary Create A Study.
     * @param {StudiesApiCreateAStudyV1StudiesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    createAStudyV1StudiesPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).createAStudyV1StudiesPost(requestParameters.studyIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Study.
     * @summary Create A Study.
     * @param {StudiesApiCreateAStudyV1TeamsTeamIdStudiesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    createAStudyV1TeamsTeamIdStudiesPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).createAStudyV1TeamsTeamIdStudiesPost(requestParameters.teamId, requestParameters.studyIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {StudiesApiCreateModelsV1StudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    createModelsV1StudiesStudyIdModelsPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).createModelsV1StudiesStudyIdModelsPost(requestParameters.studyId, requestParameters.modelIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {StudiesApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(requestParameters.teamId, requestParameters.studyId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Study
     * @param {StudiesApiDeleteStudyV1StudiesStudyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    deleteStudyV1StudiesStudyIdDelete(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).deleteStudyV1StudiesStudyIdDelete(requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Study
     * @param {StudiesApiDeleteStudyV1TeamsTeamIdStudiesStudyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(requestParameters.teamId, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Study.
     * @summary Get Study
     * @param {StudiesApiGetStudyV1StudiesStudyIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    getStudyV1StudiesStudyIdGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).getStudyV1StudiesStudyIdGet(requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Study.
     * @summary Get Study
     * @param {StudiesApiGetStudyV1TeamsTeamIdStudiesStudyIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    getStudyV1TeamsTeamIdStudiesStudyIdGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).getStudyV1TeamsTeamIdStudiesStudyIdGet(requestParameters.teamId, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {StudiesApiListAssociationsV1StudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {StudiesApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {StudiesApiListAuthenticatedUserStudiesV1UserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters = {}, options) {
        return exports.StudiesApiFp(this.configuration).listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a study\'s authors.
     * @summary List Authors
     * @param {StudiesApiListAuthorsV1StudiesStudyIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listAuthorsV1StudiesStudyIdAuthorsGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listAuthorsV1StudiesStudyIdAuthorsGet(requestParameters.studyId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a study\'s authors.
     * @summary List Authors
     * @param {StudiesApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {StudiesApiListModelsInStudyV1StudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters.studyId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {StudiesApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Studies.
     * @summary List Studies
     * @param {StudiesApiListStudiesV1StudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listStudiesV1StudiesGet(requestParameters = {}, options) {
        return exports.StudiesApiFp(this.configuration).listStudiesV1StudiesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Studies.
     * @summary List Studies
     * @param {StudiesApiListStudiesV1TeamsTeamIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listStudiesV1TeamsTeamIdStudiesGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listStudiesV1TeamsTeamIdStudiesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {StudiesApiListUserStudiesV1UsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listUserStudiesV1UsersUserIdStudiesGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listUserStudiesV1UsersUserIdStudiesGet(requestParameters.userId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Study resource with partial update.
     * @summary Patch Study Endpoint
     * @param {StudiesApiPatchStudyEndpointV1StudiesStudyIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    patchStudyEndpointV1StudiesStudyIdPatch(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).patchStudyEndpointV1StudiesStudyIdPatch(requestParameters.studyId, requestParameters.patchStudyOpArrayPatchStudyOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Study resource with partial update.
     * @summary Patch Study Endpoint
     * @param {StudiesApiPatchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(requestParameters.teamId, requestParameters.studyId, requestParameters.patchStudyOpArrayPatchStudyOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Publish the study making it visible to other users.
     * @summary Publish Study
     * @param {StudiesApiPublishStudyV1StudiesStudyIdPublishPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    publishStudyV1StudiesStudyIdPublishPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).publishStudyV1StudiesStudyIdPublishPost(requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Publish the study making it visible to other users.
     * @summary Publish Study
     * @param {StudiesApiPublishStudyV1TeamsTeamIdStudiesStudyIdPublishPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(requestParameters.teamId, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {StudiesApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {StudiesApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(requestParameters.teamId, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the study with object with provided id.
     * @summary Remove Object Tag From Study
     * @param {StudiesApiRemoveObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the study with object with provided id.
     * @summary Remove Object Tag From Study
     * @param {StudiesApiRemoveObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters.teamId, requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the study with object with provided id.
     * @summary Tag Study With Object
     * @param {StudiesApiTagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the study with object with provided id.
     * @summary Tag Study With Object
     * @param {StudiesApiTagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(requestParameters.teamId, requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.StudiesApi = StudiesApi;
/**
 * SystemApi - axios parameter creator
 * @export
 */
exports.SystemApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet: (conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptId' is not null or undefined
            if (conceptId === null || conceptId === undefined) {
                throw new base_1.RequiredError('conceptId', 'Required parameter conceptId was null or undefined when calling listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet.');
            }
            const localVarPath = `/v1/concepts/{concept_id}/system/concepts`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} teamId
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet: (teamId, conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet.');
            }
            // verify required parameter 'conceptId' is not null or undefined
            if (conceptId === null || conceptId === undefined) {
                throw new base_1.RequiredError('conceptId', 'Required parameter conceptId was null or undefined when calling listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}/system/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet: (featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/features/{feature_id}/system/features`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet: (teamId, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}/system/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamId
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet: (teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/system/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet: (variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}/system/features`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamId
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet: (teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/system/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet: (variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}/system/variables`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SystemApi - functional programming interface
 * @export
 */
exports.SystemApiFp = function (configuration) {
    return {
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SystemApiAxiosParamCreator(configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} teamId
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet(teamId, conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SystemApiAxiosParamCreator(configuration).listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet(teamId, conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SystemApiAxiosParamCreator(configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet(teamId, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SystemApiAxiosParamCreator(configuration).listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet(teamId, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamId
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SystemApiAxiosParamCreator(configuration).listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SystemApiAxiosParamCreator(configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamId
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SystemApiAxiosParamCreator(configuration).listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.SystemApiAxiosParamCreator(configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * SystemApi - factory interface
 * @export
 */
exports.SystemApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return exports.SystemApiFp(configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} teamId
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet(teamId, conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return exports.SystemApiFp(configuration).listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet(teamId, conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return exports.SystemApiFp(configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet(teamId, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return exports.SystemApiFp(configuration).listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet(teamId, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamId
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return exports.SystemApiFp(configuration).listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return exports.SystemApiFp(configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamId
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return exports.SystemApiFp(configuration).listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return exports.SystemApiFp(configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
class SystemApi extends base_1.BaseAPI {
    /**
     * Get the concepts in the requested concept\'s system.
     * @summary List System Of Concepts
     * @param {SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(requestParameters, options) {
        return exports.SystemApiFp(this.configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(requestParameters.conceptId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the concepts in the requested concept\'s system.
     * @summary List System Of Concepts
     * @param {SystemApiListSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet(requestParameters, options) {
        return exports.SystemApiFp(this.configuration).listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet(requestParameters.teamId, requestParameters.conceptId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested feature\'s system.
     * @summary List System Of Features
     * @param {SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(requestParameters, options) {
        return exports.SystemApiFp(this.configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(requestParameters.featureId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested feature\'s system.
     * @summary List System Of Features
     * @param {SystemApiListSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet(requestParameters, options) {
        return exports.SystemApiFp(this.configuration).listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet(requestParameters.teamId, requestParameters.featureId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested variable\'s system.
     * @summary List System Of Features
     * @param {SystemApiListSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet(requestParameters, options) {
        return exports.SystemApiFp(this.configuration).listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet(requestParameters.teamId, requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested variable\'s system.
     * @summary List System Of Features
     * @param {SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(requestParameters, options) {
        return exports.SystemApiFp(this.configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the variables in the requested variable\'s system.
     * @summary List System Of Variables
     * @param {SystemApiListSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet(requestParameters, options) {
        return exports.SystemApiFp(this.configuration).listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet(requestParameters.teamId, requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the variables in the requested variable\'s system.
     * @summary List System Of Variables
     * @param {SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(requestParameters, options) {
        return exports.SystemApiFp(this.configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SystemApi = SystemApi;
/**
 * TeamsApi - axios parameter creator
 * @export
 */
exports.TeamsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add a user to a team by user_id.
         * @summary Add A User To A Team.
         * @param {string} userId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAUserToATeamV1TeamsTeamIdUsersUserIdPut: (userId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling addAUserToATeamV1TeamsTeamIdUsersUserIdPut.');
            }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling addAUserToATeamV1TeamsTeamIdUsersUserIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut: (teamId, studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new base_1.RequiredError('authorId', 'Required parameter authorId was null or undefined when calling addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut: (teamId, dashboardId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new base_1.RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut: (teamId, datasetId, featureId, index, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut: (teamId, datasetId, parentId, reconcileFeatures, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut.');
            }
            // verify required parameter 'parentId' is not null or undefined
            if (parentId === null || parentId === undefined) {
                throw new base_1.RequiredError('parentId', 'Required parameter parentId was null or undefined when calling addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (reconcileFeatures !== undefined) {
                localVarQueryParameter['reconcile_features'] = reconcileFeatures;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: (teamId, datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new base_1.RequiredError('populationAttributeValueId', 'Required parameter populationAttributeValueId was null or undefined when calling addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamId
         * @param {StudyIn} studyIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamIdStudiesPost: (teamId, studyIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createAStudyV1TeamsTeamIdStudiesPost.');
            }
            // verify required parameter 'studyIn' is not null or undefined
            if (studyIn === null || studyIn === undefined) {
                throw new base_1.RequiredError('studyIn', 'Required parameter studyIn was null or undefined when calling createAStudyV1TeamsTeamIdStudiesPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof studyIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(studyIn !== undefined ? studyIn : {}) : (studyIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new user.
         * @summary Create A User.
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserV1TeamsTeamIdUserPost: (teamId, userProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createAUserV1TeamsTeamIdUserPost.');
            }
            // verify required parameter 'userProfileIn' is not null or undefined
            if (userProfileIn === null || userProfileIn === undefined) {
                throw new base_1.RequiredError('userProfileIn', 'Required parameter userProfileIn was null or undefined when calling createAUserV1TeamsTeamIdUserPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/user`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof userProfileIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(userProfileIn !== undefined ? userProfileIn : {}) : (userProfileIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamId
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamIdVariablesPost: (teamId, variableIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createAVariableV1TeamsTeamIdVariablesPost.');
            }
            // verify required parameter 'variableIn' is not null or undefined
            if (variableIn === null || variableIn === undefined) {
                throw new base_1.RequiredError('variableIn', 'Required parameter variableIn was null or undefined when calling createAVariableV1TeamsTeamIdVariablesPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof variableIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(variableIn !== undefined ? variableIn : {}) : (variableIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost: (teamId, datasetId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost.');
            }
            // verify required parameter 'featureIn' is not null or undefined
            if (featureIn === null || featureIn === undefined) {
                throw new base_1.RequiredError('featureIn', 'Required parameter featureIn was null or undefined when calling createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof featureIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(featureIn !== undefined ? featureIn : {}) : (featureIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost: (teamId, datasetId, associationInArrayAssociationIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost.');
            }
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            if (associationInArrayAssociationIn === null || associationInArrayAssociationIn === undefined) {
                throw new base_1.RequiredError('associationInArrayAssociationIn', 'Required parameter associationInArrayAssociationIn was null or undefined when calling createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof associationInArrayAssociationIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(associationInArrayAssociationIn !== undefined ? associationInArrayAssociationIn : {}) : (associationInArrayAssociationIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost: (teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost.');
            }
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            if (associationInArrayAssociationIn === null || associationInArrayAssociationIn === undefined) {
                throw new base_1.RequiredError('associationInArrayAssociationIn', 'Required parameter associationInArrayAssociationIn was null or undefined when calling createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof associationInArrayAssociationIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(associationInArrayAssociationIn !== undefined ? associationInArrayAssociationIn : {}) : (associationInArrayAssociationIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamId
         * @param {AuthorIn} authorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamIdAuthorsPost: (teamId, authorIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createAuthorV1TeamsTeamIdAuthorsPost.');
            }
            // verify required parameter 'authorIn' is not null or undefined
            if (authorIn === null || authorIn === undefined) {
                throw new base_1.RequiredError('authorIn', 'Required parameter authorIn was null or undefined when calling createAuthorV1TeamsTeamIdAuthorsPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/authors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof authorIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(authorIn !== undefined ? authorIn : {}) : (authorIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {string} teamId
         * @param {ConceptIn} conceptIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1TeamsTeamIdConceptsPost: (teamId, conceptIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createConceptV1TeamsTeamIdConceptsPost.');
            }
            // verify required parameter 'conceptIn' is not null or undefined
            if (conceptIn === null || conceptIn === undefined) {
                throw new base_1.RequiredError('conceptIn', 'Required parameter conceptIn was null or undefined when calling createConceptV1TeamsTeamIdConceptsPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof conceptIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(conceptIn !== undefined ? conceptIn : {}) : (conceptIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {string} teamId
         * @param {DashboardIn} dashboardIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1TeamsTeamIdDashboardsPost: (teamId, dashboardIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createDashboardPostV1TeamsTeamIdDashboardsPost.');
            }
            // verify required parameter 'dashboardIn' is not null or undefined
            if (dashboardIn === null || dashboardIn === undefined) {
                throw new base_1.RequiredError('dashboardIn', 'Required parameter dashboardIn was null or undefined when calling createDashboardPostV1TeamsTeamIdDashboardsPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/dashboards`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof dashboardIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(dashboardIn !== undefined ? dashboardIn : {}) : (dashboardIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamIdDatasetsPost: (teamId, datasetIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createDatasetV1TeamsTeamIdDatasetsPost.');
            }
            // verify required parameter 'datasetIn' is not null or undefined
            if (datasetIn === null || datasetIn === undefined) {
                throw new base_1.RequiredError('datasetIn', 'Required parameter datasetIn was null or undefined when calling createDatasetV1TeamsTeamIdDatasetsPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof datasetIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(datasetIn !== undefined ? datasetIn : {}) : (datasetIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamIdFeaturesPost: (teamId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createFeatureV1TeamsTeamIdFeaturesPost.');
            }
            // verify required parameter 'featureIn' is not null or undefined
            if (featureIn === null || featureIn === undefined) {
                throw new base_1.RequiredError('featureIn', 'Required parameter featureIn was null or undefined when calling createFeatureV1TeamsTeamIdFeaturesPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof featureIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(featureIn !== undefined ? featureIn : {}) : (featureIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {string} teamId
         * @param {IntegrationCreate} integrationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1TeamsTeamIdIntegrationsPost: (teamId, integrationCreate, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createIntegrationV1TeamsTeamIdIntegrationsPost.');
            }
            // verify required parameter 'integrationCreate' is not null or undefined
            if (integrationCreate === null || integrationCreate === undefined) {
                throw new base_1.RequiredError('integrationCreate', 'Required parameter integrationCreate was null or undefined when calling createIntegrationV1TeamsTeamIdIntegrationsPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/integrations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof integrationCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(integrationCreate !== undefined ? integrationCreate : {}) : (integrationCreate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new message.
         * @summary Create Message
         * @param {string} teamId
         * @param {MessageIn} messageIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1TeamsTeamIdMessagesPost: (teamId, messageIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createMessageV1TeamsTeamIdMessagesPost.');
            }
            // verify required parameter 'messageIn' is not null or undefined
            if (messageIn === null || messageIn === undefined) {
                throw new base_1.RequiredError('messageIn', 'Required parameter messageIn was null or undefined when calling createMessageV1TeamsTeamIdMessagesPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/messages`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof messageIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(messageIn !== undefined ? messageIn : {}) : (messageIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost: (teamId, studyId, modelIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createModelsV1TeamsTeamIdStudiesStudyIdModelsPost.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling createModelsV1TeamsTeamIdStudiesStudyIdModelsPost.');
            }
            // verify required parameter 'modelIn' is not null or undefined
            if (modelIn === null || modelIn === undefined) {
                throw new base_1.RequiredError('modelIn', 'Required parameter modelIn was null or undefined when calling createModelsV1TeamsTeamIdStudiesStudyIdModelsPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof modelIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(modelIn !== undefined ? modelIn : {}) : (modelIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamId
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamIdVariablesBulkPost: (teamId, arrayVariableInVariableIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createMultipleVariablesV1TeamsTeamIdVariablesBulkPost.');
            }
            // verify required parameter 'arrayVariableInVariableIn' is not null or undefined
            if (arrayVariableInVariableIn === null || arrayVariableInVariableIn === undefined) {
                throw new base_1.RequiredError('arrayVariableInVariableIn', 'Required parameter arrayVariableInVariableIn was null or undefined when calling createMultipleVariablesV1TeamsTeamIdVariablesBulkPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables/bulk`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof arrayVariableInVariableIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(arrayVariableInVariableIn !== undefined ? arrayVariableInVariableIn : {}) : (arrayVariableInVariableIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete: (teamId, modelId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete.');
            }
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: (teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete.');
            }
            // verify required parameter 'bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete' is not null or undefined
            if (bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete === null || bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete === undefined) {
                throw new base_1.RequiredError('bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'Required parameter bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete was null or undefined when calling deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete !== undefined ? bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete : {}) : (bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete: (teamId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new base_1.RequiredError('authorId', 'Required parameter authorId was null or undefined when calling deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1TeamsTeamIdConceptsConceptIdDelete: (teamId, conceptId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteConceptV1TeamsTeamIdConceptsConceptIdDelete.');
            }
            // verify required parameter 'conceptId' is not null or undefined
            if (conceptId === null || conceptId === undefined) {
                throw new base_1.RequiredError('conceptId', 'Required parameter conceptId was null or undefined when calling deleteConceptV1TeamsTeamIdConceptsConceptIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete: (teamId, dashboardId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete.');
            }
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new base_1.RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete: (teamId, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete: (teamId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: (teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete.');
            }
            // verify required parameter 'bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete' is not null or undefined
            if (bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete === null || bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete === undefined) {
                throw new base_1.RequiredError('bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'Required parameter bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete was null or undefined when calling deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete !== undefined ? bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete : {}) : (bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamIdModelsModelIdDelete: (teamId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteModelV1TeamsTeamIdModelsModelIdDelete.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling deleteModelV1TeamsTeamIdModelsModelIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamIdStudiesStudyIdDelete: (teamId, studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteStudyV1TeamsTeamIdStudiesStudyIdDelete.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling deleteStudyV1TeamsTeamIdStudiesStudyIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamIdVariablesVariableIdDelete: (teamId, variableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteVariableV1TeamsTeamIdVariablesVariableIdDelete.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling deleteVariableV1TeamsTeamIdVariablesVariableIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet: (teamId, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet: (teamId, associationId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet.');
            }
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User\'S Teams
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet: (teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/teams`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {string} teamId
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1TeamsTeamIdUserGet: (teamId, includeAvatar, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getAuthenticatedUserV1TeamsTeamIdUserGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamIdAuthorsAuthorIdGet: (teamId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getAuthorV1TeamsTeamIdAuthorsAuthorIdGet.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new base_1.RequiredError('authorId', 'Required parameter authorId was null or undefined when calling getAuthorV1TeamsTeamIdAuthorsAuthorIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch dataset graph.
         * @summary Get Concept Graph
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1TeamsTeamIdGraphConceptGraphGet: (teamId, minRelationshipStrength, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getConceptGraphV1TeamsTeamIdGraphConceptGraphGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/graph/concept_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (minRelationshipStrength !== undefined) {
                localVarQueryParameter['min_relationship_strength'] = minRelationshipStrength;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1TeamsTeamIdConceptsConceptIdGet: (teamId, conceptId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getConceptV1TeamsTeamIdConceptsConceptIdGet.');
            }
            // verify required parameter 'conceptId' is not null or undefined
            if (conceptId === null || conceptId === undefined) {
                throw new base_1.RequiredError('conceptId', 'Required parameter conceptId was null or undefined when calling getConceptV1TeamsTeamIdConceptsConceptIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1TeamsTeamIdDashboardsDashboardIdGet: (teamId, dashboardId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getDashboardV1TeamsTeamIdDashboardsDashboardIdGet.');
            }
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new base_1.RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling getDashboardV1TeamsTeamIdDashboardsDashboardIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet: (teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/graph/dataset_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamIdDatasetsDatasetIdGet: (teamId, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getDatasetV1TeamsTeamIdDatasetsDatasetIdGet.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling getDatasetV1TeamsTeamIdDatasetsDatasetIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamIdFeaturesFeatureIdGet: (teamId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getFeatureV1TeamsTeamIdFeaturesFeatureIdGet.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling getFeatureV1TeamsTeamIdFeaturesFeatureIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} teamId
         * @param {string} integrationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet: (teamId, integrationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet.');
            }
            // verify required parameter 'integrationId' is not null or undefined
            if (integrationId === null || integrationId === undefined) {
                throw new base_1.RequiredError('integrationId', 'Required parameter integrationId was null or undefined when calling getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/integrations/{integration_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationsV1TeamsTeamIdIntegrationsGet: (teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getIntegrationsV1TeamsTeamIdIntegrationsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/integrations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} teamId
         * @param {string} messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1TeamsTeamIdMessagesMessageIdGet: (teamId, messageId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getMessageV1TeamsTeamIdMessagesMessageIdGet.');
            }
            // verify required parameter 'messageId' is not null or undefined
            if (messageId === null || messageId === undefined) {
                throw new base_1.RequiredError('messageId', 'Required parameter messageId was null or undefined when calling getMessageV1TeamsTeamIdMessagesMessageIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/messages/{message_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamIdModelsModelIdGet: (teamId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getModelV1TeamsTeamIdModelsModelIdGet.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling getModelV1TeamsTeamIdModelsModelIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get pending invites of a team.
         * @summary Get Pending Invites Of A Team.
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet: (teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/invites`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet: (teamId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet.');
            }
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/direction`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet: (teamId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet.');
            }
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/reproducibility`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet: (teamId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet.');
            }
            // verify required parameter 'associationId' is not null or undefined
            if (associationId === null || associationId === undefined) {
                throw new base_1.RequiredError('associationId', 'Required parameter associationId was null or undefined when calling getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/strength`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamIdStudiesStudyIdGet: (teamId, studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getStudyV1TeamsTeamIdStudiesStudyIdGet.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling getStudyV1TeamsTeamIdStudiesStudyIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} teamId
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1TeamsTeamIdUsersUserIdGet: (teamId, userId, includeAvatar, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getUserV1TeamsTeamIdUsersUserIdGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling getUserV1TeamsTeamIdUsersUserIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} teamId
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1TeamsTeamIdUsersGet: (teamId, email, includeAvatar, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getUsersV1TeamsTeamIdUsersGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamIdVariablesVariableIdGet: (teamId, variableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getVariableV1TeamsTeamIdVariablesVariableIdGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling getVariableV1TeamsTeamIdVariablesVariableIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a user to a team by email.
         * @summary Invite An Email To The Team.
         * @param {string} teamId
         * @param {UserInvite} userInvite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost: (teamId, userInvite, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost.');
            }
            // verify required parameter 'userInvite' is not null or undefined
            if (userInvite === null || userInvite === undefined) {
                throw new base_1.RequiredError('userInvite', 'Required parameter userInvite was null or undefined when calling inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/invites`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof userInvite !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(userInvite !== undefined ? userInvite : {}) : (userInvite || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/studies/{study_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdAssociationsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAssociationsV1TeamsTeamIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            if (conceptRelationship !== undefined) {
                localVarQueryParameter['concept_relationship'] = conceptRelationship;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet: (teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet: (teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdAuthorsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthorsV1TeamsTeamIdAuthorsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/authors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1TeamsTeamIdConceptsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listConceptsV1TeamsTeamIdConceptsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet: (teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet.');
            }
            // verify required parameter 'dashboardId' is not null or undefined
            if (dashboardId === null || dashboardId === undefined) {
                throw new base_1.RequiredError('dashboardId', 'Required parameter dashboardId was null or undefined when calling listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdDashboardsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listDashboardsV1TeamsTeamIdDashboardsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/dashboards`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/parents`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamIdDatasetsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listDatasetsV1TeamsTeamIdDatasetsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamIdFeaturesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listFeaturesV1TeamsTeamIdFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamIdModelsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listModelsV1TeamsTeamIdModelsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamIdStudiesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listStudiesV1TeamsTeamIdStudiesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} teamId
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet: (teamId, conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet.');
            }
            // verify required parameter 'conceptId' is not null or undefined
            if (conceptId === null || conceptId === undefined) {
                throw new base_1.RequiredError('conceptId', 'Required parameter conceptId was null or undefined when calling listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}/system/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet: (teamId, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}/system/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamId
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet: (teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/system/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamId
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet: (teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/system/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listUserModelsV1TeamsTeamIdUsersUserIdModelsGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserModelsV1TeamsTeamIdUsersUserIdModelsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamIdVariablesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listVariablesV1TeamsTeamIdVariablesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch: (teamId, modelId, bulkPatchAssociationOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch.');
            }
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            if (bulkPatchAssociationOp === null || bulkPatchAssociationOp === undefined) {
                throw new base_1.RequiredError('bulkPatchAssociationOp', 'Required parameter bulkPatchAssociationOp was null or undefined when calling patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bulkPatchAssociationOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bulkPatchAssociationOp !== undefined ? bulkPatchAssociationOp : {}) : (bulkPatchAssociationOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch: (teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch.');
            }
            // verify required parameter 'patchDatasetOpArrayPatchDatasetOp' is not null or undefined
            if (patchDatasetOpArrayPatchDatasetOp === null || patchDatasetOpArrayPatchDatasetOp === undefined) {
                throw new base_1.RequiredError('patchDatasetOpArrayPatchDatasetOp', 'Required parameter patchDatasetOpArrayPatchDatasetOp was null or undefined when calling patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchDatasetOpArrayPatchDatasetOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchDatasetOpArrayPatchDatasetOp !== undefined ? patchDatasetOpArrayPatchDatasetOp : {}) : (patchDatasetOpArrayPatchDatasetOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch: (teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch.');
            }
            // verify required parameter 'patchFeatureOpArrayPatchFeatureOp' is not null or undefined
            if (patchFeatureOpArrayPatchFeatureOp === null || patchFeatureOpArrayPatchFeatureOp === undefined) {
                throw new base_1.RequiredError('patchFeatureOpArrayPatchFeatureOp', 'Required parameter patchFeatureOpArrayPatchFeatureOp was null or undefined when calling patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch.');
            }
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchFeatureOpArrayPatchFeatureOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchFeatureOpArrayPatchFeatureOp !== undefined ? patchFeatureOpArrayPatchFeatureOp : {}) : (patchFeatureOpArrayPatchFeatureOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamIdModelsModelIdPatch: (teamId, modelId, patchModelOpArrayPatchModelOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling patchModelV1TeamsTeamIdModelsModelIdPatch.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling patchModelV1TeamsTeamIdModelsModelIdPatch.');
            }
            // verify required parameter 'patchModelOpArrayPatchModelOp' is not null or undefined
            if (patchModelOpArrayPatchModelOp === null || patchModelOpArrayPatchModelOp === undefined) {
                throw new base_1.RequiredError('patchModelOpArrayPatchModelOp', 'Required parameter patchModelOpArrayPatchModelOp was null or undefined when calling patchModelV1TeamsTeamIdModelsModelIdPatch.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchModelOpArrayPatchModelOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchModelOpArrayPatchModelOp !== undefined ? patchModelOpArrayPatchModelOp : {}) : (patchModelOpArrayPatchModelOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamId
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch: (teamId, bulkPatchFeatureOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch.');
            }
            // verify required parameter 'bulkPatchFeatureOp' is not null or undefined
            if (bulkPatchFeatureOp === null || bulkPatchFeatureOp === undefined) {
                throw new base_1.RequiredError('bulkPatchFeatureOp', 'Required parameter bulkPatchFeatureOp was null or undefined when calling patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch.');
            }
            const localVarPath = `/v1/teams/{team_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof bulkPatchFeatureOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bulkPatchFeatureOp !== undefined ? bulkPatchFeatureOp : {}) : (bulkPatchFeatureOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamId
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch: (teamId, studyId, patchStudyOpArrayPatchStudyOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch.');
            }
            // verify required parameter 'patchStudyOpArrayPatchStudyOp' is not null or undefined
            if (patchStudyOpArrayPatchStudyOp === null || patchStudyOpArrayPatchStudyOp === undefined) {
                throw new base_1.RequiredError('patchStudyOpArrayPatchStudyOp', 'Required parameter patchStudyOpArrayPatchStudyOp was null or undefined when calling patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchStudyOpArrayPatchStudyOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchStudyOpArrayPatchStudyOp !== undefined ? patchStudyOpArrayPatchStudyOp : {}) : (patchStudyOpArrayPatchStudyOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamIdVariablesVariableIdPatch: (teamId, variableId, patchVariableOpArrayPatchVariableOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling patchVariableV1TeamsTeamIdVariablesVariableIdPatch.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling patchVariableV1TeamsTeamIdVariablesVariableIdPatch.');
            }
            // verify required parameter 'patchVariableOpArrayPatchVariableOp' is not null or undefined
            if (patchVariableOpArrayPatchVariableOp === null || patchVariableOpArrayPatchVariableOp === undefined) {
                throw new base_1.RequiredError('patchVariableOpArrayPatchVariableOp', 'Required parameter patchVariableOpArrayPatchVariableOp was null or undefined when calling patchVariableV1TeamsTeamIdVariablesVariableIdPatch.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchVariableOpArrayPatchVariableOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchVariableOpArrayPatchVariableOp !== undefined ? patchVariableOpArrayPatchVariableOp : {}) : (patchVariableOpArrayPatchVariableOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an Team.
         * @summary Post Team
         * @param {TeamIn} teamIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamV1TeamsPost: (teamIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamIn' is not null or undefined
            if (teamIn === null || teamIn === undefined) {
                throw new base_1.RequiredError('teamIn', 'Required parameter teamIn was null or undefined when calling postTeamV1TeamsPost.');
            }
            const localVarPath = `/v1/teams`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof teamIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(teamIn !== undefined ? teamIn : {}) : (teamIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost: (teamId, studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/publish`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a user from a team by user_id.
         * @summary Remove A User From A Team.
         * @param {string} userId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete: (userId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete.');
            }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove an email invite from a team by email.
         * @summary Remove An Email Invite From A Team.
         * @param {string} email
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete: (email, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new base_1.RequiredError('email', 'Required parameter email was null or undefined when calling removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete.');
            }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/invites/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete: (teamId, studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new base_1.RequiredError('authorId', 'Required parameter authorId was null or undefined when calling removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete: (teamId, datasetId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete: (teamId, datasetId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete.');
            }
            // verify required parameter 'tagObjectId' is not null or undefined
            if (tagObjectId === null || tagObjectId === undefined) {
                throw new base_1.RequiredError('tagObjectId', 'Required parameter tagObjectId was null or undefined when calling removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete: (teamId, studyId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete.');
            }
            // verify required parameter 'tagObjectId' is not null or undefined
            if (tagObjectId === null || tagObjectId === undefined) {
                throw new base_1.RequiredError('tagObjectId', 'Required parameter tagObjectId was null or undefined when calling removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete: (teamId, datasetId, parentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete.');
            }
            // verify required parameter 'parentId' is not null or undefined
            if (parentId === null || parentId === undefined) {
                throw new base_1.RequiredError('parentId', 'Required parameter parentId was null or undefined when calling removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: (teamId, datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            if (populationAttributeValueId === null || populationAttributeValueId === undefined) {
                throw new base_1.RequiredError('populationAttributeValueId', 'Required parameter populationAttributeValueId was null or undefined when calling removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut: (teamId, datasetId, datasetIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut.');
            }
            // verify required parameter 'datasetIn' is not null or undefined
            if (datasetIn === null || datasetIn === undefined) {
                throw new base_1.RequiredError('datasetIn', 'Required parameter datasetIn was null or undefined when calling replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof datasetIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(datasetIn !== undefined ? datasetIn : {}) : (datasetIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut: (teamId, featureId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureId' is not null or undefined
            if (featureId === null || featureId === undefined) {
                throw new base_1.RequiredError('featureId', 'Required parameter featureId was null or undefined when calling replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut.');
            }
            // verify required parameter 'featureIn' is not null or undefined
            if (featureIn === null || featureIn === undefined) {
                throw new base_1.RequiredError('featureIn', 'Required parameter featureIn was null or undefined when calling replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof featureIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(featureIn !== undefined ? featureIn : {}) : (featureIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamIdModelsModelIdPut: (teamId, modelId, modelIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling replaceModelV1TeamsTeamIdModelsModelIdPut.');
            }
            // verify required parameter 'modelId' is not null or undefined
            if (modelId === null || modelId === undefined) {
                throw new base_1.RequiredError('modelId', 'Required parameter modelId was null or undefined when calling replaceModelV1TeamsTeamIdModelsModelIdPut.');
            }
            // verify required parameter 'modelIn' is not null or undefined
            if (modelIn === null || modelIn === undefined) {
                throw new base_1.RequiredError('modelIn', 'Required parameter modelIn was null or undefined when calling replaceModelV1TeamsTeamIdModelsModelIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof modelIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(modelIn !== undefined ? modelIn : {}) : (modelIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut: (teamId, datasetId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new base_1.RequiredError('datasetId', 'Required parameter datasetId was null or undefined when calling tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut.');
            }
            // verify required parameter 'tagObjectId' is not null or undefined
            if (tagObjectId === null || tagObjectId === undefined) {
                throw new base_1.RequiredError('tagObjectId', 'Required parameter tagObjectId was null or undefined when calling tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut: (teamId, studyId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut.');
            }
            // verify required parameter 'tagObjectId' is not null or undefined
            if (tagObjectId === null || tagObjectId === undefined) {
                throw new base_1.RequiredError('tagObjectId', 'Required parameter tagObjectId was null or undefined when calling tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1TeamsTeamIdUserPut: (teamId, userProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling updateAuthenticatedUserProfileV1TeamsTeamIdUserPut.');
            }
            // verify required parameter 'userProfileIn' is not null or undefined
            if (userProfileIn === null || userProfileIn === undefined) {
                throw new base_1.RequiredError('userProfileIn', 'Required parameter userProfileIn was null or undefined when calling updateAuthenticatedUserProfileV1TeamsTeamIdUserPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/user`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof userProfileIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(userProfileIn !== undefined ? userProfileIn : {}) : (userProfileIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} teamId
         * @param {string} integrationId
         * @param {IntegrationUpdateIn} integrationUpdateIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch: (teamId, integrationId, integrationUpdateIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch.');
            }
            // verify required parameter 'integrationId' is not null or undefined
            if (integrationId === null || integrationId === undefined) {
                throw new base_1.RequiredError('integrationId', 'Required parameter integrationId was null or undefined when calling updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch.');
            }
            // verify required parameter 'integrationUpdateIn' is not null or undefined
            if (integrationUpdateIn === null || integrationUpdateIn === undefined) {
                throw new base_1.RequiredError('integrationUpdateIn', 'Required parameter integrationUpdateIn was null or undefined when calling updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch.');
            }
            const localVarPath = `/v1/teams/{team_id}/integrations/{integration_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof integrationUpdateIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(integrationUpdateIn !== undefined ? integrationUpdateIn : {}) : (integrationUpdateIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} teamId
         * @param {string} messageId
         * @param {MessageIn} messageIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1TeamsTeamIdMessagesMessageIdPatch: (teamId, messageId, messageIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling updateMessageV1TeamsTeamIdMessagesMessageIdPatch.');
            }
            // verify required parameter 'messageId' is not null or undefined
            if (messageId === null || messageId === undefined) {
                throw new base_1.RequiredError('messageId', 'Required parameter messageId was null or undefined when calling updateMessageV1TeamsTeamIdMessagesMessageIdPatch.');
            }
            // verify required parameter 'messageIn' is not null or undefined
            if (messageIn === null || messageIn === undefined) {
                throw new base_1.RequiredError('messageIn', 'Required parameter messageIn was null or undefined when calling updateMessageV1TeamsTeamIdMessagesMessageIdPatch.');
            }
            const localVarPath = `/v1/teams/{team_id}/messages/{message_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof messageIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(messageIn !== undefined ? messageIn : {}) : (messageIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * TeamsApi - functional programming interface
 * @export
 */
exports.TeamsApiFp = function (configuration) {
    return {
        /**
         * Add a user to a team by user_id.
         * @summary Add A User To A Team.
         * @param {string} userId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAUserToATeamV1TeamsTeamIdUsersUserIdPut(userId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).addAUserToATeamV1TeamsTeamIdUsersUserIdPut(userId, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamId
         * @param {StudyIn} studyIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamIdStudiesPost(teamId, studyIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).createAStudyV1TeamsTeamIdStudiesPost(teamId, studyIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a new user.
         * @summary Create A User.
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserV1TeamsTeamIdUserPost(teamId, userProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).createAUserV1TeamsTeamIdUserPost(teamId, userProfileIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamId
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamId
         * @param {AuthorIn} authorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {string} teamId
         * @param {ConceptIn} conceptIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {string} teamId
         * @param {DashboardIn} dashboardIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {string} teamId
         * @param {IntegrationCreate} integrationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1TeamsTeamIdIntegrationsPost(teamId, integrationCreate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).createIntegrationV1TeamsTeamIdIntegrationsPost(teamId, integrationCreate, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {string} teamId
         * @param {MessageIn} messageIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1TeamsTeamIdMessagesPost(teamId, messageIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).createMessageV1TeamsTeamIdMessagesPost(teamId, messageIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamId
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User\'S Teams
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {string} teamId
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch dataset graph.
         * @summary Get Concept Graph
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} teamId
         * @param {string} integrationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet(teamId, integrationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet(teamId, integrationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationsV1TeamsTeamIdIntegrationsGet(teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getIntegrationsV1TeamsTeamIdIntegrationsGet(teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} teamId
         * @param {string} messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1TeamsTeamIdMessagesMessageIdGet(teamId, messageId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getMessageV1TeamsTeamIdMessagesMessageIdGet(teamId, messageId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get pending invites of a team.
         * @summary Get Pending Invites Of A Team.
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet(teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet(teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} teamId
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} teamId
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Add a user to a team by email.
         * @summary Invite An Email To The Team.
         * @param {string} teamId
         * @param {UserInvite} userInvite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost(teamId, userInvite, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost(teamId, userInvite, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1TeamsTeamIdConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listConceptsV1TeamsTeamIdConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} teamId
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet(teamId, conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet(teamId, conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet(teamId, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet(teamId, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamId
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamId
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamId
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamId
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create an Team.
         * @summary Post Team
         * @param {TeamIn} teamIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamV1TeamsPost(teamIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).postTeamV1TeamsPost(teamIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove a user from a team by user_id.
         * @summary Remove A User From A Team.
         * @param {string} userId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete(userId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete(userId, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove an email invite from a team by email.
         * @summary Remove An Email Invite From A Team.
         * @param {string} email
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete(email, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete(email, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} teamId
         * @param {string} integrationId
         * @param {IntegrationUpdateIn} integrationUpdateIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch(teamId, integrationId, integrationUpdateIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch(teamId, integrationId, integrationUpdateIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} teamId
         * @param {string} messageId
         * @param {MessageIn} messageIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1TeamsTeamIdMessagesMessageIdPatch(teamId, messageId, messageIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TeamsApiAxiosParamCreator(configuration).updateMessageV1TeamsTeamIdMessagesMessageIdPatch(teamId, messageId, messageIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * TeamsApi - factory interface
 * @export
 */
exports.TeamsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Add a user to a team by user_id.
         * @summary Add A User To A Team.
         * @param {string} userId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAUserToATeamV1TeamsTeamIdUsersUserIdPut(userId, teamId, options) {
            return exports.TeamsApiFp(configuration).addAUserToATeamV1TeamsTeamIdUsersUserIdPut(userId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options) {
            return exports.TeamsApiFp(configuration).addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options) {
            return exports.TeamsApiFp(configuration).addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options) {
            return exports.TeamsApiFp(configuration).addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options) {
            return exports.TeamsApiFp(configuration).addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options) {
            return exports.TeamsApiFp(configuration).addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamId
         * @param {StudyIn} studyIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamIdStudiesPost(teamId, studyIn, options) {
            return exports.TeamsApiFp(configuration).createAStudyV1TeamsTeamIdStudiesPost(teamId, studyIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Create A User.
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserV1TeamsTeamIdUserPost(teamId, userProfileIn, options) {
            return exports.TeamsApiFp(configuration).createAUserV1TeamsTeamIdUserPost(teamId, userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamId
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options) {
            return exports.TeamsApiFp(configuration).createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options) {
            return exports.TeamsApiFp(configuration).createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options) {
            return exports.TeamsApiFp(configuration).createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options) {
            return exports.TeamsApiFp(configuration).createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamId
         * @param {AuthorIn} authorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options) {
            return exports.TeamsApiFp(configuration).createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {string} teamId
         * @param {ConceptIn} conceptIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, options) {
            return exports.TeamsApiFp(configuration).createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {string} teamId
         * @param {DashboardIn} dashboardIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options) {
            return exports.TeamsApiFp(configuration).createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options) {
            return exports.TeamsApiFp(configuration).createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options) {
            return exports.TeamsApiFp(configuration).createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {string} teamId
         * @param {IntegrationCreate} integrationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1TeamsTeamIdIntegrationsPost(teamId, integrationCreate, options) {
            return exports.TeamsApiFp(configuration).createIntegrationV1TeamsTeamIdIntegrationsPost(teamId, integrationCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {string} teamId
         * @param {MessageIn} messageIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1TeamsTeamIdMessagesPost(teamId, messageIn, options) {
            return exports.TeamsApiFp(configuration).createMessageV1TeamsTeamIdMessagesPost(teamId, messageIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options) {
            return exports.TeamsApiFp(configuration).createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamId
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options) {
            return exports.TeamsApiFp(configuration).createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options) {
            return exports.TeamsApiFp(configuration).deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options) {
            return exports.TeamsApiFp(configuration).deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options) {
            return exports.TeamsApiFp(configuration).deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options) {
            return exports.TeamsApiFp(configuration).deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options) {
            return exports.TeamsApiFp(configuration).deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options) {
            return exports.TeamsApiFp(configuration).deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options) {
            return exports.TeamsApiFp(configuration).deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options) {
            return exports.TeamsApiFp(configuration).deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options) {
            return exports.TeamsApiFp(configuration).deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options) {
            return exports.TeamsApiFp(configuration).deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options) {
            return exports.TeamsApiFp(configuration).deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options) {
            return exports.TeamsApiFp(configuration).fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options) {
            return exports.TeamsApiFp(configuration).getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User\'S Teams
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options) {
            return exports.TeamsApiFp(configuration).getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {string} teamId
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, options) {
            return exports.TeamsApiFp(configuration).getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options) {
            return exports.TeamsApiFp(configuration).getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Concept Graph
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, options) {
            return exports.TeamsApiFp(configuration).getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options) {
            return exports.TeamsApiFp(configuration).getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options) {
            return exports.TeamsApiFp(configuration).getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options) {
            return exports.TeamsApiFp(configuration).getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options) {
            return exports.TeamsApiFp(configuration).getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options) {
            return exports.TeamsApiFp(configuration).getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} teamId
         * @param {string} integrationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet(teamId, integrationId, options) {
            return exports.TeamsApiFp(configuration).getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet(teamId, integrationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationsV1TeamsTeamIdIntegrationsGet(teamId, options) {
            return exports.TeamsApiFp(configuration).getIntegrationsV1TeamsTeamIdIntegrationsGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} teamId
         * @param {string} messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1TeamsTeamIdMessagesMessageIdGet(teamId, messageId, options) {
            return exports.TeamsApiFp(configuration).getMessageV1TeamsTeamIdMessagesMessageIdGet(teamId, messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options) {
            return exports.TeamsApiFp(configuration).getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get pending invites of a team.
         * @summary Get Pending Invites Of A Team.
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet(teamId, options) {
            return exports.TeamsApiFp(configuration).getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options) {
            return exports.TeamsApiFp(configuration).getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options) {
            return exports.TeamsApiFp(configuration).getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options) {
            return exports.TeamsApiFp(configuration).getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options) {
            return exports.TeamsApiFp(configuration).getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} teamId
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options) {
            return exports.TeamsApiFp(configuration).getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} teamId
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options) {
            return exports.TeamsApiFp(configuration).getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options) {
            return exports.TeamsApiFp(configuration).getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a user to a team by email.
         * @summary Invite An Email To The Team.
         * @param {string} teamId
         * @param {UserInvite} userInvite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost(teamId, userInvite, options) {
            return exports.TeamsApiFp(configuration).inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost(teamId, userInvite, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.TeamsApiFp(configuration).listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options) {
            return exports.TeamsApiFp(configuration).listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.TeamsApiFp(configuration).listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.TeamsApiFp(configuration).listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.TeamsApiFp(configuration).listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.TeamsApiFp(configuration).listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return exports.TeamsApiFp(configuration).listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.TeamsApiFp(configuration).listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.TeamsApiFp(configuration).listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.TeamsApiFp(configuration).listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.TeamsApiFp(configuration).listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return exports.TeamsApiFp(configuration).listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return exports.TeamsApiFp(configuration).listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return exports.TeamsApiFp(configuration).listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1TeamsTeamIdConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return exports.TeamsApiFp(configuration).listConceptsV1TeamsTeamIdConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.TeamsApiFp(configuration).listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return exports.TeamsApiFp(configuration).listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.TeamsApiFp(configuration).listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.TeamsApiFp(configuration).listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return exports.TeamsApiFp(configuration).listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.TeamsApiFp(configuration).listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.TeamsApiFp(configuration).listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.TeamsApiFp(configuration).listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.TeamsApiFp(configuration).listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return exports.TeamsApiFp(configuration).listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} teamId
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet(teamId, conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return exports.TeamsApiFp(configuration).listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet(teamId, conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet(teamId, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return exports.TeamsApiFp(configuration).listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet(teamId, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamId
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return exports.TeamsApiFp(configuration).listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamId
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return exports.TeamsApiFp(configuration).listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return exports.TeamsApiFp(configuration).listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.TeamsApiFp(configuration).listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.TeamsApiFp(configuration).listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.TeamsApiFp(configuration).listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.TeamsApiFp(configuration).listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return exports.TeamsApiFp(configuration).listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return exports.TeamsApiFp(configuration).listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options) {
            return exports.TeamsApiFp(configuration).patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options) {
            return exports.TeamsApiFp(configuration).patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options) {
            return exports.TeamsApiFp(configuration).patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options) {
            return exports.TeamsApiFp(configuration).patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamId
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options) {
            return exports.TeamsApiFp(configuration).patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamId
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options) {
            return exports.TeamsApiFp(configuration).patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options) {
            return exports.TeamsApiFp(configuration).patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Team.
         * @summary Post Team
         * @param {TeamIn} teamIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamV1TeamsPost(teamIn, options) {
            return exports.TeamsApiFp(configuration).postTeamV1TeamsPost(teamIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options) {
            return exports.TeamsApiFp(configuration).publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a user from a team by user_id.
         * @summary Remove A User From A Team.
         * @param {string} userId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete(userId, teamId, options) {
            return exports.TeamsApiFp(configuration).removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete(userId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an email invite from a team by email.
         * @summary Remove An Email Invite From A Team.
         * @param {string} email
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete(email, teamId, options) {
            return exports.TeamsApiFp(configuration).removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete(email, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options) {
            return exports.TeamsApiFp(configuration).removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options) {
            return exports.TeamsApiFp(configuration).removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options) {
            return exports.TeamsApiFp(configuration).removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options) {
            return exports.TeamsApiFp(configuration).removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options) {
            return exports.TeamsApiFp(configuration).removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options) {
            return exports.TeamsApiFp(configuration).removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options) {
            return exports.TeamsApiFp(configuration).replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options) {
            return exports.TeamsApiFp(configuration).replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options) {
            return exports.TeamsApiFp(configuration).replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options) {
            return exports.TeamsApiFp(configuration).tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options) {
            return exports.TeamsApiFp(configuration).tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options) {
            return exports.TeamsApiFp(configuration).updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} teamId
         * @param {string} integrationId
         * @param {IntegrationUpdateIn} integrationUpdateIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch(teamId, integrationId, integrationUpdateIn, options) {
            return exports.TeamsApiFp(configuration).updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch(teamId, integrationId, integrationUpdateIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} teamId
         * @param {string} messageId
         * @param {MessageIn} messageIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1TeamsTeamIdMessagesMessageIdPatch(teamId, messageId, messageIn, options) {
            return exports.TeamsApiFp(configuration).updateMessageV1TeamsTeamIdMessagesMessageIdPatch(teamId, messageId, messageIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
class TeamsApi extends base_1.BaseAPI {
    /**
     * Add a user to a team by user_id.
     * @summary Add A User To A Team.
     * @param {TeamsApiAddAUserToATeamV1TeamsTeamIdUsersUserIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    addAUserToATeamV1TeamsTeamIdUsersUserIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).addAUserToATeamV1TeamsTeamIdUsersUserIdPut(requestParameters.userId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {TeamsApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(requestParameters.teamId, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dashboard Endpoint
     * @param {TeamsApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.dashboardId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {TeamsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a parent dataset.
     * @summary Add Parent Dataset
     * @param {TeamsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.parentId, requestParameters.reconcileFeatures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {TeamsApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Study.
     * @summary Create A Study.
     * @param {TeamsApiCreateAStudyV1TeamsTeamIdStudiesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAStudyV1TeamsTeamIdStudiesPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAStudyV1TeamsTeamIdStudiesPost(requestParameters.teamId, requestParameters.studyIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new user.
     * @summary Create A User.
     * @param {TeamsApiCreateAUserV1TeamsTeamIdUserPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAUserV1TeamsTeamIdUserPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAUserV1TeamsTeamIdUserPost(requestParameters.teamId, requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Variable.
     * @summary Create A Variable.
     * @param {TeamsApiCreateAVariableV1TeamsTeamIdVariablesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAVariableV1TeamsTeamIdVariablesPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAVariableV1TeamsTeamIdVariablesPost(requestParameters.teamId, requestParameters.variableIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {TeamsApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {TeamsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(requestParameters.teamId, requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {TeamsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(requestParameters.teamId, requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Author.
     * @summary Create Author
     * @param {TeamsApiCreateAuthorV1TeamsTeamIdAuthorsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAuthorV1TeamsTeamIdAuthorsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAuthorV1TeamsTeamIdAuthorsPost(requestParameters.teamId, requestParameters.authorIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Concept.
     * @summary Create Concept
     * @param {TeamsApiCreateConceptV1TeamsTeamIdConceptsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createConceptV1TeamsTeamIdConceptsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createConceptV1TeamsTeamIdConceptsPost(requestParameters.teamId, requestParameters.conceptIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Dashboard.
     * @summary Create Dashboard Post
     * @param {TeamsApiCreateDashboardPostV1TeamsTeamIdDashboardsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createDashboardPostV1TeamsTeamIdDashboardsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createDashboardPostV1TeamsTeamIdDashboardsPost(requestParameters.teamId, requestParameters.dashboardIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Dataset.
     * @summary Create Dataset
     * @param {TeamsApiCreateDatasetV1TeamsTeamIdDatasetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createDatasetV1TeamsTeamIdDatasetsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createDatasetV1TeamsTeamIdDatasetsPost(requestParameters.teamId, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Feature.
     * @summary Create Feature
     * @param {TeamsApiCreateFeatureV1TeamsTeamIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createFeatureV1TeamsTeamIdFeaturesPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createFeatureV1TeamsTeamIdFeaturesPost(requestParameters.teamId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {TeamsApiCreateIntegrationV1TeamsTeamIdIntegrationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createIntegrationV1TeamsTeamIdIntegrationsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createIntegrationV1TeamsTeamIdIntegrationsPost(requestParameters.teamId, requestParameters.integrationCreate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new message.
     * @summary Create Message
     * @param {TeamsApiCreateMessageV1TeamsTeamIdMessagesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createMessageV1TeamsTeamIdMessagesPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createMessageV1TeamsTeamIdMessagesPost(requestParameters.teamId, requestParameters.messageIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {TeamsApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(requestParameters.teamId, requestParameters.studyId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create mulitple Variables.
     * @summary Create Multiple Variables.
     * @param {TeamsApiCreateMultipleVariablesV1TeamsTeamIdVariablesBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(requestParameters.teamId, requestParameters.arrayVariableInVariableIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {TeamsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(requestParameters.teamId, requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {TeamsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(requestParameters.teamId, requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Author.
     * @summary Delete Author
     * @param {TeamsApiDeleteAuthorV1TeamsTeamIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(requestParameters.teamId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
     * @summary Delete Concept
     * @param {TeamsApiDeleteConceptV1TeamsTeamIdConceptsConceptIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(requestParameters.teamId, requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dashboard
     * @param {TeamsApiDeleteDashboardV1TeamsTeamIdDashboardsDashboardIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(requestParameters.teamId, requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dataset
     * @param {TeamsApiDeleteDatasetV1TeamsTeamIdDatasetsDatasetIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a feature.
     * @summary Delete Feature
     * @param {TeamsApiDeleteFeatureV1TeamsTeamIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(requestParameters.teamId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {TeamsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
     * @summary Delete Model
     * @param {TeamsApiDeleteModelV1TeamsTeamIdModelsModelIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteModelV1TeamsTeamIdModelsModelIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteModelV1TeamsTeamIdModelsModelIdDelete(requestParameters.teamId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Study
     * @param {TeamsApiDeleteStudyV1TeamsTeamIdStudiesStudyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(requestParameters.teamId, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
     * @summary Delete Variable
     * @param {TeamsApiDeleteVariableV1TeamsTeamIdVariablesVariableIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(requestParameters.teamId, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {TeamsApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Get Association
     * @param {TeamsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(requestParameters.teamId, requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User\'S Teams
     * @param {TeamsApiGetAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {TeamsApiGetAuthenticatedUserV1TeamsTeamIdUserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getAuthenticatedUserV1TeamsTeamIdUserGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getAuthenticatedUserV1TeamsTeamIdUserGet(requestParameters.teamId, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Author.
     * @summary Get Author
     * @param {TeamsApiGetAuthorV1TeamsTeamIdAuthorsAuthorIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(requestParameters.teamId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch dataset graph.
     * @summary Get Concept Graph
     * @param {TeamsApiGetConceptGraphV1TeamsTeamIdGraphConceptGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(requestParameters.teamId, requestParameters.minRelationshipStrength, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Concept.
     * @summary Get Concept
     * @param {TeamsApiGetConceptV1TeamsTeamIdConceptsConceptIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getConceptV1TeamsTeamIdConceptsConceptIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getConceptV1TeamsTeamIdConceptsConceptIdGet(requestParameters.teamId, requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Dashboard.
     * @summary Get Dashboard
     * @param {TeamsApiGetDashboardV1TeamsTeamIdDashboardsDashboardIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(requestParameters.teamId, requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch dataset graph.
     * @summary Get Dataset Graph
     * @param {TeamsApiGetDatasetGraphV1TeamsTeamIdGraphDatasetGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a Dataset.
     * @summary Get Dataset
     * @param {TeamsApiGetDatasetV1TeamsTeamIdDatasetsDatasetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get feature.
     * @summary Get Feature
     * @param {TeamsApiGetFeatureV1TeamsTeamIdFeaturesFeatureIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(requestParameters.teamId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Integration.
     * @summary Get Integration
     * @param {TeamsApiGetIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet(requestParameters.teamId, requestParameters.integrationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get team integrations.
     * @summary Get Integrations
     * @param {TeamsApiGetIntegrationsV1TeamsTeamIdIntegrationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getIntegrationsV1TeamsTeamIdIntegrationsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getIntegrationsV1TeamsTeamIdIntegrationsGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a Message.
     * @summary Get Message
     * @param {TeamsApiGetMessageV1TeamsTeamIdMessagesMessageIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getMessageV1TeamsTeamIdMessagesMessageIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getMessageV1TeamsTeamIdMessagesMessageIdGet(requestParameters.teamId, requestParameters.messageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Model.
     * @summary Get Model
     * @param {TeamsApiGetModelV1TeamsTeamIdModelsModelIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getModelV1TeamsTeamIdModelsModelIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getModelV1TeamsTeamIdModelsModelIdGet(requestParameters.teamId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get pending invites of a team.
     * @summary Get Pending Invites Of A Team.
     * @param {TeamsApiGetPendingInvitesOfATeamV1TeamsTeamIdInvitesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get direction of this association.
     * @summary Get Relationship Direction
     * @param {TeamsApiGetRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(requestParameters.teamId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get reproducibility of this association.
     * @summary Get Relationship Reproducibility
     * @param {TeamsApiGetRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(requestParameters.teamId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get strength of this association.
     * @summary Get Relationship Strength
     * @param {TeamsApiGetRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(requestParameters.teamId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Study.
     * @summary Get Study
     * @param {TeamsApiGetStudyV1TeamsTeamIdStudiesStudyIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getStudyV1TeamsTeamIdStudiesStudyIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getStudyV1TeamsTeamIdStudiesStudyIdGet(requestParameters.teamId, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {TeamsApiGetUserV1TeamsTeamIdUsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getUserV1TeamsTeamIdUsersUserIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getUserV1TeamsTeamIdUsersUserIdGet(requestParameters.teamId, requestParameters.userId, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List public profiles.
     * @summary Get Users
     * @param {TeamsApiGetUsersV1TeamsTeamIdUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getUsersV1TeamsTeamIdUsersGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getUsersV1TeamsTeamIdUsersGet(requestParameters.teamId, requestParameters.email, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Variable.
     * @summary Get Variable
     * @param {TeamsApiGetVariableV1TeamsTeamIdVariablesVariableIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getVariableV1TeamsTeamIdVariablesVariableIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getVariableV1TeamsTeamIdVariablesVariableIdGet(requestParameters.teamId, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a user to a team by email.
     * @summary Invite An Email To The Team.
     * @param {TeamsApiInviteAnEmailToTheTeamV1TeamsTeamIdInvitesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost(requestParameters.teamId, requestParameters.userInvite, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Associations.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAssociationsV1TeamsTeamIdAssociationsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamIdAssociationsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.conceptRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in model.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(requestParameters.teamId, requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(requestParameters.teamId, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {TeamsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {TeamsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {TeamsApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {TeamsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {TeamsApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {TeamsApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
     * @summary List Authors
     * @param {TeamsApiListAuthorsV1TeamsTeamIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAuthorsV1TeamsTeamIdAuthorsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAuthorsV1TeamsTeamIdAuthorsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a study\'s authors.
     * @summary List Authors
     * @param {TeamsApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Concepts.
     * @summary List Concepts
     * @param {TeamsApiListConceptsV1TeamsTeamIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listConceptsV1TeamsTeamIdConceptsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listConceptsV1TeamsTeamIdConceptsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dashboard Features
     * @param {TeamsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(requestParameters.teamId, requestParameters.dashboardId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Dashboards.  Paginated list of all Dashboards.
     * @summary List Dashboards
     * @param {TeamsApiListDashboardsV1TeamsTeamIdDashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listDashboardsV1TeamsTeamIdDashboardsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listDashboardsV1TeamsTeamIdDashboardsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {TeamsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get parents of this dataset.
     * @summary List Dataset Parents
     * @param {TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all Datasets.
     * @summary List Datasets
     * @param {TeamsApiListDatasetsV1TeamsTeamIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listDatasetsV1TeamsTeamIdDatasetsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listDatasetsV1TeamsTeamIdDatasetsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Features.
     * @summary List Features
     * @param {TeamsApiListFeaturesV1TeamsTeamIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listFeaturesV1TeamsTeamIdFeaturesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listFeaturesV1TeamsTeamIdFeaturesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {TeamsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models that use the dataset either directly or through child datasets.
     * @summary List Models Using Dataset
     * @param {TeamsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Models.
     * @summary List Models
     * @param {TeamsApiListModelsV1TeamsTeamIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listModelsV1TeamsTeamIdModelsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listModelsV1TeamsTeamIdModelsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Studies.
     * @summary List Studies
     * @param {TeamsApiListStudiesV1TeamsTeamIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listStudiesV1TeamsTeamIdStudiesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listStudiesV1TeamsTeamIdStudiesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the concepts in the requested concept\'s system.
     * @summary List System Of Concepts
     * @param {TeamsApiListSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listSystemOfConceptsV1TeamsTeamIdConceptsConceptIdSystemConceptsGet(requestParameters.teamId, requestParameters.conceptId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested feature\'s system.
     * @summary List System Of Features
     * @param {TeamsApiListSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listSystemOfFeaturesV1TeamsTeamIdFeaturesFeatureIdSystemFeaturesGet(requestParameters.teamId, requestParameters.featureId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested variable\'s system.
     * @summary List System Of Features
     * @param {TeamsApiListSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet(requestParameters.teamId, requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the variables in the requested variable\'s system.
     * @summary List System Of Variables
     * @param {TeamsApiListSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet(requestParameters.teamId, requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {TeamsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {TeamsApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {TeamsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Variables.
     * @summary List Variables
     * @param {TeamsApiListVariablesV1TeamsTeamIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listVariablesV1TeamsTeamIdVariablesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listVariablesV1TeamsTeamIdVariablesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {TeamsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(requestParameters.teamId, requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Dataset resource with partial update.
     * @summary Patch Dataset
     * @param {TeamsApiPatchDatasetV1TeamsTeamIdDatasetsDatasetIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(requestParameters.teamId, requestParameters.datasetId, requestParameters.patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
     * @summary Patch Feature
     * @param {TeamsApiPatchFeatureV1TeamsTeamIdFeaturesFeatureIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(requestParameters.teamId, requestParameters.featureId, requestParameters.patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Model resource with partial update.
     * @summary Patch Model
     * @param {TeamsApiPatchModelV1TeamsTeamIdModelsModelIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchModelV1TeamsTeamIdModelsModelIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchModelV1TeamsTeamIdModelsModelIdPatch(requestParameters.teamId, requestParameters.modelId, requestParameters.patchModelOpArrayPatchModelOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Batch feature patching.
     * @summary Patch Multiple Features
     * @param {TeamsApiPatchMultipleFeaturesV1TeamsTeamIdFeaturesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(requestParameters.teamId, requestParameters.bulkPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Study resource with partial update.
     * @summary Patch Study Endpoint
     * @param {TeamsApiPatchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(requestParameters.teamId, requestParameters.studyId, requestParameters.patchStudyOpArrayPatchStudyOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Variable resource with partial update.
     * @summary Patch Variable
     * @param {TeamsApiPatchVariableV1TeamsTeamIdVariablesVariableIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchVariableV1TeamsTeamIdVariablesVariableIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchVariableV1TeamsTeamIdVariablesVariableIdPatch(requestParameters.teamId, requestParameters.variableId, requestParameters.patchVariableOpArrayPatchVariableOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Team.
     * @summary Post Team
     * @param {TeamsApiPostTeamV1TeamsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    postTeamV1TeamsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).postTeamV1TeamsPost(requestParameters.teamIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Publish the study making it visible to other users.
     * @summary Publish Study
     * @param {TeamsApiPublishStudyV1TeamsTeamIdStudiesStudyIdPublishPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(requestParameters.teamId, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a user from a team by user_id.
     * @summary Remove A User From A Team.
     * @param {TeamsApiRemoveAUserFromATeamV1TeamsTeamIdUsersUserIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete(requestParameters.userId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an email invite from a team by email.
     * @summary Remove An Email Invite From A Team.
     * @param {TeamsApiRemoveAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete(requestParameters.email, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {TeamsApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(requestParameters.teamId, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {TeamsApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the dataset with object with provided id.
     * @summary Remove Object Tag From Dataset
     * @param {TeamsApiRemoveObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the study with object with provided id.
     * @summary Remove Object Tag From Study
     * @param {TeamsApiRemoveObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters.teamId, requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a parent dataset.
     * @summary Remove Parent Dataset
     * @param {TeamsApiRemoveParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.parentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {TeamsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Dataset.
     * @summary Replace Dataset
     * @param {TeamsApiReplaceDatasetV1TeamsTeamIdDatasetsDatasetIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Feature.
     * @summary Replace Feature
     * @param {TeamsApiReplaceFeatureV1TeamsTeamIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.featureId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Model.
     * @summary Replace Model
     * @param {TeamsApiReplaceModelV1TeamsTeamIdModelsModelIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    replaceModelV1TeamsTeamIdModelsModelIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).replaceModelV1TeamsTeamIdModelsModelIdPut(requestParameters.teamId, requestParameters.modelId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the dataset with object with provided id.
     * @summary Tag Study With Object
     * @param {TeamsApiTagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the study with object with provided id.
     * @summary Tag Study With Object
     * @param {TeamsApiTagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(requestParameters.teamId, requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {TeamsApiUpdateAuthenticatedUserProfileV1TeamsTeamIdUserPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(requestParameters.teamId, requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update Integration.
     * @summary Update Integration
     * @param {TeamsApiUpdateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch(requestParameters.teamId, requestParameters.integrationId, requestParameters.integrationUpdateIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a Message.
     * @summary Update Message
     * @param {TeamsApiUpdateMessageV1TeamsTeamIdMessagesMessageIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    updateMessageV1TeamsTeamIdMessagesMessageIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).updateMessageV1TeamsTeamIdMessagesMessageIdPatch(requestParameters.teamId, requestParameters.messageId, requestParameters.messageIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TeamsApi = TeamsApi;
/**
 * TimelineApi - axios parameter creator
 * @export
 */
exports.TimelineApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Fetch resource creation timeline in reverse chronological order.
         * @summary Fetch Global Timeline
         * @param {Set<SystemObjectResources>} [types]
         * @param {string} [cursor] A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalTimelineV1TimelineGet: (types, cursor, limit, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/timeline`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (types) {
                localVarQueryParameter['types'] = types;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * TimelineApi - functional programming interface
 * @export
 */
exports.TimelineApiFp = function (configuration) {
    return {
        /**
         * Fetch resource creation timeline in reverse chronological order.
         * @summary Fetch Global Timeline
         * @param {Set<SystemObjectResources>} [types]
         * @param {string} [cursor] A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.TimelineApiAxiosParamCreator(configuration).fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * TimelineApi - factory interface
 * @export
 */
exports.TimelineApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Fetch resource creation timeline in reverse chronological order.
         * @summary Fetch Global Timeline
         * @param {Set<SystemObjectResources>} [types]
         * @param {string} [cursor] A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options) {
            return exports.TimelineApiFp(configuration).fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * TimelineApi - object-oriented interface
 * @export
 * @class TimelineApi
 * @extends {BaseAPI}
 */
class TimelineApi extends base_1.BaseAPI {
    /**
     * Fetch resource creation timeline in reverse chronological order.
     * @summary Fetch Global Timeline
     * @param {TimelineApiFetchGlobalTimelineV1TimelineGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimelineApi
     */
    fetchGlobalTimelineV1TimelineGet(requestParameters = {}, options) {
        return exports.TimelineApiFp(this.configuration).fetchGlobalTimelineV1TimelineGet(requestParameters.types, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TimelineApi = TimelineApi;
/**
 * UsersApi - axios parameter creator
 * @export
 */
exports.UsersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a new user.
         * @summary Create A User.
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserV1TeamsTeamIdUserPost: (teamId, userProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createAUserV1TeamsTeamIdUserPost.');
            }
            // verify required parameter 'userProfileIn' is not null or undefined
            if (userProfileIn === null || userProfileIn === undefined) {
                throw new base_1.RequiredError('userProfileIn', 'Required parameter userProfileIn was null or undefined when calling createAUserV1TeamsTeamIdUserPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/user`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof userProfileIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(userProfileIn !== undefined ? userProfileIn : {}) : (userProfileIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new user.
         * @summary Create A User.
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserV1UserPost: (userProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userProfileIn' is not null or undefined
            if (userProfileIn === null || userProfileIn === undefined) {
                throw new base_1.RequiredError('userProfileIn', 'Required parameter userProfileIn was null or undefined when calling createAUserV1UserPost.');
            }
            const localVarPath = `/v1/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof userProfileIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(userProfileIn !== undefined ? userProfileIn : {}) : (userProfileIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User\'S Teams
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet: (teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/teams`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User\'S Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1UserTeamsGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/teams`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {string} teamId
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1TeamsTeamIdUserGet: (teamId, includeAvatar, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getAuthenticatedUserV1TeamsTeamIdUserGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet: (includeAvatar, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} teamId
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1TeamsTeamIdUsersUserIdGet: (teamId, userId, includeAvatar, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getUserV1TeamsTeamIdUsersUserIdGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling getUserV1TeamsTeamIdUsersUserIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet: (userId, includeAvatar, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling getUserV1UsersUserIdGet.');
            }
            const localVarPath = `/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} teamId
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1TeamsTeamIdUsersGet: (teamId, email, includeAvatar, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getUsersV1TeamsTeamIdUsersGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} [teamId]
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1UsersGet: (teamId, email, includeAvatar, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet.');
            }
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/studies/{study_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet: (studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            if (studyId === null || studyId === undefined) {
                throw new base_1.RequiredError('studyId', 'Required parameter studyId was null or undefined when calling listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet.');
            }
            const localVarPath = `/v1/user/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/concepts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/datasets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/features`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/models`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/studies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/variables`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet: (userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserConceptsV1UsersUserIdConceptsGet.');
            }
            const localVarPath = `/v1/users/{user_id}/concepts`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet: (userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserDatasetsV1UsersUserIdDatasetsGet.');
            }
            const localVarPath = `/v1/users/{user_id}/datasets`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet: (userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserFeaturesV1UsersUserIdFeaturesGet.');
            }
            const localVarPath = `/v1/users/{user_id}/features`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listUserModelsV1TeamsTeamIdUsersUserIdModelsGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserModelsV1TeamsTeamIdUsersUserIdModelsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet: (userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserModelsV1UsersUserIdModelsGet.');
            }
            const localVarPath = `/v1/users/{user_id}/models`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet: (userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserStudiesV1UsersUserIdStudiesGet.');
            }
            const localVarPath = `/v1/users/{user_id}/studies`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet: (userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserVariablesV1UsersUserIdVariablesGet.');
            }
            const localVarPath = `/v1/users/{user_id}/variables`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1TeamsTeamIdUserPut: (teamId, userProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling updateAuthenticatedUserProfileV1TeamsTeamIdUserPut.');
            }
            // verify required parameter 'userProfileIn' is not null or undefined
            if (userProfileIn === null || userProfileIn === undefined) {
                throw new base_1.RequiredError('userProfileIn', 'Required parameter userProfileIn was null or undefined when calling updateAuthenticatedUserProfileV1TeamsTeamIdUserPut.');
            }
            const localVarPath = `/v1/teams/{team_id}/user`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof userProfileIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(userProfileIn !== undefined ? userProfileIn : {}) : (userProfileIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1UserPut: (userProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userProfileIn' is not null or undefined
            if (userProfileIn === null || userProfileIn === undefined) {
                throw new base_1.RequiredError('userProfileIn', 'Required parameter userProfileIn was null or undefined when calling updateAuthenticatedUserProfileV1UserPut.');
            }
            const localVarPath = `/v1/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof userProfileIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(userProfileIn !== undefined ? userProfileIn : {}) : (userProfileIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
exports.UsersApiFp = function (configuration) {
    return {
        /**
         * Create a new user.
         * @summary Create A User.
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserV1TeamsTeamIdUserPost(teamId, userProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).createAUserV1TeamsTeamIdUserPost(teamId, userProfileIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a new user.
         * @summary Create A User.
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserV1UserPost(userProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).createAUserV1UserPost(userProfileIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User\'S Teams
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User\'S Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1UserTeamsGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).getAuthenticatedUserSTeamsV1UserTeamsGet(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {string} teamId
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet(includeAvatar, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).getAuthenticatedUserV1UserGet(includeAvatar, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} teamId
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet(userId, includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).getUserV1UsersUserIdGet(userId, includeAvatar, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} teamId
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} [teamId]
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1UsersGet(teamId, email, includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).getUsersV1UsersGet(teamId, email, includeAvatar, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAuthenticatedUserConceptsV1UserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAuthenticatedUserModelsV1UserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAuthenticatedUserStudiesV1UserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listAuthenticatedUserVariablesV1UserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listUserConceptsV1UsersUserIdConceptsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listUserDatasetsV1UsersUserIdDatasetsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listUserFeaturesV1UsersUserIdFeaturesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listUserModelsV1UsersUserIdModelsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listUserStudiesV1UsersUserIdStudiesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).listUserVariablesV1UsersUserIdVariablesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1UserPut(userProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.UsersApiAxiosParamCreator(configuration).updateAuthenticatedUserProfileV1UserPut(userProfileIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
exports.UsersApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Create a new user.
         * @summary Create A User.
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserV1TeamsTeamIdUserPost(teamId, userProfileIn, options) {
            return exports.UsersApiFp(configuration).createAUserV1TeamsTeamIdUserPost(teamId, userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Create A User.
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserV1UserPost(userProfileIn, options) {
            return exports.UsersApiFp(configuration).createAUserV1UserPost(userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User\'S Teams
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options) {
            return exports.UsersApiFp(configuration).getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User\'S Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1UserTeamsGet(options) {
            return exports.UsersApiFp(configuration).getAuthenticatedUserSTeamsV1UserTeamsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {string} teamId
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, options) {
            return exports.UsersApiFp(configuration).getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet(includeAvatar, teamId, options) {
            return exports.UsersApiFp(configuration).getAuthenticatedUserV1UserGet(includeAvatar, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} teamId
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options) {
            return exports.UsersApiFp(configuration).getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet(userId, includeAvatar, options) {
            return exports.UsersApiFp(configuration).getUserV1UsersUserIdGet(userId, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} teamId
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options) {
            return exports.UsersApiFp(configuration).getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} [teamId]
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1UsersGet(teamId, email, includeAvatar, options) {
            return exports.UsersApiFp(configuration).getUsersV1UsersGet(teamId, email, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.UsersApiFp(configuration).listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.UsersApiFp(configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return exports.UsersApiFp(configuration).listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return exports.UsersApiFp(configuration).listAuthenticatedUserConceptsV1UserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.UsersApiFp(configuration).listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.UsersApiFp(configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.UsersApiFp(configuration).listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.UsersApiFp(configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.UsersApiFp(configuration).listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.UsersApiFp(configuration).listAuthenticatedUserModelsV1UserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.UsersApiFp(configuration).listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.UsersApiFp(configuration).listAuthenticatedUserStudiesV1UserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return exports.UsersApiFp(configuration).listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return exports.UsersApiFp(configuration).listAuthenticatedUserVariablesV1UserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return exports.UsersApiFp(configuration).listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return exports.UsersApiFp(configuration).listUserConceptsV1UsersUserIdConceptsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.UsersApiFp(configuration).listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.UsersApiFp(configuration).listUserDatasetsV1UsersUserIdDatasetsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.UsersApiFp(configuration).listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return exports.UsersApiFp(configuration).listUserFeaturesV1UsersUserIdFeaturesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.UsersApiFp(configuration).listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return exports.UsersApiFp(configuration).listUserModelsV1UsersUserIdModelsGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.UsersApiFp(configuration).listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return exports.UsersApiFp(configuration).listUserStudiesV1UsersUserIdStudiesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return exports.UsersApiFp(configuration).listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return exports.UsersApiFp(configuration).listUserVariablesV1UsersUserIdVariablesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options) {
            return exports.UsersApiFp(configuration).updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1UserPut(userProfileIn, options) {
            return exports.UsersApiFp(configuration).updateAuthenticatedUserProfileV1UserPut(userProfileIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
class UsersApi extends base_1.BaseAPI {
    /**
     * Create a new user.
     * @summary Create A User.
     * @param {UsersApiCreateAUserV1TeamsTeamIdUserPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createAUserV1TeamsTeamIdUserPost(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).createAUserV1TeamsTeamIdUserPost(requestParameters.teamId, requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new user.
     * @summary Create A User.
     * @param {UsersApiCreateAUserV1UserPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createAUserV1UserPost(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).createAUserV1UserPost(requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User\'S Teams
     * @param {UsersApiGetAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User\'S Teams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getAuthenticatedUserSTeamsV1UserTeamsGet(options) {
        return exports.UsersApiFp(this.configuration).getAuthenticatedUserSTeamsV1UserTeamsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {UsersApiGetAuthenticatedUserV1TeamsTeamIdUserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getAuthenticatedUserV1TeamsTeamIdUserGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).getAuthenticatedUserV1TeamsTeamIdUserGet(requestParameters.teamId, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {UsersApiGetAuthenticatedUserV1UserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getAuthenticatedUserV1UserGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).getAuthenticatedUserV1UserGet(requestParameters.includeAvatar, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {UsersApiGetUserV1TeamsTeamIdUsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserV1TeamsTeamIdUsersUserIdGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).getUserV1TeamsTeamIdUsersUserIdGet(requestParameters.teamId, requestParameters.userId, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {UsersApiGetUserV1UsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserV1UsersUserIdGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).getUserV1UsersUserIdGet(requestParameters.userId, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List public profiles.
     * @summary Get Users
     * @param {UsersApiGetUsersV1TeamsTeamIdUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUsersV1TeamsTeamIdUsersGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).getUsersV1TeamsTeamIdUsersGet(requestParameters.teamId, requestParameters.email, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List public profiles.
     * @summary Get Users
     * @param {UsersApiGetUsersV1UsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUsersV1UsersGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).getUsersV1UsersGet(requestParameters.teamId, requestParameters.email, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {UsersApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {UsersApiListAuthenticatedUserConceptsV1UserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {UsersApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {UsersApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {UsersApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {UsersApiListAuthenticatedUserModelsV1UserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserModelsV1UserModelsGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserModelsV1UserModelsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {UsersApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {UsersApiListAuthenticatedUserStudiesV1UserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {UsersApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {UsersApiListAuthenticatedUserVariablesV1UserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {UsersApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {UsersApiListUserConceptsV1UsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserConceptsV1UsersUserIdConceptsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserConceptsV1UsersUserIdConceptsGet(requestParameters.userId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {UsersApiListUserDatasetsV1UsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters.userId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {UsersApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {UsersApiListUserFeaturesV1UsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters.userId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {UsersApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {UsersApiListUserModelsV1UsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserModelsV1UsersUserIdModelsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserModelsV1UsersUserIdModelsGet(requestParameters.userId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {UsersApiListUserStudiesV1UsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserStudiesV1UsersUserIdStudiesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserStudiesV1UsersUserIdStudiesGet(requestParameters.userId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {UsersApiListUserVariablesV1UsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserVariablesV1UsersUserIdVariablesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserVariablesV1UsersUserIdVariablesGet(requestParameters.userId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {UsersApiUpdateAuthenticatedUserProfileV1TeamsTeamIdUserPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(requestParameters.teamId, requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateAuthenticatedUserProfileV1UserPut(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).updateAuthenticatedUserProfileV1UserPut(requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.UsersApi = UsersApi;
/**
 * VariablesApi - axios parameter creator
 * @export
 */
exports.VariablesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamId
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamIdVariablesPost: (teamId, variableIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createAVariableV1TeamsTeamIdVariablesPost.');
            }
            // verify required parameter 'variableIn' is not null or undefined
            if (variableIn === null || variableIn === undefined) {
                throw new base_1.RequiredError('variableIn', 'Required parameter variableIn was null or undefined when calling createAVariableV1TeamsTeamIdVariablesPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof variableIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(variableIn !== undefined ? variableIn : {}) : (variableIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {VariableIn} variableIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1VariablesPost: (variableIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableIn' is not null or undefined
            if (variableIn === null || variableIn === undefined) {
                throw new base_1.RequiredError('variableIn', 'Required parameter variableIn was null or undefined when calling createAVariableV1VariablesPost.');
            }
            const localVarPath = `/v1/variables`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof variableIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(variableIn !== undefined ? variableIn : {}) : (variableIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamId
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamIdVariablesBulkPost: (teamId, arrayVariableInVariableIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling createMultipleVariablesV1TeamsTeamIdVariablesBulkPost.');
            }
            // verify required parameter 'arrayVariableInVariableIn' is not null or undefined
            if (arrayVariableInVariableIn === null || arrayVariableInVariableIn === undefined) {
                throw new base_1.RequiredError('arrayVariableInVariableIn', 'Required parameter arrayVariableInVariableIn was null or undefined when calling createMultipleVariablesV1TeamsTeamIdVariablesBulkPost.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables/bulk`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof arrayVariableInVariableIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(arrayVariableInVariableIn !== undefined ? arrayVariableInVariableIn : {}) : (arrayVariableInVariableIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1VariablesBulkPost: (arrayVariableInVariableIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'arrayVariableInVariableIn' is not null or undefined
            if (arrayVariableInVariableIn === null || arrayVariableInVariableIn === undefined) {
                throw new base_1.RequiredError('arrayVariableInVariableIn', 'Required parameter arrayVariableInVariableIn was null or undefined when calling createMultipleVariablesV1VariablesBulkPost.');
            }
            const localVarPath = `/v1/variables/bulk`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof arrayVariableInVariableIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(arrayVariableInVariableIn !== undefined ? arrayVariableInVariableIn : {}) : (arrayVariableInVariableIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamIdVariablesVariableIdDelete: (teamId, variableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteVariableV1TeamsTeamIdVariablesVariableIdDelete.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling deleteVariableV1TeamsTeamIdVariablesVariableIdDelete.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1VariablesVariableIdDelete: (variableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling deleteVariableV1VariablesVariableIdDelete.');
            }
            const localVarPath = `/v1/variables/{variable_id}`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamIdVariablesVariableIdGet: (teamId, variableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getVariableV1TeamsTeamIdVariablesVariableIdGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling getVariableV1TeamsTeamIdVariablesVariableIdGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1VariablesVariableIdGet: (variableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling getVariableV1VariablesVariableIdGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet: (teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet: (variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listAssociationsV1VariablesVariableIdAssociationsGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}/associations`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/user/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/variables`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamId
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet: (teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/system/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet: (variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}/system/features`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamId
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet: (teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/system/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet: (variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet.');
            }
            const localVarPath = `/v1/variables/{variable_id}/system/variables`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet: (userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listUserVariablesV1UsersUserIdVariablesGet.');
            }
            const localVarPath = `/v1/users/{user_id}/variables`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamIdVariablesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling listVariablesV1TeamsTeamIdVariablesGet.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1VariablesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/variables`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamIdVariablesVariableIdPatch: (teamId, variableId, patchVariableOpArrayPatchVariableOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new base_1.RequiredError('teamId', 'Required parameter teamId was null or undefined when calling patchVariableV1TeamsTeamIdVariablesVariableIdPatch.');
            }
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling patchVariableV1TeamsTeamIdVariablesVariableIdPatch.');
            }
            // verify required parameter 'patchVariableOpArrayPatchVariableOp' is not null or undefined
            if (patchVariableOpArrayPatchVariableOp === null || patchVariableOpArrayPatchVariableOp === undefined) {
                throw new base_1.RequiredError('patchVariableOpArrayPatchVariableOp', 'Required parameter patchVariableOpArrayPatchVariableOp was null or undefined when calling patchVariableV1TeamsTeamIdVariablesVariableIdPatch.');
            }
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchVariableOpArrayPatchVariableOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchVariableOpArrayPatchVariableOp !== undefined ? patchVariableOpArrayPatchVariableOp : {}) : (patchVariableOpArrayPatchVariableOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1VariablesVariableIdPatch: (variableId, patchVariableOpArrayPatchVariableOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            if (variableId === null || variableId === undefined) {
                throw new base_1.RequiredError('variableId', 'Required parameter variableId was null or undefined when calling patchVariableV1VariablesVariableIdPatch.');
            }
            // verify required parameter 'patchVariableOpArrayPatchVariableOp' is not null or undefined
            if (patchVariableOpArrayPatchVariableOp === null || patchVariableOpArrayPatchVariableOp === undefined) {
                throw new base_1.RequiredError('patchVariableOpArrayPatchVariableOp', 'Required parameter patchVariableOpArrayPatchVariableOp was null or undefined when calling patchVariableV1VariablesVariableIdPatch.');
            }
            const localVarPath = `/v1/variables/{variable_id}`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? yield configuration.apiKey("x-api-key")
                    : yield configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2AuthorizationCodeBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof patchVariableOpArrayPatchVariableOp !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(patchVariableOpArrayPatchVariableOp !== undefined ? patchVariableOpArrayPatchVariableOp : {}) : (patchVariableOpArrayPatchVariableOp || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * VariablesApi - functional programming interface
 * @export
 */
exports.VariablesApiFp = function (configuration) {
    return {
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamId
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {VariableIn} variableIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1VariablesPost(variableIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).createAVariableV1VariablesPost(variableIn, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamId
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn, teamId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1VariablesVariableIdDelete(variableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).deleteVariableV1VariablesVariableIdDelete(variableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1VariablesVariableIdGet(variableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).getVariableV1VariablesVariableIdGet(variableId, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).listAuthenticatedUserVariablesV1UserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamId
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamId
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).listUserVariablesV1UsersUserIdVariablesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1VariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).listVariablesV1VariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.VariablesApiAxiosParamCreator(configuration).patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
/**
 * VariablesApi - factory interface
 * @export
 */
exports.VariablesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamId
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options) {
            return exports.VariablesApiFp(configuration).createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {VariableIn} variableIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1VariablesPost(variableIn, teamId, options) {
            return exports.VariablesApiFp(configuration).createAVariableV1VariablesPost(variableIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamId
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options) {
            return exports.VariablesApiFp(configuration).createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn, teamId, options) {
            return exports.VariablesApiFp(configuration).createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options) {
            return exports.VariablesApiFp(configuration).deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1VariablesVariableIdDelete(variableId, options) {
            return exports.VariablesApiFp(configuration).deleteVariableV1VariablesVariableIdDelete(variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options) {
            return exports.VariablesApiFp(configuration).getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1VariablesVariableIdGet(variableId, options) {
            return exports.VariablesApiFp(configuration).getVariableV1VariablesVariableIdGet(variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.VariablesApiFp(configuration).listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return exports.VariablesApiFp(configuration).listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return exports.VariablesApiFp(configuration).listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return exports.VariablesApiFp(configuration).listAuthenticatedUserVariablesV1UserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamId
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return exports.VariablesApiFp(configuration).listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return exports.VariablesApiFp(configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamId
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return exports.VariablesApiFp(configuration).listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet(teamId, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return exports.VariablesApiFp(configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return exports.VariablesApiFp(configuration).listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return exports.VariablesApiFp(configuration).listUserVariablesV1UsersUserIdVariablesGet(userId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return exports.VariablesApiFp(configuration).listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1VariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return exports.VariablesApiFp(configuration).listVariablesV1VariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options) {
            return exports.VariablesApiFp(configuration).patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, options) {
            return exports.VariablesApiFp(configuration).patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * VariablesApi - object-oriented interface
 * @export
 * @class VariablesApi
 * @extends {BaseAPI}
 */
class VariablesApi extends base_1.BaseAPI {
    /**
     * Create a Variable.
     * @summary Create A Variable.
     * @param {VariablesApiCreateAVariableV1TeamsTeamIdVariablesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    createAVariableV1TeamsTeamIdVariablesPost(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).createAVariableV1TeamsTeamIdVariablesPost(requestParameters.teamId, requestParameters.variableIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Variable.
     * @summary Create A Variable.
     * @param {VariablesApiCreateAVariableV1VariablesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    createAVariableV1VariablesPost(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).createAVariableV1VariablesPost(requestParameters.variableIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create mulitple Variables.
     * @summary Create Multiple Variables.
     * @param {VariablesApiCreateMultipleVariablesV1TeamsTeamIdVariablesBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(requestParameters.teamId, requestParameters.arrayVariableInVariableIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create mulitple Variables.
     * @summary Create Multiple Variables.
     * @param {VariablesApiCreateMultipleVariablesV1VariablesBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    createMultipleVariablesV1VariablesBulkPost(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).createMultipleVariablesV1VariablesBulkPost(requestParameters.arrayVariableInVariableIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
     * @summary Delete Variable
     * @param {VariablesApiDeleteVariableV1TeamsTeamIdVariablesVariableIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(requestParameters.teamId, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
     * @summary Delete Variable
     * @param {VariablesApiDeleteVariableV1VariablesVariableIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    deleteVariableV1VariablesVariableIdDelete(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).deleteVariableV1VariablesVariableIdDelete(requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Variable.
     * @summary Get Variable
     * @param {VariablesApiGetVariableV1TeamsTeamIdVariablesVariableIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    getVariableV1TeamsTeamIdVariablesVariableIdGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).getVariableV1TeamsTeamIdVariablesVariableIdGet(requestParameters.teamId, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Variable.
     * @summary Get Variable
     * @param {VariablesApiGetVariableV1VariablesVariableIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    getVariableV1VariablesVariableIdGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).getVariableV1VariablesVariableIdGet(requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(requestParameters.teamId, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {VariablesApiListAssociationsV1VariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters.variableId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {VariablesApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {VariablesApiListAuthenticatedUserVariablesV1UserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters = {}, options) {
        return exports.VariablesApiFp(this.configuration).listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested variable\'s system.
     * @summary List System Of Features
     * @param {VariablesApiListSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listSystemOfFeaturesV1TeamsTeamIdVariablesVariableIdSystemFeaturesGet(requestParameters.teamId, requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested variable\'s system.
     * @summary List System Of Features
     * @param {VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the variables in the requested variable\'s system.
     * @summary List System Of Variables
     * @param {VariablesApiListSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listSystemOfVariablesV1TeamsTeamIdVariablesVariableIdSystemVariablesGet(requestParameters.teamId, requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the variables in the requested variable\'s system.
     * @summary List System Of Variables
     * @param {VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {VariablesApiListUserVariablesV1UsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listUserVariablesV1UsersUserIdVariablesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listUserVariablesV1UsersUserIdVariablesGet(requestParameters.userId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Variables.
     * @summary List Variables
     * @param {VariablesApiListVariablesV1TeamsTeamIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listVariablesV1TeamsTeamIdVariablesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listVariablesV1TeamsTeamIdVariablesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Variables.
     * @summary List Variables
     * @param {VariablesApiListVariablesV1VariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listVariablesV1VariablesGet(requestParameters = {}, options) {
        return exports.VariablesApiFp(this.configuration).listVariablesV1VariablesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Variable resource with partial update.
     * @summary Patch Variable
     * @param {VariablesApiPatchVariableV1TeamsTeamIdVariablesVariableIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    patchVariableV1TeamsTeamIdVariablesVariableIdPatch(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).patchVariableV1TeamsTeamIdVariablesVariableIdPatch(requestParameters.teamId, requestParameters.variableId, requestParameters.patchVariableOpArrayPatchVariableOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Variable resource with partial update.
     * @summary Patch Variable
     * @param {VariablesApiPatchVariableV1VariablesVariableIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    patchVariableV1VariablesVariableIdPatch(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).patchVariableV1VariablesVariableIdPatch(requestParameters.variableId, requestParameters.patchVariableOpArrayPatchVariableOp, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.VariablesApi = VariablesApi;
