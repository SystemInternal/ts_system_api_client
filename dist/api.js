"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 * This is a REST API through which clients can interact with System - an **open**, **collaborative**, and **ever-growing knowledge base** of all the world\'s systems.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariablesApi = exports.VariablesApiFactory = exports.VariablesApiFp = exports.VariablesApiAxiosParamCreator = exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiAxiosParamCreator = exports.TimelineApi = exports.TimelineApiFactory = exports.TimelineApiFp = exports.TimelineApiAxiosParamCreator = exports.TeamsApi = exports.TeamsApiFactory = exports.TeamsApiFp = exports.TeamsApiAxiosParamCreator = exports.StudyMetadataApi = exports.StudyMetadataApiFactory = exports.StudyMetadataApiFp = exports.StudyMetadataApiAxiosParamCreator = exports.StudiesApi = exports.StudiesApiFactory = exports.StudiesApiFp = exports.StudiesApiAxiosParamCreator = exports.StripeApi = exports.StripeApiFactory = exports.StripeApiFp = exports.StripeApiAxiosParamCreator = exports.SemanticSearchApi = exports.SemanticSearchApiFactory = exports.SemanticSearchApiFp = exports.SemanticSearchApiAxiosParamCreator = exports.RelationshipsApi = exports.RelationshipsApiFactory = exports.RelationshipsApiFp = exports.RelationshipsApiAxiosParamCreator = exports.PopulationAttributesApi = exports.PopulationAttributesApiFactory = exports.PopulationAttributesApiFp = exports.PopulationAttributesApiAxiosParamCreator = exports.PopulationAttributeValuesApi = exports.PopulationAttributeValuesApiFactory = exports.PopulationAttributeValuesApiFp = exports.PopulationAttributeValuesApiAxiosParamCreator = exports.PassthroughApi = exports.PassthroughApiFactory = exports.PassthroughApiFp = exports.PassthroughApiAxiosParamCreator = exports.ModelsApi = exports.ModelsApiFactory = exports.ModelsApiFp = exports.ModelsApiAxiosParamCreator = exports.ModeldbApi = exports.ModeldbApiFactory = exports.ModeldbApiFp = exports.ModeldbApiAxiosParamCreator = exports.MetricsApi = exports.MetricsApiFactory = exports.MetricsApiFp = exports.MetricsApiAxiosParamCreator = exports.IndexedSourcesApi = exports.IndexedSourcesApiFactory = exports.IndexedSourcesApiFp = exports.IndexedSourcesApiAxiosParamCreator = exports.GraphApi = exports.GraphApiFactory = exports.GraphApiFp = exports.GraphApiAxiosParamCreator = exports.FindingsApi = exports.FindingsApiFactory = exports.FindingsApiFp = exports.FindingsApiAxiosParamCreator = exports.FeedbackApi = exports.FeedbackApiFactory = exports.FeedbackApiFp = exports.FeedbackApiAxiosParamCreator = exports.FeaturesApi = exports.FeaturesApiFactory = exports.FeaturesApiFp = exports.FeaturesApiAxiosParamCreator = exports.EnterpriseApi = exports.EnterpriseApiFactory = exports.EnterpriseApiFp = exports.EnterpriseApiAxiosParamCreator = exports.DatasetsApi = exports.DatasetsApiFactory = exports.DatasetsApiFp = exports.DatasetsApiAxiosParamCreator = exports.DashboardsApi = exports.DashboardsApiFactory = exports.DashboardsApiFp = exports.DashboardsApiAxiosParamCreator = exports.ConceptsApi = exports.ConceptsApiFactory = exports.ConceptsApiFp = exports.ConceptsApiAxiosParamCreator = exports.AuthorsApi = exports.AuthorsApiFactory = exports.AuthorsApiFp = exports.AuthorsApiAxiosParamCreator = exports.AssociationsApi = exports.AssociationsApiFactory = exports.AssociationsApiFp = exports.AssociationsApiAxiosParamCreator = exports.VariableTypeEnum = exports.VariableSortEnum = exports.ValueSourceEnum = exports.ValidValueSource = exports.ValidTransformationTypeEnum = exports.ValidStatisticalTestType = exports.ValidSignificanceLevel = exports.ValidReproducibilityEnum = exports.ValidRelationshipStrengthEnum = exports.ValidRelationshipDirectionEnum = exports.ValidModelScoreEnum = exports.ValidFeatureContributionMethod = exports.ValidDatasetLicenseEnum = exports.ValidCalibratedRelationshipType = exports.TeamRoles = exports.SystemObjectResources = exports.StudyTypeEnum = exports.StudySortEnum = exports.StripeAccontStatus = exports.StatisticalTestType = exports.SignificanceLevel = exports.SemanticSearchType = exports.RetrievalStatus = exports.ResourceAction = exports.PopulationAttributeValueSortEnum = exports.PopulationAttributeSortEnum = exports.PatchOp = exports.Ordering = exports.MonitoringOperation = exports.MonitoringField = exports.ModelSortEnum = exports.ModelScoreEnum = exports.MessageType = exports.IntegrationType = exports.IntegrationState = exports.GraphSearchDirection = exports.GraphNodeType = exports.GraphLinkType = exports.FilterValueType = exports.FeatureTypeEnum = exports.FeatureSourceEnum = exports.FeatureSortEnum = exports.FeatureContributionMethod = exports.ExternalToolEnum = exports.ExternalAssetTypeEnum = exports.DeploymentStageEnum = exports.DatasetSortEnum = exports.DatasetLicenseEnum = exports.DashboardSortEnum = exports.ConceptSortEnum = exports.AuthorSortEnum = exports.AttributeTypeEnum = exports.AssociationSortEnum = exports.AlertColor = exports.AddFlowContext = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * Add study flow context enum.
 * @export
 * @enum {string}
 */
var AddFlowContext;
(function (AddFlowContext) {
    AddFlowContext["Relationship"] = "relationship";
    AddFlowContext["QuickProject"] = "quick_project";
})(AddFlowContext = exports.AddFlowContext || (exports.AddFlowContext = {}));
/**
 * Alert colors for metric monitoring.
 * @export
 * @enum {string}
 */
var AlertColor;
(function (AlertColor) {
    AlertColor["Green"] = "GREEN";
    AlertColor["Red"] = "RED";
})(AlertColor = exports.AlertColor || (exports.AlertColor = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var AssociationSortEnum;
(function (AssociationSortEnum) {
    AssociationSortEnum["CreatedAt"] = "created_at";
    AssociationSortEnum["LastUpdatedAt"] = "last_updated_at";
})(AssociationSortEnum = exports.AssociationSortEnum || (exports.AssociationSortEnum = {}));
/**
 * Enum for attribute types.
 * @export
 * @enum {string}
 */
var AttributeTypeEnum;
(function (AttributeTypeEnum) {
    AttributeTypeEnum["Invalid"] = "invalid";
    AttributeTypeEnum["Categorical"] = "categorical";
    AttributeTypeEnum["DateRange"] = "date_range";
    AttributeTypeEnum["NumberRange"] = "number_range";
    AttributeTypeEnum["FreeText"] = "free_text";
    AttributeTypeEnum["Location"] = "location";
})(AttributeTypeEnum = exports.AttributeTypeEnum || (exports.AttributeTypeEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var AuthorSortEnum;
(function (AuthorSortEnum) {
    AuthorSortEnum["CreatedAt"] = "created_at";
    AuthorSortEnum["LastUpdatedAt"] = "last_updated_at";
    AuthorSortEnum["Name"] = "name";
})(AuthorSortEnum = exports.AuthorSortEnum || (exports.AuthorSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var ConceptSortEnum;
(function (ConceptSortEnum) {
    ConceptSortEnum["CreatedAt"] = "created_at";
    ConceptSortEnum["LastUpdatedAt"] = "last_updated_at";
    ConceptSortEnum["Name"] = "name";
})(ConceptSortEnum = exports.ConceptSortEnum || (exports.ConceptSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var DashboardSortEnum;
(function (DashboardSortEnum) {
    DashboardSortEnum["CreatedAt"] = "created_at";
    DashboardSortEnum["LastUpdatedAt"] = "last_updated_at";
    DashboardSortEnum["Name"] = "name";
})(DashboardSortEnum = exports.DashboardSortEnum || (exports.DashboardSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var DatasetLicenseEnum;
(function (DatasetLicenseEnum) {
    DatasetLicenseEnum["PublicDomain"] = "public_domain";
    DatasetLicenseEnum["CreativeCommonsPublicDomainDedication"] = "creative_commons_public_domain_dedication";
    DatasetLicenseEnum["OpendataCommonsPublicDomainDedicationAndLicense"] = "opendata_commons_public_domain_dedication_and_license";
    DatasetLicenseEnum["CreativeCommonsAttributionInternational"] = "creative_commons_attribution_international";
    DatasetLicenseEnum["CommunityDataLicenseAgreementVersion1Permissive"] = "community_data_license_agreement_version_1_permissive";
    DatasetLicenseEnum["OpenDataCommonsAttributionLicense"] = "open_data_commons_attribution_license";
    DatasetLicenseEnum["CreativeCommonsAttributionShareAlike4International"] = "creative_commons_attribution_share_alike_4_international";
    DatasetLicenseEnum["CommunityDataLicenseAgreementVersion1Sharing"] = "community_data_license_agreement_version_1_sharing";
    DatasetLicenseEnum["OpenDataCommonsOpenDatabaseLicense"] = "open_data_commons_open_database_license";
    DatasetLicenseEnum["CreativeCommonsAttributionNoncommercial4International"] = "creative_commons_attribution_noncommercial_4_international";
    DatasetLicenseEnum["CreativeCommonsAttributionNoderivatives4International"] = "creative_commons_attribution_noderivatives_4_international";
    DatasetLicenseEnum["CreativeCommonsAttributionNoncommercialShareAlike4International"] = "creative_commons_attribution_noncommercial_share_alike_4_international";
    DatasetLicenseEnum["CreativeCommonsAttributionNoncommercialNoderivatives4International"] = "creative_commons_attribution_noncommercial_noderivatives_4_international";
    DatasetLicenseEnum["Other"] = "other";
    DatasetLicenseEnum["Invalid"] = "invalid";
})(DatasetLicenseEnum = exports.DatasetLicenseEnum || (exports.DatasetLicenseEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var DatasetSortEnum;
(function (DatasetSortEnum) {
    DatasetSortEnum["Popularity"] = "popularity";
    DatasetSortEnum["CreatedAt"] = "created_at";
    DatasetSortEnum["LastUpdatedAt"] = "last_updated_at";
    DatasetSortEnum["Name"] = "name";
})(DatasetSortEnum = exports.DatasetSortEnum || (exports.DatasetSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var DeploymentStageEnum;
(function (DeploymentStageEnum) {
    DeploymentStageEnum["Development"] = "development";
    DeploymentStageEnum["Testing"] = "testing";
    DeploymentStageEnum["Staging"] = "staging";
    DeploymentStageEnum["Production"] = "production";
    DeploymentStageEnum["Invalid"] = "invalid";
})(DeploymentStageEnum = exports.DeploymentStageEnum || (exports.DeploymentStageEnum = {}));
/**
 * External asset type enum.
 * @export
 * @enum {string}
 */
var ExternalAssetTypeEnum;
(function (ExternalAssetTypeEnum) {
    ExternalAssetTypeEnum["Invalid"] = "invalid";
    ExternalAssetTypeEnum["Document"] = "document";
    ExternalAssetTypeEnum["Notebook"] = "notebook";
})(ExternalAssetTypeEnum = exports.ExternalAssetTypeEnum || (exports.ExternalAssetTypeEnum = {}));
/**
 * Enum for external tools.
 * @export
 * @enum {string}
 */
var ExternalToolEnum;
(function (ExternalToolEnum) {
    ExternalToolEnum["Looker"] = "LOOKER";
    ExternalToolEnum["Mode"] = "MODE";
    ExternalToolEnum["Tableau"] = "TABLEAU";
})(ExternalToolEnum = exports.ExternalToolEnum || (exports.ExternalToolEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var FeatureContributionMethod;
(function (FeatureContributionMethod) {
    FeatureContributionMethod["Gini"] = "gini";
    FeatureContributionMethod["Gain"] = "gain";
    FeatureContributionMethod["Shap"] = "shap";
    FeatureContributionMethod["Coefficient"] = "coefficient";
    FeatureContributionMethod["Lime"] = "lime";
    FeatureContributionMethod["Permutation"] = "permutation";
    FeatureContributionMethod["PearsonR"] = "pearson_r";
    FeatureContributionMethod["KendallTau"] = "kendall_tau";
    FeatureContributionMethod["CramerV"] = "cramer_v";
    FeatureContributionMethod["KruskalWallisHTest"] = "kruskal_wallis_h_test";
    FeatureContributionMethod["ControlVariable"] = "control_variable";
    FeatureContributionMethod["ProductMomentR"] = "product_moment_r";
    FeatureContributionMethod["FrequencyScore"] = "frequency_score";
    FeatureContributionMethod["OddsRatio"] = "odds_ratio";
    FeatureContributionMethod["RelativeRiskRatio"] = "relative_risk_ratio";
    FeatureContributionMethod["HazardRatio"] = "hazard_ratio";
    FeatureContributionMethod["MeanGainUnstandardized"] = "mean_gain_unstandardized";
    FeatureContributionMethod["MeanGainStandardized"] = "mean_gain_standardized";
    FeatureContributionMethod["MeanDifferenceUnstandardized"] = "mean_difference_unstandardized";
    FeatureContributionMethod["MeanDifferenceStandardized"] = "mean_difference_standardized";
    FeatureContributionMethod["ProportionDifference"] = "proportion_difference";
    FeatureContributionMethod["LogOddsRatio"] = "log_odds_ratio";
    FeatureContributionMethod["PearsonChiSquaredTest"] = "pearson_chi_squared_test";
    FeatureContributionMethod["Forecast"] = "forecast";
    FeatureContributionMethod["PercentChangeDifference"] = "percent_change_difference";
    FeatureContributionMethod["AdjustedOddsRatio"] = "adjusted_odds_ratio";
    FeatureContributionMethod["AdjustedHazardRatio"] = "adjusted_hazard_ratio";
    FeatureContributionMethod["IncidentRateRatio"] = "incident_rate_ratio";
    FeatureContributionMethod["RiskDifference"] = "risk_difference";
    FeatureContributionMethod["InformationFlow"] = "information_flow";
    FeatureContributionMethod["StandardizedCoefficient"] = "standardized_coefficient";
    FeatureContributionMethod["CohensD"] = "cohens_d";
    FeatureContributionMethod["HedgesG"] = "hedges_g";
    FeatureContributionMethod["GlassSDelta"] = "glass_s_delta";
    FeatureContributionMethod["RootMeanSquareDifferencePsi"] = "root_mean_square_difference_psi";
    FeatureContributionMethod["MahalanobisDistance"] = "mahalanobis_distance";
    FeatureContributionMethod["CohensW"] = "cohens_w";
    FeatureContributionMethod["CohensH"] = "cohens_h";
    FeatureContributionMethod["CliffsDelta"] = "cliffs_delta";
    FeatureContributionMethod["RankBiserialCorrelation"] = "rank_biserial_correlation";
    FeatureContributionMethod["SpearmanCorrelation"] = "spearman_correlation";
    FeatureContributionMethod["Elasticity"] = "elasticity";
    FeatureContributionMethod["PrevalenceRatio"] = "prevalence_ratio";
    FeatureContributionMethod["Invalid"] = "invalid";
})(FeatureContributionMethod = exports.FeatureContributionMethod || (exports.FeatureContributionMethod = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var FeatureSortEnum;
(function (FeatureSortEnum) {
    FeatureSortEnum["ModelCount"] = "model_count";
    FeatureSortEnum["CreatedAt"] = "created_at";
    FeatureSortEnum["LastUpdatedAt"] = "last_updated_at";
    FeatureSortEnum["Name"] = "name";
})(FeatureSortEnum = exports.FeatureSortEnum || (exports.FeatureSortEnum = {}));
/**
 * Enum for feature source.
 * @export
 * @enum {string}
 */
var FeatureSourceEnum;
(function (FeatureSourceEnum) {
    FeatureSourceEnum["Invalid"] = "invalid";
    FeatureSourceEnum["LocalEvaluator"] = "local_evaluator";
    FeatureSourceEnum["RemoteEvaluator"] = "remote_evaluator";
    FeatureSourceEnum["User"] = "user";
})(FeatureSourceEnum = exports.FeatureSourceEnum || (exports.FeatureSourceEnum = {}));
/**
 * Enum for feature types.
 * @export
 * @enum {string}
 */
var FeatureTypeEnum;
(function (FeatureTypeEnum) {
    FeatureTypeEnum["Invalid"] = "invalid";
    FeatureTypeEnum["Numerical"] = "numerical";
    FeatureTypeEnum["Categorical"] = "categorical";
    FeatureTypeEnum["Datetime"] = "datetime";
    FeatureTypeEnum["Text"] = "text";
    FeatureTypeEnum["Image"] = "image";
    FeatureTypeEnum["Audio"] = "audio";
    FeatureTypeEnum["Video"] = "video";
    FeatureTypeEnum["File"] = "file";
    FeatureTypeEnum["TimeSeries"] = "time_series";
    FeatureTypeEnum["Dynamic"] = "dynamic";
    FeatureTypeEnum["String"] = "string";
})(FeatureTypeEnum = exports.FeatureTypeEnum || (exports.FeatureTypeEnum = {}));
/**
 * Filter value types.
 * @export
 * @enum {string}
 */
var FilterValueType;
(function (FilterValueType) {
    FilterValueType["Filter"] = "filter";
    FilterValueType["Sort"] = "sort";
})(FilterValueType = exports.FilterValueType || (exports.FilterValueType = {}));
/**
 * Graph Link Type enum.
 * @export
 * @enum {string}
 */
var GraphLinkType;
(function (GraphLinkType) {
    GraphLinkType["DatasetRelationship"] = "dataset_relationship";
    GraphLinkType["ConceptRelationship"] = "concept_relationship";
    GraphLinkType["VariableRelationship"] = "variable_relationship";
    GraphLinkType["FeatureRelationship"] = "feature_relationship";
    GraphLinkType["FeatureVariable"] = "feature_variable";
    GraphLinkType["Measures"] = "measures";
})(GraphLinkType = exports.GraphLinkType || (exports.GraphLinkType = {}));
/**
 * Graph Node Type enum.
 * @export
 * @enum {string}
 */
var GraphNodeType;
(function (GraphNodeType) {
    GraphNodeType["Dataset"] = "dataset";
    GraphNodeType["Concept"] = "concept";
    GraphNodeType["Variable"] = "variable";
    GraphNodeType["Feature"] = "feature";
})(GraphNodeType = exports.GraphNodeType || (exports.GraphNodeType = {}));
/**
 * Single topic graph direction for enum.
 * @export
 * @enum {string}
 */
var GraphSearchDirection;
(function (GraphSearchDirection) {
    GraphSearchDirection["In"] = "in";
    GraphSearchDirection["Out"] = "out";
})(GraphSearchDirection = exports.GraphSearchDirection || (exports.GraphSearchDirection = {}));
/**
 * Integration service state.
 * @export
 * @enum {string}
 */
var IntegrationState;
(function (IntegrationState) {
    IntegrationState["Initial"] = "INITIAL";
    IntegrationState["Active"] = "ACTIVE";
    IntegrationState["Inactive"] = "INACTIVE";
})(IntegrationState = exports.IntegrationState || (exports.IntegrationState = {}));
/**
 * Integration retrieval types.
 * @export
 * @enum {string}
 */
var IntegrationType;
(function (IntegrationType) {
    IntegrationType["Redshift"] = "REDSHIFT";
    IntegrationType["Snowflake"] = "SNOWFLAKE";
    IntegrationType["Bigquery"] = "BIGQUERY";
    IntegrationType["Looker"] = "LOOKER";
    IntegrationType["Mode"] = "MODE";
})(IntegrationType = exports.IntegrationType || (exports.IntegrationType = {}));
/**
 * Message type.
 * @export
 * @enum {string}
 */
var MessageType;
(function (MessageType) {
    MessageType["Error"] = "ERROR";
    MessageType["DatasetCreated"] = "DATASET_CREATED";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var ModelScoreEnum;
(function (ModelScoreEnum) {
    ModelScoreEnum["AccuracyScore"] = "accuracy_score";
    ModelScoreEnum["AveragePrecisionScore"] = "average_precision_score";
    ModelScoreEnum["BalancedAccuracyScore"] = "balanced_accuracy_score";
    ModelScoreEnum["BrierScoreLoss"] = "brier_score_loss";
    ModelScoreEnum["CohenKappaScore"] = "cohen_kappa_score";
    ModelScoreEnum["F1Score"] = "f1_score";
    ModelScoreEnum["HammingLoss"] = "hamming_loss";
    ModelScoreEnum["HingeLoss"] = "hinge_loss";
    ModelScoreEnum["JaccardScore"] = "jaccard_score";
    ModelScoreEnum["LogLoss"] = "log_loss";
    ModelScoreEnum["MatthewsCorrCoef"] = "matthews_corr_coef";
    ModelScoreEnum["PrecisionScore"] = "precision_score";
    ModelScoreEnum["RecallScore"] = "recall_score";
    ModelScoreEnum["RocAucScore"] = "roc_auc_score";
    ModelScoreEnum["ZeroOneLoss"] = "zero_one_loss";
    ModelScoreEnum["ExplainedVarianceScore"] = "explained_variance_score";
    ModelScoreEnum["MaxError"] = "max_error";
    ModelScoreEnum["MeanAbsoluteError"] = "mean_absolute_error";
    ModelScoreEnum["MeanAbsolutePercentageError"] = "mean_absolute_percentage_error";
    ModelScoreEnum["MeanSquaredError"] = "mean_squared_error";
    ModelScoreEnum["MeanSquaredLogError"] = "mean_squared_log_error";
    ModelScoreEnum["MedianAbsoluteError"] = "median_absolute_error";
    ModelScoreEnum["R2Score"] = "r2_score";
    ModelScoreEnum["CoverageError"] = "coverage_error";
    ModelScoreEnum["LabelRankingAveragePrecisionScore"] = "label_ranking_average_precision_score";
    ModelScoreEnum["LabelRankingLoss"] = "label_ranking_loss";
    ModelScoreEnum["AdjustedR2Score"] = "adjusted_r2_score";
    ModelScoreEnum["MutualInformationScore"] = "mutual_information_score";
    ModelScoreEnum["AdjMutualInformationScore"] = "adj_mutual_information_score";
    ModelScoreEnum["NormalizedMutualInformationScore"] = "normalized_mutual_information_score";
    ModelScoreEnum["AdjRandScore"] = "adj_rand_score";
    ModelScoreEnum["CompletenessScore"] = "completeness_score";
    ModelScoreEnum["FowlkesMallowsScore"] = "fowlkes_mallows_score";
    ModelScoreEnum["HomogeneityScore"] = "homogeneity_score";
    ModelScoreEnum["VMeasureScore"] = "v_measure_score";
    ModelScoreEnum["NegMeanAbsoluteError"] = "neg_mean_absolute_error";
    ModelScoreEnum["NegMeanSquaredError"] = "neg_mean_squared_error";
    ModelScoreEnum["RootMeanSquaredError"] = "root_mean_squared_error";
    ModelScoreEnum["NegRootMeanSquaredError"] = "neg_root_mean_squared_error";
    ModelScoreEnum["RootMeanSquaredLogError"] = "root_mean_squared_log_error";
    ModelScoreEnum["NegMedianAbsoluteError"] = "neg_median_absolute_error";
    ModelScoreEnum["CosineProximity"] = "cosine_proximity";
    ModelScoreEnum["KullbackLeiblerDivergence"] = "kullback_leibler_divergence";
    ModelScoreEnum["PoissonMetric"] = "poisson_metric";
    ModelScoreEnum["MulticlassLogLoss"] = "multiclass_log_loss";
    ModelScoreEnum["NormalizedDiscountedCumulativeGain"] = "normalized_discounted_cumulative_gain";
    ModelScoreEnum["GammaDeviance"] = "gamma_deviance";
    ModelScoreEnum["HuberMetric"] = "huber_metric";
    ModelScoreEnum["FBetaScore"] = "f_beta_score";
    ModelScoreEnum["EuclideanDistance"] = "euclidean_distance";
    ModelScoreEnum["HaversineDistance"] = "haversine_distance";
    ModelScoreEnum["MeanSquaredPredictioneRror"] = "mean_squared_predictione_rror";
    ModelScoreEnum["PseudoR2Mcfadden"] = "pseudo_r2_mcfadden";
    ModelScoreEnum["AdjustedPseudoR2Mcfadden"] = "adjusted_pseudo_r2_mcfadden";
    ModelScoreEnum["PseudoR2Nagelkerke"] = "pseudo_r2_nagelkerke";
    ModelScoreEnum["PseudoR2CoxSnell"] = "pseudo_r2_cox_snell";
    ModelScoreEnum["PseudoR2Effron"] = "pseudo_r2_effron";
    ModelScoreEnum["Bic"] = "bic";
    ModelScoreEnum["Aic"] = "aic";
    ModelScoreEnum["CorrelationActualForecast"] = "correlation_actual_forecast";
    ModelScoreEnum["ForecastVsActual"] = "forecast_vs_actual";
    ModelScoreEnum["MeanSquaredPercentageError"] = "mean_squared_percentage_error";
    ModelScoreEnum["ConfusionMatrix"] = "confusion_matrix";
    ModelScoreEnum["MulticlassConfusionMatrix"] = "multiclass_confusion_matrix";
    ModelScoreEnum["RocCurve"] = "roc_curve";
    ModelScoreEnum["Invalid"] = "invalid";
})(ModelScoreEnum = exports.ModelScoreEnum || (exports.ModelScoreEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var ModelSortEnum;
(function (ModelSortEnum) {
    ModelSortEnum["TargetName"] = "target_name";
    ModelSortEnum["CreatedAt"] = "created_at";
    ModelSortEnum["LastUpdatedAt"] = "last_updated_at";
})(ModelSortEnum = exports.ModelSortEnum || (exports.ModelSortEnum = {}));
/**
 * Field options for monitoring a metric.
 * @export
 * @enum {string}
 */
var MonitoringField;
(function (MonitoringField) {
    MonitoringField["Value"] = "VALUE";
    MonitoringField["Change"] = "CHANGE";
    MonitoringField["PctChange"] = "PCT_CHANGE";
    MonitoringField["AbsPctChange"] = "ABS_PCT_CHANGE";
    MonitoringField["AbsChange"] = "ABS_CHANGE";
})(MonitoringField = exports.MonitoringField || (exports.MonitoringField = {}));
/**
 * Monitoring comparison operators.
 * @export
 * @enum {string}
 */
var MonitoringOperation;
(function (MonitoringOperation) {
    MonitoringOperation["Gt"] = "GT";
    MonitoringOperation["Ge"] = "GE";
    MonitoringOperation["Lt"] = "LT";
    MonitoringOperation["Le"] = "LE";
    MonitoringOperation["Eq"] = "EQ";
    MonitoringOperation["Ne"] = "NE";
})(MonitoringOperation = exports.MonitoringOperation || (exports.MonitoringOperation = {}));
/**
 * Ordering direction enum.
 * @export
 * @enum {string}
 */
var Ordering;
(function (Ordering) {
    Ordering["Asc"] = "asc";
    Ordering["Desc"] = "desc";
})(Ordering = exports.Ordering || (exports.Ordering = {}));
/**
 * Enum for PATCH operations.
 * @export
 * @enum {string}
 */
var PatchOp;
(function (PatchOp) {
    PatchOp["Update"] = "update";
    PatchOp["Append"] = "append";
    PatchOp["Delete"] = "delete";
})(PatchOp = exports.PatchOp || (exports.PatchOp = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var PopulationAttributeSortEnum;
(function (PopulationAttributeSortEnum) {
    PopulationAttributeSortEnum["CreatedAt"] = "created_at";
    PopulationAttributeSortEnum["LastUpdatedAt"] = "last_updated_at";
    PopulationAttributeSortEnum["Name"] = "name";
})(PopulationAttributeSortEnum = exports.PopulationAttributeSortEnum || (exports.PopulationAttributeSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var PopulationAttributeValueSortEnum;
(function (PopulationAttributeValueSortEnum) {
    PopulationAttributeValueSortEnum["CreatedAt"] = "created_at";
    PopulationAttributeValueSortEnum["LastUpdatedAt"] = "last_updated_at";
    PopulationAttributeValueSortEnum["Name"] = "name";
})(PopulationAttributeValueSortEnum = exports.PopulationAttributeValueSortEnum || (exports.PopulationAttributeValueSortEnum = {}));
/**
 * API resource action enum.
 * @export
 * @enum {string}
 */
var ResourceAction;
(function (ResourceAction) {
    ResourceAction["Create"] = "create";
    ResourceAction["View"] = "view";
    ResourceAction["Edit"] = "edit";
    ResourceAction["Delete"] = "delete";
})(ResourceAction = exports.ResourceAction || (exports.ResourceAction = {}));
/**
 * Table retrieval status.
 * @export
 * @enum {string}
 */
var RetrievalStatus;
(function (RetrievalStatus) {
    RetrievalStatus["Pending"] = "pending";
    RetrievalStatus["Success"] = "success";
    RetrievalStatus["Failure"] = "failure";
})(RetrievalStatus = exports.RetrievalStatus || (exports.RetrievalStatus = {}));
/**
 * Defines modes for semantic search.
 * @export
 * @enum {string}
 */
var SemanticSearchType;
(function (SemanticSearchType) {
    SemanticSearchType["RiskFactorOf"] = "risk_factor_of";
    SemanticSearchType["Outcome"] = "outcome";
    SemanticSearchType["Relationship"] = "relationship";
    SemanticSearchType["Relationship2d"] = "relationship_2d";
    SemanticSearchType["SingleVariable2d"] = "single_variable_2d";
})(SemanticSearchType = exports.SemanticSearchType || (exports.SemanticSearchType = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var SignificanceLevel;
(function (SignificanceLevel) {
    SignificanceLevel["NinetyFive"] = "ninety_five";
    SignificanceLevel["NinetyNine"] = "ninety_nine";
    SignificanceLevel["NinetyNinePointNine"] = "ninety_nine_point_nine";
    SignificanceLevel["Invalid"] = "invalid";
})(SignificanceLevel = exports.SignificanceLevel || (exports.SignificanceLevel = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var StatisticalTestType;
(function (StatisticalTestType) {
    StatisticalTestType["Ttest"] = "ttest";
    StatisticalTestType["Ztest"] = "ztest";
    StatisticalTestType["Anova"] = "anova";
    StatisticalTestType["Chisquared"] = "chisquared";
    StatisticalTestType["Htest"] = "htest";
    StatisticalTestType["Invalid"] = "invalid";
})(StatisticalTestType = exports.StatisticalTestType || (exports.StatisticalTestType = {}));
/**
 * Stripe account status enum.
 * @export
 * @enum {string}
 */
var StripeAccontStatus;
(function (StripeAccontStatus) {
    StripeAccontStatus["Trial"] = "trial";
    StripeAccontStatus["Subscribed"] = "subscribed";
    StripeAccontStatus["Expired"] = "expired";
    StripeAccontStatus["GroupSubscribed"] = "group_subscribed";
    StripeAccontStatus["Unsubscribed"] = "unsubscribed";
})(StripeAccontStatus = exports.StripeAccontStatus || (exports.StripeAccontStatus = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var StudySortEnum;
(function (StudySortEnum) {
    StudySortEnum["CreatedAt"] = "created_at";
    StudySortEnum["LastUpdatedAt"] = "last_updated_at";
    StudySortEnum["Name"] = "name";
})(StudySortEnum = exports.StudySortEnum || (exports.StudySortEnum = {}));
/**
 * Enum for study types.
 * @export
 * @enum {string}
 */
var StudyTypeEnum;
(function (StudyTypeEnum) {
    StudyTypeEnum["Invalid"] = "invalid";
    StudyTypeEnum["SupervisedMl"] = "supervised_ml";
    StudyTypeEnum["UnsupervisedMl"] = "unsupervised_ml";
    StudyTypeEnum["StatisticalInference"] = "statistical_inference";
    StudyTypeEnum["RandomizedControlTrial"] = "randomized_control_trial";
})(StudyTypeEnum = exports.StudyTypeEnum || (exports.StudyTypeEnum = {}));
/**
 * Enum System object resource names.
 * @export
 * @enum {string}
 */
var SystemObjectResources;
(function (SystemObjectResources) {
    SystemObjectResources["Variable"] = "variable";
    SystemObjectResources["Dataset"] = "dataset";
    SystemObjectResources["Feature"] = "feature";
    SystemObjectResources["Study"] = "study";
    SystemObjectResources["Model"] = "model";
    SystemObjectResources["Author"] = "author";
    SystemObjectResources["Concept"] = "concept";
    SystemObjectResources["PopulationAttribute"] = "population_attribute";
    SystemObjectResources["PopulationAttributeValue"] = "population_attribute_value";
    SystemObjectResources["Association"] = "association";
    SystemObjectResources["Team"] = "team";
    SystemObjectResources["Dashboard"] = "dashboard";
    SystemObjectResources["Relationship"] = "relationship";
})(SystemObjectResources = exports.SystemObjectResources || (exports.SystemObjectResources = {}));
/**
 * Roles available for a team.
 * @export
 * @enum {string}
 */
var TeamRoles;
(function (TeamRoles) {
    TeamRoles["Admin"] = "admin";
    TeamRoles["Editor"] = "editor";
})(TeamRoles = exports.TeamRoles || (exports.TeamRoles = {}));
/**
 * Enum for valid calibrated relationship type.
 * @export
 * @enum {string}
 */
var ValidCalibratedRelationshipType;
(function (ValidCalibratedRelationshipType) {
    ValidCalibratedRelationshipType["Invalid"] = "invalid";
    ValidCalibratedRelationshipType["SiPearsonR"] = "si_pearson_r";
    ValidCalibratedRelationshipType["SiKendallTau"] = "si_kendall_tau";
    ValidCalibratedRelationshipType["SiCramerV"] = "si_cramer_v";
    ValidCalibratedRelationshipType["MlPermutationF1"] = "ml_permutation_f1";
    ValidCalibratedRelationshipType["MlPermutationR2"] = "ml_permutation_r2";
    ValidCalibratedRelationshipType["SiEffectSizeR"] = "si_effect_size_r";
    ValidCalibratedRelationshipType["SiEffectSizeD"] = "si_effect_size_d";
    ValidCalibratedRelationshipType["SiEffectSizeW"] = "si_effect_size_w";
})(ValidCalibratedRelationshipType = exports.ValidCalibratedRelationshipType || (exports.ValidCalibratedRelationshipType = {}));
/**
 * Enum for valid dataset license.
 * @export
 * @enum {string}
 */
var ValidDatasetLicenseEnum;
(function (ValidDatasetLicenseEnum) {
    ValidDatasetLicenseEnum["PublicDomain"] = "public_domain";
    ValidDatasetLicenseEnum["CreativeCommonsPublicDomainDedication"] = "creative_commons_public_domain_dedication";
    ValidDatasetLicenseEnum["OpendataCommonsPublicDomainDedicationAndLicense"] = "opendata_commons_public_domain_dedication_and_license";
    ValidDatasetLicenseEnum["CreativeCommonsAttributionInternational"] = "creative_commons_attribution_international";
    ValidDatasetLicenseEnum["CommunityDataLicenseAgreementVersion1Permissive"] = "community_data_license_agreement_version_1_permissive";
    ValidDatasetLicenseEnum["OpenDataCommonsAttributionLicense"] = "open_data_commons_attribution_license";
    ValidDatasetLicenseEnum["CreativeCommonsAttributionShareAlike4International"] = "creative_commons_attribution_share_alike_4_international";
    ValidDatasetLicenseEnum["CommunityDataLicenseAgreementVersion1Sharing"] = "community_data_license_agreement_version_1_sharing";
    ValidDatasetLicenseEnum["OpenDataCommonsOpenDatabaseLicense"] = "open_data_commons_open_database_license";
    ValidDatasetLicenseEnum["CreativeCommonsAttributionNoncommercial4International"] = "creative_commons_attribution_noncommercial_4_international";
    ValidDatasetLicenseEnum["CreativeCommonsAttributionNoderivatives4International"] = "creative_commons_attribution_noderivatives_4_international";
    ValidDatasetLicenseEnum["CreativeCommonsAttributionNoncommercialShareAlike4International"] = "creative_commons_attribution_noncommercial_share_alike_4_international";
    ValidDatasetLicenseEnum["CreativeCommonsAttributionNoncommercialNoderivatives4International"] = "creative_commons_attribution_noncommercial_noderivatives_4_international";
    ValidDatasetLicenseEnum["Other"] = "other";
})(ValidDatasetLicenseEnum = exports.ValidDatasetLicenseEnum || (exports.ValidDatasetLicenseEnum = {}));
/**
 * Valid feature contribution method enums.
 * @export
 * @enum {string}
 */
var ValidFeatureContributionMethod;
(function (ValidFeatureContributionMethod) {
    ValidFeatureContributionMethod["Gini"] = "gini";
    ValidFeatureContributionMethod["Gain"] = "gain";
    ValidFeatureContributionMethod["Shap"] = "shap";
    ValidFeatureContributionMethod["Coefficient"] = "coefficient";
    ValidFeatureContributionMethod["Lime"] = "lime";
    ValidFeatureContributionMethod["Permutation"] = "permutation";
    ValidFeatureContributionMethod["PearsonR"] = "pearson_r";
    ValidFeatureContributionMethod["KendallTau"] = "kendall_tau";
    ValidFeatureContributionMethod["CramerV"] = "cramer_v";
    ValidFeatureContributionMethod["KruskalWallisHTest"] = "kruskal_wallis_h_test";
    ValidFeatureContributionMethod["ControlVariable"] = "control_variable";
    ValidFeatureContributionMethod["ProductMomentR"] = "product_moment_r";
    ValidFeatureContributionMethod["FrequencyScore"] = "frequency_score";
    ValidFeatureContributionMethod["OddsRatio"] = "odds_ratio";
    ValidFeatureContributionMethod["RelativeRiskRatio"] = "relative_risk_ratio";
    ValidFeatureContributionMethod["HazardRatio"] = "hazard_ratio";
    ValidFeatureContributionMethod["MeanGainUnstandardized"] = "mean_gain_unstandardized";
    ValidFeatureContributionMethod["MeanGainStandardized"] = "mean_gain_standardized";
    ValidFeatureContributionMethod["MeanDifferenceUnstandardized"] = "mean_difference_unstandardized";
    ValidFeatureContributionMethod["MeanDifferenceStandardized"] = "mean_difference_standardized";
    ValidFeatureContributionMethod["ProportionDifference"] = "proportion_difference";
    ValidFeatureContributionMethod["LogOddsRatio"] = "log_odds_ratio";
    ValidFeatureContributionMethod["PearsonChiSquaredTest"] = "pearson_chi_squared_test";
    ValidFeatureContributionMethod["Forecast"] = "forecast";
    ValidFeatureContributionMethod["PercentChangeDifference"] = "percent_change_difference";
    ValidFeatureContributionMethod["AdjustedOddsRatio"] = "adjusted_odds_ratio";
    ValidFeatureContributionMethod["AdjustedHazardRatio"] = "adjusted_hazard_ratio";
    ValidFeatureContributionMethod["IncidentRateRatio"] = "incident_rate_ratio";
    ValidFeatureContributionMethod["RiskDifference"] = "risk_difference";
    ValidFeatureContributionMethod["InformationFlow"] = "information_flow";
    ValidFeatureContributionMethod["StandardizedCoefficient"] = "standardized_coefficient";
    ValidFeatureContributionMethod["CohensD"] = "cohens_d";
    ValidFeatureContributionMethod["HedgesG"] = "hedges_g";
    ValidFeatureContributionMethod["GlassSDelta"] = "glass_s_delta";
    ValidFeatureContributionMethod["RootMeanSquareDifferencePsi"] = "root_mean_square_difference_psi";
    ValidFeatureContributionMethod["MahalanobisDistance"] = "mahalanobis_distance";
    ValidFeatureContributionMethod["CohensW"] = "cohens_w";
    ValidFeatureContributionMethod["CohensH"] = "cohens_h";
    ValidFeatureContributionMethod["CliffsDelta"] = "cliffs_delta";
    ValidFeatureContributionMethod["RankBiserialCorrelation"] = "rank_biserial_correlation";
    ValidFeatureContributionMethod["SpearmanCorrelation"] = "spearman_correlation";
    ValidFeatureContributionMethod["Elasticity"] = "elasticity";
    ValidFeatureContributionMethod["PrevalenceRatio"] = "prevalence_ratio";
})(ValidFeatureContributionMethod = exports.ValidFeatureContributionMethod || (exports.ValidFeatureContributionMethod = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var ValidModelScoreEnum;
(function (ValidModelScoreEnum) {
    ValidModelScoreEnum["AccuracyScore"] = "accuracy_score";
    ValidModelScoreEnum["AveragePrecisionScore"] = "average_precision_score";
    ValidModelScoreEnum["BalancedAccuracyScore"] = "balanced_accuracy_score";
    ValidModelScoreEnum["BrierScoreLoss"] = "brier_score_loss";
    ValidModelScoreEnum["CohenKappaScore"] = "cohen_kappa_score";
    ValidModelScoreEnum["F1Score"] = "f1_score";
    ValidModelScoreEnum["HammingLoss"] = "hamming_loss";
    ValidModelScoreEnum["HingeLoss"] = "hinge_loss";
    ValidModelScoreEnum["JaccardScore"] = "jaccard_score";
    ValidModelScoreEnum["LogLoss"] = "log_loss";
    ValidModelScoreEnum["MatthewsCorrCoef"] = "matthews_corr_coef";
    ValidModelScoreEnum["PrecisionScore"] = "precision_score";
    ValidModelScoreEnum["RecallScore"] = "recall_score";
    ValidModelScoreEnum["RocAucScore"] = "roc_auc_score";
    ValidModelScoreEnum["ZeroOneLoss"] = "zero_one_loss";
    ValidModelScoreEnum["ExplainedVarianceScore"] = "explained_variance_score";
    ValidModelScoreEnum["MaxError"] = "max_error";
    ValidModelScoreEnum["MeanAbsoluteError"] = "mean_absolute_error";
    ValidModelScoreEnum["MeanAbsolutePercentageError"] = "mean_absolute_percentage_error";
    ValidModelScoreEnum["MeanSquaredError"] = "mean_squared_error";
    ValidModelScoreEnum["MeanSquaredLogError"] = "mean_squared_log_error";
    ValidModelScoreEnum["MedianAbsoluteError"] = "median_absolute_error";
    ValidModelScoreEnum["R2Score"] = "r2_score";
    ValidModelScoreEnum["CoverageError"] = "coverage_error";
    ValidModelScoreEnum["LabelRankingAveragePrecisionScore"] = "label_ranking_average_precision_score";
    ValidModelScoreEnum["LabelRankingLoss"] = "label_ranking_loss";
    ValidModelScoreEnum["AdjustedR2Score"] = "adjusted_r2_score";
    ValidModelScoreEnum["MutualInformationScore"] = "mutual_information_score";
    ValidModelScoreEnum["AdjMutualInformationScore"] = "adj_mutual_information_score";
    ValidModelScoreEnum["NormalizedMutualInformationScore"] = "normalized_mutual_information_score";
    ValidModelScoreEnum["AdjRandScore"] = "adj_rand_score";
    ValidModelScoreEnum["CompletenessScore"] = "completeness_score";
    ValidModelScoreEnum["FowlkesMallowsScore"] = "fowlkes_mallows_score";
    ValidModelScoreEnum["HomogeneityScore"] = "homogeneity_score";
    ValidModelScoreEnum["VMeasureScore"] = "v_measure_score";
    ValidModelScoreEnum["NegMeanAbsoluteError"] = "neg_mean_absolute_error";
    ValidModelScoreEnum["NegMeanSquaredError"] = "neg_mean_squared_error";
    ValidModelScoreEnum["RootMeanSquaredError"] = "root_mean_squared_error";
    ValidModelScoreEnum["NegRootMeanSquaredError"] = "neg_root_mean_squared_error";
    ValidModelScoreEnum["RootMeanSquaredLogError"] = "root_mean_squared_log_error";
    ValidModelScoreEnum["NegMedianAbsoluteError"] = "neg_median_absolute_error";
    ValidModelScoreEnum["CosineProximity"] = "cosine_proximity";
    ValidModelScoreEnum["KullbackLeiblerDivergence"] = "kullback_leibler_divergence";
    ValidModelScoreEnum["PoissonMetric"] = "poisson_metric";
    ValidModelScoreEnum["MulticlassLogLoss"] = "multiclass_log_loss";
    ValidModelScoreEnum["NormalizedDiscountedCumulativeGain"] = "normalized_discounted_cumulative_gain";
    ValidModelScoreEnum["GammaDeviance"] = "gamma_deviance";
    ValidModelScoreEnum["HuberMetric"] = "huber_metric";
    ValidModelScoreEnum["FBetaScore"] = "f_beta_score";
    ValidModelScoreEnum["EuclideanDistance"] = "euclidean_distance";
    ValidModelScoreEnum["HaversineDistance"] = "haversine_distance";
    ValidModelScoreEnum["MeanSquaredPredictioneRror"] = "mean_squared_predictione_rror";
    ValidModelScoreEnum["PseudoR2Mcfadden"] = "pseudo_r2_mcfadden";
    ValidModelScoreEnum["AdjustedPseudoR2Mcfadden"] = "adjusted_pseudo_r2_mcfadden";
    ValidModelScoreEnum["PseudoR2Nagelkerke"] = "pseudo_r2_nagelkerke";
    ValidModelScoreEnum["PseudoR2CoxSnell"] = "pseudo_r2_cox_snell";
    ValidModelScoreEnum["PseudoR2Effron"] = "pseudo_r2_effron";
    ValidModelScoreEnum["Bic"] = "bic";
    ValidModelScoreEnum["Aic"] = "aic";
    ValidModelScoreEnum["CorrelationActualForecast"] = "correlation_actual_forecast";
    ValidModelScoreEnum["ForecastVsActual"] = "forecast_vs_actual";
    ValidModelScoreEnum["MeanSquaredPercentageError"] = "mean_squared_percentage_error";
    ValidModelScoreEnum["ConfusionMatrix"] = "confusion_matrix";
    ValidModelScoreEnum["MulticlassConfusionMatrix"] = "multiclass_confusion_matrix";
    ValidModelScoreEnum["RocCurve"] = "roc_curve";
})(ValidModelScoreEnum = exports.ValidModelScoreEnum || (exports.ValidModelScoreEnum = {}));
/**
 * Enum for valid relationship direction.
 * @export
 * @enum {string}
 */
var ValidRelationshipDirectionEnum;
(function (ValidRelationshipDirectionEnum) {
    ValidRelationshipDirectionEnum["Positive"] = "positive";
    ValidRelationshipDirectionEnum["Negative"] = "negative";
    ValidRelationshipDirectionEnum["Zero"] = "zero";
    ValidRelationshipDirectionEnum["Invalid"] = "invalid";
})(ValidRelationshipDirectionEnum = exports.ValidRelationshipDirectionEnum || (exports.ValidRelationshipDirectionEnum = {}));
/**
 * Enum for valid relationship strength.
 * @export
 * @enum {string}
 */
var ValidRelationshipStrengthEnum;
(function (ValidRelationshipStrengthEnum) {
    ValidRelationshipStrengthEnum["Invalid"] = "invalid";
    ValidRelationshipStrengthEnum["VeryWeak"] = "very_weak";
    ValidRelationshipStrengthEnum["Weak"] = "weak";
    ValidRelationshipStrengthEnum["Moderate"] = "moderate";
    ValidRelationshipStrengthEnum["Strong"] = "strong";
    ValidRelationshipStrengthEnum["VeryStrong"] = "very_strong";
})(ValidRelationshipStrengthEnum = exports.ValidRelationshipStrengthEnum || (exports.ValidRelationshipStrengthEnum = {}));
/**
 * Enum for valid reproducibility level.
 * @export
 * @enum {string}
 */
var ValidReproducibilityEnum;
(function (ValidReproducibilityEnum) {
    ValidReproducibilityEnum["Invalid"] = "invalid";
    ValidReproducibilityEnum["Low"] = "low";
    ValidReproducibilityEnum["Medium"] = "medium";
    ValidReproducibilityEnum["High"] = "high";
})(ValidReproducibilityEnum = exports.ValidReproducibilityEnum || (exports.ValidReproducibilityEnum = {}));
/**
 * Valid significance level enums.
 * @export
 * @enum {string}
 */
var ValidSignificanceLevel;
(function (ValidSignificanceLevel) {
    ValidSignificanceLevel["Five"] = "ninety_five";
    ValidSignificanceLevel["Nine"] = "ninety_nine";
    ValidSignificanceLevel["NinePointNine"] = "ninety_nine_point_nine";
})(ValidSignificanceLevel = exports.ValidSignificanceLevel || (exports.ValidSignificanceLevel = {}));
/**
 * Valid statistical test type enums.
 * @export
 * @enum {string}
 */
var ValidStatisticalTestType;
(function (ValidStatisticalTestType) {
    ValidStatisticalTestType["Ttest"] = "ttest";
    ValidStatisticalTestType["Ztest"] = "ztest";
    ValidStatisticalTestType["Anova"] = "anova";
    ValidStatisticalTestType["Chisquared"] = "chisquared";
    ValidStatisticalTestType["Htest"] = "htest";
})(ValidStatisticalTestType = exports.ValidStatisticalTestType || (exports.ValidStatisticalTestType = {}));
/**
 * Valid transformation type enums.
 * @export
 * @enum {string}
 */
var ValidTransformationTypeEnum;
(function (ValidTransformationTypeEnum) {
    ValidTransformationTypeEnum["NoTransformation"] = "no_transformation";
    ValidTransformationTypeEnum["Kfold"] = "kfold";
    ValidTransformationTypeEnum["LeavePOut"] = "leave_p_out";
    ValidTransformationTypeEnum["Holdout"] = "holdout";
    ValidTransformationTypeEnum["Independent"] = "independent";
})(ValidTransformationTypeEnum = exports.ValidTransformationTypeEnum || (exports.ValidTransformationTypeEnum = {}));
/**
 * Valid value source enum.
 * @export
 * @enum {string}
 */
var ValidValueSource;
(function (ValidValueSource) {
    ValidValueSource["LocalEvaluator"] = "local_evaluator";
    ValidValueSource["RemoteEvaluator"] = "remote_evaluator";
    ValidValueSource["User"] = "user";
})(ValidValueSource = exports.ValidValueSource || (exports.ValidValueSource = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var ValueSourceEnum;
(function (ValueSourceEnum) {
    ValueSourceEnum["LocalEvaluator"] = "local_evaluator";
    ValueSourceEnum["RemoteEvaluator"] = "remote_evaluator";
    ValueSourceEnum["User"] = "user";
    ValueSourceEnum["Invalid"] = "invalid";
})(ValueSourceEnum = exports.ValueSourceEnum || (exports.ValueSourceEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var VariableSortEnum;
(function (VariableSortEnum) {
    VariableSortEnum["ModelCount"] = "model_count";
    VariableSortEnum["CreatedAt"] = "created_at";
    VariableSortEnum["LastUpdatedAt"] = "last_updated_at";
    VariableSortEnum["Name"] = "name";
})(VariableSortEnum = exports.VariableSortEnum || (exports.VariableSortEnum = {}));
/**
 * Enum for variable types.
 * @export
 * @enum {string}
 */
var VariableTypeEnum;
(function (VariableTypeEnum) {
    VariableTypeEnum["Unknown"] = "unknown";
    VariableTypeEnum["CategoricalNominal"] = "categorical_nominal";
    VariableTypeEnum["CategoricalOrdinal"] = "categorical_ordinal";
    VariableTypeEnum["CategoricalBinary"] = "categorical_binary";
    VariableTypeEnum["NumericalDiscrete"] = "numerical_discrete";
    VariableTypeEnum["NumericalContinuous"] = "numerical_continuous";
})(VariableTypeEnum = exports.VariableTypeEnum || (exports.VariableTypeEnum = {}));
/**
 * AssociationsApi - axios parameter creator
 * @export
 */
exports.AssociationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost: (datasetId, associationInArrayAssociationIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1DatasetsDatasetIdAssociationsPost', 'datasetId', datasetId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1DatasetsDatasetIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost: (modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1ModelsModelIdAssociationsPost', 'modelId', modelId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1ModelsModelIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost: (teamId, datasetId, associationInArrayAssociationIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost', 'datasetId', datasetId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost: (teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost', 'modelId', modelId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete: (modelId, associationId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete', 'modelId', modelId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete', 'associationId', associationId);
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete: (teamId, modelId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete', 'modelId', modelId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete', 'associationId', associationId);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete: (modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1ModelsModelIdAssociationsDelete', 'modelId', modelId);
            // verify required parameter 'bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1ModelsModelIdAssociationsDelete', 'bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete', bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete);
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: (teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'modelId', modelId);
            // verify required parameter 'bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: (datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', 'datasetId', datasetId);
            // verify required parameter 'bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', 'bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete);
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: (teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'datasetId', datasetId);
            // verify required parameter 'bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} associationId
         * @param {ResourceFlagIn} resourceFlagIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1AssociationsAssociationIdFlagsPost: (associationId, resourceFlagIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('flagAssociationV1AssociationsAssociationIdFlagsPost', 'associationId', associationId);
            // verify required parameter 'resourceFlagIn' is not null or undefined
            common_1.assertParamExists('flagAssociationV1AssociationsAssociationIdFlagsPost', 'resourceFlagIn', resourceFlagIn);
            const localVarPath = `/v1/associations/{association_id}/flags`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(resourceFlagIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} associationId
         * @param {ResourceFlagIn} resourceFlagIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1AssociationsAssociationIdFlagsPost_1: (associationId, resourceFlagIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('flagAssociationV1AssociationsAssociationIdFlagsPost_1', 'associationId', associationId);
            // verify required parameter 'resourceFlagIn' is not null or undefined
            common_1.assertParamExists('flagAssociationV1AssociationsAssociationIdFlagsPost_1', 'resourceFlagIn', resourceFlagIn);
            const localVarPath = `/v1/associations/{association_id}/flags`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(resourceFlagIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {ResourceFlagIn} resourceFlagIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost: (teamId, associationId, resourceFlagIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost', 'teamId', teamId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost', 'associationId', associationId);
            // verify required parameter 'resourceFlagIn' is not null or undefined
            common_1.assertParamExists('flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost', 'resourceFlagIn', resourceFlagIn);
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/flags`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(resourceFlagIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {ResourceFlagIn} resourceFlagIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2: (teamId, associationId, resourceFlagIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2', 'teamId', teamId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2', 'associationId', associationId);
            // verify required parameter 'resourceFlagIn' is not null or undefined
            common_1.assertParamExists('flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2', 'resourceFlagIn', resourceFlagIn);
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/flags`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(resourceFlagIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet: (associationId, modelId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getAssociationV1ModelsModelIdAssociationsAssociationIdGet', 'associationId', associationId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('getAssociationV1ModelsModelIdAssociationsAssociationIdGet', 'modelId', modelId);
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet: (teamId, associationId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet', 'teamId', teamId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet', 'associationId', associationId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} associationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1AssociationsAssociationIdDirectionGet: (associationId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getRelationshipDirectionV1AssociationsAssociationIdDirectionGet', 'associationId', associationId);
            const localVarPath = `/v1/associations/{association_id}/direction`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet: (teamId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet', 'teamId', teamId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet', 'associationId', associationId);
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/direction`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} associationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet: (associationId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet', 'associationId', associationId);
            const localVarPath = `/v1/associations/{association_id}/reproducibility`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet: (teamId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet', 'teamId', teamId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet', 'associationId', associationId);
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/reproducibility`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} associationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1AssociationsAssociationIdStrengthGet: (associationId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getRelationshipStrengthV1AssociationsAssociationIdStrengthGet', 'associationId', associationId);
            const localVarPath = `/v1/associations/{association_id}/strength`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet: (teamId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet', 'teamId', teamId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet', 'associationId', associationId);
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/strength`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_id}/user/studies/{study_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet: (studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet', 'studyId', studyId);
            const localVarPath = `/v1/user/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1AssociationsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/associations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            if (conceptRelationship !== undefined) {
                localVarQueryParameter['concept_relationship'] = conceptRelationship;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet: (datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1DatasetsDatasetIdAssociationsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet: (modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1ModelsModelIdAssociationsGet', 'modelId', modelId);
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet: (studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1StudiesStudyIdAssociationsGet', 'studyId', studyId);
            const localVarPath = `/v1/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdAssociationsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdAssociationsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            if (conceptRelationship !== undefined) {
                localVarQueryParameter['concept_relationship'] = conceptRelationship;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet: (teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet: (teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet', 'teamId', teamId);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet: (variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1VariablesVariableIdAssociationsGet', 'variableId', variableId);
            const localVarPath = `/v1/variables/{variable_id}/associations`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch: (modelId, bulkPatchAssociationOp, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1ModelsModelIdAssociationsPatch', 'modelId', modelId);
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1ModelsModelIdAssociationsPatch', 'bulkPatchAssociationOp', bulkPatchAssociationOp);
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bulkPatchAssociationOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch: (teamId, modelId, bulkPatchAssociationOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch', 'modelId', modelId);
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch', 'bulkPatchAssociationOp', bulkPatchAssociationOp);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bulkPatchAssociationOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} associationId
         * @param {string} modelId
         * @param {DirectionIn} directionIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost: (associationId, modelId, directionIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost', 'associationId', associationId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost', 'modelId', modelId);
            // verify required parameter 'directionIn' is not null or undefined
            common_1.assertParamExists('postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost', 'directionIn', directionIn);
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}/directed_at`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(directionIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {DirectionIn} directionIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost: (teamId, associationId, modelId, directionIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'teamId', teamId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'associationId', associationId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'modelId', modelId);
            // verify required parameter 'directionIn' is not null or undefined
            common_1.assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'directionIn', directionIn);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}/directed_at`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(directionIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AssociationsApi - functional programming interface
 * @export
 */
exports.AssociationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.AssociationsApiAxiosParamCreator(configuration);
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} associationId
         * @param {ResourceFlagIn} resourceFlagIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1AssociationsAssociationIdFlagsPost(associationId, resourceFlagIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.flagAssociationV1AssociationsAssociationIdFlagsPost(associationId, resourceFlagIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} associationId
         * @param {ResourceFlagIn} resourceFlagIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1AssociationsAssociationIdFlagsPost_1(associationId, resourceFlagIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.flagAssociationV1AssociationsAssociationIdFlagsPost_1(associationId, resourceFlagIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {ResourceFlagIn} resourceFlagIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(teamId, associationId, resourceFlagIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(teamId, associationId, resourceFlagIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {ResourceFlagIn} resourceFlagIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2(teamId, associationId, resourceFlagIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2(teamId, associationId, resourceFlagIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} associationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} associationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} associationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1AssociationsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1AssociationsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} associationId
         * @param {string} modelId
         * @param {DirectionIn} directionIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(associationId, modelId, directionIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(associationId, modelId, directionIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {DirectionIn} directionIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId, associationId, modelId, directionIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId, associationId, modelId, directionIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * AssociationsApi - factory interface
 * @export
 */
exports.AssociationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.AssociationsApiFp(configuration);
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options) {
            return localVarFp.createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options) {
            return localVarFp.createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options) {
            return localVarFp.createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options) {
            return localVarFp.createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, teamId, options) {
            return localVarFp.deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options) {
            return localVarFp.deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId, options) {
            return localVarFp.deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options) {
            return localVarFp.deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId, options) {
            return localVarFp.deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options) {
            return localVarFp.deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} associationId
         * @param {ResourceFlagIn} resourceFlagIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1AssociationsAssociationIdFlagsPost(associationId, resourceFlagIn, teamId, options) {
            return localVarFp.flagAssociationV1AssociationsAssociationIdFlagsPost(associationId, resourceFlagIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} associationId
         * @param {ResourceFlagIn} resourceFlagIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1AssociationsAssociationIdFlagsPost_1(associationId, resourceFlagIn, teamId, options) {
            return localVarFp.flagAssociationV1AssociationsAssociationIdFlagsPost_1(associationId, resourceFlagIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {ResourceFlagIn} resourceFlagIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(teamId, associationId, resourceFlagIn, options) {
            return localVarFp.flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(teamId, associationId, resourceFlagIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {ResourceFlagIn} resourceFlagIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2(teamId, associationId, resourceFlagIn, options) {
            return localVarFp.flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2(teamId, associationId, resourceFlagIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, teamId, options) {
            return localVarFp.getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options) {
            return localVarFp.getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} associationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId, teamId, options) {
            return localVarFp.getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options) {
            return localVarFp.getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} associationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId, teamId, options) {
            return localVarFp.getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options) {
            return localVarFp.getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} associationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId, teamId, options) {
            return localVarFp.getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options) {
            return localVarFp.getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, teamId, options) {
            return localVarFp.listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1AssociationsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, teamId, options) {
            return localVarFp.listAssociationsV1AssociationsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options) {
            return localVarFp.listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, teamId, options) {
            return localVarFp.patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options) {
            return localVarFp.patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} associationId
         * @param {string} modelId
         * @param {DirectionIn} directionIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(associationId, modelId, directionIn, teamId, options) {
            return localVarFp.postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(associationId, modelId, directionIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {DirectionIn} directionIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId, associationId, modelId, directionIn, options) {
            return localVarFp.postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId, associationId, modelId, directionIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AssociationsApi - object-oriented interface
 * @export
 * @class AssociationsApi
 * @extends {BaseAPI}
 */
class AssociationsApi extends base_1.BaseAPI {
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {AssociationsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {AssociationsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    createAssociationsV1ModelsModelIdAssociationsPost(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).createAssociationsV1ModelsModelIdAssociationsPost(requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {AssociationsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(requestParameters.teamId, requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {AssociationsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(requestParameters.teamId, requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {AssociationsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters.modelId, requestParameters.associationId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {AssociationsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(requestParameters.teamId, requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {AssociationsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {AssociationsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(requestParameters.teamId, requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {AssociationsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {AssociationsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    flagAssociationV1AssociationsAssociationIdFlagsPost(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).flagAssociationV1AssociationsAssociationIdFlagsPost(requestParameters.associationId, requestParameters.resourceFlagIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {AssociationsApiFlagAssociationV1AssociationsAssociationIdFlagsPost0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    flagAssociationV1AssociationsAssociationIdFlagsPost_1(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).flagAssociationV1AssociationsAssociationIdFlagsPost_1(requestParameters.associationId, requestParameters.resourceFlagIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {AssociationsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(requestParameters.teamId, requestParameters.associationId, requestParameters.resourceFlagIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {AssociationsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost_2(requestParameters.teamId, requestParameters.associationId, requestParameters.resourceFlagIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Get Association
     * @param {AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters.associationId, requestParameters.modelId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Get Association
     * @param {AssociationsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(requestParameters.teamId, requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get direction of this association.
     * @summary Get Relationship Direction
     * @param {AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(requestParameters.associationId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get direction of this association.
     * @summary Get Relationship Direction
     * @param {AssociationsApiGetRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(requestParameters.teamId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get reproducibility of this association.
     * @summary Get Relationship Reproducibility
     * @param {AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(requestParameters.associationId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get reproducibility of this association.
     * @summary Get Relationship Reproducibility
     * @param {AssociationsApiGetRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(requestParameters.teamId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get strength of this association.
     * @summary Get Relationship Strength
     * @param {AssociationsApiGetRelationshipStrengthV1AssociationsAssociationIdStrengthGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(requestParameters.associationId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get strength of this association.
     * @summary Get Relationship Strength
     * @param {AssociationsApiGetRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(requestParameters.teamId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Associations.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1AssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1AssociationsGet(requestParameters = {}, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1AssociationsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.conceptRelationship, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in model.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1ModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1ModelsModelIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1ModelsModelIdAssociationsGet(requestParameters.modelId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Associations.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1TeamsTeamIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamIdAssociationsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.conceptRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in model.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(requestParameters.teamId, requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(requestParameters.teamId, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters.variableId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {AssociationsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters.modelId, requestParameters.bulkPatchAssociationOp, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {AssociationsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(requestParameters.teamId, requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Post Association Direction
     * @param {AssociationsApiPostAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters.associationId, requestParameters.modelId, requestParameters.directionIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Post Association Direction
     * @param {AssociationsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters.teamId, requestParameters.associationId, requestParameters.modelId, requestParameters.directionIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AssociationsApi = AssociationsApi;
/**
 * AuthorsApi - axios parameter creator
 * @export
 */
exports.AuthorsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut: (studyId, authorId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut', 'authorId', authorId);
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut: (teamId, studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} studyId
         * @param {BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost: (studyId, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost', 'studyId', studyId);
            // verify required parameter 'bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost' is not null or undefined
            common_1.assertParamExists('bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost', 'bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost', bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost);
            const localVarPath = `/v1/studies/{study_id}/authors/bulk`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost: (teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', 'studyId', studyId);
            // verify required parameter 'bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost' is not null or undefined
            common_1.assertParamExists('bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', 'bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/bulk`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an Author.
         * @summary Create Author
         * @param {AuthorIn} authorIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1AuthorsPost: (authorIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'authorIn' is not null or undefined
            common_1.assertParamExists('createAuthorV1AuthorsPost', 'authorIn', authorIn);
            const localVarPath = `/v1/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(authorIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamId
         * @param {AuthorIn} authorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamIdAuthorsPost: (teamId, authorIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createAuthorV1TeamsTeamIdAuthorsPost', 'teamId', teamId);
            // verify required parameter 'authorIn' is not null or undefined
            common_1.assertParamExists('createAuthorV1TeamsTeamIdAuthorsPost', 'authorIn', authorIn);
            const localVarPath = `/v1/teams/{team_id}/authors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(authorIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create mulitple Authors.
         * @summary Create Multiple Authors.
         * @param {Array<AuthorIn> | AuthorIn} arrayAuthorInAuthorIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleAuthorsV1AuthorsBulkPost: (arrayAuthorInAuthorIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'arrayAuthorInAuthorIn' is not null or undefined
            common_1.assertParamExists('createMultipleAuthorsV1AuthorsBulkPost', 'arrayAuthorInAuthorIn', arrayAuthorInAuthorIn);
            const localVarPath = `/v1/authors/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(arrayAuthorInAuthorIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create mulitple Authors.
         * @summary Create Multiple Authors.
         * @param {string} teamId
         * @param {Array<AuthorIn> | AuthorIn} arrayAuthorInAuthorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost: (teamId, arrayAuthorInAuthorIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost', 'teamId', teamId);
            // verify required parameter 'arrayAuthorInAuthorIn' is not null or undefined
            common_1.assertParamExists('createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost', 'arrayAuthorInAuthorIn', arrayAuthorInAuthorIn);
            const localVarPath = `/v1/teams/{team_id}/authors/bulk`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(arrayAuthorInAuthorIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1AuthorsAuthorIdDelete: (authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('deleteAuthorV1AuthorsAuthorIdDelete', 'authorId', authorId);
            const localVarPath = `/v1/authors/{author_id}`
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete: (teamId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete', 'teamId', teamId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1AuthorsAuthorIdGet: (authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('getAuthorV1AuthorsAuthorIdGet', 'authorId', authorId);
            const localVarPath = `/v1/authors/{author_id}`
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamIdAuthorsAuthorIdGet: (teamId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getAuthorV1TeamsTeamIdAuthorsAuthorIdGet', 'teamId', teamId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('getAuthorV1TeamsTeamIdAuthorsAuthorIdGet', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1AuthorsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdAuthorsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthorsV1TeamsTeamIdAuthorsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/authors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete: (studyId, authorId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete', 'authorId', authorId);
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete: (teamId, studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AuthorsApi - functional programming interface
 * @export
 */
exports.AuthorsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.AuthorsApiAxiosParamCreator(configuration);
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} studyId
         * @param {BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(studyId, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(studyId, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {AuthorIn} authorIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1AuthorsPost(authorIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAuthorV1AuthorsPost(authorIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamId
         * @param {AuthorIn} authorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create mulitple Authors.
         * @summary Create Multiple Authors.
         * @param {Array<AuthorIn> | AuthorIn} arrayAuthorInAuthorIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleAuthorsV1AuthorsBulkPost(arrayAuthorInAuthorIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createMultipleAuthorsV1AuthorsBulkPost(arrayAuthorInAuthorIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create mulitple Authors.
         * @summary Create Multiple Authors.
         * @param {string} teamId
         * @param {Array<AuthorIn> | AuthorIn} arrayAuthorInAuthorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(teamId, arrayAuthorInAuthorIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(teamId, arrayAuthorInAuthorIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1AuthorsAuthorIdDelete(authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAuthorV1AuthorsAuthorIdDelete(authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1AuthorsAuthorIdGet(authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAuthorV1AuthorsAuthorIdGet(authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1AuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthorsV1AuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * AuthorsApi - factory interface
 * @export
 */
exports.AuthorsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.AuthorsApiFp(configuration);
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, teamId, options) {
            return localVarFp.addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options) {
            return localVarFp.addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} studyId
         * @param {BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(studyId, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId, options) {
            return localVarFp.bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(studyId, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options) {
            return localVarFp.bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {AuthorIn} authorIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1AuthorsPost(authorIn, teamId, options) {
            return localVarFp.createAuthorV1AuthorsPost(authorIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamId
         * @param {AuthorIn} authorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options) {
            return localVarFp.createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Authors.
         * @summary Create Multiple Authors.
         * @param {Array<AuthorIn> | AuthorIn} arrayAuthorInAuthorIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleAuthorsV1AuthorsBulkPost(arrayAuthorInAuthorIn, teamId, options) {
            return localVarFp.createMultipleAuthorsV1AuthorsBulkPost(arrayAuthorInAuthorIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Authors.
         * @summary Create Multiple Authors.
         * @param {string} teamId
         * @param {Array<AuthorIn> | AuthorIn} arrayAuthorInAuthorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(teamId, arrayAuthorInAuthorIn, options) {
            return localVarFp.createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(teamId, arrayAuthorInAuthorIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1AuthorsAuthorIdDelete(authorId, options) {
            return localVarFp.deleteAuthorV1AuthorsAuthorIdDelete(authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options) {
            return localVarFp.deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1AuthorsAuthorIdGet(authorId, options) {
            return localVarFp.getAuthorV1AuthorsAuthorIdGet(authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options) {
            return localVarFp.getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1AuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listAuthorsV1AuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, teamId, options) {
            return localVarFp.removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options) {
            return localVarFp.removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AuthorsApi - object-oriented interface
 * @export
 * @class AuthorsApi
 * @extends {BaseAPI}
 */
class AuthorsApi extends base_1.BaseAPI {
    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {AuthorsApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters.studyId, requestParameters.authorId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {AuthorsApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(requestParameters.teamId, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add an author to a study.
     * @summary Bulk Add Authors To Study
     * @param {AuthorsApiBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(requestParameters.studyId, requestParameters.bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add an author to a study.
     * @summary Bulk Add Authors To Study
     * @param {AuthorsApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(requestParameters.teamId, requestParameters.studyId, requestParameters.bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Author.
     * @summary Create Author
     * @param {AuthorsApiCreateAuthorV1AuthorsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    createAuthorV1AuthorsPost(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).createAuthorV1AuthorsPost(requestParameters.authorIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Author.
     * @summary Create Author
     * @param {AuthorsApiCreateAuthorV1TeamsTeamIdAuthorsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    createAuthorV1TeamsTeamIdAuthorsPost(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).createAuthorV1TeamsTeamIdAuthorsPost(requestParameters.teamId, requestParameters.authorIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create mulitple Authors.
     * @summary Create Multiple Authors.
     * @param {AuthorsApiCreateMultipleAuthorsV1AuthorsBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    createMultipleAuthorsV1AuthorsBulkPost(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).createMultipleAuthorsV1AuthorsBulkPost(requestParameters.arrayAuthorInAuthorIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create mulitple Authors.
     * @summary Create Multiple Authors.
     * @param {AuthorsApiCreateMultipleAuthorsV1TeamsTeamIdAuthorsBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(requestParameters.teamId, requestParameters.arrayAuthorInAuthorIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Author.
     * @summary Delete Author
     * @param {AuthorsApiDeleteAuthorV1AuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    deleteAuthorV1AuthorsAuthorIdDelete(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).deleteAuthorV1AuthorsAuthorIdDelete(requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Author.
     * @summary Delete Author
     * @param {AuthorsApiDeleteAuthorV1TeamsTeamIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(requestParameters.teamId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Author.
     * @summary Get Author
     * @param {AuthorsApiGetAuthorV1AuthorsAuthorIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    getAuthorV1AuthorsAuthorIdGet(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).getAuthorV1AuthorsAuthorIdGet(requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Author.
     * @summary Get Author
     * @param {AuthorsApiGetAuthorV1TeamsTeamIdAuthorsAuthorIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(requestParameters.teamId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
     * @summary List Authors
     * @param {AuthorsApiListAuthorsV1AuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    listAuthorsV1AuthorsGet(requestParameters = {}, options) {
        return exports.AuthorsApiFp(this.configuration).listAuthorsV1AuthorsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
     * @summary List Authors
     * @param {AuthorsApiListAuthorsV1TeamsTeamIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    listAuthorsV1TeamsTeamIdAuthorsGet(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).listAuthorsV1TeamsTeamIdAuthorsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {AuthorsApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters.studyId, requestParameters.authorId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {AuthorsApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(requestParameters.teamId, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AuthorsApi = AuthorsApi;
/**
 * ConceptsApi - axios parameter creator
 * @export
 */
exports.ConceptsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {ConceptIn} conceptIn
         * @param {boolean} [overwriteExisting]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1ConceptsPost: (conceptIn, overwriteExisting, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptIn' is not null or undefined
            common_1.assertParamExists('createConceptV1ConceptsPost', 'conceptIn', conceptIn);
            const localVarPath = `/v1/concepts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (overwriteExisting !== undefined) {
                localVarQueryParameter['overwrite_existing'] = overwriteExisting;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(conceptIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {string} teamId
         * @param {ConceptIn} conceptIn
         * @param {boolean} [overwriteExisting]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1TeamsTeamIdConceptsPost: (teamId, conceptIn, overwriteExisting, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createConceptV1TeamsTeamIdConceptsPost', 'teamId', teamId);
            // verify required parameter 'conceptIn' is not null or undefined
            common_1.assertParamExists('createConceptV1TeamsTeamIdConceptsPost', 'conceptIn', conceptIn);
            const localVarPath = `/v1/teams/{team_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (overwriteExisting !== undefined) {
                localVarQueryParameter['overwrite_existing'] = overwriteExisting;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(conceptIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1ConceptsConceptIdDelete: (conceptId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptId' is not null or undefined
            common_1.assertParamExists('deleteConceptV1ConceptsConceptIdDelete', 'conceptId', conceptId);
            const localVarPath = `/v1/concepts/{concept_id}`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1TeamsTeamIdConceptsConceptIdDelete: (teamId, conceptId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteConceptV1TeamsTeamIdConceptsConceptIdDelete', 'teamId', teamId);
            // verify required parameter 'conceptId' is not null or undefined
            common_1.assertParamExists('deleteConceptV1TeamsTeamIdConceptsConceptIdDelete', 'conceptId', conceptId);
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch concept relationships.
         * @summary Get Concept Relationships
         * @param {string} conceptId
         * @param {boolean} [topPercentileLimit] Flag for limiting to top percentile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet: (conceptId, topPercentileLimit, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptId' is not null or undefined
            common_1.assertParamExists('getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet', 'conceptId', conceptId);
            const localVarPath = `/v1/concepts/{concept_id}/relationships`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (topPercentileLimit !== undefined) {
                localVarQueryParameter['top_percentile_limit'] = topPercentileLimit;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch concept relationships.
         * @summary Get Concept Relationships
         * @param {string} conceptId
         * @param {string} teamId
         * @param {boolean} [topPercentileLimit] Flag for limiting to top percentile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGet: (conceptId, teamId, topPercentileLimit, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptId' is not null or undefined
            common_1.assertParamExists('getConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGet', 'conceptId', conceptId);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}/relationships`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (topPercentileLimit !== undefined) {
                localVarQueryParameter['top_percentile_limit'] = topPercentileLimit;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1ConceptsConceptIdGet: (conceptId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptId' is not null or undefined
            common_1.assertParamExists('getConceptV1ConceptsConceptIdGet', 'conceptId', conceptId);
            const localVarPath = `/v1/concepts/{concept_id}`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1TeamsTeamIdConceptsConceptIdGet: (teamId, conceptId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getConceptV1TeamsTeamIdConceptsConceptIdGet', 'teamId', teamId);
            // verify required parameter 'conceptId' is not null or undefined
            common_1.assertParamExists('getConceptV1TeamsTeamIdConceptsConceptIdGet', 'conceptId', conceptId);
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/concepts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [teamId]
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1ConceptsGet: (teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/concepts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (minRelationshipStrength !== undefined) {
                localVarQueryParameter['min_relationship_strength'] = minRelationshipStrength;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1TeamsTeamIdConceptsGet: (teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listConceptsV1TeamsTeamIdConceptsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (minRelationshipStrength !== undefined) {
                localVarQueryParameter['min_relationship_strength'] = minRelationshipStrength;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserConceptsV1UsersUserIdConceptsGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/concepts`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Concept
         * @param {string} conceptId
         * @param {PatchConceptOp | Array<PatchConceptOp>} patchConceptOpArrayPatchConceptOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConceptV1ConceptsConceptIdPatch: (conceptId, patchConceptOpArrayPatchConceptOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptId' is not null or undefined
            common_1.assertParamExists('patchConceptV1ConceptsConceptIdPatch', 'conceptId', conceptId);
            // verify required parameter 'patchConceptOpArrayPatchConceptOp' is not null or undefined
            common_1.assertParamExists('patchConceptV1ConceptsConceptIdPatch', 'patchConceptOpArrayPatchConceptOp', patchConceptOpArrayPatchConceptOp);
            const localVarPath = `/v1/concepts/{concept_id}`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchConceptOpArrayPatchConceptOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {PatchConceptOp | Array<PatchConceptOp>} patchConceptOpArrayPatchConceptOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConceptV1TeamsTeamIdConceptsConceptIdPatch: (teamId, conceptId, patchConceptOpArrayPatchConceptOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('patchConceptV1TeamsTeamIdConceptsConceptIdPatch', 'teamId', teamId);
            // verify required parameter 'conceptId' is not null or undefined
            common_1.assertParamExists('patchConceptV1TeamsTeamIdConceptsConceptIdPatch', 'conceptId', conceptId);
            // verify required parameter 'patchConceptOpArrayPatchConceptOp' is not null or undefined
            common_1.assertParamExists('patchConceptV1TeamsTeamIdConceptsConceptIdPatch', 'patchConceptOpArrayPatchConceptOp', patchConceptOpArrayPatchConceptOp);
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchConceptOpArrayPatchConceptOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ConceptsApi - functional programming interface
 * @export
 */
exports.ConceptsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.ConceptsApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {ConceptIn} conceptIn
         * @param {boolean} [overwriteExisting]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1ConceptsPost(conceptIn, overwriteExisting, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createConceptV1ConceptsPost(conceptIn, overwriteExisting, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {string} teamId
         * @param {ConceptIn} conceptIn
         * @param {boolean} [overwriteExisting]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, overwriteExisting, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, overwriteExisting, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1ConceptsConceptIdDelete(conceptId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteConceptV1ConceptsConceptIdDelete(conceptId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch concept relationships.
         * @summary Get Concept Relationships
         * @param {string} conceptId
         * @param {boolean} [topPercentileLimit] Flag for limiting to top percentile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet(conceptId, topPercentileLimit, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet(conceptId, topPercentileLimit, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch concept relationships.
         * @summary Get Concept Relationships
         * @param {string} conceptId
         * @param {string} teamId
         * @param {boolean} [topPercentileLimit] Flag for limiting to top percentile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGet(conceptId, teamId, topPercentileLimit, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGet(conceptId, teamId, topPercentileLimit, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1ConceptsConceptIdGet(conceptId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConceptV1ConceptsConceptIdGet(conceptId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [teamId]
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1ConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listConceptsV1ConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1TeamsTeamIdConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listConceptsV1TeamsTeamIdConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Concept
         * @param {string} conceptId
         * @param {PatchConceptOp | Array<PatchConceptOp>} patchConceptOpArrayPatchConceptOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConceptV1ConceptsConceptIdPatch(conceptId, patchConceptOpArrayPatchConceptOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchConceptV1ConceptsConceptIdPatch(conceptId, patchConceptOpArrayPatchConceptOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {PatchConceptOp | Array<PatchConceptOp>} patchConceptOpArrayPatchConceptOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConceptV1TeamsTeamIdConceptsConceptIdPatch(teamId, conceptId, patchConceptOpArrayPatchConceptOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchConceptV1TeamsTeamIdConceptsConceptIdPatch(teamId, conceptId, patchConceptOpArrayPatchConceptOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * ConceptsApi - factory interface
 * @export
 */
exports.ConceptsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.ConceptsApiFp(configuration);
    return {
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {ConceptIn} conceptIn
         * @param {boolean} [overwriteExisting]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1ConceptsPost(conceptIn, overwriteExisting, options) {
            return localVarFp.createConceptV1ConceptsPost(conceptIn, overwriteExisting, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {string} teamId
         * @param {ConceptIn} conceptIn
         * @param {boolean} [overwriteExisting]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, overwriteExisting, options) {
            return localVarFp.createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, overwriteExisting, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1ConceptsConceptIdDelete(conceptId, options) {
            return localVarFp.deleteConceptV1ConceptsConceptIdDelete(conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options) {
            return localVarFp.deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch concept relationships.
         * @summary Get Concept Relationships
         * @param {string} conceptId
         * @param {boolean} [topPercentileLimit] Flag for limiting to top percentile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet(conceptId, topPercentileLimit, options) {
            return localVarFp.getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet(conceptId, topPercentileLimit, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch concept relationships.
         * @summary Get Concept Relationships
         * @param {string} conceptId
         * @param {string} teamId
         * @param {boolean} [topPercentileLimit] Flag for limiting to top percentile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGet(conceptId, teamId, topPercentileLimit, options) {
            return localVarFp.getConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGet(conceptId, teamId, topPercentileLimit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1ConceptsConceptIdGet(conceptId, options) {
            return localVarFp.getConceptV1ConceptsConceptIdGet(conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options) {
            return localVarFp.getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return localVarFp.listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options) {
            return localVarFp.listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [teamId]
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1ConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return localVarFp.listConceptsV1ConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1TeamsTeamIdConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return localVarFp.listConceptsV1TeamsTeamIdConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return localVarFp.listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options) {
            return localVarFp.listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Concept
         * @param {string} conceptId
         * @param {PatchConceptOp | Array<PatchConceptOp>} patchConceptOpArrayPatchConceptOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConceptV1ConceptsConceptIdPatch(conceptId, patchConceptOpArrayPatchConceptOp, options) {
            return localVarFp.patchConceptV1ConceptsConceptIdPatch(conceptId, patchConceptOpArrayPatchConceptOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {PatchConceptOp | Array<PatchConceptOp>} patchConceptOpArrayPatchConceptOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConceptV1TeamsTeamIdConceptsConceptIdPatch(teamId, conceptId, patchConceptOpArrayPatchConceptOp, options) {
            return localVarFp.patchConceptV1TeamsTeamIdConceptsConceptIdPatch(teamId, conceptId, patchConceptOpArrayPatchConceptOp, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ConceptsApi - object-oriented interface
 * @export
 * @class ConceptsApi
 * @extends {BaseAPI}
 */
class ConceptsApi extends base_1.BaseAPI {
    /**
     * Create a Concept.
     * @summary Create Concept
     * @param {ConceptsApiCreateConceptV1ConceptsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    createConceptV1ConceptsPost(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).createConceptV1ConceptsPost(requestParameters.conceptIn, requestParameters.overwriteExisting, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Concept.
     * @summary Create Concept
     * @param {ConceptsApiCreateConceptV1TeamsTeamIdConceptsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    createConceptV1TeamsTeamIdConceptsPost(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).createConceptV1TeamsTeamIdConceptsPost(requestParameters.teamId, requestParameters.conceptIn, requestParameters.overwriteExisting, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
     * @summary Delete Concept
     * @param {ConceptsApiDeleteConceptV1ConceptsConceptIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    deleteConceptV1ConceptsConceptIdDelete(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).deleteConceptV1ConceptsConceptIdDelete(requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
     * @summary Delete Concept
     * @param {ConceptsApiDeleteConceptV1TeamsTeamIdConceptsConceptIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(requestParameters.teamId, requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch concept relationships.
     * @summary Get Concept Relationships
     * @param {ConceptsApiGetConceptRelationshipsV1ConceptsConceptIdRelationshipsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).getConceptRelationshipsV1ConceptsConceptIdRelationshipsGet(requestParameters.conceptId, requestParameters.topPercentileLimit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch concept relationships.
     * @summary Get Concept Relationships
     * @param {ConceptsApiGetConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    getConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).getConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGet(requestParameters.conceptId, requestParameters.teamId, requestParameters.topPercentileLimit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Concept.
     * @summary Get Concept
     * @param {ConceptsApiGetConceptV1ConceptsConceptIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    getConceptV1ConceptsConceptIdGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).getConceptV1ConceptsConceptIdGet(requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Concept.
     * @summary Get Concept
     * @param {ConceptsApiGetConceptV1TeamsTeamIdConceptsConceptIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    getConceptV1TeamsTeamIdConceptsConceptIdGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).getConceptV1TeamsTeamIdConceptsConceptIdGet(requestParameters.teamId, requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {ConceptsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters = {}, options) {
        return exports.ConceptsApiFp(this.configuration).listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Concepts.
     * @summary List Concepts
     * @param {ConceptsApiListConceptsV1ConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listConceptsV1ConceptsGet(requestParameters = {}, options) {
        return exports.ConceptsApiFp(this.configuration).listConceptsV1ConceptsGet(requestParameters.teamId, requestParameters.minRelationshipStrength, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Concepts.
     * @summary List Concepts
     * @param {ConceptsApiListConceptsV1TeamsTeamIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listConceptsV1TeamsTeamIdConceptsGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).listConceptsV1TeamsTeamIdConceptsGet(requestParameters.teamId, requestParameters.minRelationshipStrength, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {ConceptsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {ConceptsApiListUserConceptsV1UsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listUserConceptsV1UsersUserIdConceptsGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).listUserConceptsV1UsersUserIdConceptsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Variable resource with partial update.
     * @summary Patch Concept
     * @param {ConceptsApiPatchConceptV1ConceptsConceptIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    patchConceptV1ConceptsConceptIdPatch(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).patchConceptV1ConceptsConceptIdPatch(requestParameters.conceptId, requestParameters.patchConceptOpArrayPatchConceptOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Variable resource with partial update.
     * @summary Patch Concept
     * @param {ConceptsApiPatchConceptV1TeamsTeamIdConceptsConceptIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    patchConceptV1TeamsTeamIdConceptsConceptIdPatch(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).patchConceptV1TeamsTeamIdConceptsConceptIdPatch(requestParameters.teamId, requestParameters.conceptId, requestParameters.patchConceptOpArrayPatchConceptOp, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ConceptsApi = ConceptsApi;
/**
 * DashboardsApi - axios parameter creator
 * @export
 */
exports.DashboardsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut: (dashboardId, featureId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'dashboardId' is not null or undefined
            common_1.assertParamExists('addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut', 'dashboardId', dashboardId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut', 'featureId', featureId);
            const localVarPath = `/v1/dashboards/{dashboard_id}/features/{feature_id}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut: (teamId, dashboardId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut', 'teamId', teamId);
            // verify required parameter 'dashboardId' is not null or undefined
            common_1.assertParamExists('addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut', 'dashboardId', dashboardId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {DashboardIn} dashboardIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1DashboardsPost: (dashboardIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'dashboardIn' is not null or undefined
            common_1.assertParamExists('createDashboardPostV1DashboardsPost', 'dashboardIn', dashboardIn);
            const localVarPath = `/v1/dashboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(dashboardIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {string} teamId
         * @param {DashboardIn} dashboardIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1TeamsTeamIdDashboardsPost: (teamId, dashboardIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createDashboardPostV1TeamsTeamIdDashboardsPost', 'teamId', teamId);
            // verify required parameter 'dashboardIn' is not null or undefined
            common_1.assertParamExists('createDashboardPostV1TeamsTeamIdDashboardsPost', 'dashboardIn', dashboardIn);
            const localVarPath = `/v1/teams/{team_id}/dashboards`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(dashboardIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1DashboardsDashboardIdDelete: (dashboardId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'dashboardId' is not null or undefined
            common_1.assertParamExists('deleteDashboardV1DashboardsDashboardIdDelete', 'dashboardId', dashboardId);
            const localVarPath = `/v1/dashboards/{dashboard_id}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete: (teamId, dashboardId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete', 'teamId', teamId);
            // verify required parameter 'dashboardId' is not null or undefined
            common_1.assertParamExists('deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete', 'dashboardId', dashboardId);
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1DashboardsDashboardIdGet: (dashboardId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'dashboardId' is not null or undefined
            common_1.assertParamExists('getDashboardV1DashboardsDashboardIdGet', 'dashboardId', dashboardId);
            const localVarPath = `/v1/dashboards/{dashboard_id}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1TeamsTeamIdDashboardsDashboardIdGet: (teamId, dashboardId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getDashboardV1TeamsTeamIdDashboardsDashboardIdGet', 'teamId', teamId);
            // verify required parameter 'dashboardId' is not null or undefined
            common_1.assertParamExists('getDashboardV1TeamsTeamIdDashboardsDashboardIdGet', 'dashboardId', dashboardId);
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet: (dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'dashboardId' is not null or undefined
            common_1.assertParamExists('listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet', 'dashboardId', dashboardId);
            const localVarPath = `/v1/dashboards/{dashboard_id}/features`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet: (teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet', 'teamId', teamId);
            // verify required parameter 'dashboardId' is not null or undefined
            common_1.assertParamExists('listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet', 'dashboardId', dashboardId);
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1DashboardsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/dashboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdDashboardsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listDashboardsV1TeamsTeamIdDashboardsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/dashboards`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet: (teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet', 'teamId', teamId);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/dashboards`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1VariablesVariableIdDashboardsGet: (variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listDashboardsV1VariablesVariableIdDashboardsGet', 'variableId', variableId);
            const localVarPath = `/v1/variables/{variable_id}/dashboards`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * DashboardsApi - functional programming interface
 * @export
 */
exports.DashboardsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.DashboardsApiAxiosParamCreator(configuration);
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {DashboardIn} dashboardIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1DashboardsPost(dashboardIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createDashboardPostV1DashboardsPost(dashboardIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {string} teamId
         * @param {DashboardIn} dashboardIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1DashboardsDashboardIdDelete(dashboardId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteDashboardV1DashboardsDashboardIdDelete(dashboardId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1DashboardsDashboardIdGet(dashboardId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDashboardV1DashboardsDashboardIdGet(dashboardId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1DashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDashboardsV1DashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1VariablesVariableIdDashboardsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDashboardsV1VariablesVariableIdDashboardsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * DashboardsApi - factory interface
 * @export
 */
exports.DashboardsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.DashboardsApiFp(configuration);
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, teamId, options) {
            return localVarFp.addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options) {
            return localVarFp.addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {DashboardIn} dashboardIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1DashboardsPost(dashboardIn, teamId, options) {
            return localVarFp.createDashboardPostV1DashboardsPost(dashboardIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {string} teamId
         * @param {DashboardIn} dashboardIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options) {
            return localVarFp.createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1DashboardsDashboardIdDelete(dashboardId, options) {
            return localVarFp.deleteDashboardV1DashboardsDashboardIdDelete(dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options) {
            return localVarFp.deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1DashboardsDashboardIdGet(dashboardId, options) {
            return localVarFp.getDashboardV1DashboardsDashboardIdGet(dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options) {
            return localVarFp.getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options) {
            return localVarFp.listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1DashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listDashboardsV1DashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1VariablesVariableIdDashboardsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listDashboardsV1VariablesVariableIdDashboardsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * DashboardsApi - object-oriented interface
 * @export
 * @class DashboardsApi
 * @extends {BaseAPI}
 */
class DashboardsApi extends base_1.BaseAPI {
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dashboard Endpoint
     * @param {DashboardsApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(requestParameters.dashboardId, requestParameters.featureId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dashboard Endpoint
     * @param {DashboardsApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.dashboardId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Dashboard.
     * @summary Create Dashboard Post
     * @param {DashboardsApiCreateDashboardPostV1DashboardsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    createDashboardPostV1DashboardsPost(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).createDashboardPostV1DashboardsPost(requestParameters.dashboardIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Dashboard.
     * @summary Create Dashboard Post
     * @param {DashboardsApiCreateDashboardPostV1TeamsTeamIdDashboardsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    createDashboardPostV1TeamsTeamIdDashboardsPost(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).createDashboardPostV1TeamsTeamIdDashboardsPost(requestParameters.teamId, requestParameters.dashboardIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dashboard
     * @param {DashboardsApiDeleteDashboardV1DashboardsDashboardIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    deleteDashboardV1DashboardsDashboardIdDelete(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).deleteDashboardV1DashboardsDashboardIdDelete(requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dashboard
     * @param {DashboardsApiDeleteDashboardV1TeamsTeamIdDashboardsDashboardIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(requestParameters.teamId, requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Dashboard.
     * @summary Get Dashboard
     * @param {DashboardsApiGetDashboardV1DashboardsDashboardIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    getDashboardV1DashboardsDashboardIdGet(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).getDashboardV1DashboardsDashboardIdGet(requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Dashboard.
     * @summary Get Dashboard
     * @param {DashboardsApiGetDashboardV1TeamsTeamIdDashboardsDashboardIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(requestParameters.teamId, requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dashboard Features
     * @param {DashboardsApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(requestParameters.dashboardId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dashboard Features
     * @param {DashboardsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(requestParameters.teamId, requestParameters.dashboardId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Dashboards.  Paginated list of all Dashboards.
     * @summary List Dashboards
     * @param {DashboardsApiListDashboardsV1DashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    listDashboardsV1DashboardsGet(requestParameters = {}, options) {
        return exports.DashboardsApiFp(this.configuration).listDashboardsV1DashboardsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Dashboards.  Paginated list of all Dashboards.
     * @summary List Dashboards
     * @param {DashboardsApiListDashboardsV1TeamsTeamIdDashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    listDashboardsV1TeamsTeamIdDashboardsGet(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).listDashboardsV1TeamsTeamIdDashboardsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get dashboards connected to the Variable.
     * @summary List Dashboards
     * @param {DashboardsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(requestParameters.teamId, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get dashboards connected to the Variable.
     * @summary List Dashboards
     * @param {DashboardsApiListDashboardsV1VariablesVariableIdDashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    listDashboardsV1VariablesVariableIdDashboardsGet(requestParameters, options) {
        return exports.DashboardsApiFp(this.configuration).listDashboardsV1VariablesVariableIdDashboardsGet(requestParameters.variableId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DashboardsApi = DashboardsApi;
/**
 * DatasetsApi - axios parameter creator
 * @export
 */
exports.DatasetsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut: (datasetId, featureId, index, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut', 'featureId', featureId);
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut: (teamId, datasetId, featureId, index, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1DatasetsDatasetIdParentsParentIdPut: (datasetId, parentId, reconcileFeatures, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addParentDatasetV1DatasetsDatasetIdParentsParentIdPut', 'datasetId', datasetId);
            // verify required parameter 'parentId' is not null or undefined
            common_1.assertParamExists('addParentDatasetV1DatasetsDatasetIdParentsParentIdPut', 'parentId', parentId);
            const localVarPath = `/v1/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (reconcileFeatures !== undefined) {
                localVarQueryParameter['reconcile_features'] = reconcileFeatures;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut: (teamId, datasetId, parentId, reconcileFeatures, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut', 'datasetId', datasetId);
            // verify required parameter 'parentId' is not null or undefined
            common_1.assertParamExists('addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut', 'parentId', parentId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (reconcileFeatures !== undefined) {
                localVarQueryParameter['reconcile_features'] = reconcileFeatures;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: (datasetId, populationAttributeValueId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: (teamId, datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost: (datasetId, featureIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost', 'datasetId', datasetId);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost', 'featureIn', featureIn);
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost: (teamId, datasetId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost', 'datasetId', datasetId);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost', 'featureIn', featureIn);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost: (datasetId, associationInArrayAssociationIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1DatasetsDatasetIdAssociationsPost', 'datasetId', datasetId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1DatasetsDatasetIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost: (teamId, datasetId, associationInArrayAssociationIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost', 'datasetId', datasetId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {DatasetIn} datasetIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1DatasetsPost: (datasetIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetIn' is not null or undefined
            common_1.assertParamExists('createDatasetV1DatasetsPost', 'datasetIn', datasetIn);
            const localVarPath = `/v1/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(datasetIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamIdDatasetsPost: (teamId, datasetIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createDatasetV1TeamsTeamIdDatasetsPost', 'teamId', teamId);
            // verify required parameter 'datasetIn' is not null or undefined
            common_1.assertParamExists('createDatasetV1TeamsTeamIdDatasetsPost', 'datasetIn', datasetIn);
            const localVarPath = `/v1/teams/{team_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(datasetIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1DatasetsDatasetIdDelete: (datasetId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('deleteDatasetV1DatasetsDatasetIdDelete', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete: (teamId, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: (datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', 'datasetId', datasetId);
            // verify required parameter 'bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', 'bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete);
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: (teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'datasetId', datasetId);
            // verify required parameter 'bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet: (datasetId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet: (teamId, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1DatasetsDatasetIdGet: (datasetId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('getDatasetV1DatasetsDatasetIdGet', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamIdDatasetsDatasetIdGet: (teamId, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getDatasetV1TeamsTeamIdDatasetsDatasetIdGet', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('getDatasetV1TeamsTeamIdDatasetsDatasetIdGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet: (datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1DatasetsDatasetIdAssociationsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet: (datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1DatasetsDatasetIdParentsGet: (datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listDatasetParentsV1DatasetsDatasetIdParentsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}/parents`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/parents`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1DatasetsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamIdDatasetsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listDatasetsV1TeamsTeamIdDatasetsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1DatasetsDatasetIdModelsGet: (datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listModelsUsingDatasetV1DatasetsDatasetIdModelsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}/models`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserDatasetsV1UsersUserIdDatasetsGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/datasets`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1DatasetsDatasetIdPatch: (datasetId, patchDatasetOpArrayPatchDatasetOp, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('patchDatasetV1DatasetsDatasetIdPatch', 'datasetId', datasetId);
            // verify required parameter 'patchDatasetOpArrayPatchDatasetOp' is not null or undefined
            common_1.assertParamExists('patchDatasetV1DatasetsDatasetIdPatch', 'patchDatasetOpArrayPatchDatasetOp', patchDatasetOpArrayPatchDatasetOp);
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchDatasetOpArrayPatchDatasetOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch: (teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch', 'datasetId', datasetId);
            // verify required parameter 'patchDatasetOpArrayPatchDatasetOp' is not null or undefined
            common_1.assertParamExists('patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch', 'patchDatasetOpArrayPatchDatasetOp', patchDatasetOpArrayPatchDatasetOp);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchDatasetOpArrayPatchDatasetOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete: (datasetId, featureId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete', 'featureId', featureId);
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete: (teamId, datasetId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete: (datasetId, tagObjectId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete', 'datasetId', datasetId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete: (teamId, datasetId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete', 'datasetId', datasetId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} datasetId
         * @param {string} parentId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete: (datasetId, parentId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete', 'datasetId', datasetId);
            // verify required parameter 'parentId' is not null or undefined
            common_1.assertParamExists('removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete', 'parentId', parentId);
            const localVarPath = `/v1/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete: (teamId, datasetId, parentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete', 'datasetId', datasetId);
            // verify required parameter 'parentId' is not null or undefined
            common_1.assertParamExists('removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete', 'parentId', parentId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: (datasetId, populationAttributeValueId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: (teamId, datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1DatasetsDatasetIdPut: (datasetId, datasetIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('replaceDatasetV1DatasetsDatasetIdPut', 'datasetId', datasetId);
            // verify required parameter 'datasetIn' is not null or undefined
            common_1.assertParamExists('replaceDatasetV1DatasetsDatasetIdPut', 'datasetIn', datasetIn);
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(datasetIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut: (teamId, datasetId, datasetIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut', 'datasetId', datasetId);
            // verify required parameter 'datasetIn' is not null or undefined
            common_1.assertParamExists('replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut', 'datasetIn', datasetIn);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(datasetIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut: (datasetId, tagObjectId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut', 'datasetId', datasetId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut: (teamId, datasetId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut', 'datasetId', datasetId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * DatasetsApi - functional programming interface
 * @export
 */
exports.DatasetsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.DatasetsApiAxiosParamCreator(configuration);
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId, parentId, reconcileFeatures, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId, parentId, reconcileFeatures, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {DatasetIn} datasetIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1DatasetsPost(datasetIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createDatasetV1DatasetsPost(datasetIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1DatasetsDatasetIdDelete(datasetId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteDatasetV1DatasetsDatasetIdDelete(datasetId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1DatasetsDatasetIdGet(datasetId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDatasetV1DatasetsDatasetIdGet(datasetId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1DatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetsV1DatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId, tagObjectId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId, tagObjectId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} datasetId
         * @param {string} parentId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId, parentId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId, parentId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId, tagObjectId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId, tagObjectId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * DatasetsApi - factory interface
 * @export
 */
exports.DatasetsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.DatasetsApiFp(configuration);
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, teamId, options) {
            return localVarFp.addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options) {
            return localVarFp.addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId, parentId, reconcileFeatures, teamId, options) {
            return localVarFp.addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId, parentId, reconcileFeatures, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options) {
            return localVarFp.addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, teamId, options) {
            return localVarFp.addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options) {
            return localVarFp.addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options) {
            return localVarFp.createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options) {
            return localVarFp.createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options) {
            return localVarFp.createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options) {
            return localVarFp.createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {DatasetIn} datasetIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1DatasetsPost(datasetIn, teamId, options) {
            return localVarFp.createDatasetV1DatasetsPost(datasetIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options) {
            return localVarFp.createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1DatasetsDatasetIdDelete(datasetId, teamId, options) {
            return localVarFp.deleteDatasetV1DatasetsDatasetIdDelete(datasetId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options) {
            return localVarFp.deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId, options) {
            return localVarFp.deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options) {
            return localVarFp.deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, teamId, options) {
            return localVarFp.fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options) {
            return localVarFp.fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1DatasetsDatasetIdGet(datasetId, teamId, options) {
            return localVarFp.getDatasetV1DatasetsDatasetIdGet(datasetId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options) {
            return localVarFp.getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options) {
            return localVarFp.listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1DatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamId, options) {
            return localVarFp.listDatasetsV1DatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return localVarFp.listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options) {
            return localVarFp.listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, teamId, options) {
            return localVarFp.patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options) {
            return localVarFp.patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, teamId, options) {
            return localVarFp.removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options) {
            return localVarFp.removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId, tagObjectId, teamId, options) {
            return localVarFp.removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId, tagObjectId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options) {
            return localVarFp.removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} datasetId
         * @param {string} parentId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId, parentId, teamId, options) {
            return localVarFp.removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId, parentId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options) {
            return localVarFp.removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, teamId, options) {
            return localVarFp.removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options) {
            return localVarFp.removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, teamId, options) {
            return localVarFp.replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options) {
            return localVarFp.replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId, tagObjectId, teamId, options) {
            return localVarFp.tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId, tagObjectId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options) {
            return localVarFp.tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * DatasetsApi - object-oriented interface
 * @export
 * @class DatasetsApi
 * @extends {BaseAPI}
 */
class DatasetsApi extends base_1.BaseAPI {
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {DatasetsApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.datasetId, requestParameters.featureId, requestParameters.index, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {DatasetsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a parent dataset.
     * @summary Add Parent Dataset
     * @param {DatasetsApiAddParentDatasetV1DatasetsDatasetIdParentsParentIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(requestParameters.datasetId, requestParameters.parentId, requestParameters.reconcileFeatures, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a parent dataset.
     * @summary Add Parent Dataset
     * @param {DatasetsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.parentId, requestParameters.reconcileFeatures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {DatasetsApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.datasetId, requestParameters.populationAttributeValueId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {DatasetsApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {DatasetsApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters.datasetId, requestParameters.featureIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {DatasetsApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {DatasetsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {DatasetsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(requestParameters.teamId, requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Dataset.
     * @summary Create Dataset
     * @param {DatasetsApiCreateDatasetV1DatasetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createDatasetV1DatasetsPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createDatasetV1DatasetsPost(requestParameters.datasetIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Dataset.
     * @summary Create Dataset
     * @param {DatasetsApiCreateDatasetV1TeamsTeamIdDatasetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createDatasetV1TeamsTeamIdDatasetsPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createDatasetV1TeamsTeamIdDatasetsPost(requestParameters.teamId, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dataset
     * @param {DatasetsApiDeleteDatasetV1DatasetsDatasetIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    deleteDatasetV1DatasetsDatasetIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).deleteDatasetV1DatasetsDatasetIdDelete(requestParameters.datasetId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dataset
     * @param {DatasetsApiDeleteDatasetV1TeamsTeamIdDatasetsDatasetIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {DatasetsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {DatasetsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {DatasetsApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.datasetId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {DatasetsApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a Dataset.
     * @summary Get Dataset
     * @param {DatasetsApiGetDatasetV1DatasetsDatasetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    getDatasetV1DatasetsDatasetIdGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).getDatasetV1DatasetsDatasetIdGet(requestParameters.datasetId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a Dataset.
     * @summary Get Dataset
     * @param {DatasetsApiGetDatasetV1TeamsTeamIdDatasetsDatasetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {DatasetsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {DatasetsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters = {}, options) {
        return exports.DatasetsApiFp(this.configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {DatasetsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get parents of this dataset.
     * @summary List Dataset Parents
     * @param {DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetParentsV1DatasetsDatasetIdParentsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetParentsV1DatasetsDatasetIdParentsGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get parents of this dataset.
     * @summary List Dataset Parents
     * @param {DatasetsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all Datasets.
     * @summary List Datasets
     * @param {DatasetsApiListDatasetsV1DatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetsV1DatasetsGet(requestParameters = {}, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetsV1DatasetsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all Datasets.
     * @summary List Datasets
     * @param {DatasetsApiListDatasetsV1TeamsTeamIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetsV1TeamsTeamIdDatasetsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetsV1TeamsTeamIdDatasetsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models that use the dataset either directly or through child datasets.
     * @summary List Models Using Dataset
     * @param {DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models that use the dataset either directly or through child datasets.
     * @summary List Models Using Dataset
     * @param {DatasetsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {DatasetsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Dataset resource with partial update.
     * @summary Patch Dataset
     * @param {DatasetsApiPatchDatasetV1DatasetsDatasetIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    patchDatasetV1DatasetsDatasetIdPatch(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).patchDatasetV1DatasetsDatasetIdPatch(requestParameters.datasetId, requestParameters.patchDatasetOpArrayPatchDatasetOp, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Dataset resource with partial update.
     * @summary Patch Dataset
     * @param {DatasetsApiPatchDatasetV1TeamsTeamIdDatasetsDatasetIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(requestParameters.teamId, requestParameters.datasetId, requestParameters.patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {DatasetsApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.datasetId, requestParameters.featureId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {DatasetsApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the dataset with object with provided id.
     * @summary Remove Object Tag From Dataset
     * @param {DatasetsApiRemoveObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters.datasetId, requestParameters.tagObjectId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the dataset with object with provided id.
     * @summary Remove Object Tag From Dataset
     * @param {DatasetsApiRemoveObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a parent dataset.
     * @summary Remove Parent Dataset
     * @param {DatasetsApiRemoveParentDatasetV1DatasetsDatasetIdParentsParentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(requestParameters.datasetId, requestParameters.parentId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a parent dataset.
     * @summary Remove Parent Dataset
     * @param {DatasetsApiRemoveParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.parentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {DatasetsApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.datasetId, requestParameters.populationAttributeValueId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {DatasetsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Dataset.
     * @summary Replace Dataset
     * @param {DatasetsApiReplaceDatasetV1DatasetsDatasetIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    replaceDatasetV1DatasetsDatasetIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).replaceDatasetV1DatasetsDatasetIdPut(requestParameters.datasetId, requestParameters.datasetIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Dataset.
     * @summary Replace Dataset
     * @param {DatasetsApiReplaceDatasetV1TeamsTeamIdDatasetsDatasetIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the dataset with object with provided id.
     * @summary Tag Study With Object
     * @param {DatasetsApiTagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters.datasetId, requestParameters.tagObjectId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the dataset with object with provided id.
     * @summary Tag Study With Object
     * @param {DatasetsApiTagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DatasetsApi = DatasetsApi;
/**
 * EnterpriseApi - axios parameter creator
 * @export
 */
exports.EnterpriseApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationIn} integrationIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1EnterpriseIntegrationsPost: (integrationIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'integrationIn' is not null or undefined
            common_1.assertParamExists('createIntegrationV1EnterpriseIntegrationsPost', 'integrationIn', integrationIn);
            const localVarPath = `/v1/enterprise/integrations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(integrationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new message.
         * @summary Create Message
         * @param {MessageIn} messageIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1EnterpriseMessagesPost: (messageIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'messageIn' is not null or undefined
            common_1.assertParamExists('createMessageV1EnterpriseMessagesPost', 'messageIn', messageIn);
            const localVarPath = `/v1/enterprise/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(messageIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseV1EnterpriseGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/enterprise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1EnterpriseIntegrationsIntegrationIdGet: (integrationId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'integrationId' is not null or undefined
            common_1.assertParamExists('getIntegrationV1EnterpriseIntegrationsIntegrationIdGet', 'integrationId', integrationId);
            const localVarPath = `/v1/enterprise/integrations/{integration_id}`
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationsV1EnterpriseIntegrationsGet: (teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/enterprise/integrations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} messageId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1EnterpriseMessagesMessageIdGet: (messageId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'messageId' is not null or undefined
            common_1.assertParamExists('getMessageV1EnterpriseMessagesMessageIdGet', 'messageId', messageId);
            const localVarPath = `/v1/enterprise/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update Enterprise.
         * @summary Update Enterprise
         * @param {EnterpriseIn} enterpriseIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnterpriseV1EnterprisePatch: (enterpriseIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'enterpriseIn' is not null or undefined
            common_1.assertParamExists('updateEnterpriseV1EnterprisePatch', 'enterpriseIn', enterpriseIn);
            const localVarPath = `/v1/enterprise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(enterpriseIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} integrationId
         * @param {IntegrationIn} integrationIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch: (integrationId, integrationIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'integrationId' is not null or undefined
            common_1.assertParamExists('updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch', 'integrationId', integrationId);
            // verify required parameter 'integrationIn' is not null or undefined
            common_1.assertParamExists('updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch', 'integrationIn', integrationIn);
            const localVarPath = `/v1/enterprise/integrations/{integration_id}`
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(integrationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} messageId
         * @param {MessageIn} messageIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1EnterpriseMessagesMessageIdPatch: (messageId, messageIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'messageId' is not null or undefined
            common_1.assertParamExists('updateMessageV1EnterpriseMessagesMessageIdPatch', 'messageId', messageId);
            // verify required parameter 'messageIn' is not null or undefined
            common_1.assertParamExists('updateMessageV1EnterpriseMessagesMessageIdPatch', 'messageIn', messageIn);
            const localVarPath = `/v1/enterprise/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(messageIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * EnterpriseApi - functional programming interface
 * @export
 */
exports.EnterpriseApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.EnterpriseApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationIn} integrationIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1EnterpriseIntegrationsPost(integrationIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createIntegrationV1EnterpriseIntegrationsPost(integrationIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {MessageIn} messageIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1EnterpriseMessagesPost(messageIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createMessageV1EnterpriseMessagesPost(messageIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseV1EnterpriseGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getEnterpriseV1EnterpriseGet(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationsV1EnterpriseIntegrationsGet(teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getIntegrationsV1EnterpriseIntegrationsGet(teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} messageId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1EnterpriseMessagesMessageIdGet(messageId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMessageV1EnterpriseMessagesMessageIdGet(messageId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update Enterprise.
         * @summary Update Enterprise
         * @param {EnterpriseIn} enterpriseIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnterpriseV1EnterprisePatch(enterpriseIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateEnterpriseV1EnterprisePatch(enterpriseIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} integrationId
         * @param {IntegrationIn} integrationIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} messageId
         * @param {MessageIn} messageIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1EnterpriseMessagesMessageIdPatch(messageId, messageIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateMessageV1EnterpriseMessagesMessageIdPatch(messageId, messageIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * EnterpriseApi - factory interface
 * @export
 */
exports.EnterpriseApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.EnterpriseApiFp(configuration);
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationIn} integrationIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1EnterpriseIntegrationsPost(integrationIn, teamId, options) {
            return localVarFp.createIntegrationV1EnterpriseIntegrationsPost(integrationIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {MessageIn} messageIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1EnterpriseMessagesPost(messageIn, teamId, options) {
            return localVarFp.createMessageV1EnterpriseMessagesPost(messageIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseV1EnterpriseGet(options) {
            return localVarFp.getEnterpriseV1EnterpriseGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, teamId, options) {
            return localVarFp.getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationsV1EnterpriseIntegrationsGet(teamId, options) {
            return localVarFp.getIntegrationsV1EnterpriseIntegrationsGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} messageId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1EnterpriseMessagesMessageIdGet(messageId, teamId, options) {
            return localVarFp.getMessageV1EnterpriseMessagesMessageIdGet(messageId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Enterprise.
         * @summary Update Enterprise
         * @param {EnterpriseIn} enterpriseIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnterpriseV1EnterprisePatch(enterpriseIn, options) {
            return localVarFp.updateEnterpriseV1EnterprisePatch(enterpriseIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} integrationId
         * @param {IntegrationIn} integrationIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationIn, teamId, options) {
            return localVarFp.updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} messageId
         * @param {MessageIn} messageIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1EnterpriseMessagesMessageIdPatch(messageId, messageIn, teamId, options) {
            return localVarFp.updateMessageV1EnterpriseMessagesMessageIdPatch(messageId, messageIn, teamId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * EnterpriseApi - object-oriented interface
 * @export
 * @class EnterpriseApi
 * @extends {BaseAPI}
 */
class EnterpriseApi extends base_1.BaseAPI {
    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    createIntegrationV1EnterpriseIntegrationsPost(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).createIntegrationV1EnterpriseIntegrationsPost(requestParameters.integrationIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new message.
     * @summary Create Message
     * @param {EnterpriseApiCreateMessageV1EnterpriseMessagesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    createMessageV1EnterpriseMessagesPost(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).createMessageV1EnterpriseMessagesPost(requestParameters.messageIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the Enterprise.
     * @summary Get Enterprise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    getEnterpriseV1EnterpriseGet(options) {
        return exports.EnterpriseApiFp(this.configuration).getEnterpriseV1EnterpriseGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Integration.
     * @summary Get Integration
     * @param {EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(requestParameters.integrationId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get team integrations.
     * @summary Get Integrations
     * @param {EnterpriseApiGetIntegrationsV1EnterpriseIntegrationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    getIntegrationsV1EnterpriseIntegrationsGet(requestParameters = {}, options) {
        return exports.EnterpriseApiFp(this.configuration).getIntegrationsV1EnterpriseIntegrationsGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a Message.
     * @summary Get Message
     * @param {EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    getMessageV1EnterpriseMessagesMessageIdGet(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).getMessageV1EnterpriseMessagesMessageIdGet(requestParameters.messageId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update Enterprise.
     * @summary Update Enterprise
     * @param {EnterpriseApiUpdateEnterpriseV1EnterprisePatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    updateEnterpriseV1EnterprisePatch(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).updateEnterpriseV1EnterprisePatch(requestParameters.enterpriseIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update Integration.
     * @summary Update Integration
     * @param {EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(requestParameters.integrationId, requestParameters.integrationIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a Message.
     * @summary Update Message
     * @param {EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    updateMessageV1EnterpriseMessagesMessageIdPatch(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).updateMessageV1EnterpriseMessagesMessageIdPatch(requestParameters.messageId, requestParameters.messageIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.EnterpriseApi = EnterpriseApi;
/**
 * FeaturesApi - axios parameter creator
 * @export
 */
exports.FeaturesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut: (dashboardId, featureId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'dashboardId' is not null or undefined
            common_1.assertParamExists('addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut', 'dashboardId', dashboardId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut', 'featureId', featureId);
            const localVarPath = `/v1/dashboards/{dashboard_id}/features/{feature_id}`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut: (teamId, dashboardId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut', 'teamId', teamId);
            // verify required parameter 'dashboardId' is not null or undefined
            common_1.assertParamExists('addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut', 'dashboardId', dashboardId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut: (datasetId, featureId, index, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut', 'featureId', featureId);
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut: (teamId, datasetId, featureId, index, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost: (datasetId, featureIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost', 'datasetId', datasetId);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost', 'featureIn', featureIn);
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost: (teamId, datasetId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost', 'datasetId', datasetId);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost', 'featureIn', featureIn);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {FeatureIn} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1FeaturesPost: (featureIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('createFeatureV1FeaturesPost', 'featureIn', featureIn);
            const localVarPath = `/v1/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamIdFeaturesPost: (teamId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createFeatureV1TeamsTeamIdFeaturesPost', 'teamId', teamId);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('createFeatureV1TeamsTeamIdFeaturesPost', 'featureIn', featureIn);
            const localVarPath = `/v1/teams/{team_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} featureId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1FeaturesFeatureIdDelete: (featureId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('deleteFeatureV1FeaturesFeatureIdDelete', 'featureId', featureId);
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete: (teamId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete', 'teamId', teamId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1FeaturesFeatureIdGet: (featureId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('getFeatureV1FeaturesFeatureIdGet', 'featureId', featureId);
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamIdFeaturesFeatureIdGet: (teamId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getFeatureV1TeamsTeamIdFeaturesFeatureIdGet', 'teamId', teamId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('getFeatureV1TeamsTeamIdFeaturesFeatureIdGet', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet: (dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'dashboardId' is not null or undefined
            common_1.assertParamExists('listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet', 'dashboardId', dashboardId);
            const localVarPath = `/v1/dashboards/{dashboard_id}/features`
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet: (teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet', 'teamId', teamId);
            // verify required parameter 'dashboardId' is not null or undefined
            common_1.assertParamExists('listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet', 'dashboardId', dashboardId);
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet: (datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Features.
         * @summary List Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1FeaturesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamIdFeaturesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listFeaturesV1TeamsTeamIdFeaturesGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1ModelsModelIdFeaturesGet: (modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('listModelFeaturesV1ModelsModelIdFeaturesGet', 'modelId', modelId);
            const localVarPath = `/v1/models/{model_id}/features`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet: (teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserFeaturesV1UsersUserIdFeaturesGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/features`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
         * @summary Patch Feature
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1FeaturesFeatureIdPatch: (featureId, patchFeatureOpArrayPatchFeatureOp, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('patchFeatureV1FeaturesFeatureIdPatch', 'featureId', featureId);
            // verify required parameter 'patchFeatureOpArrayPatchFeatureOp' is not null or undefined
            common_1.assertParamExists('patchFeatureV1FeaturesFeatureIdPatch', 'patchFeatureOpArrayPatchFeatureOp', patchFeatureOpArrayPatchFeatureOp);
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchFeatureOpArrayPatchFeatureOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
         * @summary Patch Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch: (teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch', 'teamId', teamId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch', 'featureId', featureId);
            // verify required parameter 'patchFeatureOpArrayPatchFeatureOp' is not null or undefined
            common_1.assertParamExists('patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch', 'patchFeatureOpArrayPatchFeatureOp', patchFeatureOpArrayPatchFeatureOp);
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchFeatureOpArrayPatchFeatureOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1FeaturesPatch: (bulkPatchFeatureOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bulkPatchFeatureOp' is not null or undefined
            common_1.assertParamExists('patchMultipleFeaturesV1FeaturesPatch', 'bulkPatchFeatureOp', bulkPatchFeatureOp);
            const localVarPath = `/v1/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bulkPatchFeatureOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamId
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch: (teamId, bulkPatchFeatureOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch', 'teamId', teamId);
            // verify required parameter 'bulkPatchFeatureOp' is not null or undefined
            common_1.assertParamExists('patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch', 'bulkPatchFeatureOp', bulkPatchFeatureOp);
            const localVarPath = `/v1/teams/{team_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bulkPatchFeatureOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete: (datasetId, featureId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete', 'featureId', featureId);
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete: (teamId, datasetId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1FeaturesFeatureIdPut: (featureId, featureIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('replaceFeatureV1FeaturesFeatureIdPut', 'featureId', featureId);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('replaceFeatureV1FeaturesFeatureIdPut', 'featureIn', featureIn);
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut: (teamId, featureId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut', 'teamId', teamId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut', 'featureId', featureId);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut', 'featureIn', featureIn);
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * FeaturesApi - functional programming interface
 * @export
 */
exports.FeaturesApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.FeaturesApiAxiosParamCreator(configuration);
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {FeatureIn} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1FeaturesPost(featureIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createFeatureV1FeaturesPost(featureIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} featureId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1FeaturesFeatureIdDelete(featureId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFeatureV1FeaturesFeatureIdDelete(featureId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1FeaturesFeatureIdGet(featureId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFeatureV1FeaturesFeatureIdGet(featureId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1FeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFeaturesV1FeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1ModelsModelIdFeaturesGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelFeaturesV1ModelsModelIdFeaturesGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
         * @summary Patch Feature
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
         * @summary Patch Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamId
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * FeaturesApi - factory interface
 * @export
 */
exports.FeaturesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.FeaturesApiFp(configuration);
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, teamId, options) {
            return localVarFp.addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(dashboardId, featureId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options) {
            return localVarFp.addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, teamId, options) {
            return localVarFp.addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options) {
            return localVarFp.addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options) {
            return localVarFp.createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options) {
            return localVarFp.createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {FeatureIn} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1FeaturesPost(featureIn, teamId, options) {
            return localVarFp.createFeatureV1FeaturesPost(featureIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options) {
            return localVarFp.createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} featureId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1FeaturesFeatureIdDelete(featureId, teamId, options) {
            return localVarFp.deleteFeatureV1FeaturesFeatureIdDelete(featureId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options) {
            return localVarFp.deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1FeaturesFeatureIdGet(featureId, teamId, options) {
            return localVarFp.getFeatureV1FeaturesFeatureIdGet(featureId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options) {
            return localVarFp.getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options) {
            return localVarFp.listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options) {
            return localVarFp.listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1FeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options) {
            return localVarFp.listFeaturesV1FeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1ModelsModelIdFeaturesGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listModelFeaturesV1ModelsModelIdFeaturesGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options) {
            return localVarFp.listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
         * @summary Patch Feature
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, teamId, options) {
            return localVarFp.patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
         * @summary Patch Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options) {
            return localVarFp.patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options) {
            return localVarFp.patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamId
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options) {
            return localVarFp.patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, teamId, options) {
            return localVarFp.removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options) {
            return localVarFp.removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, teamId, options) {
            return localVarFp.replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options) {
            return localVarFp.replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * FeaturesApi - object-oriented interface
 * @export
 * @class FeaturesApi
 * @extends {BaseAPI}
 */
class FeaturesApi extends base_1.BaseAPI {
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dashboard Endpoint
     * @param {FeaturesApiAddFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).addFeatureToDashboardEndpointV1DashboardsDashboardIdFeaturesFeatureIdPut(requestParameters.dashboardId, requestParameters.featureId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dashboard Endpoint
     * @param {FeaturesApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.dashboardId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {FeaturesApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.datasetId, requestParameters.featureId, requestParameters.index, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {FeaturesApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {FeaturesApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters.datasetId, requestParameters.featureIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {FeaturesApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Feature.
     * @summary Create Feature
     * @param {FeaturesApiCreateFeatureV1FeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    createFeatureV1FeaturesPost(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).createFeatureV1FeaturesPost(requestParameters.featureIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Feature.
     * @summary Create Feature
     * @param {FeaturesApiCreateFeatureV1TeamsTeamIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    createFeatureV1TeamsTeamIdFeaturesPost(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).createFeatureV1TeamsTeamIdFeaturesPost(requestParameters.teamId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a feature.
     * @summary Delete Feature
     * @param {FeaturesApiDeleteFeatureV1FeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    deleteFeatureV1FeaturesFeatureIdDelete(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).deleteFeatureV1FeaturesFeatureIdDelete(requestParameters.featureId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a feature.
     * @summary Delete Feature
     * @param {FeaturesApiDeleteFeatureV1TeamsTeamIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(requestParameters.teamId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get feature.
     * @summary Get Feature
     * @param {FeaturesApiGetFeatureV1FeaturesFeatureIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    getFeatureV1FeaturesFeatureIdGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).getFeatureV1FeaturesFeatureIdGet(requestParameters.featureId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get feature.
     * @summary Get Feature
     * @param {FeaturesApiGetFeatureV1TeamsTeamIdFeaturesFeatureIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(requestParameters.teamId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {FeaturesApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters = {}, options) {
        return exports.FeaturesApiFp(this.configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dashboard Features
     * @param {FeaturesApiListDashboardFeaturesV1DashboardsDashboardIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listDashboardFeaturesV1DashboardsDashboardIdFeaturesGet(requestParameters.dashboardId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dashboard Features
     * @param {FeaturesApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(requestParameters.teamId, requestParameters.dashboardId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters.datasetId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {FeaturesApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Features.
     * @summary List Features
     * @param {FeaturesApiListFeaturesV1FeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listFeaturesV1FeaturesGet(requestParameters = {}, options) {
        return exports.FeaturesApiFp(this.configuration).listFeaturesV1FeaturesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Features.
     * @summary List Features
     * @param {FeaturesApiListFeaturesV1TeamsTeamIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listFeaturesV1TeamsTeamIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listFeaturesV1TeamsTeamIdFeaturesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get features in model.
     * @summary List Model Features
     * @param {FeaturesApiListModelFeaturesV1ModelsModelIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listModelFeaturesV1ModelsModelIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listModelFeaturesV1ModelsModelIdFeaturesGet(requestParameters.modelId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get features in model.
     * @summary List Model Features
     * @param {FeaturesApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(requestParameters.teamId, requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {FeaturesApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
     * @summary Patch Feature
     * @param {FeaturesApiPatchFeatureV1FeaturesFeatureIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    patchFeatureV1FeaturesFeatureIdPatch(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).patchFeatureV1FeaturesFeatureIdPatch(requestParameters.featureId, requestParameters.patchFeatureOpArrayPatchFeatureOp, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
     * @summary Patch Feature
     * @param {FeaturesApiPatchFeatureV1TeamsTeamIdFeaturesFeatureIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(requestParameters.teamId, requestParameters.featureId, requestParameters.patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Batch feature patching.
     * @summary Patch Multiple Features
     * @param {FeaturesApiPatchMultipleFeaturesV1FeaturesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    patchMultipleFeaturesV1FeaturesPatch(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).patchMultipleFeaturesV1FeaturesPatch(requestParameters.bulkPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Batch feature patching.
     * @summary Patch Multiple Features
     * @param {FeaturesApiPatchMultipleFeaturesV1TeamsTeamIdFeaturesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(requestParameters.teamId, requestParameters.bulkPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {FeaturesApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.datasetId, requestParameters.featureId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {FeaturesApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Feature.
     * @summary Replace Feature
     * @param {FeaturesApiReplaceFeatureV1FeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    replaceFeatureV1FeaturesFeatureIdPut(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).replaceFeatureV1FeaturesFeatureIdPut(requestParameters.featureId, requestParameters.featureIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Feature.
     * @summary Replace Feature
     * @param {FeaturesApiReplaceFeatureV1TeamsTeamIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.featureId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FeaturesApi = FeaturesApi;
/**
 * FeedbackApi - axios parameter creator
 * @export
 */
exports.FeedbackApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Post user feedback on AI-generated relationship synthesis to s3.
         * @summary Post Synthesis Feedback
         * @param {SynthesisFeedbackIn} synthesisFeedbackIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSynthesisFeedbackV1FeedbackPost: (synthesisFeedbackIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'synthesisFeedbackIn' is not null or undefined
            common_1.assertParamExists('postSynthesisFeedbackV1FeedbackPost', 'synthesisFeedbackIn', synthesisFeedbackIn);
            const localVarPath = `/v1/feedback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(synthesisFeedbackIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * FeedbackApi - functional programming interface
 * @export
 */
exports.FeedbackApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.FeedbackApiAxiosParamCreator(configuration);
    return {
        /**
         * Post user feedback on AI-generated relationship synthesis to s3.
         * @summary Post Synthesis Feedback
         * @param {SynthesisFeedbackIn} synthesisFeedbackIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSynthesisFeedbackV1FeedbackPost(synthesisFeedbackIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.postSynthesisFeedbackV1FeedbackPost(synthesisFeedbackIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * FeedbackApi - factory interface
 * @export
 */
exports.FeedbackApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.FeedbackApiFp(configuration);
    return {
        /**
         * Post user feedback on AI-generated relationship synthesis to s3.
         * @summary Post Synthesis Feedback
         * @param {SynthesisFeedbackIn} synthesisFeedbackIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSynthesisFeedbackV1FeedbackPost(synthesisFeedbackIn, options) {
            return localVarFp.postSynthesisFeedbackV1FeedbackPost(synthesisFeedbackIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * FeedbackApi - object-oriented interface
 * @export
 * @class FeedbackApi
 * @extends {BaseAPI}
 */
class FeedbackApi extends base_1.BaseAPI {
    /**
     * Post user feedback on AI-generated relationship synthesis to s3.
     * @summary Post Synthesis Feedback
     * @param {FeedbackApiPostSynthesisFeedbackV1FeedbackPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    postSynthesisFeedbackV1FeedbackPost(requestParameters, options) {
        return exports.FeedbackApiFp(this.configuration).postSynthesisFeedbackV1FeedbackPost(requestParameters.synthesisFeedbackIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FeedbackApi = FeedbackApi;
/**
 * FindingsApi - axios parameter creator
 * @export
 */
exports.FindingsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get study findings via dois and association ids.
         * @summary Get Study Findings From Association Ids
         * @param {StudyFindingsIn} studyFindingsIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyFindingsFromAssociationIdsV1FindingsPost: (studyFindingsIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyFindingsIn' is not null or undefined
            common_1.assertParamExists('getStudyFindingsFromAssociationIdsV1FindingsPost', 'studyFindingsIn', studyFindingsIn);
            const localVarPath = `/v1/findings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(studyFindingsIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * FindingsApi - functional programming interface
 * @export
 */
exports.FindingsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.FindingsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get study findings via dois and association ids.
         * @summary Get Study Findings From Association Ids
         * @param {StudyFindingsIn} studyFindingsIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyFindingsFromAssociationIdsV1FindingsPost(studyFindingsIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStudyFindingsFromAssociationIdsV1FindingsPost(studyFindingsIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * FindingsApi - factory interface
 * @export
 */
exports.FindingsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.FindingsApiFp(configuration);
    return {
        /**
         * Get study findings via dois and association ids.
         * @summary Get Study Findings From Association Ids
         * @param {StudyFindingsIn} studyFindingsIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyFindingsFromAssociationIdsV1FindingsPost(studyFindingsIn, options) {
            return localVarFp.getStudyFindingsFromAssociationIdsV1FindingsPost(studyFindingsIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * FindingsApi - object-oriented interface
 * @export
 * @class FindingsApi
 * @extends {BaseAPI}
 */
class FindingsApi extends base_1.BaseAPI {
    /**
     * Get study findings via dois and association ids.
     * @summary Get Study Findings From Association Ids
     * @param {FindingsApiGetStudyFindingsFromAssociationIdsV1FindingsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FindingsApi
     */
    getStudyFindingsFromAssociationIdsV1FindingsPost(requestParameters, options) {
        return exports.FindingsApiFp(this.configuration).getStudyFindingsFromAssociationIdsV1FindingsPost(requestParameters.studyFindingsIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FindingsApi = FindingsApi;
/**
 * GraphApi - axios parameter creator
 * @export
 */
exports.GraphApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1GraphConceptGraphGet: (teamId, minRelationshipStrength, tags, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getConceptGraphV1GraphConceptGraphGet', 'teamId', teamId);
            const localVarPath = `/v1/graph/concept_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (minRelationshipStrength !== undefined) {
                localVarQueryParameter['min_relationship_strength'] = minRelationshipStrength;
            }
            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1TeamsTeamIdGraphConceptGraphGet: (teamId, minRelationshipStrength, tags, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getConceptGraphV1TeamsTeamIdGraphConceptGraphGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/graph/concept_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (minRelationshipStrength !== undefined) {
                localVarQueryParameter['min_relationship_strength'] = minRelationshipStrength;
            }
            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1GraphDatasetGraphGet: (teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getDatasetGraphV1GraphDatasetGraphGet', 'teamId', teamId);
            const localVarPath = `/v1/graph/dataset_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet: (teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/graph/dataset_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricNodeGraphV1GraphMetricsMetricIdGet: (metricId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'metricId' is not null or undefined
            common_1.assertParamExists('getMetricNodeGraphV1GraphMetricsMetricIdGet', 'metricId', metricId);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getMetricNodeGraphV1GraphMetricsMetricIdGet', 'teamId', teamId);
            const localVarPath = `/v1/graph/metrics/{metric_id}`
                .replace(`{${"metric_id"}}`, encodeURIComponent(String(metricId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet: (metricId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'metricId' is not null or undefined
            common_1.assertParamExists('getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet', 'metricId', metricId);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/graph/metrics/{metric_id}`
                .replace(`{${"metric_id"}}`, encodeURIComponent(String(metricId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1
         * @param {string} metricId2
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get: (metricId1, metricId2, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'metricId1' is not null or undefined
            common_1.assertParamExists('getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get', 'metricId1', metricId1);
            // verify required parameter 'metricId2' is not null or undefined
            common_1.assertParamExists('getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get', 'metricId2', metricId2);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get', 'teamId', teamId);
            const localVarPath = `/v1/graph/metrics/{metric_id_1}/relationship/{metric_id_2}`
                .replace(`{${"metric_id_1"}}`, encodeURIComponent(String(metricId1)))
                .replace(`{${"metric_id_2"}}`, encodeURIComponent(String(metricId2)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1
         * @param {string} metricId2
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get: (metricId1, metricId2, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'metricId1' is not null or undefined
            common_1.assertParamExists('getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get', 'metricId1', metricId1);
            // verify required parameter 'metricId2' is not null or undefined
            common_1.assertParamExists('getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get', 'metricId2', metricId2);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/graph/metrics/{metric_id_1}/relationship/{metric_id_2}`
                .replace(`{${"metric_id_1"}}`, encodeURIComponent(String(metricId1)))
                .replace(`{${"metric_id_2"}}`, encodeURIComponent(String(metricId2)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} teamId
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1GraphSemanticGraphGet: (teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getSemanticGraphV1GraphSemanticGraphGet', 'teamId', teamId);
            const localVarPath = `/v1/graph/semantic_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (topic1 !== undefined) {
                localVarQueryParameter['topic_1'] = topic1;
            }
            if (topic2 !== undefined) {
                localVarQueryParameter['topic_2'] = topic2;
            }
            if (ids1) {
                localVarQueryParameter['ids_1'] = ids1;
            }
            if (ids2) {
                localVarQueryParameter['ids_2'] = ids2;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (minCount !== undefined) {
                localVarQueryParameter['min_count'] = minCount;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} teamId
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet: (teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/graph/semantic_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (topic1 !== undefined) {
                localVarQueryParameter['topic_1'] = topic1;
            }
            if (topic2 !== undefined) {
                localVarQueryParameter['topic_2'] = topic2;
            }
            if (ids1) {
                localVarQueryParameter['ids_1'] = ids1;
            }
            if (ids2) {
                localVarQueryParameter['ids_2'] = ids2;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (minCount !== undefined) {
                localVarQueryParameter['min_count'] = minCount;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch single topic semantic graph.
         * @summary Get Semantic Topic Graph
         * @param {string} teamId
         * @param {SemanticTopicGraphIn} semanticTopicGraphIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticTopicGraphV1GraphSemanticTopicGraphPost: (teamId, semanticTopicGraphIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getSemanticTopicGraphV1GraphSemanticTopicGraphPost', 'teamId', teamId);
            // verify required parameter 'semanticTopicGraphIn' is not null or undefined
            common_1.assertParamExists('getSemanticTopicGraphV1GraphSemanticTopicGraphPost', 'semanticTopicGraphIn', semanticTopicGraphIn);
            const localVarPath = `/v1/graph/semantic_topic_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(semanticTopicGraphIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch single topic semantic graph.
         * @summary Get Semantic Topic Graph
         * @param {string} teamId
         * @param {SemanticTopicGraphIn} semanticTopicGraphIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPost: (teamId, semanticTopicGraphIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPost', 'teamId', teamId);
            // verify required parameter 'semanticTopicGraphIn' is not null or undefined
            common_1.assertParamExists('getSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPost', 'semanticTopicGraphIn', semanticTopicGraphIn);
            const localVarPath = `/v1/teams/{team_id}/graph/semantic_topic_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(semanticTopicGraphIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch topic graph.
         * @summary Get Topic Graph
         * @param {string} teamId
         * @param {number} [numRelationships] Number of relationships to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicGraphV1GraphTopicGraphGet: (teamId, numRelationships, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getTopicGraphV1GraphTopicGraphGet', 'teamId', teamId);
            const localVarPath = `/v1/graph/topic_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (numRelationships !== undefined) {
                localVarQueryParameter['num_relationships'] = numRelationships;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch topic graph.
         * @summary Get Topic Graph
         * @param {string} teamId
         * @param {number} [numRelationships] Number of relationships to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicGraphV1TeamsTeamIdGraphTopicGraphGet: (teamId, numRelationships, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getTopicGraphV1TeamsTeamIdGraphTopicGraphGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/graph/topic_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (numRelationships !== undefined) {
                localVarQueryParameter['num_relationships'] = numRelationships;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch topic node graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicNodeGraphV1GraphTopicsTopicIdGet: (topicId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'topicId' is not null or undefined
            common_1.assertParamExists('getTopicNodeGraphV1GraphTopicsTopicIdGet', 'topicId', topicId);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getTopicNodeGraphV1GraphTopicsTopicIdGet', 'teamId', teamId);
            const localVarPath = `/v1/graph/topics/{topic_id}`
                .replace(`{${"topic_id"}}`, encodeURIComponent(String(topicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch topic node graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet: (topicId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'topicId' is not null or undefined
            common_1.assertParamExists('getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet', 'topicId', topicId);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/graph/topics/{topic_id}`
                .replace(`{${"topic_id"}}`, encodeURIComponent(String(topicId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1
         * @param {string} topicId2
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get: (topicId1, topicId2, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'topicId1' is not null or undefined
            common_1.assertParamExists('getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get', 'topicId1', topicId1);
            // verify required parameter 'topicId2' is not null or undefined
            common_1.assertParamExists('getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get', 'topicId2', topicId2);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get', 'teamId', teamId);
            const localVarPath = `/v1/graph/topics/{topic_id_1}/relationship/{topic_id_2}`
                .replace(`{${"topic_id_1"}}`, encodeURIComponent(String(topicId1)))
                .replace(`{${"topic_id_2"}}`, encodeURIComponent(String(topicId2)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1
         * @param {string} topicId2
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get: (topicId1, topicId2, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'topicId1' is not null or undefined
            common_1.assertParamExists('getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get', 'topicId1', topicId1);
            // verify required parameter 'topicId2' is not null or undefined
            common_1.assertParamExists('getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get', 'topicId2', topicId2);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/graph/topics/{topic_id_1}/relationship/{topic_id_2}`
                .replace(`{${"topic_id_1"}}`, encodeURIComponent(String(topicId1)))
                .replace(`{${"topic_id_2"}}`, encodeURIComponent(String(topicId2)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * GraphApi - functional programming interface
 * @export
 */
exports.GraphApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.GraphApiAxiosParamCreator(configuration);
    return {
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1GraphConceptGraphGet(teamId, minRelationshipStrength, tags, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConceptGraphV1GraphConceptGraphGet(teamId, minRelationshipStrength, tags, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, tags, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, tags, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1GraphDatasetGraphGet(teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDatasetGraphV1GraphDatasetGraphGet(teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricNodeGraphV1GraphMetricsMetricIdGet(metricId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMetricNodeGraphV1GraphMetricsMetricIdGet(metricId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(metricId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(metricId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1
         * @param {string} metricId2
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1
         * @param {string} metricId2
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} teamId
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1GraphSemanticGraphGet(teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSemanticGraphV1GraphSemanticGraphGet(teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} teamId
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch single topic semantic graph.
         * @summary Get Semantic Topic Graph
         * @param {string} teamId
         * @param {SemanticTopicGraphIn} semanticTopicGraphIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticTopicGraphV1GraphSemanticTopicGraphPost(teamId, semanticTopicGraphIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSemanticTopicGraphV1GraphSemanticTopicGraphPost(teamId, semanticTopicGraphIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch single topic semantic graph.
         * @summary Get Semantic Topic Graph
         * @param {string} teamId
         * @param {SemanticTopicGraphIn} semanticTopicGraphIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPost(teamId, semanticTopicGraphIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPost(teamId, semanticTopicGraphIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch topic graph.
         * @summary Get Topic Graph
         * @param {string} teamId
         * @param {number} [numRelationships] Number of relationships to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicGraphV1GraphTopicGraphGet(teamId, numRelationships, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTopicGraphV1GraphTopicGraphGet(teamId, numRelationships, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch topic graph.
         * @summary Get Topic Graph
         * @param {string} teamId
         * @param {number} [numRelationships] Number of relationships to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(teamId, numRelationships, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(teamId, numRelationships, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch topic node graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicNodeGraphV1GraphTopicsTopicIdGet(topicId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTopicNodeGraphV1GraphTopicsTopicIdGet(topicId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch topic node graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(topicId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(topicId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1
         * @param {string} topicId2
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1
         * @param {string} topicId2
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * GraphApi - factory interface
 * @export
 */
exports.GraphApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.GraphApiFp(configuration);
    return {
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1GraphConceptGraphGet(teamId, minRelationshipStrength, tags, options) {
            return localVarFp.getConceptGraphV1GraphConceptGraphGet(teamId, minRelationshipStrength, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, tags, options) {
            return localVarFp.getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1GraphDatasetGraphGet(teamId, options) {
            return localVarFp.getDatasetGraphV1GraphDatasetGraphGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options) {
            return localVarFp.getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricNodeGraphV1GraphMetricsMetricIdGet(metricId, teamId, options) {
            return localVarFp.getMetricNodeGraphV1GraphMetricsMetricIdGet(metricId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(metricId, teamId, options) {
            return localVarFp.getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(metricId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1
         * @param {string} metricId2
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options) {
            return localVarFp.getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1
         * @param {string} metricId2
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options) {
            return localVarFp.getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} teamId
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1GraphSemanticGraphGet(teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options) {
            return localVarFp.getSemanticGraphV1GraphSemanticGraphGet(teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} teamId
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options) {
            return localVarFp.getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch single topic semantic graph.
         * @summary Get Semantic Topic Graph
         * @param {string} teamId
         * @param {SemanticTopicGraphIn} semanticTopicGraphIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticTopicGraphV1GraphSemanticTopicGraphPost(teamId, semanticTopicGraphIn, options) {
            return localVarFp.getSemanticTopicGraphV1GraphSemanticTopicGraphPost(teamId, semanticTopicGraphIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch single topic semantic graph.
         * @summary Get Semantic Topic Graph
         * @param {string} teamId
         * @param {SemanticTopicGraphIn} semanticTopicGraphIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPost(teamId, semanticTopicGraphIn, options) {
            return localVarFp.getSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPost(teamId, semanticTopicGraphIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch topic graph.
         * @summary Get Topic Graph
         * @param {string} teamId
         * @param {number} [numRelationships] Number of relationships to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicGraphV1GraphTopicGraphGet(teamId, numRelationships, options) {
            return localVarFp.getTopicGraphV1GraphTopicGraphGet(teamId, numRelationships, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch topic graph.
         * @summary Get Topic Graph
         * @param {string} teamId
         * @param {number} [numRelationships] Number of relationships to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(teamId, numRelationships, options) {
            return localVarFp.getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(teamId, numRelationships, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch topic node graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicNodeGraphV1GraphTopicsTopicIdGet(topicId, teamId, options) {
            return localVarFp.getTopicNodeGraphV1GraphTopicsTopicIdGet(topicId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch topic node graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(topicId, teamId, options) {
            return localVarFp.getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(topicId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1
         * @param {string} topicId2
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options) {
            return localVarFp.getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1
         * @param {string} topicId2
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options) {
            return localVarFp.getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * GraphApi - object-oriented interface
 * @export
 * @class GraphApi
 * @extends {BaseAPI}
 */
class GraphApi extends base_1.BaseAPI {
    /**
     * Fetch concept graph.
     * @summary Get Concept Graph
     * @param {GraphApiGetConceptGraphV1GraphConceptGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getConceptGraphV1GraphConceptGraphGet(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getConceptGraphV1GraphConceptGraphGet(requestParameters.teamId, requestParameters.minRelationshipStrength, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch concept graph.
     * @summary Get Concept Graph
     * @param {GraphApiGetConceptGraphV1TeamsTeamIdGraphConceptGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(requestParameters.teamId, requestParameters.minRelationshipStrength, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch dataset graph.
     * @summary Get Dataset Graph
     * @param {GraphApiGetDatasetGraphV1GraphDatasetGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getDatasetGraphV1GraphDatasetGraphGet(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getDatasetGraphV1GraphDatasetGraphGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch dataset graph.
     * @summary Get Dataset Graph
     * @param {GraphApiGetDatasetGraphV1TeamsTeamIdGraphDatasetGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch dataset graph.
     * @summary Get Metric Node Graph
     * @param {GraphApiGetMetricNodeGraphV1GraphMetricsMetricIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getMetricNodeGraphV1GraphMetricsMetricIdGet(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getMetricNodeGraphV1GraphMetricsMetricIdGet(requestParameters.metricId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch dataset graph.
     * @summary Get Metric Node Graph
     * @param {GraphApiGetMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(requestParameters.metricId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch dataset graph.
     * @summary Get Metric Relationship Graph
     * @param {GraphApiGetMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2GetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getMetricRelationshipGraphV1GraphMetricsMetricId1RelationshipMetricId2Get(requestParameters.metricId1, requestParameters.metricId2, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch dataset graph.
     * @summary Get Metric Relationship Graph
     * @param {GraphApiGetMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2GetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(requestParameters.metricId1, requestParameters.metricId2, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch semantic graph.
     * @summary Get Semantic Graph
     * @param {GraphApiGetSemanticGraphV1GraphSemanticGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getSemanticGraphV1GraphSemanticGraphGet(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getSemanticGraphV1GraphSemanticGraphGet(requestParameters.teamId, requestParameters.topic1, requestParameters.topic2, requestParameters.ids1, requestParameters.ids2, requestParameters.minStrength, requestParameters.minCount, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch semantic graph.
     * @summary Get Semantic Graph
     * @param {GraphApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(requestParameters.teamId, requestParameters.topic1, requestParameters.topic2, requestParameters.ids1, requestParameters.ids2, requestParameters.minStrength, requestParameters.minCount, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch single topic semantic graph.
     * @summary Get Semantic Topic Graph
     * @param {GraphApiGetSemanticTopicGraphV1GraphSemanticTopicGraphPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getSemanticTopicGraphV1GraphSemanticTopicGraphPost(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getSemanticTopicGraphV1GraphSemanticTopicGraphPost(requestParameters.teamId, requestParameters.semanticTopicGraphIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch single topic semantic graph.
     * @summary Get Semantic Topic Graph
     * @param {GraphApiGetSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPost(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPost(requestParameters.teamId, requestParameters.semanticTopicGraphIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch topic graph.
     * @summary Get Topic Graph
     * @param {GraphApiGetTopicGraphV1GraphTopicGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getTopicGraphV1GraphTopicGraphGet(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getTopicGraphV1GraphTopicGraphGet(requestParameters.teamId, requestParameters.numRelationships, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch topic graph.
     * @summary Get Topic Graph
     * @param {GraphApiGetTopicGraphV1TeamsTeamIdGraphTopicGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(requestParameters.teamId, requestParameters.numRelationships, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch topic node graph.
     * @summary Get Topic Node Graph
     * @param {GraphApiGetTopicNodeGraphV1GraphTopicsTopicIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getTopicNodeGraphV1GraphTopicsTopicIdGet(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getTopicNodeGraphV1GraphTopicsTopicIdGet(requestParameters.topicId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch topic node graph.
     * @summary Get Topic Node Graph
     * @param {GraphApiGetTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(requestParameters.topicId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch dataset graph.
     * @summary Get Topic Relationship Graph
     * @param {GraphApiGetTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2GetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getTopicRelationshipGraphV1GraphTopicsTopicId1RelationshipTopicId2Get(requestParameters.topicId1, requestParameters.topicId2, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch dataset graph.
     * @summary Get Topic Relationship Graph
     * @param {GraphApiGetTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2GetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(requestParameters, options) {
        return exports.GraphApiFp(this.configuration).getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(requestParameters.topicId1, requestParameters.topicId2, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.GraphApi = GraphApi;
/**
 * IndexedSourcesApi - axios parameter creator
 * @export
 */
exports.IndexedSourcesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * List Indexed Sources.  Paginated list of all Indexed Sources.
         * @summary Get Sources Paged
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per paginated page return
         * @param {string} [q] Search query
         * @param {string} [filterBy] Filters for search results
         * @param {string} [sortBy] Sorts for search results
         * @param {string} [queryBy] Fields to query
         * @param {string} [facetBy] Fields to facet on
         * @param {string} [facetQuery] Search query for facets
         * @param {number} [maxFacetValues] Max number of facet values returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSourcesPagedV1IndexedSourcesGet: (page, perPage, q, filterBy, sortBy, queryBy, facetBy, facetQuery, maxFacetValues, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/indexed-sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (filterBy !== undefined) {
                localVarQueryParameter['filter_by'] = filterBy;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (queryBy !== undefined) {
                localVarQueryParameter['query_by'] = queryBy;
            }
            if (facetBy !== undefined) {
                localVarQueryParameter['facet_by'] = facetBy;
            }
            if (facetQuery !== undefined) {
                localVarQueryParameter['facet_query'] = facetQuery;
            }
            if (maxFacetValues !== undefined) {
                localVarQueryParameter['max_facet_values'] = maxFacetValues;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * IndexedSourcesApi - functional programming interface
 * @export
 */
exports.IndexedSourcesApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.IndexedSourcesApiAxiosParamCreator(configuration);
    return {
        /**
         * List Indexed Sources.  Paginated list of all Indexed Sources.
         * @summary Get Sources Paged
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per paginated page return
         * @param {string} [q] Search query
         * @param {string} [filterBy] Filters for search results
         * @param {string} [sortBy] Sorts for search results
         * @param {string} [queryBy] Fields to query
         * @param {string} [facetBy] Fields to facet on
         * @param {string} [facetQuery] Search query for facets
         * @param {number} [maxFacetValues] Max number of facet values returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSourcesPagedV1IndexedSourcesGet(page, perPage, q, filterBy, sortBy, queryBy, facetBy, facetQuery, maxFacetValues, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSourcesPagedV1IndexedSourcesGet(page, perPage, q, filterBy, sortBy, queryBy, facetBy, facetQuery, maxFacetValues, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * IndexedSourcesApi - factory interface
 * @export
 */
exports.IndexedSourcesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.IndexedSourcesApiFp(configuration);
    return {
        /**
         * List Indexed Sources.  Paginated list of all Indexed Sources.
         * @summary Get Sources Paged
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per paginated page return
         * @param {string} [q] Search query
         * @param {string} [filterBy] Filters for search results
         * @param {string} [sortBy] Sorts for search results
         * @param {string} [queryBy] Fields to query
         * @param {string} [facetBy] Fields to facet on
         * @param {string} [facetQuery] Search query for facets
         * @param {number} [maxFacetValues] Max number of facet values returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSourcesPagedV1IndexedSourcesGet(page, perPage, q, filterBy, sortBy, queryBy, facetBy, facetQuery, maxFacetValues, options) {
            return localVarFp.getSourcesPagedV1IndexedSourcesGet(page, perPage, q, filterBy, sortBy, queryBy, facetBy, facetQuery, maxFacetValues, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * IndexedSourcesApi - object-oriented interface
 * @export
 * @class IndexedSourcesApi
 * @extends {BaseAPI}
 */
class IndexedSourcesApi extends base_1.BaseAPI {
    /**
     * List Indexed Sources.  Paginated list of all Indexed Sources.
     * @summary Get Sources Paged
     * @param {IndexedSourcesApiGetSourcesPagedV1IndexedSourcesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexedSourcesApi
     */
    getSourcesPagedV1IndexedSourcesGet(requestParameters = {}, options) {
        return exports.IndexedSourcesApiFp(this.configuration).getSourcesPagedV1IndexedSourcesGet(requestParameters.page, requestParameters.perPage, requestParameters.q, requestParameters.filterBy, requestParameters.sortBy, requestParameters.queryBy, requestParameters.facetBy, requestParameters.facetQuery, requestParameters.maxFacetValues, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.IndexedSourcesApi = IndexedSourcesApi;
/**
 * MetricsApi - axios parameter creator
 * @export
 */
exports.MetricsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get metrics on the graph.
         * @summary Get Graph Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGraphMetricsV1MetricsGraphGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/metrics/graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get metrics on the graph.
         * @summary Get Graph Metrics
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGraphMetricsV1TeamsTeamIdMetricsGraphGet: (teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getGraphMetricsV1TeamsTeamIdMetricsGraphGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/metrics/graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * MetricsApi - functional programming interface
 * @export
 */
exports.MetricsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.MetricsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get metrics on the graph.
         * @summary Get Graph Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGraphMetricsV1MetricsGraphGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getGraphMetricsV1MetricsGraphGet(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get metrics on the graph.
         * @summary Get Graph Metrics
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGraphMetricsV1TeamsTeamIdMetricsGraphGet(teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getGraphMetricsV1TeamsTeamIdMetricsGraphGet(teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * MetricsApi - factory interface
 * @export
 */
exports.MetricsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.MetricsApiFp(configuration);
    return {
        /**
         * Get metrics on the graph.
         * @summary Get Graph Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGraphMetricsV1MetricsGraphGet(options) {
            return localVarFp.getGraphMetricsV1MetricsGraphGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get metrics on the graph.
         * @summary Get Graph Metrics
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGraphMetricsV1TeamsTeamIdMetricsGraphGet(teamId, options) {
            return localVarFp.getGraphMetricsV1TeamsTeamIdMetricsGraphGet(teamId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * MetricsApi - object-oriented interface
 * @export
 * @class MetricsApi
 * @extends {BaseAPI}
 */
class MetricsApi extends base_1.BaseAPI {
    /**
     * Get metrics on the graph.
     * @summary Get Graph Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    getGraphMetricsV1MetricsGraphGet(options) {
        return exports.MetricsApiFp(this.configuration).getGraphMetricsV1MetricsGraphGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get metrics on the graph.
     * @summary Get Graph Metrics
     * @param {MetricsApiGetGraphMetricsV1TeamsTeamIdMetricsGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    getGraphMetricsV1TeamsTeamIdMetricsGraphGet(requestParameters, options) {
        return exports.MetricsApiFp(this.configuration).getGraphMetricsV1TeamsTeamIdMetricsGraphGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.MetricsApi = MetricsApi;
/**
 * ModeldbApi - axios parameter creator
 * @export
 */
exports.ModeldbApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get algorithms by id.
         * @summary Get Algorithm
         * @param {string} algorithmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet: (algorithmId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'algorithmId' is not null or undefined
            common_1.assertParamExists('getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet', 'algorithmId', algorithmId);
            const localVarPath = `/v1/modeldb/algorithms/{algorithm_id}`
                .replace(`{${"algorithm_id"}}`, encodeURIComponent(String(algorithmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List available algorithms in ModelDB. Search with algorithm class if passed.
         * @summary List Algorithms
         * @param {string} [algorithmClass]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlgorithmsV1ModeldbAlgorithmsGet: (algorithmClass, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/modeldb/algorithms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (algorithmClass !== undefined) {
                localVarQueryParameter['algorithm_class'] = algorithmClass;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ModeldbApi - functional programming interface
 * @export
 */
exports.ModeldbApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.ModeldbApiAxiosParamCreator(configuration);
    return {
        /**
         * Get algorithms by id.
         * @summary Get Algorithm
         * @param {string} algorithmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List available algorithms in ModelDB. Search with algorithm class if passed.
         * @summary List Algorithms
         * @param {string} [algorithmClass]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * ModeldbApi - factory interface
 * @export
 */
exports.ModeldbApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.ModeldbApiFp(configuration);
    return {
        /**
         * Get algorithms by id.
         * @summary Get Algorithm
         * @param {string} algorithmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId, options) {
            return localVarFp.getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId, options).then((request) => request(axios, basePath));
        },
        /**
         * List available algorithms in ModelDB. Search with algorithm class if passed.
         * @summary List Algorithms
         * @param {string} [algorithmClass]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass, options) {
            return localVarFp.listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ModeldbApi - object-oriented interface
 * @export
 * @class ModeldbApi
 * @extends {BaseAPI}
 */
class ModeldbApi extends base_1.BaseAPI {
    /**
     * Get algorithms by id.
     * @summary Get Algorithm
     * @param {ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeldbApi
     */
    getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(requestParameters, options) {
        return exports.ModeldbApiFp(this.configuration).getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(requestParameters.algorithmId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List available algorithms in ModelDB. Search with algorithm class if passed.
     * @summary List Algorithms
     * @param {ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeldbApi
     */
    listAlgorithmsV1ModeldbAlgorithmsGet(requestParameters = {}, options) {
        return exports.ModeldbApiFp(this.configuration).listAlgorithmsV1ModeldbAlgorithmsGet(requestParameters.algorithmClass, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ModeldbApi = ModeldbApi;
/**
 * ModelsApi - axios parameter creator
 * @export
 */
exports.ModelsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost: (modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1ModelsModelIdAssociationsPost', 'modelId', modelId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1ModelsModelIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost: (teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost', 'modelId', modelId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost: (studyId, modelIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('createModelsV1StudiesStudyIdModelsPost', 'studyId', studyId);
            // verify required parameter 'modelIn' is not null or undefined
            common_1.assertParamExists('createModelsV1StudiesStudyIdModelsPost', 'modelIn', modelIn);
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost: (teamId, studyId, modelIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createModelsV1TeamsTeamIdStudiesStudyIdModelsPost', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('createModelsV1TeamsTeamIdStudiesStudyIdModelsPost', 'studyId', studyId);
            // verify required parameter 'modelIn' is not null or undefined
            common_1.assertParamExists('createModelsV1TeamsTeamIdStudiesStudyIdModelsPost', 'modelIn', modelIn);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete: (modelId, associationId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete', 'modelId', modelId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete', 'associationId', associationId);
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete: (teamId, modelId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete', 'modelId', modelId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete', 'associationId', associationId);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete: (modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1ModelsModelIdAssociationsDelete', 'modelId', modelId);
            // verify required parameter 'bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1ModelsModelIdAssociationsDelete', 'bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete', bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete);
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: (teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'modelId', modelId);
            // verify required parameter 'bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1ModelsModelIdDelete: (modelId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteModelV1ModelsModelIdDelete', 'modelId', modelId);
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamIdModelsModelIdDelete: (teamId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteModelV1TeamsTeamIdModelsModelIdDelete', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteModelV1TeamsTeamIdModelsModelIdDelete', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet: (associationId, modelId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getAssociationV1ModelsModelIdAssociationsAssociationIdGet', 'associationId', associationId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('getAssociationV1ModelsModelIdAssociationsAssociationIdGet', 'modelId', modelId);
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet: (teamId, associationId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet', 'teamId', teamId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet', 'associationId', associationId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1ModelsModelIdGet: (modelId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('getModelV1ModelsModelIdGet', 'modelId', modelId);
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamIdModelsModelIdGet: (teamId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getModelV1TeamsTeamIdModelsModelIdGet', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('getModelV1TeamsTeamIdModelsModelIdGet', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet: (modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1ModelsModelIdAssociationsGet', 'modelId', modelId);
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet: (teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1ModelsModelIdFeaturesGet: (modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('listModelFeaturesV1ModelsModelIdFeaturesGet', 'modelId', modelId);
            const localVarPath = `/v1/models/{model_id}/features`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet: (teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet: (studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listModelsInStudyV1StudiesStudyIdModelsGet', 'studyId', studyId);
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Models.
         * @summary List Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1ModelsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamIdModelsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listModelsV1TeamsTeamIdModelsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listUserModelsV1TeamsTeamIdUsersUserIdModelsGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserModelsV1TeamsTeamIdUsersUserIdModelsGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserModelsV1UsersUserIdModelsGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/models`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch: (modelId, bulkPatchAssociationOp, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1ModelsModelIdAssociationsPatch', 'modelId', modelId);
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1ModelsModelIdAssociationsPatch', 'bulkPatchAssociationOp', bulkPatchAssociationOp);
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bulkPatchAssociationOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch: (teamId, modelId, bulkPatchAssociationOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch', 'modelId', modelId);
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch', 'bulkPatchAssociationOp', bulkPatchAssociationOp);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bulkPatchAssociationOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1ModelsModelIdPatch: (modelId, patchModelOpArrayPatchModelOp, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('patchModelV1ModelsModelIdPatch', 'modelId', modelId);
            // verify required parameter 'patchModelOpArrayPatchModelOp' is not null or undefined
            common_1.assertParamExists('patchModelV1ModelsModelIdPatch', 'patchModelOpArrayPatchModelOp', patchModelOpArrayPatchModelOp);
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchModelOpArrayPatchModelOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamIdModelsModelIdPatch: (teamId, modelId, patchModelOpArrayPatchModelOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('patchModelV1TeamsTeamIdModelsModelIdPatch', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('patchModelV1TeamsTeamIdModelsModelIdPatch', 'modelId', modelId);
            // verify required parameter 'patchModelOpArrayPatchModelOp' is not null or undefined
            common_1.assertParamExists('patchModelV1TeamsTeamIdModelsModelIdPatch', 'patchModelOpArrayPatchModelOp', patchModelOpArrayPatchModelOp);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchModelOpArrayPatchModelOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} associationId
         * @param {string} modelId
         * @param {DirectionIn} directionIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost: (associationId, modelId, directionIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost', 'associationId', associationId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost', 'modelId', modelId);
            // verify required parameter 'directionIn' is not null or undefined
            common_1.assertParamExists('postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost', 'directionIn', directionIn);
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}/directed_at`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(directionIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {DirectionIn} directionIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost: (teamId, associationId, modelId, directionIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'teamId', teamId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'associationId', associationId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'modelId', modelId);
            // verify required parameter 'directionIn' is not null or undefined
            common_1.assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'directionIn', directionIn);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}/directed_at`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(directionIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1ModelsModelIdPut: (modelId, modelIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('replaceModelV1ModelsModelIdPut', 'modelId', modelId);
            // verify required parameter 'modelIn' is not null or undefined
            common_1.assertParamExists('replaceModelV1ModelsModelIdPut', 'modelIn', modelIn);
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamIdModelsModelIdPut: (teamId, modelId, modelIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('replaceModelV1TeamsTeamIdModelsModelIdPut', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('replaceModelV1TeamsTeamIdModelsModelIdPut', 'modelId', modelId);
            // verify required parameter 'modelIn' is not null or undefined
            common_1.assertParamExists('replaceModelV1TeamsTeamIdModelsModelIdPut', 'modelIn', modelIn);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ModelsApi - functional programming interface
 * @export
 */
exports.ModelsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.ModelsApiAxiosParamCreator(configuration);
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1ModelsModelIdDelete(modelId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteModelV1ModelsModelIdDelete(modelId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1ModelsModelIdGet(modelId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getModelV1ModelsModelIdGet(modelId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1ModelsModelIdFeaturesGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelFeaturesV1ModelsModelIdFeaturesGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1ModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsV1ModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} associationId
         * @param {string} modelId
         * @param {DirectionIn} directionIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(associationId, modelId, directionIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(associationId, modelId, directionIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {DirectionIn} directionIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId, associationId, modelId, directionIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId, associationId, modelId, directionIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1ModelsModelIdPut(modelId, modelIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.replaceModelV1ModelsModelIdPut(modelId, modelIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * ModelsApi - factory interface
 * @export
 */
exports.ModelsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.ModelsApiFp(configuration);
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options) {
            return localVarFp.createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options) {
            return localVarFp.createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options) {
            return localVarFp.createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options) {
            return localVarFp.createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, teamId, options) {
            return localVarFp.deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options) {
            return localVarFp.deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId, options) {
            return localVarFp.deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options) {
            return localVarFp.deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1ModelsModelIdDelete(modelId, teamId, options) {
            return localVarFp.deleteModelV1ModelsModelIdDelete(modelId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options) {
            return localVarFp.deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, teamId, options) {
            return localVarFp.getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options) {
            return localVarFp.getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1ModelsModelIdGet(modelId, teamId, options) {
            return localVarFp.getModelV1ModelsModelIdGet(modelId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options) {
            return localVarFp.getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1ModelsModelIdAssociationsGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options) {
            return localVarFp.listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} modelId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1ModelsModelIdFeaturesGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listModelFeaturesV1ModelsModelIdFeaturesGet(modelId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1ModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options) {
            return localVarFp.listModelsV1ModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options) {
            return localVarFp.listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, teamId, options) {
            return localVarFp.patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options) {
            return localVarFp.patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, teamId, options) {
            return localVarFp.patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options) {
            return localVarFp.patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} associationId
         * @param {string} modelId
         * @param {DirectionIn} directionIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(associationId, modelId, directionIn, teamId, options) {
            return localVarFp.postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(associationId, modelId, directionIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {DirectionIn} directionIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId, associationId, modelId, directionIn, options) {
            return localVarFp.postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId, associationId, modelId, directionIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1ModelsModelIdPut(modelId, modelIn, teamId, options) {
            return localVarFp.replaceModelV1ModelsModelIdPut(modelId, modelIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options) {
            return localVarFp.replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ModelsApi - object-oriented interface
 * @export
 * @class ModelsApi
 * @extends {BaseAPI}
 */
class ModelsApi extends base_1.BaseAPI {
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {ModelsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    createAssociationsV1ModelsModelIdAssociationsPost(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).createAssociationsV1ModelsModelIdAssociationsPost(requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {ModelsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(requestParameters.teamId, requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {ModelsApiCreateModelsV1StudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    createModelsV1StudiesStudyIdModelsPost(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).createModelsV1StudiesStudyIdModelsPost(requestParameters.studyId, requestParameters.modelIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {ModelsApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(requestParameters.teamId, requestParameters.studyId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {ModelsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters.modelId, requestParameters.associationId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {ModelsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(requestParameters.teamId, requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {ModelsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {ModelsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(requestParameters.teamId, requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
     * @summary Delete Model
     * @param {ModelsApiDeleteModelV1ModelsModelIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteModelV1ModelsModelIdDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteModelV1ModelsModelIdDelete(requestParameters.modelId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
     * @summary Delete Model
     * @param {ModelsApiDeleteModelV1TeamsTeamIdModelsModelIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteModelV1TeamsTeamIdModelsModelIdDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteModelV1TeamsTeamIdModelsModelIdDelete(requestParameters.teamId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Get Association
     * @param {ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters.associationId, requestParameters.modelId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Get Association
     * @param {ModelsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(requestParameters.teamId, requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Model.
     * @summary Get Model
     * @param {ModelsApiGetModelV1ModelsModelIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    getModelV1ModelsModelIdGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).getModelV1ModelsModelIdGet(requestParameters.modelId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Model.
     * @summary Get Model
     * @param {ModelsApiGetModelV1TeamsTeamIdModelsModelIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    getModelV1TeamsTeamIdModelsModelIdGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).getModelV1TeamsTeamIdModelsModelIdGet(requestParameters.teamId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in model.
     * @summary List Associations
     * @param {ModelsApiListAssociationsV1ModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listAssociationsV1ModelsModelIdAssociationsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listAssociationsV1ModelsModelIdAssociationsGet(requestParameters.modelId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in model.
     * @summary List Associations
     * @param {ModelsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(requestParameters.teamId, requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {ModelsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {ModelsApiListAuthenticatedUserModelsV1UserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listAuthenticatedUserModelsV1UserModelsGet(requestParameters = {}, options) {
        return exports.ModelsApiFp(this.configuration).listAuthenticatedUserModelsV1UserModelsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get features in model.
     * @summary List Model Features
     * @param {ModelsApiListModelFeaturesV1ModelsModelIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listModelFeaturesV1ModelsModelIdFeaturesGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listModelFeaturesV1ModelsModelIdFeaturesGet(requestParameters.modelId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get features in model.
     * @summary List Model Features
     * @param {ModelsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(requestParameters.teamId, requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {ModelsApiListModelsInStudyV1StudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters.studyId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {ModelsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Models.
     * @summary List Models
     * @param {ModelsApiListModelsV1ModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listModelsV1ModelsGet(requestParameters = {}, options) {
        return exports.ModelsApiFp(this.configuration).listModelsV1ModelsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Models.
     * @summary List Models
     * @param {ModelsApiListModelsV1TeamsTeamIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listModelsV1TeamsTeamIdModelsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listModelsV1TeamsTeamIdModelsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {ModelsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {ModelsApiListUserModelsV1UsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listUserModelsV1UsersUserIdModelsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listUserModelsV1UsersUserIdModelsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {ModelsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters.modelId, requestParameters.bulkPatchAssociationOp, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {ModelsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(requestParameters.teamId, requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Model resource with partial update.
     * @summary Patch Model
     * @param {ModelsApiPatchModelV1ModelsModelIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    patchModelV1ModelsModelIdPatch(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).patchModelV1ModelsModelIdPatch(requestParameters.modelId, requestParameters.patchModelOpArrayPatchModelOp, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Model resource with partial update.
     * @summary Patch Model
     * @param {ModelsApiPatchModelV1TeamsTeamIdModelsModelIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    patchModelV1TeamsTeamIdModelsModelIdPatch(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).patchModelV1TeamsTeamIdModelsModelIdPatch(requestParameters.teamId, requestParameters.modelId, requestParameters.patchModelOpArrayPatchModelOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Post Association Direction
     * @param {ModelsApiPostAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).postAssociationDirectionV1ModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters.associationId, requestParameters.modelId, requestParameters.directionIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Post Association Direction
     * @param {ModelsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters.teamId, requestParameters.associationId, requestParameters.modelId, requestParameters.directionIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Model.
     * @summary Replace Model
     * @param {ModelsApiReplaceModelV1ModelsModelIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    replaceModelV1ModelsModelIdPut(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).replaceModelV1ModelsModelIdPut(requestParameters.modelId, requestParameters.modelIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Model.
     * @summary Replace Model
     * @param {ModelsApiReplaceModelV1TeamsTeamIdModelsModelIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    replaceModelV1TeamsTeamIdModelsModelIdPut(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).replaceModelV1TeamsTeamIdModelsModelIdPut(requestParameters.teamId, requestParameters.modelId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ModelsApi = ModelsApi;
/**
 * PassthroughApi - axios parameter creator
 * @export
 */
exports.PassthroughApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Forward request to crossref.
         * @summary Get Crossref
         * @param {any} restOfPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCrossrefV1CrossrefRestOfPathGet: (restOfPath, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'restOfPath' is not null or undefined
            common_1.assertParamExists('getCrossrefV1CrossrefRestOfPathGet', 'restOfPath', restOfPath);
            const localVarPath = `/v1/crossref/{rest_of_path}`
                .replace(`{${"rest_of_path"}}`, encodeURIComponent(String(restOfPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Forward request to ORCID.
         * @summary Get Orcid
         * @param {any} restOfPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrcidV1OrcidRestOfPathGet: (restOfPath, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'restOfPath' is not null or undefined
            common_1.assertParamExists('getOrcidV1OrcidRestOfPathGet', 'restOfPath', restOfPath);
            const localVarPath = `/v1/orcid/{rest_of_path}`
                .replace(`{${"rest_of_path"}}`, encodeURIComponent(String(restOfPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Forward request to UMLS.
         * @summary Get Umls Concepts
         * @param {any} restOfPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUmlsConceptsV1UmlsRestOfPathGet: (restOfPath, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'restOfPath' is not null or undefined
            common_1.assertParamExists('getUmlsConceptsV1UmlsRestOfPathGet', 'restOfPath', restOfPath);
            const localVarPath = `/v1/umls/{rest_of_path}`
                .replace(`{${"rest_of_path"}}`, encodeURIComponent(String(restOfPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Forward GraphQL request to SystemDB.
         * @summary Post Graphql
         * @param {GraphQLQuery} graphQLQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphqlV1GraphqlPost: (graphQLQuery, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'graphQLQuery' is not null or undefined
            common_1.assertParamExists('postGraphqlV1GraphqlPost', 'graphQLQuery', graphQLQuery);
            const localVarPath = `/v1/graphql`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(graphQLQuery, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PassthroughApi - functional programming interface
 * @export
 */
exports.PassthroughApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.PassthroughApiAxiosParamCreator(configuration);
    return {
        /**
         * Forward request to crossref.
         * @summary Get Crossref
         * @param {any} restOfPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCrossrefV1CrossrefRestOfPathGet(restOfPath, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getCrossrefV1CrossrefRestOfPathGet(restOfPath, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Forward request to ORCID.
         * @summary Get Orcid
         * @param {any} restOfPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrcidV1OrcidRestOfPathGet(restOfPath, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOrcidV1OrcidRestOfPathGet(restOfPath, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Forward request to UMLS.
         * @summary Get Umls Concepts
         * @param {any} restOfPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUmlsConceptsV1UmlsRestOfPathGet(restOfPath, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUmlsConceptsV1UmlsRestOfPathGet(restOfPath, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Forward GraphQL request to SystemDB.
         * @summary Post Graphql
         * @param {GraphQLQuery} graphQLQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphqlV1GraphqlPost(graphQLQuery, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.postGraphqlV1GraphqlPost(graphQLQuery, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * PassthroughApi - factory interface
 * @export
 */
exports.PassthroughApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.PassthroughApiFp(configuration);
    return {
        /**
         * Forward request to crossref.
         * @summary Get Crossref
         * @param {any} restOfPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCrossrefV1CrossrefRestOfPathGet(restOfPath, options) {
            return localVarFp.getCrossrefV1CrossrefRestOfPathGet(restOfPath, options).then((request) => request(axios, basePath));
        },
        /**
         * Forward request to ORCID.
         * @summary Get Orcid
         * @param {any} restOfPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrcidV1OrcidRestOfPathGet(restOfPath, options) {
            return localVarFp.getOrcidV1OrcidRestOfPathGet(restOfPath, options).then((request) => request(axios, basePath));
        },
        /**
         * Forward request to UMLS.
         * @summary Get Umls Concepts
         * @param {any} restOfPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUmlsConceptsV1UmlsRestOfPathGet(restOfPath, options) {
            return localVarFp.getUmlsConceptsV1UmlsRestOfPathGet(restOfPath, options).then((request) => request(axios, basePath));
        },
        /**
         * Forward GraphQL request to SystemDB.
         * @summary Post Graphql
         * @param {GraphQLQuery} graphQLQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphqlV1GraphqlPost(graphQLQuery, options) {
            return localVarFp.postGraphqlV1GraphqlPost(graphQLQuery, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PassthroughApi - object-oriented interface
 * @export
 * @class PassthroughApi
 * @extends {BaseAPI}
 */
class PassthroughApi extends base_1.BaseAPI {
    /**
     * Forward request to crossref.
     * @summary Get Crossref
     * @param {PassthroughApiGetCrossrefV1CrossrefRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getCrossrefV1CrossrefRestOfPathGet(requestParameters, options) {
        return exports.PassthroughApiFp(this.configuration).getCrossrefV1CrossrefRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Forward request to ORCID.
     * @summary Get Orcid
     * @param {PassthroughApiGetOrcidV1OrcidRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getOrcidV1OrcidRestOfPathGet(requestParameters, options) {
        return exports.PassthroughApiFp(this.configuration).getOrcidV1OrcidRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Forward request to UMLS.
     * @summary Get Umls Concepts
     * @param {PassthroughApiGetUmlsConceptsV1UmlsRestOfPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    getUmlsConceptsV1UmlsRestOfPathGet(requestParameters, options) {
        return exports.PassthroughApiFp(this.configuration).getUmlsConceptsV1UmlsRestOfPathGet(requestParameters.restOfPath, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Forward GraphQL request to SystemDB.
     * @summary Post Graphql
     * @param {PassthroughApiPostGraphqlV1GraphqlPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassthroughApi
     */
    postGraphqlV1GraphqlPost(requestParameters, options) {
        return exports.PassthroughApiFp(this.configuration).postGraphqlV1GraphqlPost(requestParameters.graphQLQuery, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PassthroughApi = PassthroughApi;
/**
 * PopulationAttributeValuesApi - axios parameter creator
 * @export
 */
exports.PopulationAttributeValuesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: (datasetId, populationAttributeValueId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: (teamId, datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete population attribute value.
         * @summary Delete Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete: (populationAttributeValueId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet: (datasetId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet: (teamId, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get population attribute value.
         * @summary Get Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet: (populationAttributeValueId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List population attribute values.
         * @summary List Population Attribute Values
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributeValuesV1PopulationAttributeValuesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/population_attribute_values`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: (datasetId, populationAttributeValueId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: (teamId, datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PopulationAttributeValuesApi - functional programming interface
 * @export
 */
exports.PopulationAttributeValuesApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.PopulationAttributeValuesApiAxiosParamCreator(configuration);
    return {
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete population attribute value.
         * @summary Delete Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get population attribute value.
         * @summary Get Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List population attribute values.
         * @summary List Population Attribute Values
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributeValuesV1PopulationAttributeValuesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listPopulationAttributeValuesV1PopulationAttributeValuesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * PopulationAttributeValuesApi - factory interface
 * @export
 */
exports.PopulationAttributeValuesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.PopulationAttributeValuesApiFp(configuration);
    return {
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, teamId, options) {
            return localVarFp.addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options) {
            return localVarFp.addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete population attribute value.
         * @summary Delete Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, teamId, options) {
            return localVarFp.deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, teamId, options) {
            return localVarFp.fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options) {
            return localVarFp.fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get population attribute value.
         * @summary Get Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, teamId, options) {
            return localVarFp.getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List population attribute values.
         * @summary List Population Attribute Values
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributeValuesV1PopulationAttributeValuesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listPopulationAttributeValuesV1PopulationAttributeValuesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, teamId, options) {
            return localVarFp.removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options) {
            return localVarFp.removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PopulationAttributeValuesApi - object-oriented interface
 * @export
 * @class PopulationAttributeValuesApi
 * @extends {BaseAPI}
 */
class PopulationAttributeValuesApi extends base_1.BaseAPI {
    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.datasetId, requestParameters.populationAttributeValueId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete population attribute value.
     * @summary Delete Population Attribute Value
     * @param {PopulationAttributeValuesApiDeletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.populationAttributeValueId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.datasetId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get population attribute value.
     * @summary Get Population Attribute Value
     * @param {PopulationAttributeValuesApiGetPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(requestParameters.populationAttributeValueId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List population attribute values.
     * @summary List Population Attribute Values
     * @param {PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    listPopulationAttributeValuesV1PopulationAttributeValuesGet(requestParameters = {}, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).listPopulationAttributeValuesV1PopulationAttributeValuesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.datasetId, requestParameters.populationAttributeValueId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PopulationAttributeValuesApi = PopulationAttributeValuesApi;
/**
 * PopulationAttributesApi - axios parameter creator
 * @export
 */
exports.PopulationAttributesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a population attribute.
         * @summary Create Population Attribute
         * @param {PopulationAttributeIn} populationAttributeIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeV1PopulationAttributesPost: (populationAttributeIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeIn' is not null or undefined
            common_1.assertParamExists('createPopulationAttributeV1PopulationAttributesPost', 'populationAttributeIn', populationAttributeIn);
            const localVarPath = `/v1/population_attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(populationAttributeIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a population attribute value.
         * @summary Create Population Attribute Value
         * @param {string} populationAttributeId
         * @param {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn} dateRangeInLocationInNumberRangeInCategoryInFreeTextIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost: (populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeId' is not null or undefined
            common_1.assertParamExists('createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost', 'populationAttributeId', populationAttributeId);
            // verify required parameter 'dateRangeInLocationInNumberRangeInCategoryInFreeTextIn' is not null or undefined
            common_1.assertParamExists('createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost', 'dateRangeInLocationInNumberRangeInCategoryInFreeTextIn', dateRangeInLocationInNumberRangeInCategoryInFreeTextIn);
            const localVarPath = `/v1/population_attributes/{population_attribute_id}/values`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete population attribute.
         * @summary Delete Population Attribute
         * @param {string} populationAttributeId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete: (populationAttributeId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeId' is not null or undefined
            common_1.assertParamExists('deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete', 'populationAttributeId', populationAttributeId);
            const localVarPath = `/v1/population_attributes/{population_attribute_id}`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get population attribute.
         * @summary Get Population Attribute
         * @param {string} populationAttributeId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet: (populationAttributeId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeId' is not null or undefined
            common_1.assertParamExists('getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet', 'populationAttributeId', populationAttributeId);
            const localVarPath = `/v1/population_attributes/{population_attribute_id}`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a population attribute\'s values.
         * @summary List A Population Attributes Values
         * @param {string} populationAttributeId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet: (populationAttributeId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeId' is not null or undefined
            common_1.assertParamExists('listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet', 'populationAttributeId', populationAttributeId);
            const localVarPath = `/v1/population_attributes/{population_attribute_id}/values`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List population attributes.
         * @summary List Population Attributes
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributesV1PopulationAttributesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/population_attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PopulationAttributesApi - functional programming interface
 * @export
 */
exports.PopulationAttributesApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.PopulationAttributesApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a population attribute.
         * @summary Create Population Attribute
         * @param {PopulationAttributeIn} populationAttributeIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a population attribute value.
         * @summary Create Population Attribute Value
         * @param {string} populationAttributeId
         * @param {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn} dateRangeInLocationInNumberRangeInCategoryInFreeTextIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete population attribute.
         * @summary Delete Population Attribute
         * @param {string} populationAttributeId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get population attribute.
         * @summary Get Population Attribute
         * @param {string} populationAttributeId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a population attribute\'s values.
         * @summary List A Population Attributes Values
         * @param {string} populationAttributeId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List population attributes.
         * @summary List Population Attributes
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributesV1PopulationAttributesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listPopulationAttributesV1PopulationAttributesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * PopulationAttributesApi - factory interface
 * @export
 */
exports.PopulationAttributesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.PopulationAttributesApiFp(configuration);
    return {
        /**
         * Create a population attribute.
         * @summary Create Population Attribute
         * @param {PopulationAttributeIn} populationAttributeIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options) {
            return localVarFp.createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a population attribute value.
         * @summary Create Population Attribute Value
         * @param {string} populationAttributeId
         * @param {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn} dateRangeInLocationInNumberRangeInCategoryInFreeTextIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, teamId, options) {
            return localVarFp.createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete population attribute.
         * @summary Delete Population Attribute
         * @param {string} populationAttributeId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, teamId, options) {
            return localVarFp.deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get population attribute.
         * @summary Get Population Attribute
         * @param {string} populationAttributeId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, teamId, options) {
            return localVarFp.getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a population attribute\'s values.
         * @summary List A Population Attributes Values
         * @param {string} populationAttributeId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamId, options) {
            return localVarFp.listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List population attributes.
         * @summary List Population Attributes
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributesV1PopulationAttributesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listPopulationAttributesV1PopulationAttributesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PopulationAttributesApi - object-oriented interface
 * @export
 * @class PopulationAttributesApi
 * @extends {BaseAPI}
 */
class PopulationAttributesApi extends base_1.BaseAPI {
    /**
     * Create a population attribute.
     * @summary Create Population Attribute
     * @param {PopulationAttributesApiCreatePopulationAttributeV1PopulationAttributesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    createPopulationAttributeV1PopulationAttributesPost(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).createPopulationAttributeV1PopulationAttributesPost(requestParameters.populationAttributeIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a population attribute value.
     * @summary Create Population Attribute Value
     * @param {PopulationAttributesApiCreatePopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(requestParameters.populationAttributeId, requestParameters.dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete population attribute.
     * @summary Delete Population Attribute
     * @param {PopulationAttributesApiDeletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(requestParameters.populationAttributeId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get population attribute.
     * @summary Get Population Attribute
     * @param {PopulationAttributesApiGetPopulationAttributeV1PopulationAttributesPopulationAttributeIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(requestParameters.populationAttributeId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a population attribute\'s values.
     * @summary List A Population Attributes Values
     * @param {PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(requestParameters.populationAttributeId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List population attributes.
     * @summary List Population Attributes
     * @param {PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    listPopulationAttributesV1PopulationAttributesGet(requestParameters = {}, options) {
        return exports.PopulationAttributesApiFp(this.configuration).listPopulationAttributesV1PopulationAttributesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PopulationAttributesApi = PopulationAttributesApi;
/**
 * RelationshipsApi - axios parameter creator
 * @export
 */
exports.RelationshipsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId
         * @param {string} [directedAt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSynthesisV1RelationshipsRelationshipIdSynthesisGet: (relationshipId, directedAt, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'relationshipId' is not null or undefined
            common_1.assertParamExists('getSynthesisV1RelationshipsRelationshipIdSynthesisGet', 'relationshipId', relationshipId);
            const localVarPath = `/v1/relationships/{relationship_id}/synthesis`
                .replace(`{${"relationship_id"}}`, encodeURIComponent(String(relationshipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (directedAt !== undefined) {
                localVarQueryParameter['directed_at'] = directedAt;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId
         * @param {string} teamId
         * @param {string} [directedAt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet: (relationshipId, teamId, directedAt, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'relationshipId' is not null or undefined
            common_1.assertParamExists('getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet', 'relationshipId', relationshipId);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/relationships/{relationship_id}/synthesis`
                .replace(`{${"relationship_id"}}`, encodeURIComponent(String(relationshipId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (directedAt !== undefined) {
                localVarQueryParameter['directed_at'] = directedAt;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List relationships.
         * @summary List Relationships
         * @param {GraphSearchDirection} [direction] Optional directionality.
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipsV1RelationshipsGet: (direction, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/relationships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (directionality !== undefined) {
                localVarQueryParameter['directionality'] = directionality;
            }
            if (originQuery !== undefined) {
                localVarQueryParameter['origin_query'] = originQuery;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List relationships.
         * @summary List Relationships
         * @param {string} teamId
         * @param {GraphSearchDirection} [direction] Optional directionality.
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipsV1TeamsTeamIdRelationshipsGet: (teamId, direction, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listRelationshipsV1TeamsTeamIdRelationshipsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/relationships`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (directionality !== undefined) {
                localVarQueryParameter['directionality'] = directionality;
            }
            if (originQuery !== undefined) {
                localVarQueryParameter['origin_query'] = originQuery;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * RelationshipsApi - functional programming interface
 * @export
 */
exports.RelationshipsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.RelationshipsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId
         * @param {string} [directedAt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSynthesisV1RelationshipsRelationshipIdSynthesisGet(relationshipId, directedAt, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSynthesisV1RelationshipsRelationshipIdSynthesisGet(relationshipId, directedAt, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId
         * @param {string} teamId
         * @param {string} [directedAt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(relationshipId, teamId, directedAt, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(relationshipId, teamId, directedAt, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List relationships.
         * @summary List Relationships
         * @param {GraphSearchDirection} [direction] Optional directionality.
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipsV1RelationshipsGet(direction, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listRelationshipsV1RelationshipsGet(direction, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List relationships.
         * @summary List Relationships
         * @param {string} teamId
         * @param {GraphSearchDirection} [direction] Optional directionality.
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipsV1TeamsTeamIdRelationshipsGet(teamId, direction, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listRelationshipsV1TeamsTeamIdRelationshipsGet(teamId, direction, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * RelationshipsApi - factory interface
 * @export
 */
exports.RelationshipsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.RelationshipsApiFp(configuration);
    return {
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId
         * @param {string} [directedAt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSynthesisV1RelationshipsRelationshipIdSynthesisGet(relationshipId, directedAt, options) {
            return localVarFp.getSynthesisV1RelationshipsRelationshipIdSynthesisGet(relationshipId, directedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId
         * @param {string} teamId
         * @param {string} [directedAt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(relationshipId, teamId, directedAt, options) {
            return localVarFp.getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(relationshipId, teamId, directedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * List relationships.
         * @summary List Relationships
         * @param {GraphSearchDirection} [direction] Optional directionality.
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipsV1RelationshipsGet(direction, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, teamId, options) {
            return localVarFp.listRelationshipsV1RelationshipsGet(direction, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List relationships.
         * @summary List Relationships
         * @param {string} teamId
         * @param {GraphSearchDirection} [direction] Optional directionality.
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipsV1TeamsTeamIdRelationshipsGet(teamId, direction, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, options) {
            return localVarFp.listRelationshipsV1TeamsTeamIdRelationshipsGet(teamId, direction, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * RelationshipsApi - object-oriented interface
 * @export
 * @class RelationshipsApi
 * @extends {BaseAPI}
 */
class RelationshipsApi extends base_1.BaseAPI {
    /**
     * Get Topic Relationship Synthesis.
     * @summary Get Synthesis
     * @param {RelationshipsApiGetSynthesisV1RelationshipsRelationshipIdSynthesisGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipsApi
     */
    getSynthesisV1RelationshipsRelationshipIdSynthesisGet(requestParameters, options) {
        return exports.RelationshipsApiFp(this.configuration).getSynthesisV1RelationshipsRelationshipIdSynthesisGet(requestParameters.relationshipId, requestParameters.directedAt, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Topic Relationship Synthesis.
     * @summary Get Synthesis
     * @param {RelationshipsApiGetSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipsApi
     */
    getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(requestParameters, options) {
        return exports.RelationshipsApiFp(this.configuration).getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(requestParameters.relationshipId, requestParameters.teamId, requestParameters.directedAt, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List relationships.
     * @summary List Relationships
     * @param {RelationshipsApiListRelationshipsV1RelationshipsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipsApi
     */
    listRelationshipsV1RelationshipsGet(requestParameters = {}, options) {
        return exports.RelationshipsApiFp(this.configuration).listRelationshipsV1RelationshipsGet(requestParameters.direction, requestParameters.query, requestParameters.includeHidden, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.sortBy, requestParameters.directionality, requestParameters.originQuery, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List relationships.
     * @summary List Relationships
     * @param {RelationshipsApiListRelationshipsV1TeamsTeamIdRelationshipsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipsApi
     */
    listRelationshipsV1TeamsTeamIdRelationshipsGet(requestParameters, options) {
        return exports.RelationshipsApiFp(this.configuration).listRelationshipsV1TeamsTeamIdRelationshipsGet(requestParameters.teamId, requestParameters.direction, requestParameters.query, requestParameters.includeHidden, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.sortBy, requestParameters.directionality, requestParameters.originQuery, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RelationshipsApi = RelationshipsApi;
/**
 * SemanticSearchApi - axios parameter creator
 * @export
 */
exports.SemanticSearchApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get semantic search count.
         * @summary Get Semantic Search Count
         * @param {SemanticSearchType} [questionType] Search query type
         * @param {string} [term1] First term part of the question.
         * @param {string} [term2] Optional second term part of the question.
         * @param {boolean} [cluster] To cluster results or not. Default True.
         * @param {boolean} [synthesize] To synthesize results or not. Default True.
         * @param {string} [filterBy] Filter semantic search results.
         * @param {number} [studyDistance] Study distance threshold
         * @param {number} [variableDistance] Variable distance threshold
         * @param {string} [clusteringThresholds] Clustering thresholds as json stringified list of pairs of floats.
         * @param {string} [modelName] OpenAI model name
         * @param {string} [length] Length of synthesis paragraph, in sentences.
         * @param {number} [temperature] Temperature of summary
         * @param {number} [maxTokens] Maximum token size
         * @param {number} [choices] Number of choices for OpenAI to produce.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticSearchCountV1SemanticSearchTotalGet: (questionType, term1, term2, cluster, synthesize, filterBy, studyDistance, variableDistance, clusteringThresholds, modelName, length, temperature, maxTokens, choices, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/semantic-search/total`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (questionType !== undefined) {
                localVarQueryParameter['question_type'] = questionType;
            }
            if (term1 !== undefined) {
                localVarQueryParameter['term1'] = term1;
            }
            if (term2 !== undefined) {
                localVarQueryParameter['term2'] = term2;
            }
            if (cluster !== undefined) {
                localVarQueryParameter['cluster'] = cluster;
            }
            if (synthesize !== undefined) {
                localVarQueryParameter['synthesize'] = synthesize;
            }
            if (filterBy !== undefined) {
                localVarQueryParameter['filter_by'] = filterBy;
            }
            if (studyDistance !== undefined) {
                localVarQueryParameter['study_distance'] = studyDistance;
            }
            if (variableDistance !== undefined) {
                localVarQueryParameter['variable_distance'] = variableDistance;
            }
            if (clusteringThresholds !== undefined) {
                localVarQueryParameter['clustering_thresholds'] = clusteringThresholds;
            }
            if (modelName !== undefined) {
                localVarQueryParameter['model_name'] = modelName;
            }
            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }
            if (temperature !== undefined) {
                localVarQueryParameter['temperature'] = temperature;
            }
            if (maxTokens !== undefined) {
                localVarQueryParameter['max_tokens'] = maxTokens;
            }
            if (choices !== undefined) {
                localVarQueryParameter['choices'] = choices;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Get Semantic Search
         * @param {SemanticSearchType} [questionType] Search query type
         * @param {string} [term1] First term part of the question.
         * @param {string} [term2] Optional second term part of the question.
         * @param {boolean} [cluster] To cluster results or not. Default True.
         * @param {boolean} [synthesize] To synthesize results or not. Default True.
         * @param {string} [filterBy] Filter semantic search results.
         * @param {number} [studyDistance] Study distance threshold
         * @param {number} [variableDistance] Variable distance threshold
         * @param {string} [clusteringThresholds] Clustering thresholds as json stringified list of pairs of floats.
         * @param {string} [modelName] OpenAI model name
         * @param {string} [length] Length of synthesis paragraph, in sentences.
         * @param {number} [temperature] Temperature of summary
         * @param {number} [maxTokens] Maximum token size
         * @param {number} [choices] Number of choices for OpenAI to produce.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticSearchV1SemanticSearchGet: (questionType, term1, term2, cluster, synthesize, filterBy, studyDistance, variableDistance, clusteringThresholds, modelName, length, temperature, maxTokens, choices, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/semantic-search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (questionType !== undefined) {
                localVarQueryParameter['question_type'] = questionType;
            }
            if (term1 !== undefined) {
                localVarQueryParameter['term1'] = term1;
            }
            if (term2 !== undefined) {
                localVarQueryParameter['term2'] = term2;
            }
            if (cluster !== undefined) {
                localVarQueryParameter['cluster'] = cluster;
            }
            if (synthesize !== undefined) {
                localVarQueryParameter['synthesize'] = synthesize;
            }
            if (filterBy !== undefined) {
                localVarQueryParameter['filter_by'] = filterBy;
            }
            if (studyDistance !== undefined) {
                localVarQueryParameter['study_distance'] = studyDistance;
            }
            if (variableDistance !== undefined) {
                localVarQueryParameter['variable_distance'] = variableDistance;
            }
            if (clusteringThresholds !== undefined) {
                localVarQueryParameter['clustering_thresholds'] = clusteringThresholds;
            }
            if (modelName !== undefined) {
                localVarQueryParameter['model_name'] = modelName;
            }
            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }
            if (temperature !== undefined) {
                localVarQueryParameter['temperature'] = temperature;
            }
            if (maxTokens !== undefined) {
                localVarQueryParameter['max_tokens'] = maxTokens;
            }
            if (choices !== undefined) {
                localVarQueryParameter['choices'] = choices;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SemanticSearchApi - functional programming interface
 * @export
 */
exports.SemanticSearchApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.SemanticSearchApiAxiosParamCreator(configuration);
    return {
        /**
         * Get semantic search count.
         * @summary Get Semantic Search Count
         * @param {SemanticSearchType} [questionType] Search query type
         * @param {string} [term1] First term part of the question.
         * @param {string} [term2] Optional second term part of the question.
         * @param {boolean} [cluster] To cluster results or not. Default True.
         * @param {boolean} [synthesize] To synthesize results or not. Default True.
         * @param {string} [filterBy] Filter semantic search results.
         * @param {number} [studyDistance] Study distance threshold
         * @param {number} [variableDistance] Variable distance threshold
         * @param {string} [clusteringThresholds] Clustering thresholds as json stringified list of pairs of floats.
         * @param {string} [modelName] OpenAI model name
         * @param {string} [length] Length of synthesis paragraph, in sentences.
         * @param {number} [temperature] Temperature of summary
         * @param {number} [maxTokens] Maximum token size
         * @param {number} [choices] Number of choices for OpenAI to produce.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticSearchCountV1SemanticSearchTotalGet(questionType, term1, term2, cluster, synthesize, filterBy, studyDistance, variableDistance, clusteringThresholds, modelName, length, temperature, maxTokens, choices, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSemanticSearchCountV1SemanticSearchTotalGet(questionType, term1, term2, cluster, synthesize, filterBy, studyDistance, variableDistance, clusteringThresholds, modelName, length, temperature, maxTokens, choices, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Get Semantic Search
         * @param {SemanticSearchType} [questionType] Search query type
         * @param {string} [term1] First term part of the question.
         * @param {string} [term2] Optional second term part of the question.
         * @param {boolean} [cluster] To cluster results or not. Default True.
         * @param {boolean} [synthesize] To synthesize results or not. Default True.
         * @param {string} [filterBy] Filter semantic search results.
         * @param {number} [studyDistance] Study distance threshold
         * @param {number} [variableDistance] Variable distance threshold
         * @param {string} [clusteringThresholds] Clustering thresholds as json stringified list of pairs of floats.
         * @param {string} [modelName] OpenAI model name
         * @param {string} [length] Length of synthesis paragraph, in sentences.
         * @param {number} [temperature] Temperature of summary
         * @param {number} [maxTokens] Maximum token size
         * @param {number} [choices] Number of choices for OpenAI to produce.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticSearchV1SemanticSearchGet(questionType, term1, term2, cluster, synthesize, filterBy, studyDistance, variableDistance, clusteringThresholds, modelName, length, temperature, maxTokens, choices, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSemanticSearchV1SemanticSearchGet(questionType, term1, term2, cluster, synthesize, filterBy, studyDistance, variableDistance, clusteringThresholds, modelName, length, temperature, maxTokens, choices, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * SemanticSearchApi - factory interface
 * @export
 */
exports.SemanticSearchApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.SemanticSearchApiFp(configuration);
    return {
        /**
         * Get semantic search count.
         * @summary Get Semantic Search Count
         * @param {SemanticSearchType} [questionType] Search query type
         * @param {string} [term1] First term part of the question.
         * @param {string} [term2] Optional second term part of the question.
         * @param {boolean} [cluster] To cluster results or not. Default True.
         * @param {boolean} [synthesize] To synthesize results or not. Default True.
         * @param {string} [filterBy] Filter semantic search results.
         * @param {number} [studyDistance] Study distance threshold
         * @param {number} [variableDistance] Variable distance threshold
         * @param {string} [clusteringThresholds] Clustering thresholds as json stringified list of pairs of floats.
         * @param {string} [modelName] OpenAI model name
         * @param {string} [length] Length of synthesis paragraph, in sentences.
         * @param {number} [temperature] Temperature of summary
         * @param {number} [maxTokens] Maximum token size
         * @param {number} [choices] Number of choices for OpenAI to produce.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticSearchCountV1SemanticSearchTotalGet(questionType, term1, term2, cluster, synthesize, filterBy, studyDistance, variableDistance, clusteringThresholds, modelName, length, temperature, maxTokens, choices, options) {
            return localVarFp.getSemanticSearchCountV1SemanticSearchTotalGet(questionType, term1, term2, cluster, synthesize, filterBy, studyDistance, variableDistance, clusteringThresholds, modelName, length, temperature, maxTokens, choices, options).then((request) => request(axios, basePath));
        },
        /**
         * Get semantic search.  Values from semantic search.
         * @summary Get Semantic Search
         * @param {SemanticSearchType} [questionType] Search query type
         * @param {string} [term1] First term part of the question.
         * @param {string} [term2] Optional second term part of the question.
         * @param {boolean} [cluster] To cluster results or not. Default True.
         * @param {boolean} [synthesize] To synthesize results or not. Default True.
         * @param {string} [filterBy] Filter semantic search results.
         * @param {number} [studyDistance] Study distance threshold
         * @param {number} [variableDistance] Variable distance threshold
         * @param {string} [clusteringThresholds] Clustering thresholds as json stringified list of pairs of floats.
         * @param {string} [modelName] OpenAI model name
         * @param {string} [length] Length of synthesis paragraph, in sentences.
         * @param {number} [temperature] Temperature of summary
         * @param {number} [maxTokens] Maximum token size
         * @param {number} [choices] Number of choices for OpenAI to produce.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticSearchV1SemanticSearchGet(questionType, term1, term2, cluster, synthesize, filterBy, studyDistance, variableDistance, clusteringThresholds, modelName, length, temperature, maxTokens, choices, options) {
            return localVarFp.getSemanticSearchV1SemanticSearchGet(questionType, term1, term2, cluster, synthesize, filterBy, studyDistance, variableDistance, clusteringThresholds, modelName, length, temperature, maxTokens, choices, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SemanticSearchApi - object-oriented interface
 * @export
 * @class SemanticSearchApi
 * @extends {BaseAPI}
 */
class SemanticSearchApi extends base_1.BaseAPI {
    /**
     * Get semantic search count.
     * @summary Get Semantic Search Count
     * @param {SemanticSearchApiGetSemanticSearchCountV1SemanticSearchTotalGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    getSemanticSearchCountV1SemanticSearchTotalGet(requestParameters = {}, options) {
        return exports.SemanticSearchApiFp(this.configuration).getSemanticSearchCountV1SemanticSearchTotalGet(requestParameters.questionType, requestParameters.term1, requestParameters.term2, requestParameters.cluster, requestParameters.synthesize, requestParameters.filterBy, requestParameters.studyDistance, requestParameters.variableDistance, requestParameters.clusteringThresholds, requestParameters.modelName, requestParameters.length, requestParameters.temperature, requestParameters.maxTokens, requestParameters.choices, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get semantic search.  Values from semantic search.
     * @summary Get Semantic Search
     * @param {SemanticSearchApiGetSemanticSearchV1SemanticSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SemanticSearchApi
     */
    getSemanticSearchV1SemanticSearchGet(requestParameters = {}, options) {
        return exports.SemanticSearchApiFp(this.configuration).getSemanticSearchV1SemanticSearchGet(requestParameters.questionType, requestParameters.term1, requestParameters.term2, requestParameters.cluster, requestParameters.synthesize, requestParameters.filterBy, requestParameters.studyDistance, requestParameters.variableDistance, requestParameters.clusteringThresholds, requestParameters.modelName, requestParameters.length, requestParameters.temperature, requestParameters.maxTokens, requestParameters.choices, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SemanticSearchApi = SemanticSearchApi;
/**
 * StripeApi - axios parameter creator
 * @export
 */
exports.StripeApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add subscription seat.
         * @summary Add Subscription Seat
         * @param {string} subscriptionId
         * @param {AddSubscriptionSeatIn} addSubscriptionSeatIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsPost: (subscriptionId, addSubscriptionSeatIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'subscriptionId' is not null or undefined
            common_1.assertParamExists('addSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsPost', 'subscriptionId', subscriptionId);
            // verify required parameter 'addSubscriptionSeatIn' is not null or undefined
            common_1.assertParamExists('addSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsPost', 'addSubscriptionSeatIn', addSubscriptionSeatIn);
            const localVarPath = `/v1/stripe/subscriptions/{subscription_id}/seats`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(addSubscriptionSeatIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Start stripe checkout session.
         * @summary Enroll Trial
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollTrialV1StripeEnrollTrialPost: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/stripe/enroll-trial`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get subscription seats.
         * @summary Get Subscription Seats
         * @param {string} subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet: (subscriptionId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'subscriptionId' is not null or undefined
            common_1.assertParamExists('getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet', 'subscriptionId', subscriptionId);
            const localVarPath = `/v1/stripe/subscriptions/{subscription_id}/seats`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Start stripe checkout session.
         * @summary Manage Subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageSubscriptionV1StripeSubscriptionManagePost: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/stripe/subscription-manage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove subscription seat.
         * @summary Remove Subscription Seat
         * @param {string} email
         * @param {string} subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete: (email, subscriptionId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'email' is not null or undefined
            common_1.assertParamExists('removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete', 'email', email);
            // verify required parameter 'subscriptionId' is not null or undefined
            common_1.assertParamExists('removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete', 'subscriptionId', subscriptionId);
            const localVarPath = `/v1/stripe/subscriptions/{subscription_id}/seats/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)))
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * StripeApi - functional programming interface
 * @export
 */
exports.StripeApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.StripeApiAxiosParamCreator(configuration);
    return {
        /**
         * Add subscription seat.
         * @summary Add Subscription Seat
         * @param {string} subscriptionId
         * @param {AddSubscriptionSeatIn} addSubscriptionSeatIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsPost(subscriptionId, addSubscriptionSeatIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsPost(subscriptionId, addSubscriptionSeatIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Start stripe checkout session.
         * @summary Enroll Trial
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollTrialV1StripeEnrollTrialPost(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.enrollTrialV1StripeEnrollTrialPost(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get subscription seats.
         * @summary Get Subscription Seats
         * @param {string} subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(subscriptionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(subscriptionId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Start stripe checkout session.
         * @summary Manage Subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageSubscriptionV1StripeSubscriptionManagePost(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.manageSubscriptionV1StripeSubscriptionManagePost(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove subscription seat.
         * @summary Remove Subscription Seat
         * @param {string} email
         * @param {string} subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(email, subscriptionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(email, subscriptionId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * StripeApi - factory interface
 * @export
 */
exports.StripeApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.StripeApiFp(configuration);
    return {
        /**
         * Add subscription seat.
         * @summary Add Subscription Seat
         * @param {string} subscriptionId
         * @param {AddSubscriptionSeatIn} addSubscriptionSeatIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsPost(subscriptionId, addSubscriptionSeatIn, options) {
            return localVarFp.addSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsPost(subscriptionId, addSubscriptionSeatIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Start stripe checkout session.
         * @summary Enroll Trial
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollTrialV1StripeEnrollTrialPost(options) {
            return localVarFp.enrollTrialV1StripeEnrollTrialPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Get subscription seats.
         * @summary Get Subscription Seats
         * @param {string} subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(subscriptionId, options) {
            return localVarFp.getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Start stripe checkout session.
         * @summary Manage Subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageSubscriptionV1StripeSubscriptionManagePost(options) {
            return localVarFp.manageSubscriptionV1StripeSubscriptionManagePost(options).then((request) => request(axios, basePath));
        },
        /**
         * Remove subscription seat.
         * @summary Remove Subscription Seat
         * @param {string} email
         * @param {string} subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(email, subscriptionId, options) {
            return localVarFp.removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(email, subscriptionId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * StripeApi - object-oriented interface
 * @export
 * @class StripeApi
 * @extends {BaseAPI}
 */
class StripeApi extends base_1.BaseAPI {
    /**
     * Add subscription seat.
     * @summary Add Subscription Seat
     * @param {StripeApiAddSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    addSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsPost(requestParameters, options) {
        return exports.StripeApiFp(this.configuration).addSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsPost(requestParameters.subscriptionId, requestParameters.addSubscriptionSeatIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Start stripe checkout session.
     * @summary Enroll Trial
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    enrollTrialV1StripeEnrollTrialPost(options) {
        return exports.StripeApiFp(this.configuration).enrollTrialV1StripeEnrollTrialPost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get subscription seats.
     * @summary Get Subscription Seats
     * @param {StripeApiGetSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(requestParameters, options) {
        return exports.StripeApiFp(this.configuration).getSubscriptionSeatsV1StripeSubscriptionsSubscriptionIdSeatsGet(requestParameters.subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Start stripe checkout session.
     * @summary Manage Subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    manageSubscriptionV1StripeSubscriptionManagePost(options) {
        return exports.StripeApiFp(this.configuration).manageSubscriptionV1StripeSubscriptionManagePost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove subscription seat.
     * @summary Remove Subscription Seat
     * @param {StripeApiRemoveSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(requestParameters, options) {
        return exports.StripeApiFp(this.configuration).removeSubscriptionSeatV1StripeSubscriptionsSubscriptionIdSeatsEmailDelete(requestParameters.email, requestParameters.subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.StripeApi = StripeApi;
/**
 * StudiesApi - axios parameter creator
 * @export
 */
exports.StudiesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut: (studyId, authorId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut', 'authorId', authorId);
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut: (teamId, studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} studyId
         * @param {BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost: (studyId, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost', 'studyId', studyId);
            // verify required parameter 'bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost' is not null or undefined
            common_1.assertParamExists('bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost', 'bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost', bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost);
            const localVarPath = `/v1/studies/{study_id}/authors/bulk`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost: (teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', 'studyId', studyId);
            // verify required parameter 'bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost' is not null or undefined
            common_1.assertParamExists('bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', 'bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/bulk`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {StudyIn | DoiIn} studyInDoiIn
         * @param {boolean} [updateExisting]
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1StudiesPost: (studyInDoiIn, updateExisting, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyInDoiIn' is not null or undefined
            common_1.assertParamExists('createAStudyV1StudiesPost', 'studyInDoiIn', studyInDoiIn);
            const localVarPath = `/v1/studies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (updateExisting !== undefined) {
                localVarQueryParameter['update_existing'] = updateExisting;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(studyInDoiIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamId
         * @param {StudyIn | DoiIn} studyInDoiIn
         * @param {boolean} [updateExisting]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamIdStudiesPost: (teamId, studyInDoiIn, updateExisting, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createAStudyV1TeamsTeamIdStudiesPost', 'teamId', teamId);
            // verify required parameter 'studyInDoiIn' is not null or undefined
            common_1.assertParamExists('createAStudyV1TeamsTeamIdStudiesPost', 'studyInDoiIn', studyInDoiIn);
            const localVarPath = `/v1/teams/{team_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (updateExisting !== undefined) {
                localVarQueryParameter['update_existing'] = updateExisting;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(studyInDoiIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost: (studyId, modelIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('createModelsV1StudiesStudyIdModelsPost', 'studyId', studyId);
            // verify required parameter 'modelIn' is not null or undefined
            common_1.assertParamExists('createModelsV1StudiesStudyIdModelsPost', 'modelIn', modelIn);
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost: (teamId, studyId, modelIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createModelsV1TeamsTeamIdStudiesStudyIdModelsPost', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('createModelsV1TeamsTeamIdStudiesStudyIdModelsPost', 'studyId', studyId);
            // verify required parameter 'modelIn' is not null or undefined
            common_1.assertParamExists('createModelsV1TeamsTeamIdStudiesStudyIdModelsPost', 'modelIn', modelIn);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1StudiesStudyIdDelete: (studyId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('deleteStudyV1StudiesStudyIdDelete', 'studyId', studyId);
            const localVarPath = `/v1/studies/{study_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamIdStudiesStudyIdDelete: (teamId, studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteStudyV1TeamsTeamIdStudiesStudyIdDelete', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('deleteStudyV1TeamsTeamIdStudiesStudyIdDelete', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1StudiesStudyIdGet: (studyId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('getStudyV1StudiesStudyIdGet', 'studyId', studyId);
            const localVarPath = `/v1/studies/{study_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamIdStudiesStudyIdGet: (teamId, studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getStudyV1TeamsTeamIdStudiesStudyIdGet', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('getStudyV1TeamsTeamIdStudiesStudyIdGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet: (studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1StudiesStudyIdAssociationsGet', 'studyId', studyId);
            const localVarPath = `/v1/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/studies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1StudiesStudyIdAuthorsGet: (studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAuthorsV1StudiesStudyIdAuthorsGet', 'studyId', studyId);
            const localVarPath = `/v1/studies/{study_id}/authors`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet: (studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listModelsInStudyV1StudiesStudyIdModelsGet', 'studyId', studyId);
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1StudiesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/studies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamIdStudiesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listStudiesV1TeamsTeamIdStudiesGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserStudiesV1UsersUserIdStudiesGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/studies`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1StudiesStudyIdPatch: (studyId, patchStudyOpArrayPatchStudyOp, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('patchStudyEndpointV1StudiesStudyIdPatch', 'studyId', studyId);
            // verify required parameter 'patchStudyOpArrayPatchStudyOp' is not null or undefined
            common_1.assertParamExists('patchStudyEndpointV1StudiesStudyIdPatch', 'patchStudyOpArrayPatchStudyOp', patchStudyOpArrayPatchStudyOp);
            const localVarPath = `/v1/studies/{study_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchStudyOpArrayPatchStudyOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamId
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch: (teamId, studyId, patchStudyOpArrayPatchStudyOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch', 'studyId', studyId);
            // verify required parameter 'patchStudyOpArrayPatchStudyOp' is not null or undefined
            common_1.assertParamExists('patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch', 'patchStudyOpArrayPatchStudyOp', patchStudyOpArrayPatchStudyOp);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchStudyOpArrayPatchStudyOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1StudiesStudyIdPublishPost: (studyId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('publishStudyV1StudiesStudyIdPublishPost', 'studyId', studyId);
            const localVarPath = `/v1/studies/{study_id}/publish`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost: (teamId, studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/publish`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete: (studyId, authorId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete', 'authorId', authorId);
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete: (teamId, studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete: (studyId, tagObjectId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete', 'studyId', studyId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete: (teamId, studyId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete', 'studyId', studyId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut: (studyId, tagObjectId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut', 'studyId', studyId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut: (teamId, studyId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut', 'studyId', studyId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * StudiesApi - functional programming interface
 * @export
 */
exports.StudiesApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.StudiesApiAxiosParamCreator(configuration);
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} studyId
         * @param {BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(studyId, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(studyId, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {StudyIn | DoiIn} studyInDoiIn
         * @param {boolean} [updateExisting]
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1StudiesPost(studyInDoiIn, updateExisting, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAStudyV1StudiesPost(studyInDoiIn, updateExisting, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamId
         * @param {StudyIn | DoiIn} studyInDoiIn
         * @param {boolean} [updateExisting]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamIdStudiesPost(teamId, studyInDoiIn, updateExisting, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAStudyV1TeamsTeamIdStudiesPost(teamId, studyInDoiIn, updateExisting, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1StudiesStudyIdDelete(studyId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteStudyV1StudiesStudyIdDelete(studyId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1StudiesStudyIdGet(studyId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStudyV1StudiesStudyIdGet(studyId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1StudiesStudyIdAuthorsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthorsV1StudiesStudyIdAuthorsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1StudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listStudiesV1StudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchStudyEndpointV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamId
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1StudiesStudyIdPublishPost(studyId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.publishStudyV1StudiesStudyIdPublishPost(studyId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId, tagObjectId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId, tagObjectId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId, tagObjectId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId, tagObjectId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * StudiesApi - factory interface
 * @export
 */
exports.StudiesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.StudiesApiFp(configuration);
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, teamId, options) {
            return localVarFp.addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options) {
            return localVarFp.addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} studyId
         * @param {BodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(studyId, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId, options) {
            return localVarFp.bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(studyId, bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options) {
            return localVarFp.bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {StudyIn | DoiIn} studyInDoiIn
         * @param {boolean} [updateExisting]
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1StudiesPost(studyInDoiIn, updateExisting, teamId, options) {
            return localVarFp.createAStudyV1StudiesPost(studyInDoiIn, updateExisting, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamId
         * @param {StudyIn | DoiIn} studyInDoiIn
         * @param {boolean} [updateExisting]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamIdStudiesPost(teamId, studyInDoiIn, updateExisting, options) {
            return localVarFp.createAStudyV1TeamsTeamIdStudiesPost(teamId, studyInDoiIn, updateExisting, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options) {
            return localVarFp.createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options) {
            return localVarFp.createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1StudiesStudyIdDelete(studyId, teamId, options) {
            return localVarFp.deleteStudyV1StudiesStudyIdDelete(studyId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options) {
            return localVarFp.deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1StudiesStudyIdGet(studyId, teamId, options) {
            return localVarFp.getStudyV1StudiesStudyIdGet(studyId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options) {
            return localVarFp.getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1StudiesStudyIdAssociationsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options) {
            return localVarFp.listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1StudiesStudyIdAuthorsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamId, options) {
            return localVarFp.listAuthorsV1StudiesStudyIdAuthorsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsInStudyV1StudiesStudyIdModelsGet(studyId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1StudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamId, options) {
            return localVarFp.listStudiesV1StudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return localVarFp.listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options) {
            return localVarFp.listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, teamId, options) {
            return localVarFp.patchStudyEndpointV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamId
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options) {
            return localVarFp.patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} studyId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1StudiesStudyIdPublishPost(studyId, teamId, options) {
            return localVarFp.publishStudyV1StudiesStudyIdPublishPost(studyId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options) {
            return localVarFp.publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, teamId, options) {
            return localVarFp.removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options) {
            return localVarFp.removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId, tagObjectId, teamId, options) {
            return localVarFp.removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId, tagObjectId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options) {
            return localVarFp.removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId, tagObjectId, teamId, options) {
            return localVarFp.tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId, tagObjectId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options) {
            return localVarFp.tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * StudiesApi - object-oriented interface
 * @export
 * @class StudiesApi
 * @extends {BaseAPI}
 */
class StudiesApi extends base_1.BaseAPI {
    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {StudiesApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters.studyId, requestParameters.authorId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {StudiesApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(requestParameters.teamId, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add an author to a study.
     * @summary Bulk Add Authors To Study
     * @param {StudiesApiBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).bulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost(requestParameters.studyId, requestParameters.bodyBulkAddAuthorsToStudyV1StudiesStudyIdAuthorsBulkPost, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add an author to a study.
     * @summary Bulk Add Authors To Study
     * @param {StudiesApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(requestParameters.teamId, requestParameters.studyId, requestParameters.bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Study.
     * @summary Create A Study.
     * @param {StudiesApiCreateAStudyV1StudiesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    createAStudyV1StudiesPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).createAStudyV1StudiesPost(requestParameters.studyInDoiIn, requestParameters.updateExisting, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Study.
     * @summary Create A Study.
     * @param {StudiesApiCreateAStudyV1TeamsTeamIdStudiesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    createAStudyV1TeamsTeamIdStudiesPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).createAStudyV1TeamsTeamIdStudiesPost(requestParameters.teamId, requestParameters.studyInDoiIn, requestParameters.updateExisting, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {StudiesApiCreateModelsV1StudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    createModelsV1StudiesStudyIdModelsPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).createModelsV1StudiesStudyIdModelsPost(requestParameters.studyId, requestParameters.modelIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {StudiesApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(requestParameters.teamId, requestParameters.studyId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Study
     * @param {StudiesApiDeleteStudyV1StudiesStudyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    deleteStudyV1StudiesStudyIdDelete(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).deleteStudyV1StudiesStudyIdDelete(requestParameters.studyId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Study
     * @param {StudiesApiDeleteStudyV1TeamsTeamIdStudiesStudyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(requestParameters.teamId, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Study.
     * @summary Get Study
     * @param {StudiesApiGetStudyV1StudiesStudyIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    getStudyV1StudiesStudyIdGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).getStudyV1StudiesStudyIdGet(requestParameters.studyId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Study.
     * @summary Get Study
     * @param {StudiesApiGetStudyV1TeamsTeamIdStudiesStudyIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    getStudyV1TeamsTeamIdStudiesStudyIdGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).getStudyV1TeamsTeamIdStudiesStudyIdGet(requestParameters.teamId, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {StudiesApiListAssociationsV1StudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {StudiesApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {StudiesApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {StudiesApiListAuthenticatedUserStudiesV1UserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters = {}, options) {
        return exports.StudiesApiFp(this.configuration).listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a study\'s authors.
     * @summary List Authors
     * @param {StudiesApiListAuthorsV1StudiesStudyIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listAuthorsV1StudiesStudyIdAuthorsGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listAuthorsV1StudiesStudyIdAuthorsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a study\'s authors.
     * @summary List Authors
     * @param {StudiesApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {StudiesApiListModelsInStudyV1StudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters.studyId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {StudiesApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Studies.
     * @summary List Studies
     * @param {StudiesApiListStudiesV1StudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listStudiesV1StudiesGet(requestParameters = {}, options) {
        return exports.StudiesApiFp(this.configuration).listStudiesV1StudiesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Studies.
     * @summary List Studies
     * @param {StudiesApiListStudiesV1TeamsTeamIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listStudiesV1TeamsTeamIdStudiesGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listStudiesV1TeamsTeamIdStudiesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {StudiesApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {StudiesApiListUserStudiesV1UsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listUserStudiesV1UsersUserIdStudiesGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listUserStudiesV1UsersUserIdStudiesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Study resource with partial update.
     * @summary Patch Study Endpoint
     * @param {StudiesApiPatchStudyEndpointV1StudiesStudyIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    patchStudyEndpointV1StudiesStudyIdPatch(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).patchStudyEndpointV1StudiesStudyIdPatch(requestParameters.studyId, requestParameters.patchStudyOpArrayPatchStudyOp, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Study resource with partial update.
     * @summary Patch Study Endpoint
     * @param {StudiesApiPatchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(requestParameters.teamId, requestParameters.studyId, requestParameters.patchStudyOpArrayPatchStudyOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Publish the study making it visible to other users.
     * @summary Publish Study
     * @param {StudiesApiPublishStudyV1StudiesStudyIdPublishPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    publishStudyV1StudiesStudyIdPublishPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).publishStudyV1StudiesStudyIdPublishPost(requestParameters.studyId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Publish the study making it visible to other users.
     * @summary Publish Study
     * @param {StudiesApiPublishStudyV1TeamsTeamIdStudiesStudyIdPublishPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(requestParameters.teamId, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {StudiesApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters.studyId, requestParameters.authorId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {StudiesApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(requestParameters.teamId, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the study with object with provided id.
     * @summary Remove Object Tag From Study
     * @param {StudiesApiRemoveObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters.studyId, requestParameters.tagObjectId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the study with object with provided id.
     * @summary Remove Object Tag From Study
     * @param {StudiesApiRemoveObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters.teamId, requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the study with object with provided id.
     * @summary Tag Study With Object
     * @param {StudiesApiTagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(requestParameters.studyId, requestParameters.tagObjectId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the study with object with provided id.
     * @summary Tag Study With Object
     * @param {StudiesApiTagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(requestParameters.teamId, requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.StudiesApi = StudiesApi;
/**
 * StudyMetadataApi - axios parameter creator
 * @export
 */
exports.StudyMetadataApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get study metadata from OpenAlex and DynamoDB via dois.
         * @summary Get Study Metadata From Openalex For A Given List Of Dois.
         * @param {StudyMetadataIn} studyMetadataIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPost: (studyMetadataIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyMetadataIn' is not null or undefined
            common_1.assertParamExists('getStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPost', 'studyMetadataIn', studyMetadataIn);
            const localVarPath = `/v1/study-metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(studyMetadataIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * StudyMetadataApi - functional programming interface
 * @export
 */
exports.StudyMetadataApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.StudyMetadataApiAxiosParamCreator(configuration);
    return {
        /**
         * Get study metadata from OpenAlex and DynamoDB via dois.
         * @summary Get Study Metadata From Openalex For A Given List Of Dois.
         * @param {StudyMetadataIn} studyMetadataIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPost(studyMetadataIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPost(studyMetadataIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * StudyMetadataApi - factory interface
 * @export
 */
exports.StudyMetadataApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.StudyMetadataApiFp(configuration);
    return {
        /**
         * Get study metadata from OpenAlex and DynamoDB via dois.
         * @summary Get Study Metadata From Openalex For A Given List Of Dois.
         * @param {StudyMetadataIn} studyMetadataIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPost(studyMetadataIn, options) {
            return localVarFp.getStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPost(studyMetadataIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * StudyMetadataApi - object-oriented interface
 * @export
 * @class StudyMetadataApi
 * @extends {BaseAPI}
 */
class StudyMetadataApi extends base_1.BaseAPI {
    /**
     * Get study metadata from OpenAlex and DynamoDB via dois.
     * @summary Get Study Metadata From Openalex For A Given List Of Dois.
     * @param {StudyMetadataApiGetStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudyMetadataApi
     */
    getStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPost(requestParameters, options) {
        return exports.StudyMetadataApiFp(this.configuration).getStudyMetadataFromOpenAlexForAGivenListOfDoisV1StudyMetadataPost(requestParameters.studyMetadataIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.StudyMetadataApi = StudyMetadataApi;
/**
 * TeamsApi - axios parameter creator
 * @export
 */
exports.TeamsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add a user to a team by user_id.
         * @summary Add A Role To A Team.
         * @param {string} teamId
         * @param {RoleIn | Array<RoleIn>} roleInArrayRoleIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addARoleToATeamV1TeamsTeamIdRolesPost: (teamId, roleInArrayRoleIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('addARoleToATeamV1TeamsTeamIdRolesPost', 'teamId', teamId);
            // verify required parameter 'roleInArrayRoleIn' is not null or undefined
            common_1.assertParamExists('addARoleToATeamV1TeamsTeamIdRolesPost', 'roleInArrayRoleIn', roleInArrayRoleIn);
            const localVarPath = `/v1/teams/{team_id}/roles`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(roleInArrayRoleIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a user to a team role.
         * @summary Add A User To A Role.
         * @param {string} userId
         * @param {string} roleName
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut: (userId, roleName, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut', 'userId', userId);
            // verify required parameter 'roleName' is not null or undefined
            common_1.assertParamExists('addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut', 'roleName', roleName);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/roles/{role_name}/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"role_name"}}`, encodeURIComponent(String(roleName)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a user to a team by user_id.
         * @summary Add A User To A Team.
         * @param {string} userId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAUserToATeamV1TeamsTeamIdUsersUserIdPut: (userId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('addAUserToATeamV1TeamsTeamIdUsersUserIdPut', 'userId', userId);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('addAUserToATeamV1TeamsTeamIdUsersUserIdPut', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut: (teamId, studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut: (teamId, dashboardId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut', 'teamId', teamId);
            // verify required parameter 'dashboardId' is not null or undefined
            common_1.assertParamExists('addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut', 'dashboardId', dashboardId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut: (teamId, datasetId, featureId, index, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut: (teamId, datasetId, parentId, reconcileFeatures, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut', 'datasetId', datasetId);
            // verify required parameter 'parentId' is not null or undefined
            common_1.assertParamExists('addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut', 'parentId', parentId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (reconcileFeatures !== undefined) {
                localVarQueryParameter['reconcile_features'] = reconcileFeatures;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: (teamId, datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost: (teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', 'studyId', studyId);
            // verify required parameter 'bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost' is not null or undefined
            common_1.assertParamExists('bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', 'bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost', bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/bulk`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamId
         * @param {StudyIn | DoiIn} studyInDoiIn
         * @param {boolean} [updateExisting]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamIdStudiesPost: (teamId, studyInDoiIn, updateExisting, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createAStudyV1TeamsTeamIdStudiesPost', 'teamId', teamId);
            // verify required parameter 'studyInDoiIn' is not null or undefined
            common_1.assertParamExists('createAStudyV1TeamsTeamIdStudiesPost', 'studyInDoiIn', studyInDoiIn);
            const localVarPath = `/v1/teams/{team_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (updateExisting !== undefined) {
                localVarQueryParameter['update_existing'] = updateExisting;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(studyInDoiIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} teamId
         * @param {string} userId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1TeamsTeamIdUsersPost: (teamId, userId, updateProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createAUserByCognitoIdV1TeamsTeamIdUsersPost', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('createAUserByCognitoIdV1TeamsTeamIdUsersPost', 'userId', userId);
            // verify required parameter 'updateProfileIn' is not null or undefined
            common_1.assertParamExists('createAUserByCognitoIdV1TeamsTeamIdUsersPost', 'updateProfileIn', updateProfileIn);
            const localVarPath = `/v1/teams/{team_id}/users`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(updateProfileIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1TeamsTeamIdUserPost: (teamId, userProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createAUserFromCredentialsV1TeamsTeamIdUserPost', 'teamId', teamId);
            // verify required parameter 'userProfileIn' is not null or undefined
            common_1.assertParamExists('createAUserFromCredentialsV1TeamsTeamIdUserPost', 'userProfileIn', userProfileIn);
            const localVarPath = `/v1/teams/{team_id}/user`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(userProfileIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamId
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamIdVariablesPost: (teamId, variableIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createAVariableV1TeamsTeamIdVariablesPost', 'teamId', teamId);
            // verify required parameter 'variableIn' is not null or undefined
            common_1.assertParamExists('createAVariableV1TeamsTeamIdVariablesPost', 'variableIn', variableIn);
            const localVarPath = `/v1/teams/{team_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(variableIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost: (teamId, datasetId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost', 'datasetId', datasetId);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost', 'featureIn', featureIn);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost: (teamId, datasetId, associationInArrayAssociationIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost', 'datasetId', datasetId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost: (teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost', 'modelId', modelId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamId
         * @param {AuthorIn} authorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamIdAuthorsPost: (teamId, authorIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createAuthorV1TeamsTeamIdAuthorsPost', 'teamId', teamId);
            // verify required parameter 'authorIn' is not null or undefined
            common_1.assertParamExists('createAuthorV1TeamsTeamIdAuthorsPost', 'authorIn', authorIn);
            const localVarPath = `/v1/teams/{team_id}/authors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(authorIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {string} teamId
         * @param {ConceptIn} conceptIn
         * @param {boolean} [overwriteExisting]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1TeamsTeamIdConceptsPost: (teamId, conceptIn, overwriteExisting, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createConceptV1TeamsTeamIdConceptsPost', 'teamId', teamId);
            // verify required parameter 'conceptIn' is not null or undefined
            common_1.assertParamExists('createConceptV1TeamsTeamIdConceptsPost', 'conceptIn', conceptIn);
            const localVarPath = `/v1/teams/{team_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (overwriteExisting !== undefined) {
                localVarQueryParameter['overwrite_existing'] = overwriteExisting;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(conceptIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {string} teamId
         * @param {DashboardIn} dashboardIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1TeamsTeamIdDashboardsPost: (teamId, dashboardIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createDashboardPostV1TeamsTeamIdDashboardsPost', 'teamId', teamId);
            // verify required parameter 'dashboardIn' is not null or undefined
            common_1.assertParamExists('createDashboardPostV1TeamsTeamIdDashboardsPost', 'dashboardIn', dashboardIn);
            const localVarPath = `/v1/teams/{team_id}/dashboards`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(dashboardIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamIdDatasetsPost: (teamId, datasetIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createDatasetV1TeamsTeamIdDatasetsPost', 'teamId', teamId);
            // verify required parameter 'datasetIn' is not null or undefined
            common_1.assertParamExists('createDatasetV1TeamsTeamIdDatasetsPost', 'datasetIn', datasetIn);
            const localVarPath = `/v1/teams/{team_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(datasetIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamIdFeaturesPost: (teamId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createFeatureV1TeamsTeamIdFeaturesPost', 'teamId', teamId);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('createFeatureV1TeamsTeamIdFeaturesPost', 'featureIn', featureIn);
            const localVarPath = `/v1/teams/{team_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {string} teamId
         * @param {IntegrationIn} integrationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1TeamsTeamIdIntegrationsPost: (teamId, integrationIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createIntegrationV1TeamsTeamIdIntegrationsPost', 'teamId', teamId);
            // verify required parameter 'integrationIn' is not null or undefined
            common_1.assertParamExists('createIntegrationV1TeamsTeamIdIntegrationsPost', 'integrationIn', integrationIn);
            const localVarPath = `/v1/teams/{team_id}/integrations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(integrationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new message.
         * @summary Create Message
         * @param {string} teamId
         * @param {MessageIn} messageIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1TeamsTeamIdMessagesPost: (teamId, messageIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createMessageV1TeamsTeamIdMessagesPost', 'teamId', teamId);
            // verify required parameter 'messageIn' is not null or undefined
            common_1.assertParamExists('createMessageV1TeamsTeamIdMessagesPost', 'messageIn', messageIn);
            const localVarPath = `/v1/teams/{team_id}/messages`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(messageIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost: (teamId, studyId, modelIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createModelsV1TeamsTeamIdStudiesStudyIdModelsPost', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('createModelsV1TeamsTeamIdStudiesStudyIdModelsPost', 'studyId', studyId);
            // verify required parameter 'modelIn' is not null or undefined
            common_1.assertParamExists('createModelsV1TeamsTeamIdStudiesStudyIdModelsPost', 'modelIn', modelIn);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create mulitple Authors.
         * @summary Create Multiple Authors.
         * @param {string} teamId
         * @param {Array<AuthorIn> | AuthorIn} arrayAuthorInAuthorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost: (teamId, arrayAuthorInAuthorIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost', 'teamId', teamId);
            // verify required parameter 'arrayAuthorInAuthorIn' is not null or undefined
            common_1.assertParamExists('createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost', 'arrayAuthorInAuthorIn', arrayAuthorInAuthorIn);
            const localVarPath = `/v1/teams/{team_id}/authors/bulk`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(arrayAuthorInAuthorIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamId
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamIdVariablesBulkPost: (teamId, arrayVariableInVariableIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createMultipleVariablesV1TeamsTeamIdVariablesBulkPost', 'teamId', teamId);
            // verify required parameter 'arrayVariableInVariableIn' is not null or undefined
            common_1.assertParamExists('createMultipleVariablesV1TeamsTeamIdVariablesBulkPost', 'arrayVariableInVariableIn', arrayVariableInVariableIn);
            const localVarPath = `/v1/teams/{team_id}/variables/bulk`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(arrayVariableInVariableIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete: (teamId, modelId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete', 'modelId', modelId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete', 'associationId', associationId);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete: (teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'modelId', modelId);
            // verify required parameter 'bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', 'bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete', bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete: (teamId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete', 'teamId', teamId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1TeamsTeamIdConceptsConceptIdDelete: (teamId, conceptId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteConceptV1TeamsTeamIdConceptsConceptIdDelete', 'teamId', teamId);
            // verify required parameter 'conceptId' is not null or undefined
            common_1.assertParamExists('deleteConceptV1TeamsTeamIdConceptsConceptIdDelete', 'conceptId', conceptId);
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete: (teamId, dashboardId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete', 'teamId', teamId);
            // verify required parameter 'dashboardId' is not null or undefined
            common_1.assertParamExists('deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete', 'dashboardId', dashboardId);
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete: (teamId, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete: (teamId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete', 'teamId', teamId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete: (teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'datasetId', datasetId);
            // verify required parameter 'bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', 'bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete', bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamIdModelsModelIdDelete: (teamId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteModelV1TeamsTeamIdModelsModelIdDelete', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteModelV1TeamsTeamIdModelsModelIdDelete', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamIdStudiesStudyIdDelete: (teamId, studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteStudyV1TeamsTeamIdStudiesStudyIdDelete', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('deleteStudyV1TeamsTeamIdStudiesStudyIdDelete', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamIdVariablesVariableIdDelete: (teamId, variableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteVariableV1TeamsTeamIdVariablesVariableIdDelete', 'teamId', teamId);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('deleteVariableV1TeamsTeamIdVariablesVariableIdDelete', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet: (teamId, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {ResourceFlagIn} resourceFlagIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost: (teamId, associationId, resourceFlagIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost', 'teamId', teamId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost', 'associationId', associationId);
            // verify required parameter 'resourceFlagIn' is not null or undefined
            common_1.assertParamExists('flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost', 'resourceFlagIn', resourceFlagIn);
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/flags`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(resourceFlagIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet: (teamId, associationId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet', 'teamId', teamId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet', 'associationId', associationId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch the authenticated user\'s team or default.
         * @summary Get Authenticated User\'S Teams
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet: (teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/teams`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {string} teamId
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [trialExpireDate] Date the trial expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1TeamsTeamIdUserGet: (teamId, includeAvatar, trialExpireDate, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getAuthenticatedUserV1TeamsTeamIdUserGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            if (trialExpireDate !== undefined) {
                localVarQueryParameter['trial_expire_date'] = trialExpireDate;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamIdAuthorsAuthorIdGet: (teamId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getAuthorV1TeamsTeamIdAuthorsAuthorIdGet', 'teamId', teamId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('getAuthorV1TeamsTeamIdAuthorsAuthorIdGet', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1TeamsTeamIdGraphConceptGraphGet: (teamId, minRelationshipStrength, tags, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getConceptGraphV1TeamsTeamIdGraphConceptGraphGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/graph/concept_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (minRelationshipStrength !== undefined) {
                localVarQueryParameter['min_relationship_strength'] = minRelationshipStrength;
            }
            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch concept relationships.
         * @summary Get Concept Relationships
         * @param {string} conceptId
         * @param {string} teamId
         * @param {boolean} [topPercentileLimit] Flag for limiting to top percentile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGet: (conceptId, teamId, topPercentileLimit, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptId' is not null or undefined
            common_1.assertParamExists('getConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGet', 'conceptId', conceptId);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}/relationships`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (topPercentileLimit !== undefined) {
                localVarQueryParameter['top_percentile_limit'] = topPercentileLimit;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1TeamsTeamIdConceptsConceptIdGet: (teamId, conceptId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getConceptV1TeamsTeamIdConceptsConceptIdGet', 'teamId', teamId);
            // verify required parameter 'conceptId' is not null or undefined
            common_1.assertParamExists('getConceptV1TeamsTeamIdConceptsConceptIdGet', 'conceptId', conceptId);
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1TeamsTeamIdDashboardsDashboardIdGet: (teamId, dashboardId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getDashboardV1TeamsTeamIdDashboardsDashboardIdGet', 'teamId', teamId);
            // verify required parameter 'dashboardId' is not null or undefined
            common_1.assertParamExists('getDashboardV1TeamsTeamIdDashboardsDashboardIdGet', 'dashboardId', dashboardId);
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet: (teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/graph/dataset_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamIdDatasetsDatasetIdGet: (teamId, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getDatasetV1TeamsTeamIdDatasetsDatasetIdGet', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('getDatasetV1TeamsTeamIdDatasetsDatasetIdGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get roles on a team.
         * @summary Get Existing Roles On A Team.
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExistingRolesOnATeamV1TeamsTeamIdRolesGet: (teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getExistingRolesOnATeamV1TeamsTeamIdRolesGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/roles`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamIdFeaturesFeatureIdGet: (teamId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getFeatureV1TeamsTeamIdFeaturesFeatureIdGet', 'teamId', teamId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('getFeatureV1TeamsTeamIdFeaturesFeatureIdGet', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get metrics on the graph.
         * @summary Get Graph Metrics
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGraphMetricsV1TeamsTeamIdMetricsGraphGet: (teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getGraphMetricsV1TeamsTeamIdMetricsGraphGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/metrics/graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} teamId
         * @param {string} integrationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet: (teamId, integrationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet', 'teamId', teamId);
            // verify required parameter 'integrationId' is not null or undefined
            common_1.assertParamExists('getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet', 'integrationId', integrationId);
            const localVarPath = `/v1/teams/{team_id}/integrations/{integration_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationsV1TeamsTeamIdIntegrationsGet: (teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getIntegrationsV1TeamsTeamIdIntegrationsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/integrations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} teamId
         * @param {string} messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1TeamsTeamIdMessagesMessageIdGet: (teamId, messageId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getMessageV1TeamsTeamIdMessagesMessageIdGet', 'teamId', teamId);
            // verify required parameter 'messageId' is not null or undefined
            common_1.assertParamExists('getMessageV1TeamsTeamIdMessagesMessageIdGet', 'messageId', messageId);
            const localVarPath = `/v1/teams/{team_id}/messages/{message_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet: (metricId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'metricId' is not null or undefined
            common_1.assertParamExists('getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet', 'metricId', metricId);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/graph/metrics/{metric_id}`
                .replace(`{${"metric_id"}}`, encodeURIComponent(String(metricId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1
         * @param {string} metricId2
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get: (metricId1, metricId2, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'metricId1' is not null or undefined
            common_1.assertParamExists('getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get', 'metricId1', metricId1);
            // verify required parameter 'metricId2' is not null or undefined
            common_1.assertParamExists('getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get', 'metricId2', metricId2);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/graph/metrics/{metric_id_1}/relationship/{metric_id_2}`
                .replace(`{${"metric_id_1"}}`, encodeURIComponent(String(metricId1)))
                .replace(`{${"metric_id_2"}}`, encodeURIComponent(String(metricId2)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamIdModelsModelIdGet: (teamId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getModelV1TeamsTeamIdModelsModelIdGet', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('getModelV1TeamsTeamIdModelsModelIdGet', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get pending invites of a team.
         * @summary Get Pending Invites Of A Team.
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet: (teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/invites`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet: (teamId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet', 'teamId', teamId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet', 'associationId', associationId);
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/direction`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet: (teamId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet', 'teamId', teamId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet', 'associationId', associationId);
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/reproducibility`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet: (teamId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet', 'teamId', teamId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet', 'associationId', associationId);
            const localVarPath = `/v1/teams/{team_id}/associations/{association_id}/strength`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} teamId
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet: (teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/graph/semantic_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (topic1 !== undefined) {
                localVarQueryParameter['topic_1'] = topic1;
            }
            if (topic2 !== undefined) {
                localVarQueryParameter['topic_2'] = topic2;
            }
            if (ids1) {
                localVarQueryParameter['ids_1'] = ids1;
            }
            if (ids2) {
                localVarQueryParameter['ids_2'] = ids2;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (minCount !== undefined) {
                localVarQueryParameter['min_count'] = minCount;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch single topic semantic graph.
         * @summary Get Semantic Topic Graph
         * @param {string} teamId
         * @param {SemanticTopicGraphIn} semanticTopicGraphIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPost: (teamId, semanticTopicGraphIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPost', 'teamId', teamId);
            // verify required parameter 'semanticTopicGraphIn' is not null or undefined
            common_1.assertParamExists('getSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPost', 'semanticTopicGraphIn', semanticTopicGraphIn);
            const localVarPath = `/v1/teams/{team_id}/graph/semantic_topic_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(semanticTopicGraphIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamIdStudiesStudyIdGet: (teamId, studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getStudyV1TeamsTeamIdStudiesStudyIdGet', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('getStudyV1TeamsTeamIdStudiesStudyIdGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId
         * @param {string} teamId
         * @param {string} [directedAt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet: (relationshipId, teamId, directedAt, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'relationshipId' is not null or undefined
            common_1.assertParamExists('getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet', 'relationshipId', relationshipId);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/relationships/{relationship_id}/synthesis`
                .replace(`{${"relationship_id"}}`, encodeURIComponent(String(relationshipId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (directedAt !== undefined) {
                localVarQueryParameter['directed_at'] = directedAt;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch topic graph.
         * @summary Get Topic Graph
         * @param {string} teamId
         * @param {number} [numRelationships] Number of relationships to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicGraphV1TeamsTeamIdGraphTopicGraphGet: (teamId, numRelationships, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getTopicGraphV1TeamsTeamIdGraphTopicGraphGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/graph/topic_graph`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (numRelationships !== undefined) {
                localVarQueryParameter['num_relationships'] = numRelationships;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch topic node graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet: (topicId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'topicId' is not null or undefined
            common_1.assertParamExists('getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet', 'topicId', topicId);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/graph/topics/{topic_id}`
                .replace(`{${"topic_id"}}`, encodeURIComponent(String(topicId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1
         * @param {string} topicId2
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get: (topicId1, topicId2, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'topicId1' is not null or undefined
            common_1.assertParamExists('getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get', 'topicId1', topicId1);
            // verify required parameter 'topicId2' is not null or undefined
            common_1.assertParamExists('getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get', 'topicId2', topicId2);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/graph/topics/{topic_id_1}/relationship/{topic_id_2}`
                .replace(`{${"topic_id_1"}}`, encodeURIComponent(String(topicId1)))
                .replace(`{${"topic_id_2"}}`, encodeURIComponent(String(topicId2)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} teamId
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1TeamsTeamIdUsersUserIdGet: (teamId, userId, includeAvatar, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getUserV1TeamsTeamIdUsersUserIdGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('getUserV1TeamsTeamIdUsersUserIdGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get users with role.
         * @summary Get Users Of A Role.
         * @param {string} roleName
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet: (roleName, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'roleName' is not null or undefined
            common_1.assertParamExists('getUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet', 'roleName', roleName);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/roles/{role_name}/users`
                .replace(`{${"role_name"}}`, encodeURIComponent(String(roleName)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} teamId
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1TeamsTeamIdUsersGet: (teamId, email, includeAvatar, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getUsersV1TeamsTeamIdUsersGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/users`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamIdVariablesVariableIdGet: (teamId, variableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getVariableV1TeamsTeamIdVariablesVariableIdGet', 'teamId', teamId);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('getVariableV1TeamsTeamIdVariablesVariableIdGet', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a user to a team by email.
         * @summary Invite An Email To The Team.
         * @param {string} teamId
         * @param {UserInvite} userInvite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost: (teamId, userInvite, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost', 'teamId', teamId);
            // verify required parameter 'userInvite' is not null or undefined
            common_1.assertParamExists('inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost', 'userInvite', userInvite);
            const localVarPath = `/v1/teams/{team_id}/invites`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(userInvite, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_id}/user/studies/{study_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdAssociationsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdAssociationsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            if (conceptRelationship !== undefined) {
                localVarQueryParameter['concept_relationship'] = conceptRelationship;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet: (teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet: (teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet', 'teamId', teamId);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdAuthorsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthorsV1TeamsTeamIdAuthorsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/authors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1TeamsTeamIdConceptsGet: (teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listConceptsV1TeamsTeamIdConceptsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (minRelationshipStrength !== undefined) {
                localVarQueryParameter['min_relationship_strength'] = minRelationshipStrength;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet: (teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet', 'teamId', teamId);
            // verify required parameter 'dashboardId' is not null or undefined
            common_1.assertParamExists('listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet', 'dashboardId', dashboardId);
            const localVarPath = `/v1/teams/{team_id}/dashboards/{dashboard_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dashboard_id"}}`, encodeURIComponent(String(dashboardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdDashboardsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listDashboardsV1TeamsTeamIdDashboardsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/dashboards`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet: (teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet', 'teamId', teamId);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/dashboards`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/parents`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamIdDatasetsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listDatasetsV1TeamsTeamIdDatasetsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamIdFeaturesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listFeaturesV1TeamsTeamIdFeaturesGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet: (teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet: (teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamIdModelsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listModelsV1TeamsTeamIdModelsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List relationships.
         * @summary List Relationships
         * @param {string} teamId
         * @param {GraphSearchDirection} [direction] Optional directionality.
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipsV1TeamsTeamIdRelationshipsGet: (teamId, direction, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listRelationshipsV1TeamsTeamIdRelationshipsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/relationships`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (directionality !== undefined) {
                localVarQueryParameter['directionality'] = directionality;
            }
            if (originQuery !== undefined) {
                localVarQueryParameter['origin_query'] = originQuery;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamIdStudiesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listStudiesV1TeamsTeamIdStudiesGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listUserModelsV1TeamsTeamIdUsersUserIdModelsGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserModelsV1TeamsTeamIdUsersUserIdModelsGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamIdVariablesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listVariablesV1TeamsTeamIdVariablesGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Merge a variable with other ids.
         * @summary Merge Variable Post
         * @param {string} teamId
         * @param {string} variableId
         * @param {BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost} bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost: (teamId, variableId, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost', 'teamId', teamId);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost', 'variableId', variableId);
            // verify required parameter 'bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost' is not null or undefined
            common_1.assertParamExists('mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost', 'bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost', bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost);
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/merge`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch: (teamId, modelId, bulkPatchAssociationOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch', 'modelId', modelId);
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch', 'bulkPatchAssociationOp', bulkPatchAssociationOp);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bulkPatchAssociationOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {PatchConceptOp | Array<PatchConceptOp>} patchConceptOpArrayPatchConceptOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConceptV1TeamsTeamIdConceptsConceptIdPatch: (teamId, conceptId, patchConceptOpArrayPatchConceptOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('patchConceptV1TeamsTeamIdConceptsConceptIdPatch', 'teamId', teamId);
            // verify required parameter 'conceptId' is not null or undefined
            common_1.assertParamExists('patchConceptV1TeamsTeamIdConceptsConceptIdPatch', 'conceptId', conceptId);
            // verify required parameter 'patchConceptOpArrayPatchConceptOp' is not null or undefined
            common_1.assertParamExists('patchConceptV1TeamsTeamIdConceptsConceptIdPatch', 'patchConceptOpArrayPatchConceptOp', patchConceptOpArrayPatchConceptOp);
            const localVarPath = `/v1/teams/{team_id}/concepts/{concept_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchConceptOpArrayPatchConceptOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch: (teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch', 'datasetId', datasetId);
            // verify required parameter 'patchDatasetOpArrayPatchDatasetOp' is not null or undefined
            common_1.assertParamExists('patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch', 'patchDatasetOpArrayPatchDatasetOp', patchDatasetOpArrayPatchDatasetOp);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchDatasetOpArrayPatchDatasetOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
         * @summary Patch Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch: (teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch', 'teamId', teamId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch', 'featureId', featureId);
            // verify required parameter 'patchFeatureOpArrayPatchFeatureOp' is not null or undefined
            common_1.assertParamExists('patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch', 'patchFeatureOpArrayPatchFeatureOp', patchFeatureOpArrayPatchFeatureOp);
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchFeatureOpArrayPatchFeatureOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamIdModelsModelIdPatch: (teamId, modelId, patchModelOpArrayPatchModelOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('patchModelV1TeamsTeamIdModelsModelIdPatch', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('patchModelV1TeamsTeamIdModelsModelIdPatch', 'modelId', modelId);
            // verify required parameter 'patchModelOpArrayPatchModelOp' is not null or undefined
            common_1.assertParamExists('patchModelV1TeamsTeamIdModelsModelIdPatch', 'patchModelOpArrayPatchModelOp', patchModelOpArrayPatchModelOp);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchModelOpArrayPatchModelOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamId
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch: (teamId, bulkPatchFeatureOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch', 'teamId', teamId);
            // verify required parameter 'bulkPatchFeatureOp' is not null or undefined
            common_1.assertParamExists('patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch', 'bulkPatchFeatureOp', bulkPatchFeatureOp);
            const localVarPath = `/v1/teams/{team_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bulkPatchFeatureOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamId
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch: (teamId, studyId, patchStudyOpArrayPatchStudyOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch', 'studyId', studyId);
            // verify required parameter 'patchStudyOpArrayPatchStudyOp' is not null or undefined
            common_1.assertParamExists('patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch', 'patchStudyOpArrayPatchStudyOp', patchStudyOpArrayPatchStudyOp);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchStudyOpArrayPatchStudyOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamIdVariablesVariableIdPatch: (teamId, variableId, patchVariableOpArrayPatchVariableOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('patchVariableV1TeamsTeamIdVariablesVariableIdPatch', 'teamId', teamId);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('patchVariableV1TeamsTeamIdVariablesVariableIdPatch', 'variableId', variableId);
            // verify required parameter 'patchVariableOpArrayPatchVariableOp' is not null or undefined
            common_1.assertParamExists('patchVariableV1TeamsTeamIdVariablesVariableIdPatch', 'patchVariableOpArrayPatchVariableOp', patchVariableOpArrayPatchVariableOp);
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchVariableOpArrayPatchVariableOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {DirectionIn} directionIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost: (teamId, associationId, modelId, directionIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'teamId', teamId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'associationId', associationId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'modelId', modelId);
            // verify required parameter 'directionIn' is not null or undefined
            common_1.assertParamExists('postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost', 'directionIn', directionIn);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}/associations/{association_id}/directed_at`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(directionIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an Team.
         * @summary Post Team
         * @param {TeamIn} teamIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamV1TeamsPost: (teamIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamIn' is not null or undefined
            common_1.assertParamExists('postTeamV1TeamsPost', 'teamIn', teamIn);
            const localVarPath = `/v1/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(teamIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost: (teamId, studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/publish`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a user from a team by user_id.
         * @summary Remove A User From A Team.
         * @param {string} userId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete: (userId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete', 'userId', userId);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove an email invite from a team by email.
         * @summary Remove An Email Invite From A Team.
         * @param {string} email
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete: (email, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'email' is not null or undefined
            common_1.assertParamExists('removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete', 'email', email);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/invites/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete: (teamId, studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete: (teamId, datasetId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete: (teamId, datasetId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete', 'datasetId', datasetId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete: (teamId, studyId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete', 'studyId', studyId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete: (teamId, datasetId, parentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete', 'datasetId', datasetId);
            // verify required parameter 'parentId' is not null or undefined
            common_1.assertParamExists('removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete', 'parentId', parentId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: (teamId, datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove role from user.
         * @summary Remove Role From User
         * @param {string} userId
         * @param {string} roleName
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete: (userId, roleName, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete', 'userId', userId);
            // verify required parameter 'roleName' is not null or undefined
            common_1.assertParamExists('removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete', 'roleName', roleName);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/roles/{role_name}/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"role_name"}}`, encodeURIComponent(String(roleName)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut: (teamId, datasetId, datasetIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut', 'datasetId', datasetId);
            // verify required parameter 'datasetIn' is not null or undefined
            common_1.assertParamExists('replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut', 'datasetIn', datasetIn);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(datasetIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut: (teamId, featureId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut', 'teamId', teamId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut', 'featureId', featureId);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut', 'featureIn', featureIn);
            const localVarPath = `/v1/teams/{team_id}/features/{feature_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamIdModelsModelIdPut: (teamId, modelId, modelIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('replaceModelV1TeamsTeamIdModelsModelIdPut', 'teamId', teamId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('replaceModelV1TeamsTeamIdModelsModelIdPut', 'modelId', modelId);
            // verify required parameter 'modelIn' is not null or undefined
            common_1.assertParamExists('replaceModelV1TeamsTeamIdModelsModelIdPut', 'modelIn', modelIn);
            const localVarPath = `/v1/teams/{team_id}/models/{model_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut: (teamId, datasetId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut', 'teamId', teamId);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut', 'datasetId', datasetId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/teams/{team_id}/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut: (teamId, studyId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut', 'studyId', studyId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/teams/{team_id}/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId
         * @param {string} teamId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1TeamsTeamIdUsersUserIdPatch: (userId, teamId, updateProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('updateAUserByIdV1TeamsTeamIdUsersUserIdPatch', 'userId', userId);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('updateAUserByIdV1TeamsTeamIdUsersUserIdPatch', 'teamId', teamId);
            // verify required parameter 'updateProfileIn' is not null or undefined
            common_1.assertParamExists('updateAUserByIdV1TeamsTeamIdUsersUserIdPatch', 'updateProfileIn', updateProfileIn);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(updateProfileIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1TeamsTeamIdUserPut: (teamId, userProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('updateAuthenticatedUserProfileV1TeamsTeamIdUserPut', 'teamId', teamId);
            // verify required parameter 'userProfileIn' is not null or undefined
            common_1.assertParamExists('updateAuthenticatedUserProfileV1TeamsTeamIdUserPut', 'userProfileIn', userProfileIn);
            const localVarPath = `/v1/teams/{team_id}/user`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(userProfileIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} teamId
         * @param {string} integrationId
         * @param {IntegrationIn} integrationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch: (teamId, integrationId, integrationIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch', 'teamId', teamId);
            // verify required parameter 'integrationId' is not null or undefined
            common_1.assertParamExists('updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch', 'integrationId', integrationId);
            // verify required parameter 'integrationIn' is not null or undefined
            common_1.assertParamExists('updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch', 'integrationIn', integrationIn);
            const localVarPath = `/v1/teams/{team_id}/integrations/{integration_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(integrationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} teamId
         * @param {string} messageId
         * @param {MessageIn} messageIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1TeamsTeamIdMessagesMessageIdPatch: (teamId, messageId, messageIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('updateMessageV1TeamsTeamIdMessagesMessageIdPatch', 'teamId', teamId);
            // verify required parameter 'messageId' is not null or undefined
            common_1.assertParamExists('updateMessageV1TeamsTeamIdMessagesMessageIdPatch', 'messageId', messageId);
            // verify required parameter 'messageIn' is not null or undefined
            common_1.assertParamExists('updateMessageV1TeamsTeamIdMessagesMessageIdPatch', 'messageIn', messageIn);
            const localVarPath = `/v1/teams/{team_id}/messages/{message_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(messageIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * TeamsApi - functional programming interface
 * @export
 */
exports.TeamsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.TeamsApiAxiosParamCreator(configuration);
    return {
        /**
         * Add a user to a team by user_id.
         * @summary Add A Role To A Team.
         * @param {string} teamId
         * @param {RoleIn | Array<RoleIn>} roleInArrayRoleIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addARoleToATeamV1TeamsTeamIdRolesPost(teamId, roleInArrayRoleIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addARoleToATeamV1TeamsTeamIdRolesPost(teamId, roleInArrayRoleIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a user to a team role.
         * @summary Add A User To A Role.
         * @param {string} userId
         * @param {string} roleName
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut(userId, roleName, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut(userId, roleName, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a user to a team by user_id.
         * @summary Add A User To A Team.
         * @param {string} userId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAUserToATeamV1TeamsTeamIdUsersUserIdPut(userId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addAUserToATeamV1TeamsTeamIdUsersUserIdPut(userId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamId
         * @param {StudyIn | DoiIn} studyInDoiIn
         * @param {boolean} [updateExisting]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamIdStudiesPost(teamId, studyInDoiIn, updateExisting, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAStudyV1TeamsTeamIdStudiesPost(teamId, studyInDoiIn, updateExisting, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} teamId
         * @param {string} userId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1TeamsTeamIdUsersPost(teamId, userId, updateProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAUserByCognitoIdV1TeamsTeamIdUsersPost(teamId, userId, updateProfileIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1TeamsTeamIdUserPost(teamId, userProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAUserFromCredentialsV1TeamsTeamIdUserPost(teamId, userProfileIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamId
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamId
         * @param {AuthorIn} authorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {string} teamId
         * @param {ConceptIn} conceptIn
         * @param {boolean} [overwriteExisting]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, overwriteExisting, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, overwriteExisting, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {string} teamId
         * @param {DashboardIn} dashboardIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {string} teamId
         * @param {IntegrationIn} integrationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1TeamsTeamIdIntegrationsPost(teamId, integrationIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createIntegrationV1TeamsTeamIdIntegrationsPost(teamId, integrationIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {string} teamId
         * @param {MessageIn} messageIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1TeamsTeamIdMessagesPost(teamId, messageIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createMessageV1TeamsTeamIdMessagesPost(teamId, messageIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create mulitple Authors.
         * @summary Create Multiple Authors.
         * @param {string} teamId
         * @param {Array<AuthorIn> | AuthorIn} arrayAuthorInAuthorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(teamId, arrayAuthorInAuthorIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(teamId, arrayAuthorInAuthorIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamId
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {ResourceFlagIn} resourceFlagIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(teamId, associationId, resourceFlagIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(teamId, associationId, resourceFlagIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch the authenticated user\'s team or default.
         * @summary Get Authenticated User\'S Teams
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {string} teamId
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [trialExpireDate] Date the trial expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, trialExpireDate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, trialExpireDate, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, tags, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, tags, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch concept relationships.
         * @summary Get Concept Relationships
         * @param {string} conceptId
         * @param {string} teamId
         * @param {boolean} [topPercentileLimit] Flag for limiting to top percentile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGet(conceptId, teamId, topPercentileLimit, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGet(conceptId, teamId, topPercentileLimit, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get roles on a team.
         * @summary Get Existing Roles On A Team.
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExistingRolesOnATeamV1TeamsTeamIdRolesGet(teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getExistingRolesOnATeamV1TeamsTeamIdRolesGet(teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get metrics on the graph.
         * @summary Get Graph Metrics
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGraphMetricsV1TeamsTeamIdMetricsGraphGet(teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getGraphMetricsV1TeamsTeamIdMetricsGraphGet(teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} teamId
         * @param {string} integrationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet(teamId, integrationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet(teamId, integrationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationsV1TeamsTeamIdIntegrationsGet(teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getIntegrationsV1TeamsTeamIdIntegrationsGet(teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} teamId
         * @param {string} messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1TeamsTeamIdMessagesMessageIdGet(teamId, messageId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMessageV1TeamsTeamIdMessagesMessageIdGet(teamId, messageId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(metricId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(metricId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1
         * @param {string} metricId2
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get pending invites of a team.
         * @summary Get Pending Invites Of A Team.
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet(teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet(teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} teamId
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch single topic semantic graph.
         * @summary Get Semantic Topic Graph
         * @param {string} teamId
         * @param {SemanticTopicGraphIn} semanticTopicGraphIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPost(teamId, semanticTopicGraphIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPost(teamId, semanticTopicGraphIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId
         * @param {string} teamId
         * @param {string} [directedAt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(relationshipId, teamId, directedAt, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(relationshipId, teamId, directedAt, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch topic graph.
         * @summary Get Topic Graph
         * @param {string} teamId
         * @param {number} [numRelationships] Number of relationships to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(teamId, numRelationships, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(teamId, numRelationships, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch topic node graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(topicId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(topicId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1
         * @param {string} topicId2
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} teamId
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get users with role.
         * @summary Get Users Of A Role.
         * @param {string} roleName
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet(roleName, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet(roleName, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} teamId
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a user to a team by email.
         * @summary Invite An Email To The Team.
         * @param {string} teamId
         * @param {UserInvite} userInvite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost(teamId, userInvite, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost(teamId, userInvite, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1TeamsTeamIdConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listConceptsV1TeamsTeamIdConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List relationships.
         * @summary List Relationships
         * @param {string} teamId
         * @param {GraphSearchDirection} [direction] Optional directionality.
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipsV1TeamsTeamIdRelationshipsGet(teamId, direction, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listRelationshipsV1TeamsTeamIdRelationshipsGet(teamId, direction, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Merge a variable with other ids.
         * @summary Merge Variable Post
         * @param {string} teamId
         * @param {string} variableId
         * @param {BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost} bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(teamId, variableId, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(teamId, variableId, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {PatchConceptOp | Array<PatchConceptOp>} patchConceptOpArrayPatchConceptOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConceptV1TeamsTeamIdConceptsConceptIdPatch(teamId, conceptId, patchConceptOpArrayPatchConceptOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchConceptV1TeamsTeamIdConceptsConceptIdPatch(teamId, conceptId, patchConceptOpArrayPatchConceptOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
         * @summary Patch Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamId
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamId
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {DirectionIn} directionIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId, associationId, modelId, directionIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId, associationId, modelId, directionIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create an Team.
         * @summary Post Team
         * @param {TeamIn} teamIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamV1TeamsPost(teamIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.postTeamV1TeamsPost(teamIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a user from a team by user_id.
         * @summary Remove A User From A Team.
         * @param {string} userId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete(userId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete(userId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove an email invite from a team by email.
         * @summary Remove An Email Invite From A Team.
         * @param {string} email
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete(email, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete(email, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove role from user.
         * @summary Remove Role From User
         * @param {string} userId
         * @param {string} roleName
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete(userId, roleName, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete(userId, roleName, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId
         * @param {string} teamId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(userId, teamId, updateProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(userId, teamId, updateProfileIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} teamId
         * @param {string} integrationId
         * @param {IntegrationIn} integrationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch(teamId, integrationId, integrationIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch(teamId, integrationId, integrationIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} teamId
         * @param {string} messageId
         * @param {MessageIn} messageIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1TeamsTeamIdMessagesMessageIdPatch(teamId, messageId, messageIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateMessageV1TeamsTeamIdMessagesMessageIdPatch(teamId, messageId, messageIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * TeamsApi - factory interface
 * @export
 */
exports.TeamsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.TeamsApiFp(configuration);
    return {
        /**
         * Add a user to a team by user_id.
         * @summary Add A Role To A Team.
         * @param {string} teamId
         * @param {RoleIn | Array<RoleIn>} roleInArrayRoleIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addARoleToATeamV1TeamsTeamIdRolesPost(teamId, roleInArrayRoleIn, options) {
            return localVarFp.addARoleToATeamV1TeamsTeamIdRolesPost(teamId, roleInArrayRoleIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a user to a team role.
         * @summary Add A User To A Role.
         * @param {string} userId
         * @param {string} roleName
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut(userId, roleName, teamId, options) {
            return localVarFp.addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut(userId, roleName, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a user to a team by user_id.
         * @summary Add A User To A Team.
         * @param {string} userId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAUserToATeamV1TeamsTeamIdUsersUserIdPut(userId, teamId, options) {
            return localVarFp.addAUserToATeamV1TeamsTeamIdUsersUserIdPut(userId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options) {
            return localVarFp.addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(teamId, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dashboard Endpoint
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options) {
            return localVarFp.addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(teamId, dashboardId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options) {
            return localVarFp.addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(teamId, datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options) {
            return localVarFp.addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(teamId, datasetId, parentId, reconcileFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options) {
            return localVarFp.addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamId, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Bulk Add Authors To Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {BodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost} bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options) {
            return localVarFp.bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(teamId, studyId, bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamId
         * @param {StudyIn | DoiIn} studyInDoiIn
         * @param {boolean} [updateExisting]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamIdStudiesPost(teamId, studyInDoiIn, updateExisting, options) {
            return localVarFp.createAStudyV1TeamsTeamIdStudiesPost(teamId, studyInDoiIn, updateExisting, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} teamId
         * @param {string} userId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1TeamsTeamIdUsersPost(teamId, userId, updateProfileIn, options) {
            return localVarFp.createAUserByCognitoIdV1TeamsTeamIdUsersPost(teamId, userId, updateProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1TeamsTeamIdUserPost(teamId, userProfileIn, options) {
            return localVarFp.createAUserFromCredentialsV1TeamsTeamIdUserPost(teamId, userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamId
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options) {
            return localVarFp.createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options) {
            return localVarFp.createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(teamId, datasetId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options) {
            return localVarFp.createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(teamId, datasetId, associationInArrayAssociationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options) {
            return localVarFp.createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(teamId, modelId, associationInArrayAssociationIn, mergeFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamId
         * @param {AuthorIn} authorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options) {
            return localVarFp.createAuthorV1TeamsTeamIdAuthorsPost(teamId, authorIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {string} teamId
         * @param {ConceptIn} conceptIn
         * @param {boolean} [overwriteExisting]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, overwriteExisting, options) {
            return localVarFp.createConceptV1TeamsTeamIdConceptsPost(teamId, conceptIn, overwriteExisting, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Dashboard.
         * @summary Create Dashboard Post
         * @param {string} teamId
         * @param {DashboardIn} dashboardIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options) {
            return localVarFp.createDashboardPostV1TeamsTeamIdDashboardsPost(teamId, dashboardIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options) {
            return localVarFp.createDatasetV1TeamsTeamIdDatasetsPost(teamId, datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options) {
            return localVarFp.createFeatureV1TeamsTeamIdFeaturesPost(teamId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {string} teamId
         * @param {IntegrationIn} integrationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1TeamsTeamIdIntegrationsPost(teamId, integrationIn, options) {
            return localVarFp.createIntegrationV1TeamsTeamIdIntegrationsPost(teamId, integrationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {string} teamId
         * @param {MessageIn} messageIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1TeamsTeamIdMessagesPost(teamId, messageIn, options) {
            return localVarFp.createMessageV1TeamsTeamIdMessagesPost(teamId, messageIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamId
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options) {
            return localVarFp.createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(teamId, studyId, modelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Authors.
         * @summary Create Multiple Authors.
         * @param {string} teamId
         * @param {Array<AuthorIn> | AuthorIn} arrayAuthorInAuthorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(teamId, arrayAuthorInAuthorIn, options) {
            return localVarFp.createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(teamId, arrayAuthorInAuthorIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamId
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options) {
            return localVarFp.createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options) {
            return localVarFp.deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(teamId, modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options) {
            return localVarFp.deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(teamId, modelId, bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options) {
            return localVarFp.deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(teamId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options) {
            return localVarFp.deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(teamId, conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options) {
            return localVarFp.deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(teamId, dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options) {
            return localVarFp.deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options) {
            return localVarFp.deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(teamId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options) {
            return localVarFp.deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(teamId, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options) {
            return localVarFp.deleteModelV1TeamsTeamIdModelsModelIdDelete(teamId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options) {
            return localVarFp.deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(teamId, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options) {
            return localVarFp.deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options) {
            return localVarFp.fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Flag Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {ResourceFlagIn} resourceFlagIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(teamId, associationId, resourceFlagIn, options) {
            return localVarFp.flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(teamId, associationId, resourceFlagIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options) {
            return localVarFp.getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(teamId, associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s team or default.
         * @summary Get Authenticated User\'S Teams
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options) {
            return localVarFp.getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {string} teamId
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [trialExpireDate] Date the trial expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, trialExpireDate, options) {
            return localVarFp.getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, trialExpireDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options) {
            return localVarFp.getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(teamId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch concept graph.
         * @summary Get Concept Graph
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, tags, options) {
            return localVarFp.getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(teamId, minRelationshipStrength, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch concept relationships.
         * @summary Get Concept Relationships
         * @param {string} conceptId
         * @param {string} teamId
         * @param {boolean} [topPercentileLimit] Flag for limiting to top percentile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGet(conceptId, teamId, topPercentileLimit, options) {
            return localVarFp.getConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGet(conceptId, teamId, topPercentileLimit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options) {
            return localVarFp.getConceptV1TeamsTeamIdConceptsConceptIdGet(teamId, conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Dashboard.
         * @summary Get Dashboard
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options) {
            return localVarFp.getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(teamId, dashboardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options) {
            return localVarFp.getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options) {
            return localVarFp.getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(teamId, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get roles on a team.
         * @summary Get Existing Roles On A Team.
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExistingRolesOnATeamV1TeamsTeamIdRolesGet(teamId, options) {
            return localVarFp.getExistingRolesOnATeamV1TeamsTeamIdRolesGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options) {
            return localVarFp.getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(teamId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get metrics on the graph.
         * @summary Get Graph Metrics
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGraphMetricsV1TeamsTeamIdMetricsGraphGet(teamId, options) {
            return localVarFp.getGraphMetricsV1TeamsTeamIdMetricsGraphGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} teamId
         * @param {string} integrationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet(teamId, integrationId, options) {
            return localVarFp.getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet(teamId, integrationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get team integrations.
         * @summary Get Integrations
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationsV1TeamsTeamIdIntegrationsGet(teamId, options) {
            return localVarFp.getIntegrationsV1TeamsTeamIdIntegrationsGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} teamId
         * @param {string} messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1TeamsTeamIdMessagesMessageIdGet(teamId, messageId, options) {
            return localVarFp.getMessageV1TeamsTeamIdMessagesMessageIdGet(teamId, messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Node Graph
         * @param {string} metricId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(metricId, teamId, options) {
            return localVarFp.getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(metricId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Metric Relationship Graph
         * @param {string} metricId1
         * @param {string} metricId2
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options) {
            return localVarFp.getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(metricId1, metricId2, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options) {
            return localVarFp.getModelV1TeamsTeamIdModelsModelIdGet(teamId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get pending invites of a team.
         * @summary Get Pending Invites Of A Team.
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet(teamId, options) {
            return localVarFp.getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options) {
            return localVarFp.getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(teamId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options) {
            return localVarFp.getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(teamId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options) {
            return localVarFp.getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(teamId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch semantic graph.
         * @summary Get Semantic Graph
         * @param {string} teamId
         * @param {string} [topic1] Topic 1
         * @param {string} [topic2] Topic 2
         * @param {Array<string>} [ids1] Topic 1 ids
         * @param {Array<string>} [ids2] Topic 2 ids
         * @param {number} [minStrength] Min strength
         * @param {number} [minCount] Min count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options) {
            return localVarFp.getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(teamId, topic1, topic2, ids1, ids2, minStrength, minCount, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch single topic semantic graph.
         * @summary Get Semantic Topic Graph
         * @param {string} teamId
         * @param {SemanticTopicGraphIn} semanticTopicGraphIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPost(teamId, semanticTopicGraphIn, options) {
            return localVarFp.getSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPost(teamId, semanticTopicGraphIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options) {
            return localVarFp.getStudyV1TeamsTeamIdStudiesStudyIdGet(teamId, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Topic Relationship Synthesis.
         * @summary Get Synthesis
         * @param {any} relationshipId
         * @param {string} teamId
         * @param {string} [directedAt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(relationshipId, teamId, directedAt, options) {
            return localVarFp.getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(relationshipId, teamId, directedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch topic graph.
         * @summary Get Topic Graph
         * @param {string} teamId
         * @param {number} [numRelationships] Number of relationships to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(teamId, numRelationships, options) {
            return localVarFp.getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(teamId, numRelationships, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch topic node graph.
         * @summary Get Topic Node Graph
         * @param {string} topicId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(topicId, teamId, options) {
            return localVarFp.getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(topicId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Topic Relationship Graph
         * @param {string} topicId1
         * @param {string} topicId2
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options) {
            return localVarFp.getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(topicId1, topicId2, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} teamId
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options) {
            return localVarFp.getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * Get users with role.
         * @summary Get Users Of A Role.
         * @param {string} roleName
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet(roleName, teamId, options) {
            return localVarFp.getUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet(roleName, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} teamId
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options) {
            return localVarFp.getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options) {
            return localVarFp.getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a user to a team by email.
         * @summary Invite An Email To The Team.
         * @param {string} teamId
         * @param {UserInvite} userInvite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost(teamId, userInvite, options) {
            return localVarFp.inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost(teamId, userInvite, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options) {
            return localVarFp.listAssociationsV1TeamsTeamIdAssociationsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return localVarFp.listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options) {
            return localVarFp.listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listAuthorsV1TeamsTeamIdAuthorsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} teamId
         * @param {number} [minRelationshipStrength] Min strength
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1TeamsTeamIdConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return localVarFp.listConceptsV1TeamsTeamIdConceptsGet(teamId, minRelationshipStrength, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dashboard Features
         * @param {string} teamId
         * @param {string} dashboardId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(teamId, dashboardId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Dashboards.  Paginated list of all Dashboards.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listDashboardsV1TeamsTeamIdDashboardsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return localVarFp.listDatasetsV1TeamsTeamIdDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listFeaturesV1TeamsTeamIdFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get features in model.
         * @summary List Model Features
         * @param {string} teamId
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(teamId, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(teamId, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsV1TeamsTeamIdModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List relationships.
         * @summary List Relationships
         * @param {string} teamId
         * @param {GraphSearchDirection} [direction] Optional directionality.
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {number} [directionality] Filter by directionality
         * @param {string} [originQuery] Search query for the origin node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipsV1TeamsTeamIdRelationshipsGet(teamId, direction, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, options) {
            return localVarFp.listRelationshipsV1TeamsTeamIdRelationshipsGet(teamId, direction, query, includeHidden, page, pageSize, total, idsOnly, sortBy, directionality, originQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return localVarFp.listStudiesV1TeamsTeamIdStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return localVarFp.listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options) {
            return localVarFp.listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options) {
            return localVarFp.listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * Merge a variable with other ids.
         * @summary Merge Variable Post
         * @param {string} teamId
         * @param {string} variableId
         * @param {BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost} bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(teamId, variableId, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options) {
            return localVarFp.mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(teamId, variableId, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamId
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options) {
            return localVarFp.patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(teamId, modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Concept
         * @param {string} teamId
         * @param {string} conceptId
         * @param {PatchConceptOp | Array<PatchConceptOp>} patchConceptOpArrayPatchConceptOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConceptV1TeamsTeamIdConceptsConceptIdPatch(teamId, conceptId, patchConceptOpArrayPatchConceptOp, options) {
            return localVarFp.patchConceptV1TeamsTeamIdConceptsConceptIdPatch(teamId, conceptId, patchConceptOpArrayPatchConceptOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options) {
            return localVarFp.patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(teamId, datasetId, patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
         * @summary Patch Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options) {
            return localVarFp.patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(teamId, featureId, patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options) {
            return localVarFp.patchModelV1TeamsTeamIdModelsModelIdPatch(teamId, modelId, patchModelOpArrayPatchModelOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamId
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options) {
            return localVarFp.patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(teamId, bulkPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamId
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options) {
            return localVarFp.patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(teamId, studyId, patchStudyOpArrayPatchStudyOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options) {
            return localVarFp.patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Post Association Direction
         * @param {string} teamId
         * @param {string} associationId
         * @param {string} modelId
         * @param {DirectionIn} directionIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId, associationId, modelId, directionIn, options) {
            return localVarFp.postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(teamId, associationId, modelId, directionIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Team.
         * @summary Post Team
         * @param {TeamIn} teamIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamV1TeamsPost(teamIn, options) {
            return localVarFp.postTeamV1TeamsPost(teamIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options) {
            return localVarFp.publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(teamId, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a user from a team by user_id.
         * @summary Remove A User From A Team.
         * @param {string} userId
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete(userId, teamId, options) {
            return localVarFp.removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete(userId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an email invite from a team by email.
         * @summary Remove An Email Invite From A Team.
         * @param {string} email
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete(email, teamId, options) {
            return localVarFp.removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete(email, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options) {
            return localVarFp.removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(teamId, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options) {
            return localVarFp.removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(teamId, datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options) {
            return localVarFp.removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamId, datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options) {
            return localVarFp.removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(teamId, studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options) {
            return localVarFp.removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(teamId, datasetId, parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options) {
            return localVarFp.removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamId, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove role from user.
         * @summary Remove Role From User
         * @param {string} userId
         * @param {string} roleName
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete(userId, roleName, teamId, options) {
            return localVarFp.removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete(userId, roleName, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamId
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options) {
            return localVarFp.replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(teamId, datasetId, datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamId
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options) {
            return localVarFp.replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(teamId, featureId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamId
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options) {
            return localVarFp.replaceModelV1TeamsTeamIdModelsModelIdPut(teamId, modelId, modelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options) {
            return localVarFp.tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(teamId, datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options) {
            return localVarFp.tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(teamId, studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId
         * @param {string} teamId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(userId, teamId, updateProfileIn, options) {
            return localVarFp.updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(userId, teamId, updateProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options) {
            return localVarFp.updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Integration.
         * @summary Update Integration
         * @param {string} teamId
         * @param {string} integrationId
         * @param {IntegrationIn} integrationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch(teamId, integrationId, integrationIn, options) {
            return localVarFp.updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch(teamId, integrationId, integrationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} teamId
         * @param {string} messageId
         * @param {MessageIn} messageIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1TeamsTeamIdMessagesMessageIdPatch(teamId, messageId, messageIn, options) {
            return localVarFp.updateMessageV1TeamsTeamIdMessagesMessageIdPatch(teamId, messageId, messageIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
class TeamsApi extends base_1.BaseAPI {
    /**
     * Add a user to a team by user_id.
     * @summary Add A Role To A Team.
     * @param {TeamsApiAddARoleToATeamV1TeamsTeamIdRolesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    addARoleToATeamV1TeamsTeamIdRolesPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).addARoleToATeamV1TeamsTeamIdRolesPost(requestParameters.teamId, requestParameters.roleInArrayRoleIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a user to a team role.
     * @summary Add A User To A Role.
     * @param {TeamsApiAddAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).addAUserToARoleV1TeamsTeamIdRolesRoleNameUsersUserIdPut(requestParameters.userId, requestParameters.roleName, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a user to a team by user_id.
     * @summary Add A User To A Team.
     * @param {TeamsApiAddAUserToATeamV1TeamsTeamIdUsersUserIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    addAUserToATeamV1TeamsTeamIdUsersUserIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).addAUserToATeamV1TeamsTeamIdUsersUserIdPut(requestParameters.userId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {TeamsApiAddAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).addAuthorToStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdPut(requestParameters.teamId, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dashboard Endpoint
     * @param {TeamsApiAddFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).addFeatureToDashboardEndpointV1TeamsTeamIdDashboardsDashboardIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.dashboardId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {TeamsApiAddFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).addFeatureToDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a parent dataset.
     * @summary Add Parent Dataset
     * @param {TeamsApiAddParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).addParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.parentId, requestParameters.reconcileFeatures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {TeamsApiAddPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).addPopulationAttributeValueToDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add an author to a study.
     * @summary Bulk Add Authors To Study
     * @param {TeamsApiBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).bulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost(requestParameters.teamId, requestParameters.studyId, requestParameters.bodyBulkAddAuthorsToStudyV1TeamsTeamIdStudiesStudyIdAuthorsBulkPost, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Study.
     * @summary Create A Study.
     * @param {TeamsApiCreateAStudyV1TeamsTeamIdStudiesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAStudyV1TeamsTeamIdStudiesPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAStudyV1TeamsTeamIdStudiesPost(requestParameters.teamId, requestParameters.studyInDoiIn, requestParameters.updateExisting, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new user.
     * @summary Create A User By Cognito Id.
     * @param {TeamsApiCreateAUserByCognitoIdV1TeamsTeamIdUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAUserByCognitoIdV1TeamsTeamIdUsersPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAUserByCognitoIdV1TeamsTeamIdUsersPost(requestParameters.teamId, requestParameters.userId, requestParameters.updateProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new user.
     * @summary Create A User From Credentials.
     * @param {TeamsApiCreateAUserFromCredentialsV1TeamsTeamIdUserPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAUserFromCredentialsV1TeamsTeamIdUserPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAUserFromCredentialsV1TeamsTeamIdUserPost(requestParameters.teamId, requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Variable.
     * @summary Create A Variable.
     * @param {TeamsApiCreateAVariableV1TeamsTeamIdVariablesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAVariableV1TeamsTeamIdVariablesPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAVariableV1TeamsTeamIdVariablesPost(requestParameters.teamId, requestParameters.variableIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {TeamsApiCreateAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAndAttachFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesPost(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {TeamsApiCreateAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsPost(requestParameters.teamId, requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {TeamsApiCreateAssociationsV1TeamsTeamIdModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAssociationsV1TeamsTeamIdModelsModelIdAssociationsPost(requestParameters.teamId, requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Author.
     * @summary Create Author
     * @param {TeamsApiCreateAuthorV1TeamsTeamIdAuthorsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAuthorV1TeamsTeamIdAuthorsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAuthorV1TeamsTeamIdAuthorsPost(requestParameters.teamId, requestParameters.authorIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Concept.
     * @summary Create Concept
     * @param {TeamsApiCreateConceptV1TeamsTeamIdConceptsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createConceptV1TeamsTeamIdConceptsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createConceptV1TeamsTeamIdConceptsPost(requestParameters.teamId, requestParameters.conceptIn, requestParameters.overwriteExisting, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Dashboard.
     * @summary Create Dashboard Post
     * @param {TeamsApiCreateDashboardPostV1TeamsTeamIdDashboardsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createDashboardPostV1TeamsTeamIdDashboardsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createDashboardPostV1TeamsTeamIdDashboardsPost(requestParameters.teamId, requestParameters.dashboardIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Dataset.
     * @summary Create Dataset
     * @param {TeamsApiCreateDatasetV1TeamsTeamIdDatasetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createDatasetV1TeamsTeamIdDatasetsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createDatasetV1TeamsTeamIdDatasetsPost(requestParameters.teamId, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Feature.
     * @summary Create Feature
     * @param {TeamsApiCreateFeatureV1TeamsTeamIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createFeatureV1TeamsTeamIdFeaturesPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createFeatureV1TeamsTeamIdFeaturesPost(requestParameters.teamId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {TeamsApiCreateIntegrationV1TeamsTeamIdIntegrationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createIntegrationV1TeamsTeamIdIntegrationsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createIntegrationV1TeamsTeamIdIntegrationsPost(requestParameters.teamId, requestParameters.integrationIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new message.
     * @summary Create Message
     * @param {TeamsApiCreateMessageV1TeamsTeamIdMessagesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createMessageV1TeamsTeamIdMessagesPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createMessageV1TeamsTeamIdMessagesPost(requestParameters.teamId, requestParameters.messageIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {TeamsApiCreateModelsV1TeamsTeamIdStudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createModelsV1TeamsTeamIdStudiesStudyIdModelsPost(requestParameters.teamId, requestParameters.studyId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create mulitple Authors.
     * @summary Create Multiple Authors.
     * @param {TeamsApiCreateMultipleAuthorsV1TeamsTeamIdAuthorsBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createMultipleAuthorsV1TeamsTeamIdAuthorsBulkPost(requestParameters.teamId, requestParameters.arrayAuthorInAuthorIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create mulitple Variables.
     * @summary Create Multiple Variables.
     * @param {TeamsApiCreateMultipleVariablesV1TeamsTeamIdVariablesBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(requestParameters.teamId, requestParameters.arrayVariableInVariableIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {TeamsApiDeleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDelete(requestParameters.teamId, requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {TeamsApiDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete(requestParameters.teamId, requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1TeamsTeamIdModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Author.
     * @summary Delete Author
     * @param {TeamsApiDeleteAuthorV1TeamsTeamIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteAuthorV1TeamsTeamIdAuthorsAuthorIdDelete(requestParameters.teamId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
     * @summary Delete Concept
     * @param {TeamsApiDeleteConceptV1TeamsTeamIdConceptsConceptIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteConceptV1TeamsTeamIdConceptsConceptIdDelete(requestParameters.teamId, requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Dashboard.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dashboard
     * @param {TeamsApiDeleteDashboardV1TeamsTeamIdDashboardsDashboardIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteDashboardV1TeamsTeamIdDashboardsDashboardIdDelete(requestParameters.teamId, requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dataset
     * @param {TeamsApiDeleteDatasetV1TeamsTeamIdDatasetsDatasetIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteDatasetV1TeamsTeamIdDatasetsDatasetIdDelete(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a feature.
     * @summary Delete Feature
     * @param {TeamsApiDeleteFeatureV1TeamsTeamIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteFeatureV1TeamsTeamIdFeaturesFeatureIdDelete(requestParameters.teamId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {TeamsApiDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
     * @summary Delete Model
     * @param {TeamsApiDeleteModelV1TeamsTeamIdModelsModelIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteModelV1TeamsTeamIdModelsModelIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteModelV1TeamsTeamIdModelsModelIdDelete(requestParameters.teamId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Study
     * @param {TeamsApiDeleteStudyV1TeamsTeamIdStudiesStudyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteStudyV1TeamsTeamIdStudiesStudyIdDelete(requestParameters.teamId, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
     * @summary Delete Variable
     * @param {TeamsApiDeleteVariableV1TeamsTeamIdVariablesVariableIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(requestParameters.teamId, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {TeamsApiFetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get strength of this association.
     * @summary Flag Association
     * @param {TeamsApiFlagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).flagAssociationV1TeamsTeamIdAssociationsAssociationIdFlagsPost(requestParameters.teamId, requestParameters.associationId, requestParameters.resourceFlagIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Get Association
     * @param {TeamsApiGetAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getAssociationV1TeamsTeamIdModelsModelIdAssociationsAssociationIdGet(requestParameters.teamId, requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch the authenticated user\'s team or default.
     * @summary Get Authenticated User\'S Teams
     * @param {TeamsApiGetAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {TeamsApiGetAuthenticatedUserV1TeamsTeamIdUserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getAuthenticatedUserV1TeamsTeamIdUserGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getAuthenticatedUserV1TeamsTeamIdUserGet(requestParameters.teamId, requestParameters.includeAvatar, requestParameters.trialExpireDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Author.
     * @summary Get Author
     * @param {TeamsApiGetAuthorV1TeamsTeamIdAuthorsAuthorIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getAuthorV1TeamsTeamIdAuthorsAuthorIdGet(requestParameters.teamId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch concept graph.
     * @summary Get Concept Graph
     * @param {TeamsApiGetConceptGraphV1TeamsTeamIdGraphConceptGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getConceptGraphV1TeamsTeamIdGraphConceptGraphGet(requestParameters.teamId, requestParameters.minRelationshipStrength, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch concept relationships.
     * @summary Get Concept Relationships
     * @param {TeamsApiGetConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getConceptRelationshipsV1TeamsTeamIdConceptsConceptIdRelationshipsGet(requestParameters.conceptId, requestParameters.teamId, requestParameters.topPercentileLimit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Concept.
     * @summary Get Concept
     * @param {TeamsApiGetConceptV1TeamsTeamIdConceptsConceptIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getConceptV1TeamsTeamIdConceptsConceptIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getConceptV1TeamsTeamIdConceptsConceptIdGet(requestParameters.teamId, requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Dashboard.
     * @summary Get Dashboard
     * @param {TeamsApiGetDashboardV1TeamsTeamIdDashboardsDashboardIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getDashboardV1TeamsTeamIdDashboardsDashboardIdGet(requestParameters.teamId, requestParameters.dashboardId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch dataset graph.
     * @summary Get Dataset Graph
     * @param {TeamsApiGetDatasetGraphV1TeamsTeamIdGraphDatasetGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getDatasetGraphV1TeamsTeamIdGraphDatasetGraphGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a Dataset.
     * @summary Get Dataset
     * @param {TeamsApiGetDatasetV1TeamsTeamIdDatasetsDatasetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getDatasetV1TeamsTeamIdDatasetsDatasetIdGet(requestParameters.teamId, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get roles on a team.
     * @summary Get Existing Roles On A Team.
     * @param {TeamsApiGetExistingRolesOnATeamV1TeamsTeamIdRolesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getExistingRolesOnATeamV1TeamsTeamIdRolesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getExistingRolesOnATeamV1TeamsTeamIdRolesGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get feature.
     * @summary Get Feature
     * @param {TeamsApiGetFeatureV1TeamsTeamIdFeaturesFeatureIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getFeatureV1TeamsTeamIdFeaturesFeatureIdGet(requestParameters.teamId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get metrics on the graph.
     * @summary Get Graph Metrics
     * @param {TeamsApiGetGraphMetricsV1TeamsTeamIdMetricsGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getGraphMetricsV1TeamsTeamIdMetricsGraphGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getGraphMetricsV1TeamsTeamIdMetricsGraphGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Integration.
     * @summary Get Integration
     * @param {TeamsApiGetIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getIntegrationV1TeamsTeamIdIntegrationsIntegrationIdGet(requestParameters.teamId, requestParameters.integrationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get team integrations.
     * @summary Get Integrations
     * @param {TeamsApiGetIntegrationsV1TeamsTeamIdIntegrationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getIntegrationsV1TeamsTeamIdIntegrationsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getIntegrationsV1TeamsTeamIdIntegrationsGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a Message.
     * @summary Get Message
     * @param {TeamsApiGetMessageV1TeamsTeamIdMessagesMessageIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getMessageV1TeamsTeamIdMessagesMessageIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getMessageV1TeamsTeamIdMessagesMessageIdGet(requestParameters.teamId, requestParameters.messageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch dataset graph.
     * @summary Get Metric Node Graph
     * @param {TeamsApiGetMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getMetricNodeGraphV1TeamsTeamIdGraphMetricsMetricIdGet(requestParameters.metricId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch dataset graph.
     * @summary Get Metric Relationship Graph
     * @param {TeamsApiGetMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2GetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getMetricRelationshipGraphV1TeamsTeamIdGraphMetricsMetricId1RelationshipMetricId2Get(requestParameters.metricId1, requestParameters.metricId2, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Model.
     * @summary Get Model
     * @param {TeamsApiGetModelV1TeamsTeamIdModelsModelIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getModelV1TeamsTeamIdModelsModelIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getModelV1TeamsTeamIdModelsModelIdGet(requestParameters.teamId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get pending invites of a team.
     * @summary Get Pending Invites Of A Team.
     * @param {TeamsApiGetPendingInvitesOfATeamV1TeamsTeamIdInvitesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getPendingInvitesOfATeamV1TeamsTeamIdInvitesGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get direction of this association.
     * @summary Get Relationship Direction
     * @param {TeamsApiGetRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getRelationshipDirectionV1TeamsTeamIdAssociationsAssociationIdDirectionGet(requestParameters.teamId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get reproducibility of this association.
     * @summary Get Relationship Reproducibility
     * @param {TeamsApiGetRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getRelationshipReproducibilityV1TeamsTeamIdAssociationsAssociationIdReproducibilityGet(requestParameters.teamId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get strength of this association.
     * @summary Get Relationship Strength
     * @param {TeamsApiGetRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getRelationshipStrengthV1TeamsTeamIdAssociationsAssociationIdStrengthGet(requestParameters.teamId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch semantic graph.
     * @summary Get Semantic Graph
     * @param {TeamsApiGetSemanticGraphV1TeamsTeamIdGraphSemanticGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getSemanticGraphV1TeamsTeamIdGraphSemanticGraphGet(requestParameters.teamId, requestParameters.topic1, requestParameters.topic2, requestParameters.ids1, requestParameters.ids2, requestParameters.minStrength, requestParameters.minCount, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch single topic semantic graph.
     * @summary Get Semantic Topic Graph
     * @param {TeamsApiGetSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getSemanticTopicGraphV1TeamsTeamIdGraphSemanticTopicGraphPost(requestParameters.teamId, requestParameters.semanticTopicGraphIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Study.
     * @summary Get Study
     * @param {TeamsApiGetStudyV1TeamsTeamIdStudiesStudyIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getStudyV1TeamsTeamIdStudiesStudyIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getStudyV1TeamsTeamIdStudiesStudyIdGet(requestParameters.teamId, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Topic Relationship Synthesis.
     * @summary Get Synthesis
     * @param {TeamsApiGetSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getSynthesisV1TeamsTeamIdRelationshipsRelationshipIdSynthesisGet(requestParameters.relationshipId, requestParameters.teamId, requestParameters.directedAt, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch topic graph.
     * @summary Get Topic Graph
     * @param {TeamsApiGetTopicGraphV1TeamsTeamIdGraphTopicGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getTopicGraphV1TeamsTeamIdGraphTopicGraphGet(requestParameters.teamId, requestParameters.numRelationships, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch topic node graph.
     * @summary Get Topic Node Graph
     * @param {TeamsApiGetTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getTopicNodeGraphV1TeamsTeamIdGraphTopicsTopicIdGet(requestParameters.topicId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch dataset graph.
     * @summary Get Topic Relationship Graph
     * @param {TeamsApiGetTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2GetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getTopicRelationshipGraphV1TeamsTeamIdGraphTopicsTopicId1RelationshipTopicId2Get(requestParameters.topicId1, requestParameters.topicId2, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {TeamsApiGetUserV1TeamsTeamIdUsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getUserV1TeamsTeamIdUsersUserIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getUserV1TeamsTeamIdUsersUserIdGet(requestParameters.teamId, requestParameters.userId, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get users with role.
     * @summary Get Users Of A Role.
     * @param {TeamsApiGetUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getUsersOfARoleV1TeamsTeamIdRolesRoleNameUsersGet(requestParameters.roleName, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List public profiles.
     * @summary Get Users
     * @param {TeamsApiGetUsersV1TeamsTeamIdUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getUsersV1TeamsTeamIdUsersGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getUsersV1TeamsTeamIdUsersGet(requestParameters.teamId, requestParameters.email, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Variable.
     * @summary Get Variable
     * @param {TeamsApiGetVariableV1TeamsTeamIdVariablesVariableIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getVariableV1TeamsTeamIdVariablesVariableIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getVariableV1TeamsTeamIdVariablesVariableIdGet(requestParameters.teamId, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a user to a team by email.
     * @summary Invite An Email To The Team.
     * @param {TeamsApiInviteAnEmailToTheTeamV1TeamsTeamIdInvitesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).inviteAnEmailToTheTeamV1TeamsTeamIdInvitesPost(requestParameters.teamId, requestParameters.userInvite, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {TeamsApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Associations.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAssociationsV1TeamsTeamIdAssociationsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamIdAssociationsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.conceptRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamIdDatasetsDatasetIdAssociationsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in model.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamIdModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamIdModelsModelIdAssociationsGet(requestParameters.teamId, requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamIdStudiesStudyIdAssociationsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(requestParameters.teamId, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {TeamsApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {TeamsApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {TeamsApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {TeamsApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {TeamsApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {TeamsApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
     * @summary List Authors
     * @param {TeamsApiListAuthorsV1TeamsTeamIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAuthorsV1TeamsTeamIdAuthorsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAuthorsV1TeamsTeamIdAuthorsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a study\'s authors.
     * @summary List Authors
     * @param {TeamsApiListAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAuthorsV1TeamsTeamIdStudiesStudyIdAuthorsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Concepts.
     * @summary List Concepts
     * @param {TeamsApiListConceptsV1TeamsTeamIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listConceptsV1TeamsTeamIdConceptsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listConceptsV1TeamsTeamIdConceptsGet(requestParameters.teamId, requestParameters.minRelationshipStrength, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dashboard Features
     * @param {TeamsApiListDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listDashboardFeaturesV1TeamsTeamIdDashboardsDashboardIdFeaturesGet(requestParameters.teamId, requestParameters.dashboardId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Dashboards.  Paginated list of all Dashboards.
     * @summary List Dashboards
     * @param {TeamsApiListDashboardsV1TeamsTeamIdDashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listDashboardsV1TeamsTeamIdDashboardsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listDashboardsV1TeamsTeamIdDashboardsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get dashboards connected to the Variable.
     * @summary List Dashboards
     * @param {TeamsApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(requestParameters.teamId, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {TeamsApiListDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listDatasetFeaturesV1TeamsTeamIdDatasetsDatasetIdFeaturesGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get parents of this dataset.
     * @summary List Dataset Parents
     * @param {TeamsApiListDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listDatasetParentsV1TeamsTeamIdDatasetsDatasetIdParentsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all Datasets.
     * @summary List Datasets
     * @param {TeamsApiListDatasetsV1TeamsTeamIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listDatasetsV1TeamsTeamIdDatasetsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listDatasetsV1TeamsTeamIdDatasetsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Features.
     * @summary List Features
     * @param {TeamsApiListFeaturesV1TeamsTeamIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listFeaturesV1TeamsTeamIdFeaturesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listFeaturesV1TeamsTeamIdFeaturesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get features in model.
     * @summary List Model Features
     * @param {TeamsApiListModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listModelFeaturesV1TeamsTeamIdModelsModelIdFeaturesGet(requestParameters.teamId, requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {TeamsApiListModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listModelsInStudyV1TeamsTeamIdStudiesStudyIdModelsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models that use the dataset either directly or through child datasets.
     * @summary List Models Using Dataset
     * @param {TeamsApiListModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listModelsUsingDatasetV1TeamsTeamIdDatasetsDatasetIdModelsGet(requestParameters.teamId, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Models.
     * @summary List Models
     * @param {TeamsApiListModelsV1TeamsTeamIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listModelsV1TeamsTeamIdModelsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listModelsV1TeamsTeamIdModelsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List relationships.
     * @summary List Relationships
     * @param {TeamsApiListRelationshipsV1TeamsTeamIdRelationshipsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listRelationshipsV1TeamsTeamIdRelationshipsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listRelationshipsV1TeamsTeamIdRelationshipsGet(requestParameters.teamId, requestParameters.direction, requestParameters.query, requestParameters.includeHidden, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.sortBy, requestParameters.directionality, requestParameters.originQuery, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Studies.
     * @summary List Studies
     * @param {TeamsApiListStudiesV1TeamsTeamIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listStudiesV1TeamsTeamIdStudiesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listStudiesV1TeamsTeamIdStudiesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {TeamsApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {TeamsApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {TeamsApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {TeamsApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {TeamsApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {TeamsApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Variables.
     * @summary List Variables
     * @param {TeamsApiListVariablesV1TeamsTeamIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listVariablesV1TeamsTeamIdVariablesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listVariablesV1TeamsTeamIdVariablesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Merge a variable with other ids.
     * @summary Merge Variable Post
     * @param {TeamsApiMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(requestParameters.teamId, requestParameters.variableId, requestParameters.bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {TeamsApiPatchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchAssociationsV1TeamsTeamIdModelsModelIdAssociationsPatch(requestParameters.teamId, requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Variable resource with partial update.
     * @summary Patch Concept
     * @param {TeamsApiPatchConceptV1TeamsTeamIdConceptsConceptIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchConceptV1TeamsTeamIdConceptsConceptIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchConceptV1TeamsTeamIdConceptsConceptIdPatch(requestParameters.teamId, requestParameters.conceptId, requestParameters.patchConceptOpArrayPatchConceptOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Dataset resource with partial update.
     * @summary Patch Dataset
     * @param {TeamsApiPatchDatasetV1TeamsTeamIdDatasetsDatasetIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchDatasetV1TeamsTeamIdDatasetsDatasetIdPatch(requestParameters.teamId, requestParameters.datasetId, requestParameters.patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current feature statistics.
     * @summary Patch Feature
     * @param {TeamsApiPatchFeatureV1TeamsTeamIdFeaturesFeatureIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchFeatureV1TeamsTeamIdFeaturesFeatureIdPatch(requestParameters.teamId, requestParameters.featureId, requestParameters.patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Model resource with partial update.
     * @summary Patch Model
     * @param {TeamsApiPatchModelV1TeamsTeamIdModelsModelIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchModelV1TeamsTeamIdModelsModelIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchModelV1TeamsTeamIdModelsModelIdPatch(requestParameters.teamId, requestParameters.modelId, requestParameters.patchModelOpArrayPatchModelOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Batch feature patching.
     * @summary Patch Multiple Features
     * @param {TeamsApiPatchMultipleFeaturesV1TeamsTeamIdFeaturesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchMultipleFeaturesV1TeamsTeamIdFeaturesPatch(requestParameters.teamId, requestParameters.bulkPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Study resource with partial update.
     * @summary Patch Study Endpoint
     * @param {TeamsApiPatchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchStudyEndpointV1TeamsTeamIdStudiesStudyIdPatch(requestParameters.teamId, requestParameters.studyId, requestParameters.patchStudyOpArrayPatchStudyOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Variable resource with partial update.
     * @summary Patch Variable
     * @param {TeamsApiPatchVariableV1TeamsTeamIdVariablesVariableIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchVariableV1TeamsTeamIdVariablesVariableIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchVariableV1TeamsTeamIdVariablesVariableIdPatch(requestParameters.teamId, requestParameters.variableId, requestParameters.patchVariableOpArrayPatchVariableOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Post Association Direction
     * @param {TeamsApiPostAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).postAssociationDirectionV1TeamsTeamIdModelsModelIdAssociationsAssociationIdDirectedAtPost(requestParameters.teamId, requestParameters.associationId, requestParameters.modelId, requestParameters.directionIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Team.
     * @summary Post Team
     * @param {TeamsApiPostTeamV1TeamsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    postTeamV1TeamsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).postTeamV1TeamsPost(requestParameters.teamIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Publish the study making it visible to other users.
     * @summary Publish Study
     * @param {TeamsApiPublishStudyV1TeamsTeamIdStudiesStudyIdPublishPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).publishStudyV1TeamsTeamIdStudiesStudyIdPublishPost(requestParameters.teamId, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a user from a team by user_id.
     * @summary Remove A User From A Team.
     * @param {TeamsApiRemoveAUserFromATeamV1TeamsTeamIdUsersUserIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeAUserFromATeamV1TeamsTeamIdUsersUserIdDelete(requestParameters.userId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an email invite from a team by email.
     * @summary Remove An Email Invite From A Team.
     * @param {TeamsApiRemoveAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeAnEmailInviteFromATeamV1TeamsTeamIdInvitesEmailDelete(requestParameters.email, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {TeamsApiRemoveAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeAuthorFromStudyV1TeamsTeamIdStudiesStudyIdAuthorsAuthorIdDelete(requestParameters.teamId, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {TeamsApiRemoveFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeFeatureFromDatasetV1TeamsTeamIdDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the dataset with object with provided id.
     * @summary Remove Object Tag From Dataset
     * @param {TeamsApiRemoveObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeObjectTagFromDatasetV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the study with object with provided id.
     * @summary Remove Object Tag From Study
     * @param {TeamsApiRemoveObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeObjectTagFromStudyV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters.teamId, requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a parent dataset.
     * @summary Remove Parent Dataset
     * @param {TeamsApiRemoveParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeParentDatasetV1TeamsTeamIdDatasetsDatasetIdParentsParentIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.parentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {TeamsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1TeamsTeamIdDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.teamId, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove role from user.
     * @summary Remove Role From User
     * @param {TeamsApiRemoveRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeRoleFromUserV1TeamsTeamIdRolesRoleNameUsersUserIdDelete(requestParameters.userId, requestParameters.roleName, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Dataset.
     * @summary Replace Dataset
     * @param {TeamsApiReplaceDatasetV1TeamsTeamIdDatasetsDatasetIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).replaceDatasetV1TeamsTeamIdDatasetsDatasetIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Feature.
     * @summary Replace Feature
     * @param {TeamsApiReplaceFeatureV1TeamsTeamIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).replaceFeatureV1TeamsTeamIdFeaturesFeatureIdPut(requestParameters.teamId, requestParameters.featureId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Model.
     * @summary Replace Model
     * @param {TeamsApiReplaceModelV1TeamsTeamIdModelsModelIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    replaceModelV1TeamsTeamIdModelsModelIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).replaceModelV1TeamsTeamIdModelsModelIdPut(requestParameters.teamId, requestParameters.modelId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the dataset with object with provided id.
     * @summary Tag Study With Object
     * @param {TeamsApiTagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).tagStudyWithObjectV1TeamsTeamIdDatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters.teamId, requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the study with object with provided id.
     * @summary Tag Study With Object
     * @param {TeamsApiTagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).tagStudyWithObjectV1TeamsTeamIdStudiesStudyIdObjectTagsTagObjectIdPut(requestParameters.teamId, requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new user.
     * @summary Update A User By Id.
     * @param {TeamsApiUpdateAUserByIdV1TeamsTeamIdUsersUserIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(requestParameters.userId, requestParameters.teamId, requestParameters.updateProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {TeamsApiUpdateAuthenticatedUserProfileV1TeamsTeamIdUserPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(requestParameters.teamId, requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update Integration.
     * @summary Update Integration
     * @param {TeamsApiUpdateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).updateIntegrationV1TeamsTeamIdIntegrationsIntegrationIdPatch(requestParameters.teamId, requestParameters.integrationId, requestParameters.integrationIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a Message.
     * @summary Update Message
     * @param {TeamsApiUpdateMessageV1TeamsTeamIdMessagesMessageIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    updateMessageV1TeamsTeamIdMessagesMessageIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).updateMessageV1TeamsTeamIdMessagesMessageIdPatch(requestParameters.teamId, requestParameters.messageId, requestParameters.messageIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TeamsApi = TeamsApi;
/**
 * TimelineApi - axios parameter creator
 * @export
 */
exports.TimelineApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Fetch resource creation timeline in reverse chronological order.
         * @summary Fetch Global Timeline
         * @param {Set<SystemObjectResources>} [types]
         * @param {string} [cursor] A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalTimelineV1TimelineGet: (types, cursor, limit, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/timeline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (types) {
                localVarQueryParameter['types'] = Array.from(types);
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * TimelineApi - functional programming interface
 * @export
 */
exports.TimelineApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.TimelineApiAxiosParamCreator(configuration);
    return {
        /**
         * Fetch resource creation timeline in reverse chronological order.
         * @summary Fetch Global Timeline
         * @param {Set<SystemObjectResources>} [types]
         * @param {string} [cursor] A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * TimelineApi - factory interface
 * @export
 */
exports.TimelineApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.TimelineApiFp(configuration);
    return {
        /**
         * Fetch resource creation timeline in reverse chronological order.
         * @summary Fetch Global Timeline
         * @param {Set<SystemObjectResources>} [types]
         * @param {string} [cursor] A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options) {
            return localVarFp.fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * TimelineApi - object-oriented interface
 * @export
 * @class TimelineApi
 * @extends {BaseAPI}
 */
class TimelineApi extends base_1.BaseAPI {
    /**
     * Fetch resource creation timeline in reverse chronological order.
     * @summary Fetch Global Timeline
     * @param {TimelineApiFetchGlobalTimelineV1TimelineGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimelineApi
     */
    fetchGlobalTimelineV1TimelineGet(requestParameters = {}, options) {
        return exports.TimelineApiFp(this.configuration).fetchGlobalTimelineV1TimelineGet(requestParameters.types, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TimelineApi = TimelineApi;
/**
 * UsersApi - axios parameter creator
 * @export
 */
exports.UsersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} teamId
         * @param {string} userId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1TeamsTeamIdUsersPost: (teamId, userId, updateProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createAUserByCognitoIdV1TeamsTeamIdUsersPost', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('createAUserByCognitoIdV1TeamsTeamIdUsersPost', 'userId', userId);
            // verify required parameter 'updateProfileIn' is not null or undefined
            common_1.assertParamExists('createAUserByCognitoIdV1TeamsTeamIdUsersPost', 'updateProfileIn', updateProfileIn);
            const localVarPath = `/v1/teams/{team_id}/users`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(updateProfileIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} userId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1UsersPost: (userId, updateProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('createAUserByCognitoIdV1UsersPost', 'userId', userId);
            // verify required parameter 'updateProfileIn' is not null or undefined
            common_1.assertParamExists('createAUserByCognitoIdV1UsersPost', 'updateProfileIn', updateProfileIn);
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(updateProfileIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1TeamsTeamIdUserPost: (teamId, userProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createAUserFromCredentialsV1TeamsTeamIdUserPost', 'teamId', teamId);
            // verify required parameter 'userProfileIn' is not null or undefined
            common_1.assertParamExists('createAUserFromCredentialsV1TeamsTeamIdUserPost', 'userProfileIn', userProfileIn);
            const localVarPath = `/v1/teams/{team_id}/user`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(userProfileIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1UserPost: (userProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userProfileIn' is not null or undefined
            common_1.assertParamExists('createAUserFromCredentialsV1UserPost', 'userProfileIn', userProfileIn);
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(userProfileIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch the authenticated user\'s team or default.
         * @summary Get Authenticated User\'S Teams
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet: (teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/teams`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch the authenticated user\'s team or default.
         * @summary Get Authenticated User\'S Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1UserTeamsGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {string} teamId
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [trialExpireDate] Date the trial expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1TeamsTeamIdUserGet: (teamId, includeAvatar, trialExpireDate, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getAuthenticatedUserV1TeamsTeamIdUserGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            if (trialExpireDate !== undefined) {
                localVarQueryParameter['trial_expire_date'] = trialExpireDate;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [trialExpireDate] Date the trial expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet: (includeAvatar, trialExpireDate, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            if (trialExpireDate !== undefined) {
                localVarQueryParameter['trial_expire_date'] = trialExpireDate;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} teamId
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1TeamsTeamIdUsersUserIdGet: (teamId, userId, includeAvatar, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getUserV1TeamsTeamIdUsersUserIdGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('getUserV1TeamsTeamIdUsersUserIdGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet: (userId, includeAvatar, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('getUserV1UsersUserIdGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} teamId
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1TeamsTeamIdUsersGet: (teamId, email, includeAvatar, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getUsersV1TeamsTeamIdUsersGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/users`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} [teamId]
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1UsersGet: (teamId, email, includeAvatar, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet: (teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet', 'teamId', teamId);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_id}/user/studies/{study_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet: (studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet', 'studyId', studyId);
            const localVarPath = `/v1/user/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/concepts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/studies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/variables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/concepts`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserConceptsV1UsersUserIdConceptsGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/concepts`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/datasets`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserDatasetsV1UsersUserIdDatasetsGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/datasets`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/features`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserFeaturesV1UsersUserIdFeaturesGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/features`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listUserModelsV1TeamsTeamIdUsersUserIdModelsGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserModelsV1TeamsTeamIdUsersUserIdModelsGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/models`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserModelsV1UsersUserIdModelsGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/models`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/studies`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserStudiesV1UsersUserIdStudiesGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/studies`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserVariablesV1UsersUserIdVariablesGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/variables`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId
         * @param {string} teamId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1TeamsTeamIdUsersUserIdPatch: (userId, teamId, updateProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('updateAUserByIdV1TeamsTeamIdUsersUserIdPatch', 'userId', userId);
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('updateAUserByIdV1TeamsTeamIdUsersUserIdPatch', 'teamId', teamId);
            // verify required parameter 'updateProfileIn' is not null or undefined
            common_1.assertParamExists('updateAUserByIdV1TeamsTeamIdUsersUserIdPatch', 'updateProfileIn', updateProfileIn);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(updateProfileIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1UsersUserIdPatch: (userId, updateProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('updateAUserByIdV1UsersUserIdPatch', 'userId', userId);
            // verify required parameter 'updateProfileIn' is not null or undefined
            common_1.assertParamExists('updateAUserByIdV1UsersUserIdPatch', 'updateProfileIn', updateProfileIn);
            const localVarPath = `/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(updateProfileIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1TeamsTeamIdUserPut: (teamId, userProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('updateAuthenticatedUserProfileV1TeamsTeamIdUserPut', 'teamId', teamId);
            // verify required parameter 'userProfileIn' is not null or undefined
            common_1.assertParamExists('updateAuthenticatedUserProfileV1TeamsTeamIdUserPut', 'userProfileIn', userProfileIn);
            const localVarPath = `/v1/teams/{team_id}/user`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(userProfileIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1UserPut: (userProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userProfileIn' is not null or undefined
            common_1.assertParamExists('updateAuthenticatedUserProfileV1UserPut', 'userProfileIn', userProfileIn);
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(userProfileIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
exports.UsersApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.UsersApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} teamId
         * @param {string} userId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1TeamsTeamIdUsersPost(teamId, userId, updateProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAUserByCognitoIdV1TeamsTeamIdUsersPost(teamId, userId, updateProfileIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} userId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1UsersPost(userId, updateProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAUserByCognitoIdV1UsersPost(userId, updateProfileIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1TeamsTeamIdUserPost(teamId, userProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAUserFromCredentialsV1TeamsTeamIdUserPost(teamId, userProfileIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1UserPost(userProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAUserFromCredentialsV1UserPost(userProfileIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch the authenticated user\'s team or default.
         * @summary Get Authenticated User\'S Teams
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch the authenticated user\'s team or default.
         * @summary Get Authenticated User\'S Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1UserTeamsGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAuthenticatedUserSTeamsV1UserTeamsGet(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {string} teamId
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [trialExpireDate] Date the trial expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, trialExpireDate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, trialExpireDate, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [trialExpireDate] Date the trial expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet(includeAvatar, trialExpireDate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAuthenticatedUserV1UserGet(includeAvatar, trialExpireDate, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} teamId
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet(userId, includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserV1UsersUserIdGet(userId, includeAvatar, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} teamId
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} [teamId]
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1UsersGet(teamId, email, includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUsersV1UsersGet(teamId, email, includeAvatar, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId
         * @param {string} teamId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(userId, teamId, updateProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(userId, teamId, updateProfileIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1UsersUserIdPatch(userId, updateProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateAUserByIdV1UsersUserIdPatch(userId, updateProfileIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1UserPut(userProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateAuthenticatedUserProfileV1UserPut(userProfileIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
exports.UsersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.UsersApiFp(configuration);
    return {
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} teamId
         * @param {string} userId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1TeamsTeamIdUsersPost(teamId, userId, updateProfileIn, options) {
            return localVarFp.createAUserByCognitoIdV1TeamsTeamIdUsersPost(teamId, userId, updateProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Create A User By Cognito Id.
         * @param {string} userId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserByCognitoIdV1UsersPost(userId, updateProfileIn, options) {
            return localVarFp.createAUserByCognitoIdV1UsersPost(userId, updateProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1TeamsTeamIdUserPost(teamId, userProfileIn, options) {
            return localVarFp.createAUserFromCredentialsV1TeamsTeamIdUserPost(teamId, userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Create A User From Credentials.
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserFromCredentialsV1UserPost(userProfileIn, options) {
            return localVarFp.createAUserFromCredentialsV1UserPost(userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s team or default.
         * @summary Get Authenticated User\'S Teams
         * @param {string} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options) {
            return localVarFp.getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s team or default.
         * @summary Get Authenticated User\'S Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1UserTeamsGet(options) {
            return localVarFp.getAuthenticatedUserSTeamsV1UserTeamsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {string} teamId
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [trialExpireDate] Date the trial expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, trialExpireDate, options) {
            return localVarFp.getAuthenticatedUserV1TeamsTeamIdUserGet(teamId, includeAvatar, trialExpireDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {string} [trialExpireDate] Date the trial expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet(includeAvatar, trialExpireDate, options) {
            return localVarFp.getAuthenticatedUserV1UserGet(includeAvatar, trialExpireDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} teamId
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options) {
            return localVarFp.getUserV1TeamsTeamIdUsersUserIdGet(teamId, userId, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet(userId, includeAvatar, options) {
            return localVarFp.getUserV1UsersUserIdGet(userId, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} teamId
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options) {
            return localVarFp.getUsersV1TeamsTeamIdUsersGet(teamId, email, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * List public profiles.
         * @summary Get Users
         * @param {string} [teamId]
         * @param {string} [email] Email address
         * @param {boolean} [includeAvatar] Include avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersV1UsersGet(teamId, email, includeAvatar, options) {
            return localVarFp.getUsersV1UsersGet(teamId, email, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} teamId
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(teamId, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, teamId, options) {
            return localVarFp.listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return localVarFp.listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options) {
            return localVarFp.listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options) {
            return localVarFp.listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options) {
            return localVarFp.listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options) {
            return localVarFp.listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options) {
            return localVarFp.listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options) {
            return localVarFp.listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options) {
            return localVarFp.listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return localVarFp.listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options) {
            return localVarFp.listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options) {
            return localVarFp.listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options) {
            return localVarFp.listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options) {
            return localVarFp.listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options) {
            return localVarFp.listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options) {
            return localVarFp.listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options) {
            return localVarFp.listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId
         * @param {string} teamId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(userId, teamId, updateProfileIn, options) {
            return localVarFp.updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(userId, teamId, updateProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Update A User By Id.
         * @param {string} userId
         * @param {UpdateProfileIn} updateProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAUserByIdV1UsersUserIdPatch(userId, updateProfileIn, options) {
            return localVarFp.updateAUserByIdV1UsersUserIdPatch(userId, updateProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {string} teamId
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options) {
            return localVarFp.updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(teamId, userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1UserPut(userProfileIn, options) {
            return localVarFp.updateAuthenticatedUserProfileV1UserPut(userProfileIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
class UsersApi extends base_1.BaseAPI {
    /**
     * Create a new user.
     * @summary Create A User By Cognito Id.
     * @param {UsersApiCreateAUserByCognitoIdV1TeamsTeamIdUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createAUserByCognitoIdV1TeamsTeamIdUsersPost(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).createAUserByCognitoIdV1TeamsTeamIdUsersPost(requestParameters.teamId, requestParameters.userId, requestParameters.updateProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new user.
     * @summary Create A User By Cognito Id.
     * @param {UsersApiCreateAUserByCognitoIdV1UsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createAUserByCognitoIdV1UsersPost(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).createAUserByCognitoIdV1UsersPost(requestParameters.userId, requestParameters.updateProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new user.
     * @summary Create A User From Credentials.
     * @param {UsersApiCreateAUserFromCredentialsV1TeamsTeamIdUserPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createAUserFromCredentialsV1TeamsTeamIdUserPost(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).createAUserFromCredentialsV1TeamsTeamIdUserPost(requestParameters.teamId, requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new user.
     * @summary Create A User From Credentials.
     * @param {UsersApiCreateAUserFromCredentialsV1UserPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createAUserFromCredentialsV1UserPost(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).createAUserFromCredentialsV1UserPost(requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch the authenticated user\'s team or default.
     * @summary Get Authenticated User\'S Teams
     * @param {UsersApiGetAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).getAuthenticatedUserSTeamsV1TeamsTeamIdUserTeamsGet(requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch the authenticated user\'s team or default.
     * @summary Get Authenticated User\'S Teams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getAuthenticatedUserSTeamsV1UserTeamsGet(options) {
        return exports.UsersApiFp(this.configuration).getAuthenticatedUserSTeamsV1UserTeamsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {UsersApiGetAuthenticatedUserV1TeamsTeamIdUserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getAuthenticatedUserV1TeamsTeamIdUserGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).getAuthenticatedUserV1TeamsTeamIdUserGet(requestParameters.teamId, requestParameters.includeAvatar, requestParameters.trialExpireDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {UsersApiGetAuthenticatedUserV1UserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getAuthenticatedUserV1UserGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).getAuthenticatedUserV1UserGet(requestParameters.includeAvatar, requestParameters.trialExpireDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {UsersApiGetUserV1TeamsTeamIdUsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserV1TeamsTeamIdUsersUserIdGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).getUserV1TeamsTeamIdUsersUserIdGet(requestParameters.teamId, requestParameters.userId, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {UsersApiGetUserV1UsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserV1UsersUserIdGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).getUserV1UsersUserIdGet(requestParameters.userId, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List public profiles.
     * @summary Get Users
     * @param {UsersApiGetUsersV1TeamsTeamIdUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUsersV1TeamsTeamIdUsersGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).getUsersV1TeamsTeamIdUsersGet(requestParameters.teamId, requestParameters.email, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List public profiles.
     * @summary Get Users
     * @param {UsersApiGetUsersV1UsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUsersV1UsersGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).getUsersV1UsersGet(requestParameters.teamId, requestParameters.email, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {UsersApiListAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1TeamsTeamIdUserStudiesStudyIdAssociationsGet(requestParameters.teamId, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {UsersApiListAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserConceptsV1TeamsTeamIdUserConceptsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {UsersApiListAuthenticatedUserConceptsV1UserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {UsersApiListAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserDatasetsV1TeamsTeamIdUserDatasetsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {UsersApiListAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserFeaturesV1TeamsTeamIdUserFeaturesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {UsersApiListAuthenticatedUserModelsV1TeamsTeamIdUserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserModelsV1TeamsTeamIdUserModelsGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {UsersApiListAuthenticatedUserModelsV1UserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserModelsV1UserModelsGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserModelsV1UserModelsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {UsersApiListAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserStudiesV1TeamsTeamIdUserStudiesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {UsersApiListAuthenticatedUserStudiesV1UserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {UsersApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {UsersApiListAuthenticatedUserVariablesV1UserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {UsersApiListUserConceptsV1TeamsTeamIdUsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserConceptsV1TeamsTeamIdUsersUserIdConceptsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {UsersApiListUserConceptsV1UsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserConceptsV1UsersUserIdConceptsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserConceptsV1UsersUserIdConceptsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {UsersApiListUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserDatasetsV1TeamsTeamIdUsersUserIdDatasetsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {UsersApiListUserDatasetsV1UsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {UsersApiListUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserFeaturesV1TeamsTeamIdUsersUserIdFeaturesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {UsersApiListUserFeaturesV1UsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {UsersApiListUserModelsV1TeamsTeamIdUsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserModelsV1TeamsTeamIdUsersUserIdModelsGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {UsersApiListUserModelsV1UsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserModelsV1UsersUserIdModelsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserModelsV1UsersUserIdModelsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {UsersApiListUserStudiesV1TeamsTeamIdUsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserStudiesV1TeamsTeamIdUsersUserIdStudiesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {UsersApiListUserStudiesV1UsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserStudiesV1UsersUserIdStudiesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserStudiesV1UsersUserIdStudiesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {UsersApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {UsersApiListUserVariablesV1UsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserVariablesV1UsersUserIdVariablesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserVariablesV1UsersUserIdVariablesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new user.
     * @summary Update A User By Id.
     * @param {UsersApiUpdateAUserByIdV1TeamsTeamIdUsersUserIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).updateAUserByIdV1TeamsTeamIdUsersUserIdPatch(requestParameters.userId, requestParameters.teamId, requestParameters.updateProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new user.
     * @summary Update A User By Id.
     * @param {UsersApiUpdateAUserByIdV1UsersUserIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateAUserByIdV1UsersUserIdPatch(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).updateAUserByIdV1UsersUserIdPatch(requestParameters.userId, requestParameters.updateProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {UsersApiUpdateAuthenticatedUserProfileV1TeamsTeamIdUserPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).updateAuthenticatedUserProfileV1TeamsTeamIdUserPut(requestParameters.teamId, requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateAuthenticatedUserProfileV1UserPut(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).updateAuthenticatedUserProfileV1UserPut(requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.UsersApi = UsersApi;
/**
 * VariablesApi - axios parameter creator
 * @export
 */
exports.VariablesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamId
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamIdVariablesPost: (teamId, variableIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createAVariableV1TeamsTeamIdVariablesPost', 'teamId', teamId);
            // verify required parameter 'variableIn' is not null or undefined
            common_1.assertParamExists('createAVariableV1TeamsTeamIdVariablesPost', 'variableIn', variableIn);
            const localVarPath = `/v1/teams/{team_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(variableIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {VariableIn} variableIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1VariablesPost: (variableIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableIn' is not null or undefined
            common_1.assertParamExists('createAVariableV1VariablesPost', 'variableIn', variableIn);
            const localVarPath = `/v1/variables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(variableIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamId
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamIdVariablesBulkPost: (teamId, arrayVariableInVariableIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('createMultipleVariablesV1TeamsTeamIdVariablesBulkPost', 'teamId', teamId);
            // verify required parameter 'arrayVariableInVariableIn' is not null or undefined
            common_1.assertParamExists('createMultipleVariablesV1TeamsTeamIdVariablesBulkPost', 'arrayVariableInVariableIn', arrayVariableInVariableIn);
            const localVarPath = `/v1/teams/{team_id}/variables/bulk`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(arrayVariableInVariableIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1VariablesBulkPost: (arrayVariableInVariableIn, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'arrayVariableInVariableIn' is not null or undefined
            common_1.assertParamExists('createMultipleVariablesV1VariablesBulkPost', 'arrayVariableInVariableIn', arrayVariableInVariableIn);
            const localVarPath = `/v1/variables/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(arrayVariableInVariableIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamIdVariablesVariableIdDelete: (teamId, variableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('deleteVariableV1TeamsTeamIdVariablesVariableIdDelete', 'teamId', teamId);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('deleteVariableV1TeamsTeamIdVariablesVariableIdDelete', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1VariablesVariableIdDelete: (variableId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('deleteVariableV1VariablesVariableIdDelete', 'variableId', variableId);
            const localVarPath = `/v1/variables/{variable_id}`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamIdVariablesVariableIdGet: (teamId, variableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('getVariableV1TeamsTeamIdVariablesVariableIdGet', 'teamId', teamId);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('getVariableV1TeamsTeamIdVariablesVariableIdGet', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1VariablesVariableIdGet: (variableId, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('getVariableV1VariablesVariableIdGet', 'variableId', variableId);
            const localVarPath = `/v1/variables/{variable_id}`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet: (teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet', 'teamId', teamId);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/associations`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet: (variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1VariablesVariableIdAssociationsGet', 'variableId', variableId);
            const localVarPath = `/v1/variables/{variable_id}/associations`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/user/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/variables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet: (teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet', 'teamId', teamId);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/dashboards`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1VariablesVariableIdDashboardsGet: (variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listDashboardsV1VariablesVariableIdDashboardsGet', 'variableId', variableId);
            const localVarPath = `/v1/variables/{variable_id}/dashboards`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet: (teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet', 'teamId', teamId);
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet', 'userId', userId);
            const localVarPath = `/v1/teams/{team_id}/users/{user_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserVariablesV1UsersUserIdVariablesGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/variables`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamIdVariablesGet: (teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('listVariablesV1TeamsTeamIdVariablesGet', 'teamId', teamId);
            const localVarPath = `/v1/teams/{team_id}/variables`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1VariablesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/variables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Merge a variable with other ids.
         * @summary Merge Variable Post
         * @param {string} teamId
         * @param {string} variableId
         * @param {BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost} bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost: (teamId, variableId, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost', 'teamId', teamId);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost', 'variableId', variableId);
            // verify required parameter 'bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost' is not null or undefined
            common_1.assertParamExists('mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost', 'bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost', bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost);
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}/merge`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Merge a variable with other ids.
         * @summary Merge Variable Post
         * @param {string} variableId
         * @param {BodyMergeVariablePostV1VariablesVariableIdMergePost} bodyMergeVariablePostV1VariablesVariableIdMergePost
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeVariablePostV1VariablesVariableIdMergePost: (variableId, bodyMergeVariablePostV1VariablesVariableIdMergePost, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('mergeVariablePostV1VariablesVariableIdMergePost', 'variableId', variableId);
            // verify required parameter 'bodyMergeVariablePostV1VariablesVariableIdMergePost' is not null or undefined
            common_1.assertParamExists('mergeVariablePostV1VariablesVariableIdMergePost', 'bodyMergeVariablePostV1VariablesVariableIdMergePost', bodyMergeVariablePostV1VariablesVariableIdMergePost);
            const localVarPath = `/v1/variables/{variable_id}/merge`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyMergeVariablePostV1VariablesVariableIdMergePost, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamIdVariablesVariableIdPatch: (teamId, variableId, patchVariableOpArrayPatchVariableOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamId' is not null or undefined
            common_1.assertParamExists('patchVariableV1TeamsTeamIdVariablesVariableIdPatch', 'teamId', teamId);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('patchVariableV1TeamsTeamIdVariablesVariableIdPatch', 'variableId', variableId);
            // verify required parameter 'patchVariableOpArrayPatchVariableOp' is not null or undefined
            common_1.assertParamExists('patchVariableV1TeamsTeamIdVariablesVariableIdPatch', 'patchVariableOpArrayPatchVariableOp', patchVariableOpArrayPatchVariableOp);
            const localVarPath = `/v1/teams/{team_id}/variables/{variable_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchVariableOpArrayPatchVariableOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1VariablesVariableIdPatch: (variableId, patchVariableOpArrayPatchVariableOp, teamId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('patchVariableV1VariablesVariableIdPatch', 'variableId', variableId);
            // verify required parameter 'patchVariableOpArrayPatchVariableOp' is not null or undefined
            common_1.assertParamExists('patchVariableV1VariablesVariableIdPatch', 'patchVariableOpArrayPatchVariableOp', patchVariableOpArrayPatchVariableOp);
            const localVarPath = `/v1/variables/{variable_id}`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchVariableOpArrayPatchVariableOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * VariablesApi - functional programming interface
 * @export
 */
exports.VariablesApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.VariablesApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamId
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {VariableIn} variableIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1VariablesPost(variableIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAVariableV1VariablesPost(variableIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamId
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1VariablesVariableIdDelete(variableId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteVariableV1VariablesVariableIdDelete(variableId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1VariablesVariableIdGet(variableId, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getVariableV1VariablesVariableIdGet(variableId, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1VariablesVariableIdDashboardsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDashboardsV1VariablesVariableIdDashboardsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1VariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listVariablesV1VariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Merge a variable with other ids.
         * @summary Merge Variable Post
         * @param {string} teamId
         * @param {string} variableId
         * @param {BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost} bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(teamId, variableId, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(teamId, variableId, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Merge a variable with other ids.
         * @summary Merge Variable Post
         * @param {string} variableId
         * @param {BodyMergeVariablePostV1VariablesVariableIdMergePost} bodyMergeVariablePostV1VariablesVariableIdMergePost
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeVariablePostV1VariablesVariableIdMergePost(variableId, bodyMergeVariablePostV1VariablesVariableIdMergePost, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.mergeVariablePostV1VariablesVariableIdMergePost(variableId, bodyMergeVariablePostV1VariablesVariableIdMergePost, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, teamId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, teamId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * VariablesApi - factory interface
 * @export
 */
exports.VariablesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.VariablesApiFp(configuration);
    return {
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamId
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options) {
            return localVarFp.createAVariableV1TeamsTeamIdVariablesPost(teamId, variableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {VariableIn} variableIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1VariablesPost(variableIn, teamId, options) {
            return localVarFp.createAVariableV1VariablesPost(variableIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamId
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options) {
            return localVarFp.createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(teamId, arrayVariableInVariableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn, teamId, options) {
            return localVarFp.createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options) {
            return localVarFp.deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(teamId, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1VariablesVariableIdDelete(variableId, teamId, options) {
            return localVarFp.deleteVariableV1VariablesVariableIdDelete(variableId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options) {
            return localVarFp.getVariableV1TeamsTeamIdVariablesVariableIdGet(teamId, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1VariablesVariableIdGet(variableId, teamId, options) {
            return localVarFp.getVariableV1VariablesVariableIdGet(variableId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1VariablesVariableIdAssociationsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options) {
            return localVarFp.listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options) {
            return localVarFp.listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} teamId
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(teamId, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get dashboards connected to the Variable.
         * @summary List Dashboards
         * @param {string} variableId
         * @param {string} [teamId]
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DashboardSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardsV1VariablesVariableIdDashboardsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listDashboardsV1VariablesVariableIdDashboardsGet(variableId, teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} teamId
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options) {
            return localVarFp.listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(teamId, userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options) {
            return localVarFp.listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options) {
            return localVarFp.listVariablesV1TeamsTeamIdVariablesGet(teamId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {Array<string>} [tags] Custom metric tags
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1VariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options) {
            return localVarFp.listVariablesV1VariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, tags, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Merge a variable with other ids.
         * @summary Merge Variable Post
         * @param {string} teamId
         * @param {string} variableId
         * @param {BodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost} bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(teamId, variableId, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options) {
            return localVarFp.mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(teamId, variableId, bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options).then((request) => request(axios, basePath));
        },
        /**
         * Merge a variable with other ids.
         * @summary Merge Variable Post
         * @param {string} variableId
         * @param {BodyMergeVariablePostV1VariablesVariableIdMergePost} bodyMergeVariablePostV1VariablesVariableIdMergePost
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeVariablePostV1VariablesVariableIdMergePost(variableId, bodyMergeVariablePostV1VariablesVariableIdMergePost, teamId, options) {
            return localVarFp.mergeVariablePostV1VariablesVariableIdMergePost(variableId, bodyMergeVariablePostV1VariablesVariableIdMergePost, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamId
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options) {
            return localVarFp.patchVariableV1TeamsTeamIdVariablesVariableIdPatch(teamId, variableId, patchVariableOpArrayPatchVariableOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {string} [teamId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, teamId, options) {
            return localVarFp.patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, teamId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * VariablesApi - object-oriented interface
 * @export
 * @class VariablesApi
 * @extends {BaseAPI}
 */
class VariablesApi extends base_1.BaseAPI {
    /**
     * Create a Variable.
     * @summary Create A Variable.
     * @param {VariablesApiCreateAVariableV1TeamsTeamIdVariablesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    createAVariableV1TeamsTeamIdVariablesPost(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).createAVariableV1TeamsTeamIdVariablesPost(requestParameters.teamId, requestParameters.variableIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Variable.
     * @summary Create A Variable.
     * @param {VariablesApiCreateAVariableV1VariablesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    createAVariableV1VariablesPost(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).createAVariableV1VariablesPost(requestParameters.variableIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create mulitple Variables.
     * @summary Create Multiple Variables.
     * @param {VariablesApiCreateMultipleVariablesV1TeamsTeamIdVariablesBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).createMultipleVariablesV1TeamsTeamIdVariablesBulkPost(requestParameters.teamId, requestParameters.arrayVariableInVariableIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create mulitple Variables.
     * @summary Create Multiple Variables.
     * @param {VariablesApiCreateMultipleVariablesV1VariablesBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    createMultipleVariablesV1VariablesBulkPost(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).createMultipleVariablesV1VariablesBulkPost(requestParameters.arrayVariableInVariableIn, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
     * @summary Delete Variable
     * @param {VariablesApiDeleteVariableV1TeamsTeamIdVariablesVariableIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).deleteVariableV1TeamsTeamIdVariablesVariableIdDelete(requestParameters.teamId, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
     * @summary Delete Variable
     * @param {VariablesApiDeleteVariableV1VariablesVariableIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    deleteVariableV1VariablesVariableIdDelete(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).deleteVariableV1VariablesVariableIdDelete(requestParameters.variableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Variable.
     * @summary Get Variable
     * @param {VariablesApiGetVariableV1TeamsTeamIdVariablesVariableIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    getVariableV1TeamsTeamIdVariablesVariableIdGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).getVariableV1TeamsTeamIdVariablesVariableIdGet(requestParameters.teamId, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Variable.
     * @summary Get Variable
     * @param {VariablesApiGetVariableV1VariablesVariableIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    getVariableV1VariablesVariableIdGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).getVariableV1VariablesVariableIdGet(requestParameters.variableId, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {VariablesApiListAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listAssociationsV1TeamsTeamIdVariablesVariableIdAssociationsGet(requestParameters.teamId, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {VariablesApiListAssociationsV1VariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters.variableId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {VariablesApiListAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listAuthenticatedUserVariablesV1TeamsTeamIdUserVariablesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {VariablesApiListAuthenticatedUserVariablesV1UserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters = {}, options) {
        return exports.VariablesApiFp(this.configuration).listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get dashboards connected to the Variable.
     * @summary List Dashboards
     * @param {VariablesApiListDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listDashboardsV1TeamsTeamIdVariablesVariableIdDashboardsGet(requestParameters.teamId, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get dashboards connected to the Variable.
     * @summary List Dashboards
     * @param {VariablesApiListDashboardsV1VariablesVariableIdDashboardsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listDashboardsV1VariablesVariableIdDashboardsGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listDashboardsV1VariablesVariableIdDashboardsGet(requestParameters.variableId, requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {VariablesApiListUserVariablesV1TeamsTeamIdUsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listUserVariablesV1TeamsTeamIdUsersUserIdVariablesGet(requestParameters.teamId, requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {VariablesApiListUserVariablesV1UsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listUserVariablesV1UsersUserIdVariablesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listUserVariablesV1UsersUserIdVariablesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Variables.
     * @summary List Variables
     * @param {VariablesApiListVariablesV1TeamsTeamIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listVariablesV1TeamsTeamIdVariablesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listVariablesV1TeamsTeamIdVariablesGet(requestParameters.teamId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Variables.
     * @summary List Variables
     * @param {VariablesApiListVariablesV1VariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listVariablesV1VariablesGet(requestParameters = {}, options) {
        return exports.VariablesApiFp(this.configuration).listVariablesV1VariablesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.tags, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Merge a variable with other ids.
     * @summary Merge Variable Post
     * @param {VariablesApiMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).mergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost(requestParameters.teamId, requestParameters.variableId, requestParameters.bodyMergeVariablePostV1TeamsTeamIdVariablesVariableIdMergePost, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Merge a variable with other ids.
     * @summary Merge Variable Post
     * @param {VariablesApiMergeVariablePostV1VariablesVariableIdMergePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    mergeVariablePostV1VariablesVariableIdMergePost(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).mergeVariablePostV1VariablesVariableIdMergePost(requestParameters.variableId, requestParameters.bodyMergeVariablePostV1VariablesVariableIdMergePost, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Variable resource with partial update.
     * @summary Patch Variable
     * @param {VariablesApiPatchVariableV1TeamsTeamIdVariablesVariableIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    patchVariableV1TeamsTeamIdVariablesVariableIdPatch(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).patchVariableV1TeamsTeamIdVariablesVariableIdPatch(requestParameters.teamId, requestParameters.variableId, requestParameters.patchVariableOpArrayPatchVariableOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Variable resource with partial update.
     * @summary Patch Variable
     * @param {VariablesApiPatchVariableV1VariablesVariableIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    patchVariableV1VariablesVariableIdPatch(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).patchVariableV1VariablesVariableIdPatch(requestParameters.variableId, requestParameters.patchVariableOpArrayPatchVariableOp, requestParameters.teamId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.VariablesApi = VariablesApi;
