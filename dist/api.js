"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * System REST API
 * This is a REST API through which clients can interact with System - an **open**, **collaborative**, and **ever-growing knowledge base** of all the world\'s systems.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariablesApi = exports.VariablesApiFactory = exports.VariablesApiFp = exports.VariablesApiAxiosParamCreator = exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiAxiosParamCreator = exports.TimelineApi = exports.TimelineApiFactory = exports.TimelineApiFp = exports.TimelineApiAxiosParamCreator = exports.TeamsApi = exports.TeamsApiFactory = exports.TeamsApiFp = exports.TeamsApiAxiosParamCreator = exports.SystemApi = exports.SystemApiFactory = exports.SystemApiFp = exports.SystemApiAxiosParamCreator = exports.StudiesApi = exports.StudiesApiFactory = exports.StudiesApiFp = exports.StudiesApiAxiosParamCreator = exports.PopulationAttributesApi = exports.PopulationAttributesApiFactory = exports.PopulationAttributesApiFp = exports.PopulationAttributesApiAxiosParamCreator = exports.PopulationAttributeValuesApi = exports.PopulationAttributeValuesApiFactory = exports.PopulationAttributeValuesApiFp = exports.PopulationAttributeValuesApiAxiosParamCreator = exports.ModelsApi = exports.ModelsApiFactory = exports.ModelsApiFp = exports.ModelsApiAxiosParamCreator = exports.ModeldbApi = exports.ModeldbApiFactory = exports.ModeldbApiFp = exports.ModeldbApiAxiosParamCreator = exports.GraphqlApi = exports.GraphqlApiFactory = exports.GraphqlApiFp = exports.GraphqlApiAxiosParamCreator = exports.GraphApi = exports.GraphApiFactory = exports.GraphApiFp = exports.GraphApiAxiosParamCreator = exports.FeaturesApi = exports.FeaturesApiFactory = exports.FeaturesApiFp = exports.FeaturesApiAxiosParamCreator = exports.EnterpriseApi = exports.EnterpriseApiFactory = exports.EnterpriseApiFp = exports.EnterpriseApiAxiosParamCreator = exports.DatasetsApi = exports.DatasetsApiFactory = exports.DatasetsApiFp = exports.DatasetsApiAxiosParamCreator = exports.ConceptsApi = exports.ConceptsApiFactory = exports.ConceptsApiFp = exports.ConceptsApiAxiosParamCreator = exports.AuthorsApi = exports.AuthorsApiFactory = exports.AuthorsApiFp = exports.AuthorsApiAxiosParamCreator = exports.AssociationsApi = exports.AssociationsApiFactory = exports.AssociationsApiFp = exports.AssociationsApiAxiosParamCreator = exports.VariableTypeEnum = exports.VariableToVariableSystemOfSortEnum = exports.VariableToFeatureSystemOfSortEnum = exports.VariableSortEnum = exports.ValueSourceEnum = exports.ValidValueSource = exports.ValidTransformationTypeEnum = exports.ValidStatisticalTestType = exports.ValidSignificanceLevel = exports.ValidReproducibilityEnum = exports.ValidRelationshipStrengthEnum = exports.ValidRelationshipDirectionEnum = exports.ValidModelScoreEnum = exports.ValidFeatureContributionMethod = exports.ValidDatasetLicenseEnum = exports.ValidCalibratedRelationshipType = exports.UserRolesEnum = exports.SystemObjectResources = exports.StudyTypeEnum = exports.StudySortEnum = exports.StatisticalTestType = exports.SignificanceLevel = exports.RetrievalStatus = exports.ResourceAction = exports.PopulationAttributeValueSortEnum = exports.PopulationAttributeSortEnum = exports.PatchOp = exports.Ordering = exports.ModelSortEnum = exports.ModelScoreEnum = exports.MessageType = exports.IntegrationType = exports.IntegrationState = exports.GraphNodeType = exports.GraphLinkType = exports.FilterValueType = exports.FeatureTypeEnum = exports.FeatureToFeatureSystemOfSortEnum = exports.FeatureSourceEnum = exports.FeatureSortEnum = exports.FeatureContributionMethod = exports.ExternalAssetTypeEnum = exports.DeploymentStageEnum = exports.DatasetSortEnum = exports.DatasetLicenseEnum = exports.ConceptToConceptSystemOfSortEnum = exports.ConceptSortEnum = exports.AuthorSortEnum = exports.AttributeTypeEnum = exports.AssociationSortEnum = exports.AddFlowContext = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * Add study flow context enum.
 * @export
 * @enum {string}
 */
var AddFlowContext;
(function (AddFlowContext) {
    AddFlowContext["Relationship"] = "relationship";
    AddFlowContext["QuickProject"] = "quick_project";
})(AddFlowContext = exports.AddFlowContext || (exports.AddFlowContext = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var AssociationSortEnum;
(function (AssociationSortEnum) {
    AssociationSortEnum["CreatedAt"] = "created_at";
    AssociationSortEnum["LastUpdatedAt"] = "last_updated_at";
})(AssociationSortEnum = exports.AssociationSortEnum || (exports.AssociationSortEnum = {}));
/**
 * Enum for attribute types.
 * @export
 * @enum {string}
 */
var AttributeTypeEnum;
(function (AttributeTypeEnum) {
    AttributeTypeEnum["Invalid"] = "invalid";
    AttributeTypeEnum["Categorical"] = "categorical";
    AttributeTypeEnum["DateRange"] = "date_range";
    AttributeTypeEnum["NumberRange"] = "number_range";
    AttributeTypeEnum["FreeText"] = "free_text";
    AttributeTypeEnum["Location"] = "location";
})(AttributeTypeEnum = exports.AttributeTypeEnum || (exports.AttributeTypeEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var AuthorSortEnum;
(function (AuthorSortEnum) {
    AuthorSortEnum["CreatedAt"] = "created_at";
    AuthorSortEnum["LastUpdatedAt"] = "last_updated_at";
    AuthorSortEnum["Name"] = "name";
})(AuthorSortEnum = exports.AuthorSortEnum || (exports.AuthorSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var ConceptSortEnum;
(function (ConceptSortEnum) {
    ConceptSortEnum["CreatedAt"] = "created_at";
    ConceptSortEnum["LastUpdatedAt"] = "last_updated_at";
    ConceptSortEnum["Name"] = "name";
})(ConceptSortEnum = exports.ConceptSortEnum || (exports.ConceptSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var ConceptToConceptSystemOfSortEnum;
(function (ConceptToConceptSystemOfSortEnum) {
    ConceptToConceptSystemOfSortEnum["PathCount"] = "path_count";
    ConceptToConceptSystemOfSortEnum["CreatedAt"] = "created_at";
})(ConceptToConceptSystemOfSortEnum = exports.ConceptToConceptSystemOfSortEnum || (exports.ConceptToConceptSystemOfSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var DatasetLicenseEnum;
(function (DatasetLicenseEnum) {
    DatasetLicenseEnum["PublicDomain"] = "public_domain";
    DatasetLicenseEnum["CreativeCommonsPublicDomainDedication"] = "creative_commons_public_domain_dedication";
    DatasetLicenseEnum["OpendataCommonsPublicDomainDedicationAndLicense"] = "opendata_commons_public_domain_dedication_and_license";
    DatasetLicenseEnum["CreativeCommonsAttributionInternational"] = "creative_commons_attribution_international";
    DatasetLicenseEnum["CommunityDataLicenseAgreementVersion1Permissive"] = "community_data_license_agreement_version_1_permissive";
    DatasetLicenseEnum["OpenDataCommonsAttributionLicense"] = "open_data_commons_attribution_license";
    DatasetLicenseEnum["CreativeCommonsAttributionShareAlike4International"] = "creative_commons_attribution_share_alike_4_international";
    DatasetLicenseEnum["CommunityDataLicenseAgreementVersion1Sharing"] = "community_data_license_agreement_version_1_sharing";
    DatasetLicenseEnum["OpenDataCommonsOpenDatabaseLicense"] = "open_data_commons_open_database_license";
    DatasetLicenseEnum["CreativeCommonsAttributionNoncommercial4International"] = "creative_commons_attribution_noncommercial_4_international";
    DatasetLicenseEnum["CreativeCommonsAttributionNoderivatives4International"] = "creative_commons_attribution_noderivatives_4_international";
    DatasetLicenseEnum["CreativeCommonsAttributionNoncommercialShareAlike4International"] = "creative_commons_attribution_noncommercial_share_alike_4_international";
    DatasetLicenseEnum["CreativeCommonsAttributionNoncommercialNoderivatives4International"] = "creative_commons_attribution_noncommercial_noderivatives_4_international";
    DatasetLicenseEnum["Other"] = "other";
    DatasetLicenseEnum["Invalid"] = "invalid";
})(DatasetLicenseEnum = exports.DatasetLicenseEnum || (exports.DatasetLicenseEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var DatasetSortEnum;
(function (DatasetSortEnum) {
    DatasetSortEnum["Popularity"] = "popularity";
    DatasetSortEnum["CreatedAt"] = "created_at";
    DatasetSortEnum["LastUpdatedAt"] = "last_updated_at";
    DatasetSortEnum["Name"] = "name";
})(DatasetSortEnum = exports.DatasetSortEnum || (exports.DatasetSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var DeploymentStageEnum;
(function (DeploymentStageEnum) {
    DeploymentStageEnum["Development"] = "development";
    DeploymentStageEnum["Testing"] = "testing";
    DeploymentStageEnum["Staging"] = "staging";
    DeploymentStageEnum["Production"] = "production";
    DeploymentStageEnum["Invalid"] = "invalid";
})(DeploymentStageEnum = exports.DeploymentStageEnum || (exports.DeploymentStageEnum = {}));
/**
 * External asset type enum.
 * @export
 * @enum {string}
 */
var ExternalAssetTypeEnum;
(function (ExternalAssetTypeEnum) {
    ExternalAssetTypeEnum["Invalid"] = "invalid";
    ExternalAssetTypeEnum["Document"] = "document";
    ExternalAssetTypeEnum["Notebook"] = "notebook";
})(ExternalAssetTypeEnum = exports.ExternalAssetTypeEnum || (exports.ExternalAssetTypeEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var FeatureContributionMethod;
(function (FeatureContributionMethod) {
    FeatureContributionMethod["Gini"] = "gini";
    FeatureContributionMethod["Gain"] = "gain";
    FeatureContributionMethod["Shap"] = "shap";
    FeatureContributionMethod["Coefficient"] = "coefficient";
    FeatureContributionMethod["Lime"] = "lime";
    FeatureContributionMethod["Permutation"] = "permutation";
    FeatureContributionMethod["PearsonR"] = "pearson_r";
    FeatureContributionMethod["KendallTau"] = "kendall_tau";
    FeatureContributionMethod["CramerV"] = "cramer_v";
    FeatureContributionMethod["KruskalWallisHTest"] = "kruskal_wallis_h_test";
    FeatureContributionMethod["ControlVariable"] = "control_variable";
    FeatureContributionMethod["ProductMomentR"] = "product_moment_r";
    FeatureContributionMethod["FrequencyScore"] = "frequency_score";
    FeatureContributionMethod["OddsRatio"] = "odds_ratio";
    FeatureContributionMethod["RelativeRiskRatio"] = "relative_risk_ratio";
    FeatureContributionMethod["HazardRatio"] = "hazard_ratio";
    FeatureContributionMethod["MeanGainUnstandardized"] = "mean_gain_unstandardized";
    FeatureContributionMethod["MeanGainStandardized"] = "mean_gain_standardized";
    FeatureContributionMethod["MeanDifferenceUnstandardized"] = "mean_difference_unstandardized";
    FeatureContributionMethod["MeanDifferenceStandardized"] = "mean_difference_standardized";
    FeatureContributionMethod["ProportionDifference"] = "proportion_difference";
    FeatureContributionMethod["LogOddsRatio"] = "log_odds_ratio";
    FeatureContributionMethod["PearsonChiSquaredTest"] = "pearson_chi_squared_test";
    FeatureContributionMethod["Forecast"] = "forecast";
    FeatureContributionMethod["Invalid"] = "invalid";
})(FeatureContributionMethod = exports.FeatureContributionMethod || (exports.FeatureContributionMethod = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var FeatureSortEnum;
(function (FeatureSortEnum) {
    FeatureSortEnum["ModelCount"] = "model_count";
    FeatureSortEnum["CreatedAt"] = "created_at";
    FeatureSortEnum["LastUpdatedAt"] = "last_updated_at";
    FeatureSortEnum["Name"] = "name";
})(FeatureSortEnum = exports.FeatureSortEnum || (exports.FeatureSortEnum = {}));
/**
 * Enum for feature source.
 * @export
 * @enum {string}
 */
var FeatureSourceEnum;
(function (FeatureSourceEnum) {
    FeatureSourceEnum["Invalid"] = "invalid";
    FeatureSourceEnum["LocalEvaluator"] = "local_evaluator";
    FeatureSourceEnum["RemoteEvaluator"] = "remote_evaluator";
    FeatureSourceEnum["User"] = "user";
})(FeatureSourceEnum = exports.FeatureSourceEnum || (exports.FeatureSourceEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var FeatureToFeatureSystemOfSortEnum;
(function (FeatureToFeatureSystemOfSortEnum) {
    FeatureToFeatureSystemOfSortEnum["PathCount"] = "path_count";
    FeatureToFeatureSystemOfSortEnum["CreatedAt"] = "created_at";
    FeatureToFeatureSystemOfSortEnum["ModelCount"] = "model_count";
})(FeatureToFeatureSystemOfSortEnum = exports.FeatureToFeatureSystemOfSortEnum || (exports.FeatureToFeatureSystemOfSortEnum = {}));
/**
 * Enum for feature types.
 * @export
 * @enum {string}
 */
var FeatureTypeEnum;
(function (FeatureTypeEnum) {
    FeatureTypeEnum["Invalid"] = "invalid";
    FeatureTypeEnum["Numerical"] = "numerical";
    FeatureTypeEnum["Categorical"] = "categorical";
    FeatureTypeEnum["Datetime"] = "datetime";
    FeatureTypeEnum["Text"] = "text";
    FeatureTypeEnum["Image"] = "image";
    FeatureTypeEnum["Audio"] = "audio";
    FeatureTypeEnum["Video"] = "video";
    FeatureTypeEnum["File"] = "file";
    FeatureTypeEnum["TimeSeries"] = "time_series";
    FeatureTypeEnum["Dynamic"] = "dynamic";
    FeatureTypeEnum["String"] = "string";
})(FeatureTypeEnum = exports.FeatureTypeEnum || (exports.FeatureTypeEnum = {}));
/**
 * Filter value types.
 * @export
 * @enum {string}
 */
var FilterValueType;
(function (FilterValueType) {
    FilterValueType["Filter"] = "filter";
    FilterValueType["Sort"] = "sort";
})(FilterValueType = exports.FilterValueType || (exports.FilterValueType = {}));
/**
 * Graph Link Type enum.
 * @export
 * @enum {string}
 */
var GraphLinkType;
(function (GraphLinkType) {
    GraphLinkType["DatasetRelationship"] = "dataset_relationship";
    GraphLinkType["ConceptRelationship"] = "concept_relationship";
    GraphLinkType["VariableRelationship"] = "variable_relationship";
    GraphLinkType["FeatureRelationship"] = "feature_relationship";
    GraphLinkType["FeatureVariable"] = "feature_variable";
    GraphLinkType["Measures"] = "measures";
})(GraphLinkType = exports.GraphLinkType || (exports.GraphLinkType = {}));
/**
 * Graph Node Type enum.
 * @export
 * @enum {string}
 */
var GraphNodeType;
(function (GraphNodeType) {
    GraphNodeType["Dataset"] = "dataset";
    GraphNodeType["Concept"] = "concept";
    GraphNodeType["Variable"] = "variable";
    GraphNodeType["Feature"] = "feature";
})(GraphNodeType = exports.GraphNodeType || (exports.GraphNodeType = {}));
/**
 * Integration service state.
 * @export
 * @enum {string}
 */
var IntegrationState;
(function (IntegrationState) {
    IntegrationState["Initial"] = "INITIAL";
    IntegrationState["Active"] = "ACTIVE";
    IntegrationState["Inactive"] = "INACTIVE";
})(IntegrationState = exports.IntegrationState || (exports.IntegrationState = {}));
/**
 * Integration retrieval types.
 * @export
 * @enum {string}
 */
var IntegrationType;
(function (IntegrationType) {
    IntegrationType["Redshift"] = "REDSHIFT";
    IntegrationType["Snowflake"] = "SNOWFLAKE";
    IntegrationType["Bigquery"] = "BIGQUERY";
})(IntegrationType = exports.IntegrationType || (exports.IntegrationType = {}));
/**
 * Message type.
 * @export
 * @enum {string}
 */
var MessageType;
(function (MessageType) {
    MessageType["Error"] = "ERROR";
    MessageType["DatasetCreated"] = "DATASET_CREATED";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var ModelScoreEnum;
(function (ModelScoreEnum) {
    ModelScoreEnum["AccuracyScore"] = "accuracy_score";
    ModelScoreEnum["AveragePrecisionScore"] = "average_precision_score";
    ModelScoreEnum["BalancedAccuracyScore"] = "balanced_accuracy_score";
    ModelScoreEnum["BrierScoreLoss"] = "brier_score_loss";
    ModelScoreEnum["CohenKappaScore"] = "cohen_kappa_score";
    ModelScoreEnum["F1Score"] = "f1_score";
    ModelScoreEnum["HammingLoss"] = "hamming_loss";
    ModelScoreEnum["HingeLoss"] = "hinge_loss";
    ModelScoreEnum["JaccardScore"] = "jaccard_score";
    ModelScoreEnum["LogLoss"] = "log_loss";
    ModelScoreEnum["MatthewsCorrCoef"] = "matthews_corr_coef";
    ModelScoreEnum["PrecisionScore"] = "precision_score";
    ModelScoreEnum["RecallScore"] = "recall_score";
    ModelScoreEnum["RocAucScore"] = "roc_auc_score";
    ModelScoreEnum["ZeroOneLoss"] = "zero_one_loss";
    ModelScoreEnum["ExplainedVarianceScore"] = "explained_variance_score";
    ModelScoreEnum["MaxError"] = "max_error";
    ModelScoreEnum["MeanAbsoluteError"] = "mean_absolute_error";
    ModelScoreEnum["MeanAbsolutePercentageError"] = "mean_absolute_percentage_error";
    ModelScoreEnum["MeanSquaredError"] = "mean_squared_error";
    ModelScoreEnum["MeanSquaredLogError"] = "mean_squared_log_error";
    ModelScoreEnum["MedianAbsoluteError"] = "median_absolute_error";
    ModelScoreEnum["R2Score"] = "r2_score";
    ModelScoreEnum["CoverageError"] = "coverage_error";
    ModelScoreEnum["LabelRankingAveragePrecisionScore"] = "label_ranking_average_precision_score";
    ModelScoreEnum["LabelRankingLoss"] = "label_ranking_loss";
    ModelScoreEnum["AdjustedR2Score"] = "adjusted_r2_score";
    ModelScoreEnum["MutualInformationScore"] = "mutual_information_score";
    ModelScoreEnum["AdjMutualInformationScore"] = "adj_mutual_information_score";
    ModelScoreEnum["NormalizedMutualInformationScore"] = "normalized_mutual_information_score";
    ModelScoreEnum["AdjRandScore"] = "adj_rand_score";
    ModelScoreEnum["CompletenessScore"] = "completeness_score";
    ModelScoreEnum["FowlkesMallowsScore"] = "fowlkes_mallows_score";
    ModelScoreEnum["HomogeneityScore"] = "homogeneity_score";
    ModelScoreEnum["VMeasureScore"] = "v_measure_score";
    ModelScoreEnum["NegMeanAbsoluteError"] = "neg_mean_absolute_error";
    ModelScoreEnum["NegMeanSquaredError"] = "neg_mean_squared_error";
    ModelScoreEnum["RootMeanSquaredError"] = "root_mean_squared_error";
    ModelScoreEnum["NegRootMeanSquaredError"] = "neg_root_mean_squared_error";
    ModelScoreEnum["RootMeanSquaredLogError"] = "root_mean_squared_log_error";
    ModelScoreEnum["NegMedianAbsoluteError"] = "neg_median_absolute_error";
    ModelScoreEnum["CosineProximity"] = "cosine_proximity";
    ModelScoreEnum["KullbackLeiblerDivergence"] = "kullback_leibler_divergence";
    ModelScoreEnum["PoissonMetric"] = "poisson_metric";
    ModelScoreEnum["MulticlassLogLoss"] = "multiclass_log_loss";
    ModelScoreEnum["NormalizedDiscountedCumulativeGain"] = "normalized_discounted_cumulative_gain";
    ModelScoreEnum["GammaDeviance"] = "gamma_deviance";
    ModelScoreEnum["HuberMetric"] = "huber_metric";
    ModelScoreEnum["FBetaScore"] = "f_beta_score";
    ModelScoreEnum["EuclideanDistance"] = "euclidean_distance";
    ModelScoreEnum["HaversineDistance"] = "haversine_distance";
    ModelScoreEnum["MeanSquaredPredictioneRror"] = "mean_squared_predictione_rror";
    ModelScoreEnum["PseudoR2Mcfadden"] = "pseudo_r2_mcfadden";
    ModelScoreEnum["AdjustedPseudoR2Mcfadden"] = "adjusted_pseudo_r2_mcfadden";
    ModelScoreEnum["PseudoR2Nagelkerke"] = "pseudo_r2_nagelkerke";
    ModelScoreEnum["PseudoR2CoxSnell"] = "pseudo_r2_cox_snell";
    ModelScoreEnum["PseudoR2Effron"] = "pseudo_r2_effron";
    ModelScoreEnum["Bic"] = "bic";
    ModelScoreEnum["Aic"] = "aic";
    ModelScoreEnum["CorrelationActualForecast"] = "correlation_actual_forecast";
    ModelScoreEnum["ForecastVsActual"] = "forecast_vs_actual";
    ModelScoreEnum["MeanSquaredPercentageError"] = "mean_squared_percentage_error";
    ModelScoreEnum["ConfusionMatrix"] = "confusion_matrix";
    ModelScoreEnum["MulticlassConfusionMatrix"] = "multiclass_confusion_matrix";
    ModelScoreEnum["RocCurve"] = "roc_curve";
    ModelScoreEnum["Invalid"] = "invalid";
})(ModelScoreEnum = exports.ModelScoreEnum || (exports.ModelScoreEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var ModelSortEnum;
(function (ModelSortEnum) {
    ModelSortEnum["TargetName"] = "target_name";
    ModelSortEnum["CreatedAt"] = "created_at";
    ModelSortEnum["LastUpdatedAt"] = "last_updated_at";
})(ModelSortEnum = exports.ModelSortEnum || (exports.ModelSortEnum = {}));
/**
 * Ordering direction enum.
 * @export
 * @enum {string}
 */
var Ordering;
(function (Ordering) {
    Ordering["Asc"] = "asc";
    Ordering["Desc"] = "desc";
})(Ordering = exports.Ordering || (exports.Ordering = {}));
/**
 * Enum for PATCH operations.
 * @export
 * @enum {string}
 */
var PatchOp;
(function (PatchOp) {
    PatchOp["Update"] = "update";
    PatchOp["Append"] = "append";
    PatchOp["Delete"] = "delete";
})(PatchOp = exports.PatchOp || (exports.PatchOp = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var PopulationAttributeSortEnum;
(function (PopulationAttributeSortEnum) {
    PopulationAttributeSortEnum["CreatedAt"] = "created_at";
    PopulationAttributeSortEnum["LastUpdatedAt"] = "last_updated_at";
    PopulationAttributeSortEnum["Name"] = "name";
})(PopulationAttributeSortEnum = exports.PopulationAttributeSortEnum || (exports.PopulationAttributeSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var PopulationAttributeValueSortEnum;
(function (PopulationAttributeValueSortEnum) {
    PopulationAttributeValueSortEnum["CreatedAt"] = "created_at";
    PopulationAttributeValueSortEnum["LastUpdatedAt"] = "last_updated_at";
    PopulationAttributeValueSortEnum["Name"] = "name";
})(PopulationAttributeValueSortEnum = exports.PopulationAttributeValueSortEnum || (exports.PopulationAttributeValueSortEnum = {}));
/**
 * API resource action enum.
 * @export
 * @enum {string}
 */
var ResourceAction;
(function (ResourceAction) {
    ResourceAction["Create"] = "create";
    ResourceAction["View"] = "view";
    ResourceAction["Edit"] = "edit";
    ResourceAction["Delete"] = "delete";
})(ResourceAction = exports.ResourceAction || (exports.ResourceAction = {}));
/**
 * Table retrieval status.
 * @export
 * @enum {string}
 */
var RetrievalStatus;
(function (RetrievalStatus) {
    RetrievalStatus["Pending"] = "pending";
    RetrievalStatus["Success"] = "success";
    RetrievalStatus["Failure"] = "failure";
})(RetrievalStatus = exports.RetrievalStatus || (exports.RetrievalStatus = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var SignificanceLevel;
(function (SignificanceLevel) {
    SignificanceLevel["NinetyFive"] = "ninety_five";
    SignificanceLevel["NinetyNine"] = "ninety_nine";
    SignificanceLevel["NinetyNinePointNine"] = "ninety_nine_point_nine";
    SignificanceLevel["Invalid"] = "invalid";
})(SignificanceLevel = exports.SignificanceLevel || (exports.SignificanceLevel = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var StatisticalTestType;
(function (StatisticalTestType) {
    StatisticalTestType["Ttest"] = "ttest";
    StatisticalTestType["Ztest"] = "ztest";
    StatisticalTestType["Anova"] = "anova";
    StatisticalTestType["Chisquared"] = "chisquared";
    StatisticalTestType["Htest"] = "htest";
    StatisticalTestType["Invalid"] = "invalid";
})(StatisticalTestType = exports.StatisticalTestType || (exports.StatisticalTestType = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var StudySortEnum;
(function (StudySortEnum) {
    StudySortEnum["CreatedAt"] = "created_at";
    StudySortEnum["LastUpdatedAt"] = "last_updated_at";
    StudySortEnum["Name"] = "name";
})(StudySortEnum = exports.StudySortEnum || (exports.StudySortEnum = {}));
/**
 * Enum for study types.
 * @export
 * @enum {string}
 */
var StudyTypeEnum;
(function (StudyTypeEnum) {
    StudyTypeEnum["Invalid"] = "invalid";
    StudyTypeEnum["SupervisedMl"] = "supervised_ml";
    StudyTypeEnum["UnsupervisedMl"] = "unsupervised_ml";
    StudyTypeEnum["StatisticalInference"] = "statistical_inference";
    StudyTypeEnum["RandomizedControlTrial"] = "randomized_control_trial";
})(StudyTypeEnum = exports.StudyTypeEnum || (exports.StudyTypeEnum = {}));
/**
 * Enum System object resource names.
 * @export
 * @enum {string}
 */
var SystemObjectResources;
(function (SystemObjectResources) {
    SystemObjectResources["Variable"] = "variable";
    SystemObjectResources["Dataset"] = "dataset";
    SystemObjectResources["Feature"] = "feature";
    SystemObjectResources["Study"] = "study";
    SystemObjectResources["Model"] = "model";
    SystemObjectResources["Author"] = "author";
    SystemObjectResources["Concept"] = "concept";
    SystemObjectResources["PopulationAttribute"] = "population_attribute";
    SystemObjectResources["PopulationAttributeValue"] = "population_attribute_value";
    SystemObjectResources["Association"] = "association";
    SystemObjectResources["Team"] = "team";
})(SystemObjectResources = exports.SystemObjectResources || (exports.SystemObjectResources = {}));
/**
 * Enum for user roles.
 * @export
 * @enum {string}
 */
var UserRolesEnum;
(function (UserRolesEnum) {
    UserRolesEnum["Reader"] = "reader";
    UserRolesEnum["Writer"] = "writer";
    UserRolesEnum["Admin"] = "admin";
})(UserRolesEnum = exports.UserRolesEnum || (exports.UserRolesEnum = {}));
/**
 * Enum for valid calibrated relationship type.
 * @export
 * @enum {string}
 */
var ValidCalibratedRelationshipType;
(function (ValidCalibratedRelationshipType) {
    ValidCalibratedRelationshipType["Invalid"] = "invalid";
    ValidCalibratedRelationshipType["SiPearsonR"] = "si_pearson_r";
    ValidCalibratedRelationshipType["SiKendallTau"] = "si_kendall_tau";
    ValidCalibratedRelationshipType["SiCramerV"] = "si_cramer_v";
    ValidCalibratedRelationshipType["MlPermutationF1"] = "ml_permutation_f1";
    ValidCalibratedRelationshipType["MlPermutationR2"] = "ml_permutation_r2";
    ValidCalibratedRelationshipType["SiEffectSizeR"] = "si_effect_size_r";
    ValidCalibratedRelationshipType["SiEffectSizeD"] = "si_effect_size_d";
})(ValidCalibratedRelationshipType = exports.ValidCalibratedRelationshipType || (exports.ValidCalibratedRelationshipType = {}));
/**
 * Enum for valid dataset license.
 * @export
 * @enum {string}
 */
var ValidDatasetLicenseEnum;
(function (ValidDatasetLicenseEnum) {
    ValidDatasetLicenseEnum["PublicDomain"] = "public_domain";
    ValidDatasetLicenseEnum["CreativeCommonsPublicDomainDedication"] = "creative_commons_public_domain_dedication";
    ValidDatasetLicenseEnum["OpendataCommonsPublicDomainDedicationAndLicense"] = "opendata_commons_public_domain_dedication_and_license";
    ValidDatasetLicenseEnum["CreativeCommonsAttributionInternational"] = "creative_commons_attribution_international";
    ValidDatasetLicenseEnum["CommunityDataLicenseAgreementVersion1Permissive"] = "community_data_license_agreement_version_1_permissive";
    ValidDatasetLicenseEnum["OpenDataCommonsAttributionLicense"] = "open_data_commons_attribution_license";
    ValidDatasetLicenseEnum["CreativeCommonsAttributionShareAlike4International"] = "creative_commons_attribution_share_alike_4_international";
    ValidDatasetLicenseEnum["CommunityDataLicenseAgreementVersion1Sharing"] = "community_data_license_agreement_version_1_sharing";
    ValidDatasetLicenseEnum["OpenDataCommonsOpenDatabaseLicense"] = "open_data_commons_open_database_license";
    ValidDatasetLicenseEnum["CreativeCommonsAttributionNoncommercial4International"] = "creative_commons_attribution_noncommercial_4_international";
    ValidDatasetLicenseEnum["CreativeCommonsAttributionNoderivatives4International"] = "creative_commons_attribution_noderivatives_4_international";
    ValidDatasetLicenseEnum["CreativeCommonsAttributionNoncommercialShareAlike4International"] = "creative_commons_attribution_noncommercial_share_alike_4_international";
    ValidDatasetLicenseEnum["CreativeCommonsAttributionNoncommercialNoderivatives4International"] = "creative_commons_attribution_noncommercial_noderivatives_4_international";
    ValidDatasetLicenseEnum["Other"] = "other";
})(ValidDatasetLicenseEnum = exports.ValidDatasetLicenseEnum || (exports.ValidDatasetLicenseEnum = {}));
/**
 * Valid feature contribution method enums.
 * @export
 * @enum {string}
 */
var ValidFeatureContributionMethod;
(function (ValidFeatureContributionMethod) {
    ValidFeatureContributionMethod["Gini"] = "gini";
    ValidFeatureContributionMethod["Gain"] = "gain";
    ValidFeatureContributionMethod["Shap"] = "shap";
    ValidFeatureContributionMethod["Coefficient"] = "coefficient";
    ValidFeatureContributionMethod["Lime"] = "lime";
    ValidFeatureContributionMethod["Permutation"] = "permutation";
    ValidFeatureContributionMethod["PearsonR"] = "pearson_r";
    ValidFeatureContributionMethod["KendallTau"] = "kendall_tau";
    ValidFeatureContributionMethod["CramerV"] = "cramer_v";
    ValidFeatureContributionMethod["KruskalWallisHTest"] = "kruskal_wallis_h_test";
    ValidFeatureContributionMethod["ControlVariable"] = "control_variable";
    ValidFeatureContributionMethod["ProductMomentR"] = "product_moment_r";
    ValidFeatureContributionMethod["FrequencyScore"] = "frequency_score";
    ValidFeatureContributionMethod["OddsRatio"] = "odds_ratio";
    ValidFeatureContributionMethod["RelativeRiskRatio"] = "relative_risk_ratio";
    ValidFeatureContributionMethod["HazardRatio"] = "hazard_ratio";
    ValidFeatureContributionMethod["MeanGainUnstandardized"] = "mean_gain_unstandardized";
    ValidFeatureContributionMethod["MeanGainStandardized"] = "mean_gain_standardized";
    ValidFeatureContributionMethod["MeanDifferenceUnstandardized"] = "mean_difference_unstandardized";
    ValidFeatureContributionMethod["MeanDifferenceStandardized"] = "mean_difference_standardized";
    ValidFeatureContributionMethod["ProportionDifference"] = "proportion_difference";
    ValidFeatureContributionMethod["LogOddsRatio"] = "log_odds_ratio";
    ValidFeatureContributionMethod["PearsonChiSquaredTest"] = "pearson_chi_squared_test";
    ValidFeatureContributionMethod["Forecast"] = "forecast";
})(ValidFeatureContributionMethod = exports.ValidFeatureContributionMethod || (exports.ValidFeatureContributionMethod = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var ValidModelScoreEnum;
(function (ValidModelScoreEnum) {
    ValidModelScoreEnum["AccuracyScore"] = "accuracy_score";
    ValidModelScoreEnum["AveragePrecisionScore"] = "average_precision_score";
    ValidModelScoreEnum["BalancedAccuracyScore"] = "balanced_accuracy_score";
    ValidModelScoreEnum["BrierScoreLoss"] = "brier_score_loss";
    ValidModelScoreEnum["CohenKappaScore"] = "cohen_kappa_score";
    ValidModelScoreEnum["F1Score"] = "f1_score";
    ValidModelScoreEnum["HammingLoss"] = "hamming_loss";
    ValidModelScoreEnum["HingeLoss"] = "hinge_loss";
    ValidModelScoreEnum["JaccardScore"] = "jaccard_score";
    ValidModelScoreEnum["LogLoss"] = "log_loss";
    ValidModelScoreEnum["MatthewsCorrCoef"] = "matthews_corr_coef";
    ValidModelScoreEnum["PrecisionScore"] = "precision_score";
    ValidModelScoreEnum["RecallScore"] = "recall_score";
    ValidModelScoreEnum["RocAucScore"] = "roc_auc_score";
    ValidModelScoreEnum["ZeroOneLoss"] = "zero_one_loss";
    ValidModelScoreEnum["ExplainedVarianceScore"] = "explained_variance_score";
    ValidModelScoreEnum["MaxError"] = "max_error";
    ValidModelScoreEnum["MeanAbsoluteError"] = "mean_absolute_error";
    ValidModelScoreEnum["MeanAbsolutePercentageError"] = "mean_absolute_percentage_error";
    ValidModelScoreEnum["MeanSquaredError"] = "mean_squared_error";
    ValidModelScoreEnum["MeanSquaredLogError"] = "mean_squared_log_error";
    ValidModelScoreEnum["MedianAbsoluteError"] = "median_absolute_error";
    ValidModelScoreEnum["R2Score"] = "r2_score";
    ValidModelScoreEnum["CoverageError"] = "coverage_error";
    ValidModelScoreEnum["LabelRankingAveragePrecisionScore"] = "label_ranking_average_precision_score";
    ValidModelScoreEnum["LabelRankingLoss"] = "label_ranking_loss";
    ValidModelScoreEnum["AdjustedR2Score"] = "adjusted_r2_score";
    ValidModelScoreEnum["MutualInformationScore"] = "mutual_information_score";
    ValidModelScoreEnum["AdjMutualInformationScore"] = "adj_mutual_information_score";
    ValidModelScoreEnum["NormalizedMutualInformationScore"] = "normalized_mutual_information_score";
    ValidModelScoreEnum["AdjRandScore"] = "adj_rand_score";
    ValidModelScoreEnum["CompletenessScore"] = "completeness_score";
    ValidModelScoreEnum["FowlkesMallowsScore"] = "fowlkes_mallows_score";
    ValidModelScoreEnum["HomogeneityScore"] = "homogeneity_score";
    ValidModelScoreEnum["VMeasureScore"] = "v_measure_score";
    ValidModelScoreEnum["NegMeanAbsoluteError"] = "neg_mean_absolute_error";
    ValidModelScoreEnum["NegMeanSquaredError"] = "neg_mean_squared_error";
    ValidModelScoreEnum["RootMeanSquaredError"] = "root_mean_squared_error";
    ValidModelScoreEnum["NegRootMeanSquaredError"] = "neg_root_mean_squared_error";
    ValidModelScoreEnum["RootMeanSquaredLogError"] = "root_mean_squared_log_error";
    ValidModelScoreEnum["NegMedianAbsoluteError"] = "neg_median_absolute_error";
    ValidModelScoreEnum["CosineProximity"] = "cosine_proximity";
    ValidModelScoreEnum["KullbackLeiblerDivergence"] = "kullback_leibler_divergence";
    ValidModelScoreEnum["PoissonMetric"] = "poisson_metric";
    ValidModelScoreEnum["MulticlassLogLoss"] = "multiclass_log_loss";
    ValidModelScoreEnum["NormalizedDiscountedCumulativeGain"] = "normalized_discounted_cumulative_gain";
    ValidModelScoreEnum["GammaDeviance"] = "gamma_deviance";
    ValidModelScoreEnum["HuberMetric"] = "huber_metric";
    ValidModelScoreEnum["FBetaScore"] = "f_beta_score";
    ValidModelScoreEnum["EuclideanDistance"] = "euclidean_distance";
    ValidModelScoreEnum["HaversineDistance"] = "haversine_distance";
    ValidModelScoreEnum["MeanSquaredPredictioneRror"] = "mean_squared_predictione_rror";
    ValidModelScoreEnum["PseudoR2Mcfadden"] = "pseudo_r2_mcfadden";
    ValidModelScoreEnum["AdjustedPseudoR2Mcfadden"] = "adjusted_pseudo_r2_mcfadden";
    ValidModelScoreEnum["PseudoR2Nagelkerke"] = "pseudo_r2_nagelkerke";
    ValidModelScoreEnum["PseudoR2CoxSnell"] = "pseudo_r2_cox_snell";
    ValidModelScoreEnum["PseudoR2Effron"] = "pseudo_r2_effron";
    ValidModelScoreEnum["Bic"] = "bic";
    ValidModelScoreEnum["Aic"] = "aic";
    ValidModelScoreEnum["CorrelationActualForecast"] = "correlation_actual_forecast";
    ValidModelScoreEnum["ForecastVsActual"] = "forecast_vs_actual";
    ValidModelScoreEnum["MeanSquaredPercentageError"] = "mean_squared_percentage_error";
    ValidModelScoreEnum["ConfusionMatrix"] = "confusion_matrix";
    ValidModelScoreEnum["MulticlassConfusionMatrix"] = "multiclass_confusion_matrix";
    ValidModelScoreEnum["RocCurve"] = "roc_curve";
})(ValidModelScoreEnum = exports.ValidModelScoreEnum || (exports.ValidModelScoreEnum = {}));
/**
 * Enum for valid relationship direction.
 * @export
 * @enum {string}
 */
var ValidRelationshipDirectionEnum;
(function (ValidRelationshipDirectionEnum) {
    ValidRelationshipDirectionEnum["Positive"] = "positive";
    ValidRelationshipDirectionEnum["Negative"] = "negative";
    ValidRelationshipDirectionEnum["Zero"] = "zero";
    ValidRelationshipDirectionEnum["Invalid"] = "invalid";
})(ValidRelationshipDirectionEnum = exports.ValidRelationshipDirectionEnum || (exports.ValidRelationshipDirectionEnum = {}));
/**
 * Enum for valid relationship strength.
 * @export
 * @enum {string}
 */
var ValidRelationshipStrengthEnum;
(function (ValidRelationshipStrengthEnum) {
    ValidRelationshipStrengthEnum["Invalid"] = "invalid";
    ValidRelationshipStrengthEnum["VeryWeak"] = "very_weak";
    ValidRelationshipStrengthEnum["Weak"] = "weak";
    ValidRelationshipStrengthEnum["Moderate"] = "moderate";
    ValidRelationshipStrengthEnum["Strong"] = "strong";
    ValidRelationshipStrengthEnum["VeryStrong"] = "very_strong";
})(ValidRelationshipStrengthEnum = exports.ValidRelationshipStrengthEnum || (exports.ValidRelationshipStrengthEnum = {}));
/**
 * Enum for valid reproducibility level.
 * @export
 * @enum {string}
 */
var ValidReproducibilityEnum;
(function (ValidReproducibilityEnum) {
    ValidReproducibilityEnum["Invalid"] = "invalid";
    ValidReproducibilityEnum["Low"] = "low";
    ValidReproducibilityEnum["Medium"] = "medium";
    ValidReproducibilityEnum["High"] = "high";
})(ValidReproducibilityEnum = exports.ValidReproducibilityEnum || (exports.ValidReproducibilityEnum = {}));
/**
 * Valid significance level enums.
 * @export
 * @enum {string}
 */
var ValidSignificanceLevel;
(function (ValidSignificanceLevel) {
    ValidSignificanceLevel["Five"] = "ninety_five";
    ValidSignificanceLevel["Nine"] = "ninety_nine";
    ValidSignificanceLevel["NinePointNine"] = "ninety_nine_point_nine";
})(ValidSignificanceLevel = exports.ValidSignificanceLevel || (exports.ValidSignificanceLevel = {}));
/**
 * Valid statistical test type enums.
 * @export
 * @enum {string}
 */
var ValidStatisticalTestType;
(function (ValidStatisticalTestType) {
    ValidStatisticalTestType["Ttest"] = "ttest";
    ValidStatisticalTestType["Ztest"] = "ztest";
    ValidStatisticalTestType["Anova"] = "anova";
    ValidStatisticalTestType["Chisquared"] = "chisquared";
    ValidStatisticalTestType["Htest"] = "htest";
})(ValidStatisticalTestType = exports.ValidStatisticalTestType || (exports.ValidStatisticalTestType = {}));
/**
 * Valid transformation type enums.
 * @export
 * @enum {string}
 */
var ValidTransformationTypeEnum;
(function (ValidTransformationTypeEnum) {
    ValidTransformationTypeEnum["NoTransformation"] = "no_transformation";
    ValidTransformationTypeEnum["Kfold"] = "kfold";
    ValidTransformationTypeEnum["LeavePOut"] = "leave_p_out";
    ValidTransformationTypeEnum["Holdout"] = "holdout";
    ValidTransformationTypeEnum["Independent"] = "independent";
})(ValidTransformationTypeEnum = exports.ValidTransformationTypeEnum || (exports.ValidTransformationTypeEnum = {}));
/**
 * Valid value source enum.
 * @export
 * @enum {string}
 */
var ValidValueSource;
(function (ValidValueSource) {
    ValidValueSource["LocalEvaluator"] = "local_evaluator";
    ValidValueSource["RemoteEvaluator"] = "remote_evaluator";
    ValidValueSource["User"] = "user";
})(ValidValueSource = exports.ValidValueSource || (exports.ValidValueSource = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var ValueSourceEnum;
(function (ValueSourceEnum) {
    ValueSourceEnum["LocalEvaluator"] = "local_evaluator";
    ValueSourceEnum["RemoteEvaluator"] = "remote_evaluator";
    ValueSourceEnum["User"] = "user";
    ValueSourceEnum["Invalid"] = "invalid";
})(ValueSourceEnum = exports.ValueSourceEnum || (exports.ValueSourceEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var VariableSortEnum;
(function (VariableSortEnum) {
    VariableSortEnum["ModelCount"] = "model_count";
    VariableSortEnum["CreatedAt"] = "created_at";
    VariableSortEnum["LastUpdatedAt"] = "last_updated_at";
    VariableSortEnum["Name"] = "name";
})(VariableSortEnum = exports.VariableSortEnum || (exports.VariableSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var VariableToFeatureSystemOfSortEnum;
(function (VariableToFeatureSystemOfSortEnum) {
    VariableToFeatureSystemOfSortEnum["PathCount"] = "path_count";
    VariableToFeatureSystemOfSortEnum["CreatedAt"] = "created_at";
    VariableToFeatureSystemOfSortEnum["ModelCount"] = "model_count";
})(VariableToFeatureSystemOfSortEnum = exports.VariableToFeatureSystemOfSortEnum || (exports.VariableToFeatureSystemOfSortEnum = {}));
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
var VariableToVariableSystemOfSortEnum;
(function (VariableToVariableSystemOfSortEnum) {
    VariableToVariableSystemOfSortEnum["PathCount"] = "path_count";
    VariableToVariableSystemOfSortEnum["CreatedAt"] = "created_at";
    VariableToVariableSystemOfSortEnum["ModelCount"] = "model_count";
})(VariableToVariableSystemOfSortEnum = exports.VariableToVariableSystemOfSortEnum || (exports.VariableToVariableSystemOfSortEnum = {}));
/**
 * Enum for variable types.
 * @export
 * @enum {string}
 */
var VariableTypeEnum;
(function (VariableTypeEnum) {
    VariableTypeEnum["Unknown"] = "unknown";
    VariableTypeEnum["CategoricalNominal"] = "categorical_nominal";
    VariableTypeEnum["CategoricalOrdinal"] = "categorical_ordinal";
    VariableTypeEnum["CategoricalBinary"] = "categorical_binary";
    VariableTypeEnum["NumericalDiscrete"] = "numerical_discrete";
    VariableTypeEnum["NumericalContinuous"] = "numerical_continuous";
})(VariableTypeEnum = exports.VariableTypeEnum || (exports.VariableTypeEnum = {}));
/**
 * AssociationsApi - axios parameter creator
 * @export
 */
exports.AssociationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost: (datasetId, associationInArrayAssociationIn, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1DatasetsDatasetIdAssociationsPost', 'datasetId', datasetId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1DatasetsDatasetIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost: (modelId, associationInArrayAssociationIn, mergeFeatures, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1ModelsModelIdAssociationsPost', 'modelId', modelId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1ModelsModelIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost: (teamSlug, datasetId, associationInArrayAssociationIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost', 'datasetId', datasetId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost: (teamSlug, modelId, associationInArrayAssociationIn, mergeFeatures, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost', 'modelId', modelId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete: (modelId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete', 'modelId', modelId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete', 'associationId', associationId);
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete: (teamSlug, modelId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete', 'modelId', modelId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete', 'associationId', associationId);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete: (modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1ModelsModelIdAssociationsDelete', 'modelId', modelId);
            // verify required parameter 'bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1ModelsModelIdAssociationsDelete', 'bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete', bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete);
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete: (teamSlug, modelId, bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete', 'modelId', modelId);
            // verify required parameter 'bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete', 'bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete', bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: (datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', 'datasetId', datasetId);
            // verify required parameter 'bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', 'bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete);
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete: (teamSlug, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete', 'datasetId', datasetId);
            // verify required parameter 'bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete', 'bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete', bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet: (associationId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getAssociationV1ModelsModelIdAssociationsAssociationIdGet', 'associationId', associationId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('getAssociationV1ModelsModelIdAssociationsAssociationIdGet', 'modelId', modelId);
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet: (teamSlug, associationId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet', 'teamSlug', teamSlug);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet', 'associationId', associationId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1AssociationsAssociationIdDirectionGet: (associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getRelationshipDirectionV1AssociationsAssociationIdDirectionGet', 'associationId', associationId);
            const localVarPath = `/v1/associations/{association_id}/direction`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGet: (teamSlug, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGet', 'teamSlug', teamSlug);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGet', 'associationId', associationId);
            const localVarPath = `/v1/teams/{team_slug}/associations/{association_id}/direction`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet: (associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet', 'associationId', associationId);
            const localVarPath = `/v1/associations/{association_id}/reproducibility`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGet: (teamSlug, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGet', 'teamSlug', teamSlug);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGet', 'associationId', associationId);
            const localVarPath = `/v1/teams/{team_slug}/associations/{association_id}/reproducibility`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1AssociationsAssociationIdStrengthGet: (associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getRelationshipStrengthV1AssociationsAssociationIdStrengthGet', 'associationId', associationId);
            const localVarPath = `/v1/associations/{association_id}/strength`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGet: (teamSlug, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGet', 'teamSlug', teamSlug);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGet', 'associationId', associationId);
            const localVarPath = `/v1/teams/{team_slug}/associations/{association_id}/strength`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet: (studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet', 'studyId', studyId);
            const localVarPath = `/v1/user/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1AssociationsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/associations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            if (conceptRelationship !== undefined) {
                localVarQueryParameter['concept_relationship'] = conceptRelationship;
            }
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet: (datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1DatasetsDatasetIdAssociationsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet: (modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1ModelsModelIdAssociationsGet', 'modelId', modelId);
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet: (studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1StudiesStudyIdAssociationsGet', 'studyId', studyId);
            const localVarPath = `/v1/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugAssociationsGet: (teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugAssociationsGet', 'teamSlug', teamSlug);
            const localVarPath = `/v1/teams/{team_slug}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            if (conceptRelationship !== undefined) {
                localVarQueryParameter['concept_relationship'] = conceptRelationship;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet: (teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet: (teamSlug, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet: (teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet: (teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet', 'teamSlug', teamSlug);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet: (variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1VariablesVariableIdAssociationsGet', 'variableId', variableId);
            const localVarPath = `/v1/variables/{variable_id}/associations`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch: (modelId, bulkPatchAssociationOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1ModelsModelIdAssociationsPatch', 'modelId', modelId);
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1ModelsModelIdAssociationsPatch', 'bulkPatchAssociationOp', bulkPatchAssociationOp);
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bulkPatchAssociationOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch: (teamSlug, modelId, bulkPatchAssociationOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch', 'modelId', modelId);
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch', 'bulkPatchAssociationOp', bulkPatchAssociationOp);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bulkPatchAssociationOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AssociationsApi - functional programming interface
 * @export
 */
exports.AssociationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.AssociationsApiAxiosParamCreator(configuration);
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost(teamSlug, datasetId, associationInArrayAssociationIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost(teamSlug, datasetId, associationInArrayAssociationIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost(teamSlug, modelId, associationInArrayAssociationIn, mergeFeatures, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost(teamSlug, modelId, associationInArrayAssociationIn, mergeFeatures, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete(teamSlug, modelId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete(teamSlug, modelId, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete(teamSlug, modelId, bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete(teamSlug, modelId, bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete(teamSlug, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete(teamSlug, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet(teamSlug, associationId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet(teamSlug, associationId, modelId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGet(teamSlug, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGet(teamSlug, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGet(teamSlug, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGet(teamSlug, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGet(teamSlug, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGet(teamSlug, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1AssociationsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1AssociationsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1StudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugAssociationsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamSlugAssociationsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet(teamSlug, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet(teamSlug, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch(teamSlug, modelId, bulkPatchAssociationOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch(teamSlug, modelId, bulkPatchAssociationOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * AssociationsApi - factory interface
 * @export
 */
exports.AssociationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.AssociationsApiFp(configuration);
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamSlug, options) {
            return localVarFp.createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamSlug, options) {
            return localVarFp.createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost(teamSlug, datasetId, associationInArrayAssociationIn, options) {
            return localVarFp.createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost(teamSlug, datasetId, associationInArrayAssociationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost(teamSlug, modelId, associationInArrayAssociationIn, mergeFeatures, options) {
            return localVarFp.createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost(teamSlug, modelId, associationInArrayAssociationIn, mergeFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options) {
            return localVarFp.deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete(teamSlug, modelId, associationId, options) {
            return localVarFp.deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete(teamSlug, modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options) {
            return localVarFp.deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete(teamSlug, modelId, bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, options) {
            return localVarFp.deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete(teamSlug, modelId, bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options) {
            return localVarFp.deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete(teamSlug, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, options) {
            return localVarFp.deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete(teamSlug, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options) {
            return localVarFp.getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet(teamSlug, associationId, modelId, options) {
            return localVarFp.getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet(teamSlug, associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId, options) {
            return localVarFp.getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGet(teamSlug, associationId, options) {
            return localVarFp.getRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGet(teamSlug, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId, options) {
            return localVarFp.getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGet(teamSlug, associationId, options) {
            return localVarFp.getRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGet(teamSlug, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId, options) {
            return localVarFp.getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGet(teamSlug, associationId, options) {
            return localVarFp.getRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGet(teamSlug, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1AssociationsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, teamSlug, options) {
            return localVarFp.listAssociationsV1AssociationsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1StudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugAssociationsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options) {
            return localVarFp.listAssociationsV1TeamsTeamSlugAssociationsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet(teamSlug, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet(teamSlug, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options) {
            return localVarFp.patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch(teamSlug, modelId, bulkPatchAssociationOp, options) {
            return localVarFp.patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch(teamSlug, modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AssociationsApi - object-oriented interface
 * @export
 * @class AssociationsApi
 * @extends {BaseAPI}
 */
class AssociationsApi extends base_1.BaseAPI {
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {AssociationsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {AssociationsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    createAssociationsV1ModelsModelIdAssociationsPost(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).createAssociationsV1ModelsModelIdAssociationsPost(requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {AssociationsApiCreateAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {AssociationsApiCreateAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost(requestParameters.teamSlug, requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {AssociationsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {AssociationsApiDeleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete(requestParameters.teamSlug, requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {AssociationsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {AssociationsApiDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete(requestParameters.teamSlug, requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {AssociationsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {AssociationsApiDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Get Association
     * @param {AssociationsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Get Association
     * @param {AssociationsApiGetAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet(requestParameters.teamSlug, requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get direction of this association.
     * @summary Get Relationship Direction
     * @param {AssociationsApiGetRelationshipDirectionV1AssociationsAssociationIdDirectionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getRelationshipDirectionV1AssociationsAssociationIdDirectionGet(requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get direction of this association.
     * @summary Get Relationship Direction
     * @param {AssociationsApiGetRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGet(requestParameters.teamSlug, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get reproducibility of this association.
     * @summary Get Relationship Reproducibility
     * @param {AssociationsApiGetRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getRelationshipReproducibilityV1AssociationsAssociationIdReproducibilityGet(requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get reproducibility of this association.
     * @summary Get Relationship Reproducibility
     * @param {AssociationsApiGetRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGet(requestParameters.teamSlug, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get strength of this association.
     * @summary Get Relationship Strength
     * @param {AssociationsApiGetRelationshipStrengthV1AssociationsAssociationIdStrengthGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getRelationshipStrengthV1AssociationsAssociationIdStrengthGet(requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get strength of this association.
     * @summary Get Relationship Strength
     * @param {AssociationsApiGetRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).getRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGet(requestParameters.teamSlug, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {AssociationsApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Associations.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1AssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1AssociationsGet(requestParameters = {}, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1AssociationsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.conceptRelationship, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in model.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1ModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1ModelsModelIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1ModelsModelIdAssociationsGet(requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1StudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Associations.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamSlugAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1TeamsTeamSlugAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamSlugAssociationsGet(requestParameters.teamSlug, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.conceptRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in model.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet(requestParameters.teamSlug, requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet(requestParameters.teamSlug, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(requestParameters.teamSlug, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {AssociationsApiListAssociationsV1VariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {AssociationsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {AssociationsApiPatchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch(requestParameters, options) {
        return exports.AssociationsApiFp(this.configuration).patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch(requestParameters.teamSlug, requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AssociationsApi = AssociationsApi;
/**
 * AuthorsApi - axios parameter creator
 * @export
 */
exports.AuthorsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut: (studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut', 'authorId', authorId);
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut: (teamSlug, studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an Author.
         * @summary Create Author
         * @param {AuthorIn} authorIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1AuthorsPost: (authorIn, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'authorIn' is not null or undefined
            common_1.assertParamExists('createAuthorV1AuthorsPost', 'authorIn', authorIn);
            const localVarPath = `/v1/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(authorIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamSlug
         * @param {AuthorIn} authorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamSlugAuthorsPost: (teamSlug, authorIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createAuthorV1TeamsTeamSlugAuthorsPost', 'teamSlug', teamSlug);
            // verify required parameter 'authorIn' is not null or undefined
            common_1.assertParamExists('createAuthorV1TeamsTeamSlugAuthorsPost', 'authorIn', authorIn);
            const localVarPath = `/v1/teams/{team_slug}/authors`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(authorIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1AuthorsAuthorIdDelete: (authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('deleteAuthorV1AuthorsAuthorIdDelete', 'authorId', authorId);
            const localVarPath = `/v1/authors/{author_id}`
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamSlug
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDelete: (teamSlug, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('deleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDelete', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_slug}/authors/{author_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1AuthorsAuthorIdGet: (authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('getAuthorV1AuthorsAuthorIdGet', 'authorId', authorId);
            const localVarPath = `/v1/authors/{author_id}`
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamSlug
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamSlugAuthorsAuthorIdGet: (teamSlug, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getAuthorV1TeamsTeamSlugAuthorsAuthorIdGet', 'teamSlug', teamSlug);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('getAuthorV1TeamsTeamSlugAuthorsAuthorIdGet', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_slug}/authors/{author_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1AuthorsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamSlugAuthorsGet: (teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listAuthorsV1TeamsTeamSlugAuthorsGet', 'teamSlug', teamSlug);
            const localVarPath = `/v1/teams/{team_slug}/authors`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete: (studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete', 'authorId', authorId);
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete: (teamSlug, studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AuthorsApi - functional programming interface
 * @export
 */
exports.AuthorsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.AuthorsApiAxiosParamCreator(configuration);
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut(teamSlug, studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut(teamSlug, studyId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {AuthorIn} authorIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1AuthorsPost(authorIn, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAuthorV1AuthorsPost(authorIn, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamSlug
         * @param {AuthorIn} authorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamSlugAuthorsPost(teamSlug, authorIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAuthorV1TeamsTeamSlugAuthorsPost(teamSlug, authorIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1AuthorsAuthorIdDelete(authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAuthorV1AuthorsAuthorIdDelete(authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamSlug
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDelete(teamSlug, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDelete(teamSlug, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1AuthorsAuthorIdGet(authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAuthorV1AuthorsAuthorIdGet(authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamSlug
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamSlugAuthorsAuthorIdGet(teamSlug, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAuthorV1TeamsTeamSlugAuthorsAuthorIdGet(teamSlug, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1AuthorsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthorsV1AuthorsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamSlugAuthorsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthorsV1TeamsTeamSlugAuthorsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete(teamSlug, studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete(teamSlug, studyId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * AuthorsApi - factory interface
 * @export
 */
exports.AuthorsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.AuthorsApiFp(configuration);
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options) {
            return localVarFp.addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut(teamSlug, studyId, authorId, options) {
            return localVarFp.addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut(teamSlug, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {AuthorIn} authorIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1AuthorsPost(authorIn, teamSlug, options) {
            return localVarFp.createAuthorV1AuthorsPost(authorIn, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamSlug
         * @param {AuthorIn} authorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamSlugAuthorsPost(teamSlug, authorIn, options) {
            return localVarFp.createAuthorV1TeamsTeamSlugAuthorsPost(teamSlug, authorIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1AuthorsAuthorIdDelete(authorId, options) {
            return localVarFp.deleteAuthorV1AuthorsAuthorIdDelete(authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamSlug
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDelete(teamSlug, authorId, options) {
            return localVarFp.deleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDelete(teamSlug, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1AuthorsAuthorIdGet(authorId, options) {
            return localVarFp.getAuthorV1AuthorsAuthorIdGet(authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamSlug
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamSlugAuthorsAuthorIdGet(teamSlug, authorId, options) {
            return localVarFp.getAuthorV1TeamsTeamSlugAuthorsAuthorIdGet(teamSlug, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1AuthorsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamSlug, options) {
            return localVarFp.listAuthorsV1AuthorsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamSlugAuthorsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listAuthorsV1TeamsTeamSlugAuthorsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options) {
            return localVarFp.removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete(teamSlug, studyId, authorId, options) {
            return localVarFp.removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete(teamSlug, studyId, authorId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AuthorsApi - object-oriented interface
 * @export
 * @class AuthorsApi
 * @extends {BaseAPI}
 */
class AuthorsApi extends base_1.BaseAPI {
    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {AuthorsApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {AuthorsApiAddAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut(requestParameters.teamSlug, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Author.
     * @summary Create Author
     * @param {AuthorsApiCreateAuthorV1AuthorsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    createAuthorV1AuthorsPost(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).createAuthorV1AuthorsPost(requestParameters.authorIn, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Author.
     * @summary Create Author
     * @param {AuthorsApiCreateAuthorV1TeamsTeamSlugAuthorsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    createAuthorV1TeamsTeamSlugAuthorsPost(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).createAuthorV1TeamsTeamSlugAuthorsPost(requestParameters.teamSlug, requestParameters.authorIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Author.
     * @summary Delete Author
     * @param {AuthorsApiDeleteAuthorV1AuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    deleteAuthorV1AuthorsAuthorIdDelete(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).deleteAuthorV1AuthorsAuthorIdDelete(requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Author.
     * @summary Delete Author
     * @param {AuthorsApiDeleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    deleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).deleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDelete(requestParameters.teamSlug, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Author.
     * @summary Get Author
     * @param {AuthorsApiGetAuthorV1AuthorsAuthorIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    getAuthorV1AuthorsAuthorIdGet(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).getAuthorV1AuthorsAuthorIdGet(requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Author.
     * @summary Get Author
     * @param {AuthorsApiGetAuthorV1TeamsTeamSlugAuthorsAuthorIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    getAuthorV1TeamsTeamSlugAuthorsAuthorIdGet(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).getAuthorV1TeamsTeamSlugAuthorsAuthorIdGet(requestParameters.teamSlug, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
     * @summary List Authors
     * @param {AuthorsApiListAuthorsV1AuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    listAuthorsV1AuthorsGet(requestParameters = {}, options) {
        return exports.AuthorsApiFp(this.configuration).listAuthorsV1AuthorsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
     * @summary List Authors
     * @param {AuthorsApiListAuthorsV1TeamsTeamSlugAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    listAuthorsV1TeamsTeamSlugAuthorsGet(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).listAuthorsV1TeamsTeamSlugAuthorsGet(requestParameters.teamSlug, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {AuthorsApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {AuthorsApiRemoveAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.AuthorsApiFp(this.configuration).removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete(requestParameters.teamSlug, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AuthorsApi = AuthorsApi;
/**
 * ConceptsApi - axios parameter creator
 * @export
 */
exports.ConceptsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {ConceptIn} conceptIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1ConceptsPost: (conceptIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptIn' is not null or undefined
            common_1.assertParamExists('createConceptV1ConceptsPost', 'conceptIn', conceptIn);
            const localVarPath = `/v1/concepts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(conceptIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1ConceptsConceptIdDelete: (conceptId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptId' is not null or undefined
            common_1.assertParamExists('deleteConceptV1ConceptsConceptIdDelete', 'conceptId', conceptId);
            const localVarPath = `/v1/concepts/{concept_id}`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1ConceptsConceptIdGet: (conceptId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptId' is not null or undefined
            common_1.assertParamExists('getConceptV1ConceptsConceptIdGet', 'conceptId', conceptId);
            const localVarPath = `/v1/concepts/{concept_id}`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/concepts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1ConceptsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/concepts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet: (conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptId' is not null or undefined
            common_1.assertParamExists('listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet', 'conceptId', conceptId);
            const localVarPath = `/v1/concepts/{concept_id}/system/concepts`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserConceptsV1UsersUserIdConceptsGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/concepts`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ConceptsApi - functional programming interface
 * @export
 */
exports.ConceptsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.ConceptsApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {ConceptIn} conceptIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1ConceptsPost(conceptIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createConceptV1ConceptsPost(conceptIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1ConceptsConceptIdDelete(conceptId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteConceptV1ConceptsConceptIdDelete(conceptId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1ConceptsConceptIdGet(conceptId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConceptV1ConceptsConceptIdGet(conceptId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1ConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listConceptsV1ConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * ConceptsApi - factory interface
 * @export
 */
exports.ConceptsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.ConceptsApiFp(configuration);
    return {
        /**
         * Create a Concept.
         * @summary Create Concept
         * @param {ConceptIn} conceptIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConceptV1ConceptsPost(conceptIn, options) {
            return localVarFp.createConceptV1ConceptsPost(conceptIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
         * @summary Delete Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConceptV1ConceptsConceptIdDelete(conceptId, options) {
            return localVarFp.deleteConceptV1ConceptsConceptIdDelete(conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Concept.
         * @summary Get Concept
         * @param {string} conceptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptV1ConceptsConceptIdGet(conceptId, options) {
            return localVarFp.getConceptV1ConceptsConceptIdGet(conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return localVarFp.listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Concepts.
         * @summary List Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConceptsV1ConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return localVarFp.listConceptsV1ConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return localVarFp.listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return localVarFp.listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ConceptsApi - object-oriented interface
 * @export
 * @class ConceptsApi
 * @extends {BaseAPI}
 */
class ConceptsApi extends base_1.BaseAPI {
    /**
     * Create a Concept.
     * @summary Create Concept
     * @param {ConceptsApiCreateConceptV1ConceptsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    createConceptV1ConceptsPost(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).createConceptV1ConceptsPost(requestParameters.conceptIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Concept.  Deletion will fail if this Concept is attached to any existing variables.
     * @summary Delete Concept
     * @param {ConceptsApiDeleteConceptV1ConceptsConceptIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    deleteConceptV1ConceptsConceptIdDelete(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).deleteConceptV1ConceptsConceptIdDelete(requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Concept.
     * @summary Get Concept
     * @param {ConceptsApiGetConceptV1ConceptsConceptIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    getConceptV1ConceptsConceptIdGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).getConceptV1ConceptsConceptIdGet(requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {ConceptsApiListAuthenticatedUserConceptsV1UserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters = {}, options) {
        return exports.ConceptsApiFp(this.configuration).listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Concepts.
     * @summary List Concepts
     * @param {ConceptsApiListConceptsV1ConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listConceptsV1ConceptsGet(requestParameters = {}, options) {
        return exports.ConceptsApiFp(this.configuration).listConceptsV1ConceptsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the concepts in the requested concept\'s system.
     * @summary List System Of Concepts
     * @param {ConceptsApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(requestParameters.conceptId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {ConceptsApiListUserConceptsV1UsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConceptsApi
     */
    listUserConceptsV1UsersUserIdConceptsGet(requestParameters, options) {
        return exports.ConceptsApiFp(this.configuration).listUserConceptsV1UsersUserIdConceptsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ConceptsApi = ConceptsApi;
/**
 * DatasetsApi - axios parameter creator
 * @export
 */
exports.DatasetsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut: (datasetId, featureId, index, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut', 'featureId', featureId);
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut: (teamSlug, datasetId, featureId, index, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1DatasetsDatasetIdParentsParentIdPut: (datasetId, parentId, reconcileFeatures, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addParentDatasetV1DatasetsDatasetIdParentsParentIdPut', 'datasetId', datasetId);
            // verify required parameter 'parentId' is not null or undefined
            common_1.assertParamExists('addParentDatasetV1DatasetsDatasetIdParentsParentIdPut', 'parentId', parentId);
            const localVarPath = `/v1/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (reconcileFeatures !== undefined) {
                localVarQueryParameter['reconcile_features'] = reconcileFeatures;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut: (teamSlug, datasetId, parentId, reconcileFeatures, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut', 'datasetId', datasetId);
            // verify required parameter 'parentId' is not null or undefined
            common_1.assertParamExists('addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut', 'parentId', parentId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (reconcileFeatures !== undefined) {
                localVarQueryParameter['reconcile_features'] = reconcileFeatures;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: (datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: (teamSlug, datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost: (datasetId, featureIn, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost', 'datasetId', datasetId);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost', 'featureIn', featureIn);
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost: (teamSlug, datasetId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost', 'datasetId', datasetId);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost', 'featureIn', featureIn);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost: (datasetId, associationInArrayAssociationIn, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1DatasetsDatasetIdAssociationsPost', 'datasetId', datasetId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1DatasetsDatasetIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost: (teamSlug, datasetId, associationInArrayAssociationIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost', 'datasetId', datasetId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {DatasetIn} datasetIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1DatasetsPost: (datasetIn, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetIn' is not null or undefined
            common_1.assertParamExists('createDatasetV1DatasetsPost', 'datasetIn', datasetIn);
            const localVarPath = `/v1/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(datasetIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamSlug
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamSlugDatasetsPost: (teamSlug, datasetIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createDatasetV1TeamsTeamSlugDatasetsPost', 'teamSlug', teamSlug);
            // verify required parameter 'datasetIn' is not null or undefined
            common_1.assertParamExists('createDatasetV1TeamsTeamSlugDatasetsPost', 'datasetIn', datasetIn);
            const localVarPath = `/v1/teams/{team_slug}/datasets`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(datasetIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1DatasetsDatasetIdDelete: (datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('deleteDatasetV1DatasetsDatasetIdDelete', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDelete: (teamSlug, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('deleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDelete', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete: (datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', 'datasetId', datasetId);
            // verify required parameter 'bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', 'bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete', bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete);
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete: (teamSlug, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete', 'datasetId', datasetId);
            // verify required parameter 'bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete', 'bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete', bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet: (datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet: (teamSlug, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1DatasetsDatasetIdGet: (datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('getDatasetV1DatasetsDatasetIdGet', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamSlugDatasetsDatasetIdGet: (teamSlug, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getDatasetV1TeamsTeamSlugDatasetsDatasetIdGet', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('getDatasetV1TeamsTeamSlugDatasetsDatasetIdGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet: (datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1DatasetsDatasetIdAssociationsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}/associations`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet: (teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet: (datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet: (teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1DatasetsDatasetIdParentsGet: (datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listDatasetParentsV1DatasetsDatasetIdParentsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}/parents`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGet: (teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGet', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/parents`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1DatasetsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamSlugDatasetsGet: (teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listDatasetsV1TeamsTeamSlugDatasetsGet', 'teamSlug', teamSlug);
            const localVarPath = `/v1/teams/{team_slug}/datasets`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1DatasetsDatasetIdModelsGet: (datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listModelsUsingDatasetV1DatasetsDatasetIdModelsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}/models`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGet: (teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGet', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/models`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserDatasetsV1UsersUserIdDatasetsGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/datasets`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1DatasetsDatasetIdPatch: (datasetId, patchDatasetOpArrayPatchDatasetOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('patchDatasetV1DatasetsDatasetIdPatch', 'datasetId', datasetId);
            // verify required parameter 'patchDatasetOpArrayPatchDatasetOp' is not null or undefined
            common_1.assertParamExists('patchDatasetV1DatasetsDatasetIdPatch', 'patchDatasetOpArrayPatchDatasetOp', patchDatasetOpArrayPatchDatasetOp);
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchDatasetOpArrayPatchDatasetOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch: (teamSlug, datasetId, patchDatasetOpArrayPatchDatasetOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch', 'datasetId', datasetId);
            // verify required parameter 'patchDatasetOpArrayPatchDatasetOp' is not null or undefined
            common_1.assertParamExists('patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch', 'patchDatasetOpArrayPatchDatasetOp', patchDatasetOpArrayPatchDatasetOp);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchDatasetOpArrayPatchDatasetOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete: (datasetId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete', 'featureId', featureId);
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete: (teamSlug, datasetId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete: (datasetId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete', 'datasetId', datasetId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete: (teamSlug, datasetId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete', 'datasetId', datasetId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete: (datasetId, parentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete', 'datasetId', datasetId);
            // verify required parameter 'parentId' is not null or undefined
            common_1.assertParamExists('removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete', 'parentId', parentId);
            const localVarPath = `/v1/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete: (teamSlug, datasetId, parentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete', 'datasetId', datasetId);
            // verify required parameter 'parentId' is not null or undefined
            common_1.assertParamExists('removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete', 'parentId', parentId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: (datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: (teamSlug, datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1DatasetsDatasetIdPut: (datasetId, datasetIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('replaceDatasetV1DatasetsDatasetIdPut', 'datasetId', datasetId);
            // verify required parameter 'datasetIn' is not null or undefined
            common_1.assertParamExists('replaceDatasetV1DatasetsDatasetIdPut', 'datasetIn', datasetIn);
            const localVarPath = `/v1/datasets/{dataset_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(datasetIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut: (teamSlug, datasetId, datasetIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut', 'datasetId', datasetId);
            // verify required parameter 'datasetIn' is not null or undefined
            common_1.assertParamExists('replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut', 'datasetIn', datasetIn);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(datasetIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut: (datasetId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut', 'datasetId', datasetId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut: (teamSlug, datasetId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut', 'datasetId', datasetId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * DatasetsApi - functional programming interface
 * @export
 */
exports.DatasetsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.DatasetsApiAxiosParamCreator(configuration);
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut(teamSlug, datasetId, featureId, index, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut(teamSlug, datasetId, featureId, index, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId, parentId, reconcileFeatures, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId, parentId, reconcileFeatures, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut(teamSlug, datasetId, parentId, reconcileFeatures, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut(teamSlug, datasetId, parentId, reconcileFeatures, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamSlug, datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamSlug, datasetId, populationAttributeValueId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost(teamSlug, datasetId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost(teamSlug, datasetId, featureIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost(teamSlug, datasetId, associationInArrayAssociationIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost(teamSlug, datasetId, associationInArrayAssociationIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {DatasetIn} datasetIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1DatasetsPost(datasetIn, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createDatasetV1DatasetsPost(datasetIn, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamSlug
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamSlugDatasetsPost(teamSlug, datasetIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createDatasetV1TeamsTeamSlugDatasetsPost(teamSlug, datasetIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1DatasetsDatasetIdDelete(datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteDatasetV1DatasetsDatasetIdDelete(datasetId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDelete(teamSlug, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDelete(teamSlug, datasetId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete(teamSlug, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete(teamSlug, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet(teamSlug, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet(teamSlug, datasetId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1DatasetsDatasetIdGet(datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDatasetV1DatasetsDatasetIdGet(datasetId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamSlugDatasetsDatasetIdGet(teamSlug, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDatasetV1TeamsTeamSlugDatasetsDatasetIdGet(teamSlug, datasetId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1DatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetsV1DatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamSlugDatasetsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetsV1TeamsTeamSlugDatasetsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch(teamSlug, datasetId, patchDatasetOpArrayPatchDatasetOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch(teamSlug, datasetId, patchDatasetOpArrayPatchDatasetOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete(teamSlug, datasetId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete(teamSlug, datasetId, featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamSlug, datasetId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamSlug, datasetId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId, parentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId, parentId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete(teamSlug, datasetId, parentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete(teamSlug, datasetId, parentId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamSlug, datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamSlug, datasetId, populationAttributeValueId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut(teamSlug, datasetId, datasetIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut(teamSlug, datasetId, datasetIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut(teamSlug, datasetId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut(teamSlug, datasetId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * DatasetsApi - factory interface
 * @export
 */
exports.DatasetsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.DatasetsApiFp(configuration);
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options) {
            return localVarFp.addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut(teamSlug, datasetId, featureId, index, options) {
            return localVarFp.addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut(teamSlug, datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId, parentId, reconcileFeatures, options) {
            return localVarFp.addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(datasetId, parentId, reconcileFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut(teamSlug, datasetId, parentId, reconcileFeatures, options) {
            return localVarFp.addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut(teamSlug, datasetId, parentId, reconcileFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options) {
            return localVarFp.addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamSlug, datasetId, populationAttributeValueId, options) {
            return localVarFp.addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamSlug, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamSlug, options) {
            return localVarFp.createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost(teamSlug, datasetId, featureIn, options) {
            return localVarFp.createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost(teamSlug, datasetId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamSlug, options) {
            return localVarFp.createAssociationsV1DatasetsDatasetIdAssociationsPost(datasetId, associationInArrayAssociationIn, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost(teamSlug, datasetId, associationInArrayAssociationIn, options) {
            return localVarFp.createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost(teamSlug, datasetId, associationInArrayAssociationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {DatasetIn} datasetIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1DatasetsPost(datasetIn, teamSlug, options) {
            return localVarFp.createDatasetV1DatasetsPost(datasetIn, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamSlug
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamSlugDatasetsPost(teamSlug, datasetIn, options) {
            return localVarFp.createDatasetV1TeamsTeamSlugDatasetsPost(teamSlug, datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1DatasetsDatasetIdDelete(datasetId, options) {
            return localVarFp.deleteDatasetV1DatasetsDatasetIdDelete(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDelete(teamSlug, datasetId, options) {
            return localVarFp.deleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDelete(teamSlug, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options) {
            return localVarFp.deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(datasetId, bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete(teamSlug, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, options) {
            return localVarFp.deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete(teamSlug, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options) {
            return localVarFp.fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet(teamSlug, datasetId, options) {
            return localVarFp.fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet(teamSlug, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1DatasetsDatasetIdGet(datasetId, options) {
            return localVarFp.getDatasetV1DatasetsDatasetIdGet(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamSlugDatasetsDatasetIdGet(teamSlug, datasetId, options) {
            return localVarFp.getDatasetV1TeamsTeamSlugDatasetsDatasetIdGet(teamSlug, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1DatasetsDatasetIdAssociationsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listDatasetParentsV1DatasetsDatasetIdParentsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1DatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamSlug, options) {
            return localVarFp.listDatasetsV1DatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamSlugDatasetsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return localVarFp.listDatasetsV1TeamsTeamSlugDatasetsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, options) {
            return localVarFp.patchDatasetV1DatasetsDatasetIdPatch(datasetId, patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch(teamSlug, datasetId, patchDatasetOpArrayPatchDatasetOp, options) {
            return localVarFp.patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch(teamSlug, datasetId, patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options) {
            return localVarFp.removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete(teamSlug, datasetId, featureId, options) {
            return localVarFp.removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete(teamSlug, datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId, tagObjectId, options) {
            return localVarFp.removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamSlug, datasetId, tagObjectId, options) {
            return localVarFp.removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamSlug, datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId, parentId, options) {
            return localVarFp.removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(datasetId, parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete(teamSlug, datasetId, parentId, options) {
            return localVarFp.removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete(teamSlug, datasetId, parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options) {
            return localVarFp.removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamSlug, datasetId, populationAttributeValueId, options) {
            return localVarFp.removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamSlug, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, options) {
            return localVarFp.replaceDatasetV1DatasetsDatasetIdPut(datasetId, datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut(teamSlug, datasetId, datasetIn, options) {
            return localVarFp.replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut(teamSlug, datasetId, datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId, tagObjectId, options) {
            return localVarFp.tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut(teamSlug, datasetId, tagObjectId, options) {
            return localVarFp.tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut(teamSlug, datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * DatasetsApi - object-oriented interface
 * @export
 * @class DatasetsApi
 * @extends {BaseAPI}
 */
class DatasetsApi extends base_1.BaseAPI {
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {DatasetsApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {DatasetsApiAddFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a parent dataset.
     * @summary Add Parent Dataset
     * @param {DatasetsApiAddParentDatasetV1DatasetsDatasetIdParentsParentIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addParentDatasetV1DatasetsDatasetIdParentsParentIdPut(requestParameters.datasetId, requestParameters.parentId, requestParameters.reconcileFeatures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a parent dataset.
     * @summary Add Parent Dataset
     * @param {DatasetsApiAddParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.parentId, requestParameters.reconcileFeatures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {DatasetsApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {DatasetsApiAddPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {DatasetsApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters.datasetId, requestParameters.featureIn, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {DatasetsApiCreateAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {DatasetsApiCreateAssociationsV1DatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createAssociationsV1DatasetsDatasetIdAssociationsPost(requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {DatasetsApiCreateAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Dataset.
     * @summary Create Dataset
     * @param {DatasetsApiCreateDatasetV1DatasetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createDatasetV1DatasetsPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createDatasetV1DatasetsPost(requestParameters.datasetIn, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Dataset.
     * @summary Create Dataset
     * @param {DatasetsApiCreateDatasetV1TeamsTeamSlugDatasetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    createDatasetV1TeamsTeamSlugDatasetsPost(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).createDatasetV1TeamsTeamSlugDatasetsPost(requestParameters.teamSlug, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dataset
     * @param {DatasetsApiDeleteDatasetV1DatasetsDatasetIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    deleteDatasetV1DatasetsDatasetIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).deleteDatasetV1DatasetsDatasetIdDelete(requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dataset
     * @param {DatasetsApiDeleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    deleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).deleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDelete(requestParameters.teamSlug, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {DatasetsApiDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).deleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete(requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1DatasetsDatasetIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {DatasetsApiDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {DatasetsApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {DatasetsApiFetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.teamSlug, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a Dataset.
     * @summary Get Dataset
     * @param {DatasetsApiGetDatasetV1DatasetsDatasetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    getDatasetV1DatasetsDatasetIdGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).getDatasetV1DatasetsDatasetIdGet(requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a Dataset.
     * @summary Get Dataset
     * @param {DatasetsApiGetDatasetV1TeamsTeamSlugDatasetsDatasetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    getDatasetV1TeamsTeamSlugDatasetsDatasetIdGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).getDatasetV1TeamsTeamSlugDatasetsDatasetIdGet(requestParameters.teamSlug, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {DatasetsApiListAssociationsV1DatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listAssociationsV1DatasetsDatasetIdAssociationsGet(requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {DatasetsApiListAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {DatasetsApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters = {}, options) {
        return exports.DatasetsApiFp(this.configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {DatasetsApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {DatasetsApiListDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get parents of this dataset.
     * @summary List Dataset Parents
     * @param {DatasetsApiListDatasetParentsV1DatasetsDatasetIdParentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetParentsV1DatasetsDatasetIdParentsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetParentsV1DatasetsDatasetIdParentsGet(requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get parents of this dataset.
     * @summary List Dataset Parents
     * @param {DatasetsApiListDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGet(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all Datasets.
     * @summary List Datasets
     * @param {DatasetsApiListDatasetsV1DatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetsV1DatasetsGet(requestParameters = {}, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetsV1DatasetsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all Datasets.
     * @summary List Datasets
     * @param {DatasetsApiListDatasetsV1TeamsTeamSlugDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listDatasetsV1TeamsTeamSlugDatasetsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listDatasetsV1TeamsTeamSlugDatasetsGet(requestParameters.teamSlug, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models that use the dataset either directly or through child datasets.
     * @summary List Models Using Dataset
     * @param {DatasetsApiListModelsUsingDatasetV1DatasetsDatasetIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listModelsUsingDatasetV1DatasetsDatasetIdModelsGet(requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models that use the dataset either directly or through child datasets.
     * @summary List Models Using Dataset
     * @param {DatasetsApiListModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGet(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {DatasetsApiListUserDatasetsV1UsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Dataset resource with partial update.
     * @summary Patch Dataset
     * @param {DatasetsApiPatchDatasetV1DatasetsDatasetIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    patchDatasetV1DatasetsDatasetIdPatch(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).patchDatasetV1DatasetsDatasetIdPatch(requestParameters.datasetId, requestParameters.patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Dataset resource with partial update.
     * @summary Patch Dataset
     * @param {DatasetsApiPatchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {DatasetsApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {DatasetsApiRemoveFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the dataset with object with provided id.
     * @summary Remove Object Tag From Dataset
     * @param {DatasetsApiRemoveObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removeObjectTagFromDatasetV1DatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the dataset with object with provided id.
     * @summary Remove Object Tag From Dataset
     * @param {DatasetsApiRemoveObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a parent dataset.
     * @summary Remove Parent Dataset
     * @param {DatasetsApiRemoveParentDatasetV1DatasetsDatasetIdParentsParentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removeParentDatasetV1DatasetsDatasetIdParentsParentIdDelete(requestParameters.datasetId, requestParameters.parentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a parent dataset.
     * @summary Remove Parent Dataset
     * @param {DatasetsApiRemoveParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.parentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {DatasetsApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {DatasetsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Dataset.
     * @summary Replace Dataset
     * @param {DatasetsApiReplaceDatasetV1DatasetsDatasetIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    replaceDatasetV1DatasetsDatasetIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).replaceDatasetV1DatasetsDatasetIdPut(requestParameters.datasetId, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Dataset.
     * @summary Replace Dataset
     * @param {DatasetsApiReplaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the dataset with object with provided id.
     * @summary Tag Study With Object
     * @param {DatasetsApiTagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).tagStudyWithObjectV1DatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the dataset with object with provided id.
     * @summary Tag Study With Object
     * @param {DatasetsApiTagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters, options) {
        return exports.DatasetsApiFp(this.configuration).tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DatasetsApi = DatasetsApi;
/**
 * EnterpriseApi - axios parameter creator
 * @export
 */
exports.EnterpriseApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationCreate} integrationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1EnterpriseIntegrationsPost: (integrationCreate, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'integrationCreate' is not null or undefined
            common_1.assertParamExists('createIntegrationV1EnterpriseIntegrationsPost', 'integrationCreate', integrationCreate);
            const localVarPath = `/v1/enterprise/integrations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(integrationCreate, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new message.
         * @summary Create Message
         * @param {MessageIn} messageIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1EnterpriseMessagesPost: (messageIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'messageIn' is not null or undefined
            common_1.assertParamExists('createMessageV1EnterpriseMessagesPost', 'messageIn', messageIn);
            const localVarPath = `/v1/enterprise/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(messageIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseV1EnterpriseGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/enterprise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1EnterpriseIntegrationsIntegrationIdGet: (integrationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'integrationId' is not null or undefined
            common_1.assertParamExists('getIntegrationV1EnterpriseIntegrationsIntegrationIdGet', 'integrationId', integrationId);
            const localVarPath = `/v1/enterprise/integrations/{integration_id}`
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1EnterpriseMessagesMessageIdGet: (messageId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'messageId' is not null or undefined
            common_1.assertParamExists('getMessageV1EnterpriseMessagesMessageIdGet', 'messageId', messageId);
            const localVarPath = `/v1/enterprise/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update an Integration.
         * @summary Update Integration
         * @param {string} integrationId
         * @param {IntegrationUpdateIn} integrationUpdateIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch: (integrationId, integrationUpdateIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'integrationId' is not null or undefined
            common_1.assertParamExists('updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch', 'integrationId', integrationId);
            // verify required parameter 'integrationUpdateIn' is not null or undefined
            common_1.assertParamExists('updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch', 'integrationUpdateIn', integrationUpdateIn);
            const localVarPath = `/v1/enterprise/integrations/{integration_id}`
                .replace(`{${"integration_id"}}`, encodeURIComponent(String(integrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(integrationUpdateIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} messageId
         * @param {MessageIn} messageIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1EnterpriseMessagesMessageIdPatch: (messageId, messageIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'messageId' is not null or undefined
            common_1.assertParamExists('updateMessageV1EnterpriseMessagesMessageIdPatch', 'messageId', messageId);
            // verify required parameter 'messageIn' is not null or undefined
            common_1.assertParamExists('updateMessageV1EnterpriseMessagesMessageIdPatch', 'messageIn', messageIn);
            const localVarPath = `/v1/enterprise/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(messageIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * EnterpriseApi - functional programming interface
 * @export
 */
exports.EnterpriseApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.EnterpriseApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationCreate} integrationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1EnterpriseIntegrationsPost(integrationCreate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createIntegrationV1EnterpriseIntegrationsPost(integrationCreate, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {MessageIn} messageIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1EnterpriseMessagesPost(messageIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createMessageV1EnterpriseMessagesPost(messageIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseV1EnterpriseGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getEnterpriseV1EnterpriseGet(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1EnterpriseMessagesMessageIdGet(messageId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMessageV1EnterpriseMessagesMessageIdGet(messageId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update an Integration.
         * @summary Update Integration
         * @param {string} integrationId
         * @param {IntegrationUpdateIn} integrationUpdateIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationUpdateIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationUpdateIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} messageId
         * @param {MessageIn} messageIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1EnterpriseMessagesMessageIdPatch(messageId, messageIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateMessageV1EnterpriseMessagesMessageIdPatch(messageId, messageIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * EnterpriseApi - factory interface
 * @export
 */
exports.EnterpriseApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.EnterpriseApiFp(configuration);
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {IntegrationCreate} integrationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegrationV1EnterpriseIntegrationsPost(integrationCreate, options) {
            return localVarFp.createIntegrationV1EnterpriseIntegrationsPost(integrationCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new message.
         * @summary Create Message
         * @param {MessageIn} messageIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageV1EnterpriseMessagesPost(messageIn, options) {
            return localVarFp.createMessageV1EnterpriseMessagesPost(messageIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the Enterprise.
         * @summary Get Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseV1EnterpriseGet(options) {
            return localVarFp.getEnterpriseV1EnterpriseGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Integration.
         * @summary Get Integration
         * @param {string} integrationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, options) {
            return localVarFp.getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(integrationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Message.
         * @summary Get Message
         * @param {string} messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageV1EnterpriseMessagesMessageIdGet(messageId, options) {
            return localVarFp.getMessageV1EnterpriseMessagesMessageIdGet(messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an Integration.
         * @summary Update Integration
         * @param {string} integrationId
         * @param {IntegrationUpdateIn} integrationUpdateIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationUpdateIn, options) {
            return localVarFp.updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(integrationId, integrationUpdateIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Message.
         * @summary Update Message
         * @param {string} messageId
         * @param {MessageIn} messageIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageV1EnterpriseMessagesMessageIdPatch(messageId, messageIn, options) {
            return localVarFp.updateMessageV1EnterpriseMessagesMessageIdPatch(messageId, messageIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * EnterpriseApi - object-oriented interface
 * @export
 * @class EnterpriseApi
 * @extends {BaseAPI}
 */
class EnterpriseApi extends base_1.BaseAPI {
    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {EnterpriseApiCreateIntegrationV1EnterpriseIntegrationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    createIntegrationV1EnterpriseIntegrationsPost(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).createIntegrationV1EnterpriseIntegrationsPost(requestParameters.integrationCreate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new message.
     * @summary Create Message
     * @param {EnterpriseApiCreateMessageV1EnterpriseMessagesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    createMessageV1EnterpriseMessagesPost(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).createMessageV1EnterpriseMessagesPost(requestParameters.messageIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the Enterprise.
     * @summary Get Enterprise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    getEnterpriseV1EnterpriseGet(options) {
        return exports.EnterpriseApiFp(this.configuration).getEnterpriseV1EnterpriseGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Integration.
     * @summary Get Integration
     * @param {EnterpriseApiGetIntegrationV1EnterpriseIntegrationsIntegrationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).getIntegrationV1EnterpriseIntegrationsIntegrationIdGet(requestParameters.integrationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a Message.
     * @summary Get Message
     * @param {EnterpriseApiGetMessageV1EnterpriseMessagesMessageIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    getMessageV1EnterpriseMessagesMessageIdGet(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).getMessageV1EnterpriseMessagesMessageIdGet(requestParameters.messageId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an Integration.
     * @summary Update Integration
     * @param {EnterpriseApiUpdateIntegrationV1EnterpriseIntegrationsIntegrationIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).updateIntegrationV1EnterpriseIntegrationsIntegrationIdPatch(requestParameters.integrationId, requestParameters.integrationUpdateIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a Message.
     * @summary Update Message
     * @param {EnterpriseApiUpdateMessageV1EnterpriseMessagesMessageIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    updateMessageV1EnterpriseMessagesMessageIdPatch(requestParameters, options) {
        return exports.EnterpriseApiFp(this.configuration).updateMessageV1EnterpriseMessagesMessageIdPatch(requestParameters.messageId, requestParameters.messageIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.EnterpriseApi = EnterpriseApi;
/**
 * FeaturesApi - axios parameter creator
 * @export
 */
exports.FeaturesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut: (datasetId, featureId, index, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut', 'featureId', featureId);
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut: (teamSlug, datasetId, featureId, index, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost: (datasetId, featureIn, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost', 'datasetId', datasetId);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost', 'featureIn', featureIn);
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost: (teamSlug, datasetId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost', 'datasetId', datasetId);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost', 'featureIn', featureIn);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {FeatureIn} featureIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1FeaturesPost: (featureIn, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('createFeatureV1FeaturesPost', 'featureIn', featureIn);
            const localVarPath = `/v1/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamSlug
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamSlugFeaturesPost: (teamSlug, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createFeatureV1TeamsTeamSlugFeaturesPost', 'teamSlug', teamSlug);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('createFeatureV1TeamsTeamSlugFeaturesPost', 'featureIn', featureIn);
            const localVarPath = `/v1/teams/{team_slug}/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1FeaturesFeatureIdDelete: (featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('deleteFeatureV1FeaturesFeatureIdDelete', 'featureId', featureId);
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDelete: (teamSlug, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('deleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDelete', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_slug}/features/{feature_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1FeaturesFeatureIdGet: (featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('getFeatureV1FeaturesFeatureIdGet', 'featureId', featureId);
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamSlugFeaturesFeatureIdGet: (teamSlug, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getFeatureV1TeamsTeamSlugFeaturesFeatureIdGet', 'teamSlug', teamSlug);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('getFeatureV1TeamsTeamSlugFeaturesFeatureIdGet', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_slug}/features/{feature_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet: (datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}/features`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet: (teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Features.
         * @summary List Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1FeaturesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamSlugFeaturesGet: (teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listFeaturesV1TeamsTeamSlugFeaturesGet', 'teamSlug', teamSlug);
            const localVarPath = `/v1/teams/{team_slug}/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet: (featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet', 'featureId', featureId);
            const localVarPath = `/v1/features/{feature_id}/system/features`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet: (teamSlug, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet', 'teamSlug', teamSlug);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_slug}/features/{feature_id}/system/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserFeaturesV1UsersUserIdFeaturesGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/features`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1FeaturesFeatureIdPatch: (featureId, patchFeatureOpArrayPatchFeatureOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('patchFeatureV1FeaturesFeatureIdPatch', 'featureId', featureId);
            // verify required parameter 'patchFeatureOpArrayPatchFeatureOp' is not null or undefined
            common_1.assertParamExists('patchFeatureV1FeaturesFeatureIdPatch', 'patchFeatureOpArrayPatchFeatureOp', patchFeatureOpArrayPatchFeatureOp);
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchFeatureOpArrayPatchFeatureOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch: (teamSlug, featureId, patchFeatureOpArrayPatchFeatureOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch', 'teamSlug', teamSlug);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch', 'featureId', featureId);
            // verify required parameter 'patchFeatureOpArrayPatchFeatureOp' is not null or undefined
            common_1.assertParamExists('patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch', 'patchFeatureOpArrayPatchFeatureOp', patchFeatureOpArrayPatchFeatureOp);
            const localVarPath = `/v1/teams/{team_slug}/features/{feature_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchFeatureOpArrayPatchFeatureOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1FeaturesPatch: (bulkPatchFeatureOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bulkPatchFeatureOp' is not null or undefined
            common_1.assertParamExists('patchMultipleFeaturesV1FeaturesPatch', 'bulkPatchFeatureOp', bulkPatchFeatureOp);
            const localVarPath = `/v1/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bulkPatchFeatureOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamSlug
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamSlugFeaturesPatch: (teamSlug, bulkPatchFeatureOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('patchMultipleFeaturesV1TeamsTeamSlugFeaturesPatch', 'teamSlug', teamSlug);
            // verify required parameter 'bulkPatchFeatureOp' is not null or undefined
            common_1.assertParamExists('patchMultipleFeaturesV1TeamsTeamSlugFeaturesPatch', 'bulkPatchFeatureOp', bulkPatchFeatureOp);
            const localVarPath = `/v1/teams/{team_slug}/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bulkPatchFeatureOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete: (datasetId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete', 'featureId', featureId);
            const localVarPath = `/v1/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete: (teamSlug, datasetId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1FeaturesFeatureIdPut: (featureId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('replaceFeatureV1FeaturesFeatureIdPut', 'featureId', featureId);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('replaceFeatureV1FeaturesFeatureIdPut', 'featureIn', featureIn);
            const localVarPath = `/v1/features/{feature_id}`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut: (teamSlug, featureId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut', 'featureId', featureId);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut', 'featureIn', featureIn);
            const localVarPath = `/v1/teams/{team_slug}/features/{feature_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * FeaturesApi - functional programming interface
 * @export
 */
exports.FeaturesApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.FeaturesApiAxiosParamCreator(configuration);
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut(teamSlug, datasetId, featureId, index, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut(teamSlug, datasetId, featureId, index, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost(teamSlug, datasetId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost(teamSlug, datasetId, featureIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {FeatureIn} featureIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1FeaturesPost(featureIn, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createFeatureV1FeaturesPost(featureIn, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamSlug
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamSlugFeaturesPost(teamSlug, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createFeatureV1TeamsTeamSlugFeaturesPost(teamSlug, featureIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1FeaturesFeatureIdDelete(featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFeatureV1FeaturesFeatureIdDelete(featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDelete(teamSlug, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDelete(teamSlug, featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1FeaturesFeatureIdGet(featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFeatureV1FeaturesFeatureIdGet(featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamSlugFeaturesFeatureIdGet(teamSlug, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFeatureV1TeamsTeamSlugFeaturesFeatureIdGet(teamSlug, featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1FeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFeaturesV1FeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamSlugFeaturesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFeaturesV1TeamsTeamSlugFeaturesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet(teamSlug, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet(teamSlug, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch(teamSlug, featureId, patchFeatureOpArrayPatchFeatureOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch(teamSlug, featureId, patchFeatureOpArrayPatchFeatureOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamSlug
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamSlugFeaturesPatch(teamSlug, bulkPatchFeatureOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchMultipleFeaturesV1TeamsTeamSlugFeaturesPatch(teamSlug, bulkPatchFeatureOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete(teamSlug, datasetId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete(teamSlug, datasetId, featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut(teamSlug, featureId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut(teamSlug, featureId, featureIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * FeaturesApi - factory interface
 * @export
 */
exports.FeaturesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.FeaturesApiFp(configuration);
    return {
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options) {
            return localVarFp.addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut(teamSlug, datasetId, featureId, index, options) {
            return localVarFp.addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut(teamSlug, datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamSlug, options) {
            return localVarFp.createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(datasetId, featureIn, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost(teamSlug, datasetId, featureIn, options) {
            return localVarFp.createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost(teamSlug, datasetId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {FeatureIn} featureIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1FeaturesPost(featureIn, teamSlug, options) {
            return localVarFp.createFeatureV1FeaturesPost(featureIn, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamSlug
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamSlugFeaturesPost(teamSlug, featureIn, options) {
            return localVarFp.createFeatureV1TeamsTeamSlugFeaturesPost(teamSlug, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1FeaturesFeatureIdDelete(featureId, options) {
            return localVarFp.deleteFeatureV1FeaturesFeatureIdDelete(featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDelete(teamSlug, featureId, options) {
            return localVarFp.deleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDelete(teamSlug, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1FeaturesFeatureIdGet(featureId, options) {
            return localVarFp.getFeatureV1FeaturesFeatureIdGet(featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamSlugFeaturesFeatureIdGet(teamSlug, featureId, options) {
            return localVarFp.getFeatureV1TeamsTeamSlugFeaturesFeatureIdGet(teamSlug, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1FeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamSlug, options) {
            return localVarFp.listFeaturesV1FeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamSlugFeaturesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listFeaturesV1TeamsTeamSlugFeaturesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return localVarFp.listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet(teamSlug, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return localVarFp.listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet(teamSlug, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, options) {
            return localVarFp.patchFeatureV1FeaturesFeatureIdPatch(featureId, patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch(teamSlug, featureId, patchFeatureOpArrayPatchFeatureOp, options) {
            return localVarFp.patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch(teamSlug, featureId, patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options) {
            return localVarFp.patchMultipleFeaturesV1FeaturesPatch(bulkPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamSlug
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamSlugFeaturesPatch(teamSlug, bulkPatchFeatureOp, options) {
            return localVarFp.patchMultipleFeaturesV1TeamsTeamSlugFeaturesPatch(teamSlug, bulkPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options) {
            return localVarFp.removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete(teamSlug, datasetId, featureId, options) {
            return localVarFp.removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete(teamSlug, datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, options) {
            return localVarFp.replaceFeatureV1FeaturesFeatureIdPut(featureId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut(teamSlug, featureId, featureIn, options) {
            return localVarFp.replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut(teamSlug, featureId, featureIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * FeaturesApi - object-oriented interface
 * @export
 * @class FeaturesApi
 * @extends {BaseAPI}
 */
class FeaturesApi extends base_1.BaseAPI {
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {FeaturesApiAddFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).addFeatureToDatasetV1DatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {FeaturesApiAddFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {FeaturesApiCreateAndAttachFeaturesV1DatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).createAndAttachFeaturesV1DatasetsDatasetIdFeaturesPost(requestParameters.datasetId, requestParameters.featureIn, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {FeaturesApiCreateAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Feature.
     * @summary Create Feature
     * @param {FeaturesApiCreateFeatureV1FeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    createFeatureV1FeaturesPost(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).createFeatureV1FeaturesPost(requestParameters.featureIn, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Feature.
     * @summary Create Feature
     * @param {FeaturesApiCreateFeatureV1TeamsTeamSlugFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    createFeatureV1TeamsTeamSlugFeaturesPost(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).createFeatureV1TeamsTeamSlugFeaturesPost(requestParameters.teamSlug, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a feature.
     * @summary Delete Feature
     * @param {FeaturesApiDeleteFeatureV1FeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    deleteFeatureV1FeaturesFeatureIdDelete(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).deleteFeatureV1FeaturesFeatureIdDelete(requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a feature.
     * @summary Delete Feature
     * @param {FeaturesApiDeleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    deleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).deleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDelete(requestParameters.teamSlug, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get feature.
     * @summary Get Feature
     * @param {FeaturesApiGetFeatureV1FeaturesFeatureIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    getFeatureV1FeaturesFeatureIdGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).getFeatureV1FeaturesFeatureIdGet(requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get feature.
     * @summary Get Feature
     * @param {FeaturesApiGetFeatureV1TeamsTeamSlugFeaturesFeatureIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    getFeatureV1TeamsTeamSlugFeaturesFeatureIdGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).getFeatureV1TeamsTeamSlugFeaturesFeatureIdGet(requestParameters.teamSlug, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {FeaturesApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters = {}, options) {
        return exports.FeaturesApiFp(this.configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {FeaturesApiListDatasetFeaturesV1DatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listDatasetFeaturesV1DatasetsDatasetIdFeaturesGet(requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {FeaturesApiListDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Features.
     * @summary List Features
     * @param {FeaturesApiListFeaturesV1FeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listFeaturesV1FeaturesGet(requestParameters = {}, options) {
        return exports.FeaturesApiFp(this.configuration).listFeaturesV1FeaturesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Features.
     * @summary List Features
     * @param {FeaturesApiListFeaturesV1TeamsTeamSlugFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listFeaturesV1TeamsTeamSlugFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listFeaturesV1TeamsTeamSlugFeaturesGet(requestParameters.teamSlug, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested feature\'s system.
     * @summary List System Of Features
     * @param {FeaturesApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(requestParameters.featureId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested feature\'s system.
     * @summary List System Of Features
     * @param {FeaturesApiListSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet(requestParameters.teamSlug, requestParameters.featureId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {FeaturesApiListUserFeaturesV1UsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
     * @summary Patch Feature
     * @param {FeaturesApiPatchFeatureV1FeaturesFeatureIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    patchFeatureV1FeaturesFeatureIdPatch(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).patchFeatureV1FeaturesFeatureIdPatch(requestParameters.featureId, requestParameters.patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
     * @summary Patch Feature
     * @param {FeaturesApiPatchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch(requestParameters.teamSlug, requestParameters.featureId, requestParameters.patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Batch feature patching.
     * @summary Patch Multiple Features
     * @param {FeaturesApiPatchMultipleFeaturesV1FeaturesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    patchMultipleFeaturesV1FeaturesPatch(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).patchMultipleFeaturesV1FeaturesPatch(requestParameters.bulkPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Batch feature patching.
     * @summary Patch Multiple Features
     * @param {FeaturesApiPatchMultipleFeaturesV1TeamsTeamSlugFeaturesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    patchMultipleFeaturesV1TeamsTeamSlugFeaturesPatch(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).patchMultipleFeaturesV1TeamsTeamSlugFeaturesPatch(requestParameters.teamSlug, requestParameters.bulkPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {FeaturesApiRemoveFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).removeFeatureFromDatasetV1DatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {FeaturesApiRemoveFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Feature.
     * @summary Replace Feature
     * @param {FeaturesApiReplaceFeatureV1FeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    replaceFeatureV1FeaturesFeatureIdPut(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).replaceFeatureV1FeaturesFeatureIdPut(requestParameters.featureId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Feature.
     * @summary Replace Feature
     * @param {FeaturesApiReplaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut(requestParameters, options) {
        return exports.FeaturesApiFp(this.configuration).replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut(requestParameters.teamSlug, requestParameters.featureId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FeaturesApi = FeaturesApi;
/**
 * GraphApi - axios parameter creator
 * @export
 */
exports.GraphApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Fetch dataset graph.
         * @summary Get Concept Graph
         * @param {number} [minRelationshipStrength]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1GraphConceptGraphGet: (minRelationshipStrength, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/graph/concept_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (minRelationshipStrength !== undefined) {
                localVarQueryParameter['min_relationship_strength'] = minRelationshipStrength;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1GraphDatasetGraphGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/graph/dataset_graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * GraphApi - functional programming interface
 * @export
 */
exports.GraphApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.GraphApiAxiosParamCreator(configuration);
    return {
        /**
         * Fetch dataset graph.
         * @summary Get Concept Graph
         * @param {number} [minRelationshipStrength]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1GraphConceptGraphGet(minRelationshipStrength, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConceptGraphV1GraphConceptGraphGet(minRelationshipStrength, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1GraphDatasetGraphGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDatasetGraphV1GraphDatasetGraphGet(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * GraphApi - factory interface
 * @export
 */
exports.GraphApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.GraphApiFp(configuration);
    return {
        /**
         * Fetch dataset graph.
         * @summary Get Concept Graph
         * @param {number} [minRelationshipStrength]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConceptGraphV1GraphConceptGraphGet(minRelationshipStrength, options) {
            return localVarFp.getConceptGraphV1GraphConceptGraphGet(minRelationshipStrength, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch dataset graph.
         * @summary Get Dataset Graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetGraphV1GraphDatasetGraphGet(options) {
            return localVarFp.getDatasetGraphV1GraphDatasetGraphGet(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * GraphApi - object-oriented interface
 * @export
 * @class GraphApi
 * @extends {BaseAPI}
 */
class GraphApi extends base_1.BaseAPI {
    /**
     * Fetch dataset graph.
     * @summary Get Concept Graph
     * @param {GraphApiGetConceptGraphV1GraphConceptGraphGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getConceptGraphV1GraphConceptGraphGet(requestParameters = {}, options) {
        return exports.GraphApiFp(this.configuration).getConceptGraphV1GraphConceptGraphGet(requestParameters.minRelationshipStrength, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch dataset graph.
     * @summary Get Dataset Graph
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    getDatasetGraphV1GraphDatasetGraphGet(options) {
        return exports.GraphApiFp(this.configuration).getDatasetGraphV1GraphDatasetGraphGet(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.GraphApi = GraphApi;
/**
 * GraphqlApi - axios parameter creator
 * @export
 */
exports.GraphqlApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Forward GraphQL request to SystemDB.
         * @summary Post Graphql
         * @param {GraphQLQuery} graphQLQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphqlV1GraphqlPost: (graphQLQuery, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'graphQLQuery' is not null or undefined
            common_1.assertParamExists('postGraphqlV1GraphqlPost', 'graphQLQuery', graphQLQuery);
            const localVarPath = `/v1/graphql`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(graphQLQuery, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * GraphqlApi - functional programming interface
 * @export
 */
exports.GraphqlApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.GraphqlApiAxiosParamCreator(configuration);
    return {
        /**
         * Forward GraphQL request to SystemDB.
         * @summary Post Graphql
         * @param {GraphQLQuery} graphQLQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphqlV1GraphqlPost(graphQLQuery, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.postGraphqlV1GraphqlPost(graphQLQuery, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * GraphqlApi - factory interface
 * @export
 */
exports.GraphqlApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.GraphqlApiFp(configuration);
    return {
        /**
         * Forward GraphQL request to SystemDB.
         * @summary Post Graphql
         * @param {GraphQLQuery} graphQLQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphqlV1GraphqlPost(graphQLQuery, options) {
            return localVarFp.postGraphqlV1GraphqlPost(graphQLQuery, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * GraphqlApi - object-oriented interface
 * @export
 * @class GraphqlApi
 * @extends {BaseAPI}
 */
class GraphqlApi extends base_1.BaseAPI {
    /**
     * Forward GraphQL request to SystemDB.
     * @summary Post Graphql
     * @param {GraphqlApiPostGraphqlV1GraphqlPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphqlApi
     */
    postGraphqlV1GraphqlPost(requestParameters, options) {
        return exports.GraphqlApiFp(this.configuration).postGraphqlV1GraphqlPost(requestParameters.graphQLQuery, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.GraphqlApi = GraphqlApi;
/**
 * ModeldbApi - axios parameter creator
 * @export
 */
exports.ModeldbApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get algorithms by id.
         * @summary Get Algorithm
         * @param {string} algorithmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet: (algorithmId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'algorithmId' is not null or undefined
            common_1.assertParamExists('getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet', 'algorithmId', algorithmId);
            const localVarPath = `/v1/modeldb/algorithms/{algorithm_id}`
                .replace(`{${"algorithm_id"}}`, encodeURIComponent(String(algorithmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List available algorithms in ModelDB. Search with algorithm class if passed.
         * @summary List Algorithms
         * @param {string} [algorithmClass]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlgorithmsV1ModeldbAlgorithmsGet: (algorithmClass, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/modeldb/algorithms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (algorithmClass !== undefined) {
                localVarQueryParameter['algorithm_class'] = algorithmClass;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ModeldbApi - functional programming interface
 * @export
 */
exports.ModeldbApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.ModeldbApiAxiosParamCreator(configuration);
    return {
        /**
         * Get algorithms by id.
         * @summary Get Algorithm
         * @param {string} algorithmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List available algorithms in ModelDB. Search with algorithm class if passed.
         * @summary List Algorithms
         * @param {string} [algorithmClass]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * ModeldbApi - factory interface
 * @export
 */
exports.ModeldbApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.ModeldbApiFp(configuration);
    return {
        /**
         * Get algorithms by id.
         * @summary Get Algorithm
         * @param {string} algorithmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId, options) {
            return localVarFp.getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(algorithmId, options).then((request) => request(axios, basePath));
        },
        /**
         * List available algorithms in ModelDB. Search with algorithm class if passed.
         * @summary List Algorithms
         * @param {string} [algorithmClass]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass, options) {
            return localVarFp.listAlgorithmsV1ModeldbAlgorithmsGet(algorithmClass, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ModeldbApi - object-oriented interface
 * @export
 * @class ModeldbApi
 * @extends {BaseAPI}
 */
class ModeldbApi extends base_1.BaseAPI {
    /**
     * Get algorithms by id.
     * @summary Get Algorithm
     * @param {ModeldbApiGetAlgorithmV1ModeldbAlgorithmsAlgorithmIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeldbApi
     */
    getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(requestParameters, options) {
        return exports.ModeldbApiFp(this.configuration).getAlgorithmV1ModeldbAlgorithmsAlgorithmIdGet(requestParameters.algorithmId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List available algorithms in ModelDB. Search with algorithm class if passed.
     * @summary List Algorithms
     * @param {ModeldbApiListAlgorithmsV1ModeldbAlgorithmsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeldbApi
     */
    listAlgorithmsV1ModeldbAlgorithmsGet(requestParameters = {}, options) {
        return exports.ModeldbApiFp(this.configuration).listAlgorithmsV1ModeldbAlgorithmsGet(requestParameters.algorithmClass, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ModeldbApi = ModeldbApi;
/**
 * ModelsApi - axios parameter creator
 * @export
 */
exports.ModelsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost: (modelId, associationInArrayAssociationIn, mergeFeatures, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1ModelsModelIdAssociationsPost', 'modelId', modelId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1ModelsModelIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost: (teamSlug, modelId, associationInArrayAssociationIn, mergeFeatures, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost', 'modelId', modelId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost: (studyId, modelIn, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('createModelsV1StudiesStudyIdModelsPost', 'studyId', studyId);
            // verify required parameter 'modelIn' is not null or undefined
            common_1.assertParamExists('createModelsV1StudiesStudyIdModelsPost', 'modelIn', modelIn);
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost: (teamSlug, studyId, modelIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost', 'studyId', studyId);
            // verify required parameter 'modelIn' is not null or undefined
            common_1.assertParamExists('createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost', 'modelIn', modelIn);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/models`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete: (modelId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete', 'modelId', modelId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete', 'associationId', associationId);
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete: (teamSlug, modelId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete', 'modelId', modelId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete', 'associationId', associationId);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete: (modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1ModelsModelIdAssociationsDelete', 'modelId', modelId);
            // verify required parameter 'bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1ModelsModelIdAssociationsDelete', 'bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete', bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete);
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete: (teamSlug, modelId, bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete', 'modelId', modelId);
            // verify required parameter 'bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete', 'bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete', bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1ModelsModelIdDelete: (modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteModelV1ModelsModelIdDelete', 'modelId', modelId);
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamSlugModelsModelIdDelete: (teamSlug, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteModelV1TeamsTeamSlugModelsModelIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteModelV1TeamsTeamSlugModelsModelIdDelete', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet: (associationId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getAssociationV1ModelsModelIdAssociationsAssociationIdGet', 'associationId', associationId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('getAssociationV1ModelsModelIdAssociationsAssociationIdGet', 'modelId', modelId);
            const localVarPath = `/v1/models/{model_id}/associations/{association_id}`
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet: (teamSlug, associationId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet', 'teamSlug', teamSlug);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet', 'associationId', associationId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1ModelsModelIdGet: (modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('getModelV1ModelsModelIdGet', 'modelId', modelId);
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamSlugModelsModelIdGet: (teamSlug, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getModelV1TeamsTeamSlugModelsModelIdGet', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('getModelV1TeamsTeamSlugModelsModelIdGet', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet: (modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1ModelsModelIdAssociationsGet', 'modelId', modelId);
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet: (teamSlug, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet: (studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listModelsInStudyV1StudiesStudyIdModelsGet', 'studyId', studyId);
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet: (teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/models`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Models.
         * @summary List Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1ModelsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamSlugModelsGet: (teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listModelsV1TeamsTeamSlugModelsGet', 'teamSlug', teamSlug);
            const localVarPath = `/v1/teams/{team_slug}/models`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserModelsV1UsersUserIdModelsGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/models`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch: (modelId, bulkPatchAssociationOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1ModelsModelIdAssociationsPatch', 'modelId', modelId);
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1ModelsModelIdAssociationsPatch', 'bulkPatchAssociationOp', bulkPatchAssociationOp);
            const localVarPath = `/v1/models/{model_id}/associations`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bulkPatchAssociationOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch: (teamSlug, modelId, bulkPatchAssociationOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch', 'modelId', modelId);
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch', 'bulkPatchAssociationOp', bulkPatchAssociationOp);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bulkPatchAssociationOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1ModelsModelIdPatch: (modelId, patchModelOpArrayPatchModelOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('patchModelV1ModelsModelIdPatch', 'modelId', modelId);
            // verify required parameter 'patchModelOpArrayPatchModelOp' is not null or undefined
            common_1.assertParamExists('patchModelV1ModelsModelIdPatch', 'patchModelOpArrayPatchModelOp', patchModelOpArrayPatchModelOp);
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchModelOpArrayPatchModelOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamSlugModelsModelIdPatch: (teamSlug, modelId, patchModelOpArrayPatchModelOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('patchModelV1TeamsTeamSlugModelsModelIdPatch', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('patchModelV1TeamsTeamSlugModelsModelIdPatch', 'modelId', modelId);
            // verify required parameter 'patchModelOpArrayPatchModelOp' is not null or undefined
            common_1.assertParamExists('patchModelV1TeamsTeamSlugModelsModelIdPatch', 'patchModelOpArrayPatchModelOp', patchModelOpArrayPatchModelOp);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchModelOpArrayPatchModelOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1ModelsModelIdPut: (modelId, modelIn, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('replaceModelV1ModelsModelIdPut', 'modelId', modelId);
            // verify required parameter 'modelIn' is not null or undefined
            common_1.assertParamExists('replaceModelV1ModelsModelIdPut', 'modelIn', modelIn);
            const localVarPath = `/v1/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamSlugModelsModelIdPut: (teamSlug, modelId, modelIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('replaceModelV1TeamsTeamSlugModelsModelIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('replaceModelV1TeamsTeamSlugModelsModelIdPut', 'modelId', modelId);
            // verify required parameter 'modelIn' is not null or undefined
            common_1.assertParamExists('replaceModelV1TeamsTeamSlugModelsModelIdPut', 'modelIn', modelIn);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ModelsApi - functional programming interface
 * @export
 */
exports.ModelsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.ModelsApiAxiosParamCreator(configuration);
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost(teamSlug, modelId, associationInArrayAssociationIn, mergeFeatures, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost(teamSlug, modelId, associationInArrayAssociationIn, mergeFeatures, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost(teamSlug, studyId, modelIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost(teamSlug, studyId, modelIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete(teamSlug, modelId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete(teamSlug, modelId, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete(teamSlug, modelId, bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete(teamSlug, modelId, bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1ModelsModelIdDelete(modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteModelV1ModelsModelIdDelete(modelId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamSlugModelsModelIdDelete(teamSlug, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteModelV1TeamsTeamSlugModelsModelIdDelete(teamSlug, modelId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet(teamSlug, associationId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet(teamSlug, associationId, modelId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1ModelsModelIdGet(modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getModelV1ModelsModelIdGet(modelId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamSlugModelsModelIdGet(teamSlug, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getModelV1TeamsTeamSlugModelsModelIdGet(teamSlug, modelId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet(teamSlug, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet(teamSlug, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsInStudyV1StudiesStudyIdModelsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1ModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsV1ModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamSlugModelsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsV1TeamsTeamSlugModelsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch(teamSlug, modelId, bulkPatchAssociationOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch(teamSlug, modelId, bulkPatchAssociationOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamSlugModelsModelIdPatch(teamSlug, modelId, patchModelOpArrayPatchModelOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchModelV1TeamsTeamSlugModelsModelIdPatch(teamSlug, modelId, patchModelOpArrayPatchModelOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1ModelsModelIdPut(modelId, modelIn, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.replaceModelV1ModelsModelIdPut(modelId, modelIn, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamSlugModelsModelIdPut(teamSlug, modelId, modelIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.replaceModelV1TeamsTeamSlugModelsModelIdPut(teamSlug, modelId, modelIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * ModelsApi - factory interface
 * @export
 */
exports.ModelsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.ModelsApiFp(configuration);
    return {
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamSlug, options) {
            return localVarFp.createAssociationsV1ModelsModelIdAssociationsPost(modelId, associationInArrayAssociationIn, mergeFeatures, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost(teamSlug, modelId, associationInArrayAssociationIn, mergeFeatures, options) {
            return localVarFp.createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost(teamSlug, modelId, associationInArrayAssociationIn, mergeFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamSlug, options) {
            return localVarFp.createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost(teamSlug, studyId, modelIn, options) {
            return localVarFp.createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost(teamSlug, studyId, modelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options) {
            return localVarFp.deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete(teamSlug, modelId, associationId, options) {
            return localVarFp.deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete(teamSlug, modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1ModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options) {
            return localVarFp.deleteAssociationsV1ModelsModelIdAssociationsDelete(modelId, bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete(teamSlug, modelId, bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, options) {
            return localVarFp.deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete(teamSlug, modelId, bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1ModelsModelIdDelete(modelId, options) {
            return localVarFp.deleteModelV1ModelsModelIdDelete(modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamSlugModelsModelIdDelete(teamSlug, modelId, options) {
            return localVarFp.deleteModelV1TeamsTeamSlugModelsModelIdDelete(teamSlug, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options) {
            return localVarFp.getAssociationV1ModelsModelIdAssociationsAssociationIdGet(associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet(teamSlug, associationId, modelId, options) {
            return localVarFp.getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet(teamSlug, associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1ModelsModelIdGet(modelId, options) {
            return localVarFp.getModelV1ModelsModelIdGet(modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamSlugModelsModelIdGet(teamSlug, modelId, options) {
            return localVarFp.getModelV1TeamsTeamSlugModelsModelIdGet(teamSlug, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1ModelsModelIdAssociationsGet(modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet(teamSlug, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet(teamSlug, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsInStudyV1StudiesStudyIdModelsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1ModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamSlug, options) {
            return localVarFp.listModelsV1ModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamSlugModelsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsV1TeamsTeamSlugModelsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options) {
            return localVarFp.patchAssociationsV1ModelsModelIdAssociationsPatch(modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch(teamSlug, modelId, bulkPatchAssociationOp, options) {
            return localVarFp.patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch(teamSlug, modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, options) {
            return localVarFp.patchModelV1ModelsModelIdPatch(modelId, patchModelOpArrayPatchModelOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamSlugModelsModelIdPatch(teamSlug, modelId, patchModelOpArrayPatchModelOp, options) {
            return localVarFp.patchModelV1TeamsTeamSlugModelsModelIdPatch(teamSlug, modelId, patchModelOpArrayPatchModelOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1ModelsModelIdPut(modelId, modelIn, teamSlug, options) {
            return localVarFp.replaceModelV1ModelsModelIdPut(modelId, modelIn, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamSlugModelsModelIdPut(teamSlug, modelId, modelIn, options) {
            return localVarFp.replaceModelV1TeamsTeamSlugModelsModelIdPut(teamSlug, modelId, modelIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ModelsApi - object-oriented interface
 * @export
 * @class ModelsApi
 * @extends {BaseAPI}
 */
class ModelsApi extends base_1.BaseAPI {
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {ModelsApiCreateAssociationsV1ModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    createAssociationsV1ModelsModelIdAssociationsPost(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).createAssociationsV1ModelsModelIdAssociationsPost(requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {ModelsApiCreateAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost(requestParameters.teamSlug, requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {ModelsApiCreateModelsV1StudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    createModelsV1StudiesStudyIdModelsPost(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).createModelsV1StudiesStudyIdModelsPost(requestParameters.studyId, requestParameters.modelIn, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {ModelsApiCreateModelsV1TeamsTeamSlugStudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost(requestParameters.teamSlug, requestParameters.studyId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {ModelsApiDeleteAssociationV1ModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteAssociationV1ModelsModelIdAssociationsAssociationIdDelete(requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {ModelsApiDeleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete(requestParameters.teamSlug, requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {ModelsApiDeleteAssociationsV1ModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteAssociationsV1ModelsModelIdAssociationsDelete(requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1ModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {ModelsApiDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete(requestParameters.teamSlug, requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
     * @summary Delete Model
     * @param {ModelsApiDeleteModelV1ModelsModelIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteModelV1ModelsModelIdDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteModelV1ModelsModelIdDelete(requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
     * @summary Delete Model
     * @param {ModelsApiDeleteModelV1TeamsTeamSlugModelsModelIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteModelV1TeamsTeamSlugModelsModelIdDelete(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).deleteModelV1TeamsTeamSlugModelsModelIdDelete(requestParameters.teamSlug, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Get Association
     * @param {ModelsApiGetAssociationV1ModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).getAssociationV1ModelsModelIdAssociationsAssociationIdGet(requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Get Association
     * @param {ModelsApiGetAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet(requestParameters.teamSlug, requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Model.
     * @summary Get Model
     * @param {ModelsApiGetModelV1ModelsModelIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    getModelV1ModelsModelIdGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).getModelV1ModelsModelIdGet(requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Model.
     * @summary Get Model
     * @param {ModelsApiGetModelV1TeamsTeamSlugModelsModelIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    getModelV1TeamsTeamSlugModelsModelIdGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).getModelV1TeamsTeamSlugModelsModelIdGet(requestParameters.teamSlug, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in model.
     * @summary List Associations
     * @param {ModelsApiListAssociationsV1ModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listAssociationsV1ModelsModelIdAssociationsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listAssociationsV1ModelsModelIdAssociationsGet(requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in model.
     * @summary List Associations
     * @param {ModelsApiListAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet(requestParameters.teamSlug, requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {ModelsApiListAuthenticatedUserModelsV1UserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listAuthenticatedUserModelsV1UserModelsGet(requestParameters = {}, options) {
        return exports.ModelsApiFp(this.configuration).listAuthenticatedUserModelsV1UserModelsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {ModelsApiListModelsInStudyV1StudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {ModelsApiListModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet(requestParameters.teamSlug, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Models.
     * @summary List Models
     * @param {ModelsApiListModelsV1ModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listModelsV1ModelsGet(requestParameters = {}, options) {
        return exports.ModelsApiFp(this.configuration).listModelsV1ModelsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Models.
     * @summary List Models
     * @param {ModelsApiListModelsV1TeamsTeamSlugModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listModelsV1TeamsTeamSlugModelsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listModelsV1TeamsTeamSlugModelsGet(requestParameters.teamSlug, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {ModelsApiListUserModelsV1UsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listUserModelsV1UsersUserIdModelsGet(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).listUserModelsV1UsersUserIdModelsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {ModelsApiPatchAssociationsV1ModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).patchAssociationsV1ModelsModelIdAssociationsPatch(requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {ModelsApiPatchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch(requestParameters.teamSlug, requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Model resource with partial update.
     * @summary Patch Model
     * @param {ModelsApiPatchModelV1ModelsModelIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    patchModelV1ModelsModelIdPatch(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).patchModelV1ModelsModelIdPatch(requestParameters.modelId, requestParameters.patchModelOpArrayPatchModelOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Model resource with partial update.
     * @summary Patch Model
     * @param {ModelsApiPatchModelV1TeamsTeamSlugModelsModelIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    patchModelV1TeamsTeamSlugModelsModelIdPatch(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).patchModelV1TeamsTeamSlugModelsModelIdPatch(requestParameters.teamSlug, requestParameters.modelId, requestParameters.patchModelOpArrayPatchModelOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Model.
     * @summary Replace Model
     * @param {ModelsApiReplaceModelV1ModelsModelIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    replaceModelV1ModelsModelIdPut(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).replaceModelV1ModelsModelIdPut(requestParameters.modelId, requestParameters.modelIn, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Model.
     * @summary Replace Model
     * @param {ModelsApiReplaceModelV1TeamsTeamSlugModelsModelIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    replaceModelV1TeamsTeamSlugModelsModelIdPut(requestParameters, options) {
        return exports.ModelsApiFp(this.configuration).replaceModelV1TeamsTeamSlugModelsModelIdPut(requestParameters.teamSlug, requestParameters.modelId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ModelsApi = ModelsApi;
/**
 * PopulationAttributeValuesApi - axios parameter creator
 * @export
 */
exports.PopulationAttributeValuesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: (datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: (teamSlug, datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete population attribute value.
         * @summary Delete Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete: (populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet: (datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet: (teamSlug, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get population attribute value.
         * @summary Get Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet: (populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List population attribute values.
         * @summary List Population Attribute Values
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributeValuesV1PopulationAttributeValuesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/population_attribute_values`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: (datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: (teamSlug, datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PopulationAttributeValuesApi - functional programming interface
 * @export
 */
exports.PopulationAttributeValuesApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.PopulationAttributeValuesApiAxiosParamCreator(configuration);
    return {
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamSlug, datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamSlug, datasetId, populationAttributeValueId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete population attribute value.
         * @summary Delete Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet(teamSlug, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet(teamSlug, datasetId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get population attribute value.
         * @summary Get Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List population attribute values.
         * @summary List Population Attribute Values
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributeValuesV1PopulationAttributeValuesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listPopulationAttributeValuesV1PopulationAttributeValuesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamSlug, datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamSlug, datasetId, populationAttributeValueId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * PopulationAttributeValuesApi - factory interface
 * @export
 */
exports.PopulationAttributeValuesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.PopulationAttributeValuesApiFp(configuration);
    return {
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options) {
            return localVarFp.addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamSlug, datasetId, populationAttributeValueId, options) {
            return localVarFp.addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamSlug, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete population attribute value.
         * @summary Delete Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, options) {
            return localVarFp.deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options) {
            return localVarFp.fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet(teamSlug, datasetId, options) {
            return localVarFp.fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet(teamSlug, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get population attribute value.
         * @summary Get Population Attribute Value
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, options) {
            return localVarFp.getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * List population attribute values.
         * @summary List Population Attribute Values
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributeValuesV1PopulationAttributeValuesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listPopulationAttributeValuesV1PopulationAttributeValuesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options) {
            return localVarFp.removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamSlug, datasetId, populationAttributeValueId, options) {
            return localVarFp.removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamSlug, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PopulationAttributeValuesApi - object-oriented interface
 * @export
 * @class PopulationAttributeValuesApi
 * @extends {BaseAPI}
 */
class PopulationAttributeValuesApi extends base_1.BaseAPI {
    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).addPopulationAttributeValueToDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {PopulationAttributeValuesApiAddPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete population attribute value.
     * @summary Delete Population Attribute Value
     * @param {PopulationAttributeValuesApiDeletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).deletePopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1DatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {PopulationAttributeValuesApiFetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.teamSlug, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get population attribute value.
     * @summary Get Population Attribute Value
     * @param {PopulationAttributeValuesApiGetPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).getPopulationAttributeValueV1PopulationAttributeValuesPopulationAttributeValueIdGet(requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List population attribute values.
     * @summary List Population Attribute Values
     * @param {PopulationAttributeValuesApiListPopulationAttributeValuesV1PopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    listPopulationAttributeValuesV1PopulationAttributeValuesGet(requestParameters = {}, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).listPopulationAttributeValuesV1PopulationAttributeValuesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1DatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {PopulationAttributeValuesApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributeValuesApi
     */
    removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.PopulationAttributeValuesApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PopulationAttributeValuesApi = PopulationAttributeValuesApi;
/**
 * PopulationAttributesApi - axios parameter creator
 * @export
 */
exports.PopulationAttributesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a population attribute.
         * @summary Create Population Attribute
         * @param {PopulationAttributeIn} populationAttributeIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeV1PopulationAttributesPost: (populationAttributeIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeIn' is not null or undefined
            common_1.assertParamExists('createPopulationAttributeV1PopulationAttributesPost', 'populationAttributeIn', populationAttributeIn);
            const localVarPath = `/v1/population_attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(populationAttributeIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a population attribute value.
         * @summary Create Population Attribute Value
         * @param {string} populationAttributeId
         * @param {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn} dateRangeInLocationInNumberRangeInCategoryInFreeTextIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost: (populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeId' is not null or undefined
            common_1.assertParamExists('createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost', 'populationAttributeId', populationAttributeId);
            // verify required parameter 'dateRangeInLocationInNumberRangeInCategoryInFreeTextIn' is not null or undefined
            common_1.assertParamExists('createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost', 'dateRangeInLocationInNumberRangeInCategoryInFreeTextIn', dateRangeInLocationInNumberRangeInCategoryInFreeTextIn);
            const localVarPath = `/v1/population_attributes/{population_attribute_id}/values`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete population attribute.
         * @summary Delete Population Attribute
         * @param {string} populationAttributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete: (populationAttributeId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeId' is not null or undefined
            common_1.assertParamExists('deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete', 'populationAttributeId', populationAttributeId);
            const localVarPath = `/v1/population_attributes/{population_attribute_id}`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get population attribute.
         * @summary Get Population Attribute
         * @param {string} populationAttributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet: (populationAttributeId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeId' is not null or undefined
            common_1.assertParamExists('getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet', 'populationAttributeId', populationAttributeId);
            const localVarPath = `/v1/population_attributes/{population_attribute_id}`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a population attribute\'s values.
         * @summary List A Population Attributes Values
         * @param {string} populationAttributeId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet: (populationAttributeId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'populationAttributeId' is not null or undefined
            common_1.assertParamExists('listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet', 'populationAttributeId', populationAttributeId);
            const localVarPath = `/v1/population_attributes/{population_attribute_id}/values`
                .replace(`{${"population_attribute_id"}}`, encodeURIComponent(String(populationAttributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List population attributes.
         * @summary List Population Attributes
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributesV1PopulationAttributesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/population_attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PopulationAttributesApi - functional programming interface
 * @export
 */
exports.PopulationAttributesApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.PopulationAttributesApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a population attribute.
         * @summary Create Population Attribute
         * @param {PopulationAttributeIn} populationAttributeIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a population attribute value.
         * @summary Create Population Attribute Value
         * @param {string} populationAttributeId
         * @param {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn} dateRangeInLocationInNumberRangeInCategoryInFreeTextIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete population attribute.
         * @summary Delete Population Attribute
         * @param {string} populationAttributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get population attribute.
         * @summary Get Population Attribute
         * @param {string} populationAttributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a population attribute\'s values.
         * @summary List A Population Attributes Values
         * @param {string} populationAttributeId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List population attributes.
         * @summary List Population Attributes
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributesV1PopulationAttributesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listPopulationAttributesV1PopulationAttributesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * PopulationAttributesApi - factory interface
 * @export
 */
exports.PopulationAttributesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.PopulationAttributesApiFp(configuration);
    return {
        /**
         * Create a population attribute.
         * @summary Create Population Attribute
         * @param {PopulationAttributeIn} populationAttributeIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options) {
            return localVarFp.createPopulationAttributeV1PopulationAttributesPost(populationAttributeIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a population attribute value.
         * @summary Create Population Attribute Value
         * @param {string} populationAttributeId
         * @param {DateRangeIn | LocationIn | NumberRangeIn | CategoryIn | FreeTextIn} dateRangeInLocationInNumberRangeInCategoryInFreeTextIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options) {
            return localVarFp.createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(populationAttributeId, dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete population attribute.
         * @summary Delete Population Attribute
         * @param {string} populationAttributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, options) {
            return localVarFp.deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(populationAttributeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get population attribute.
         * @summary Get Population Attribute
         * @param {string} populationAttributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, options) {
            return localVarFp.getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(populationAttributeId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a population attribute\'s values.
         * @summary List A Population Attributes Values
         * @param {string} populationAttributeId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeValueSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(populationAttributeId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List population attributes.
         * @summary List Population Attributes
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {PopulationAttributeSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulationAttributesV1PopulationAttributesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listPopulationAttributesV1PopulationAttributesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PopulationAttributesApi - object-oriented interface
 * @export
 * @class PopulationAttributesApi
 * @extends {BaseAPI}
 */
class PopulationAttributesApi extends base_1.BaseAPI {
    /**
     * Create a population attribute.
     * @summary Create Population Attribute
     * @param {PopulationAttributesApiCreatePopulationAttributeV1PopulationAttributesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    createPopulationAttributeV1PopulationAttributesPost(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).createPopulationAttributeV1PopulationAttributesPost(requestParameters.populationAttributeIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a population attribute value.
     * @summary Create Population Attribute Value
     * @param {PopulationAttributesApiCreatePopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).createPopulationAttributeValueV1PopulationAttributesPopulationAttributeIdValuesPost(requestParameters.populationAttributeId, requestParameters.dateRangeInLocationInNumberRangeInCategoryInFreeTextIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete population attribute.
     * @summary Delete Population Attribute
     * @param {PopulationAttributesApiDeletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).deletePopulationAttributeV1PopulationAttributesPopulationAttributeIdDelete(requestParameters.populationAttributeId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get population attribute.
     * @summary Get Population Attribute
     * @param {PopulationAttributesApiGetPopulationAttributeV1PopulationAttributesPopulationAttributeIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).getPopulationAttributeV1PopulationAttributesPopulationAttributeIdGet(requestParameters.populationAttributeId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a population attribute\'s values.
     * @summary List A Population Attributes Values
     * @param {PopulationAttributesApiListAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(requestParameters, options) {
        return exports.PopulationAttributesApiFp(this.configuration).listAPopulationAttributesValuesV1PopulationAttributesPopulationAttributeIdValuesGet(requestParameters.populationAttributeId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List population attributes.
     * @summary List Population Attributes
     * @param {PopulationAttributesApiListPopulationAttributesV1PopulationAttributesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopulationAttributesApi
     */
    listPopulationAttributesV1PopulationAttributesGet(requestParameters = {}, options) {
        return exports.PopulationAttributesApiFp(this.configuration).listPopulationAttributesV1PopulationAttributesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PopulationAttributesApi = PopulationAttributesApi;
/**
 * StudiesApi - axios parameter creator
 * @export
 */
exports.StudiesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut: (studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut', 'authorId', authorId);
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut: (teamSlug, studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {StudyIn} studyIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1StudiesPost: (studyIn, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyIn' is not null or undefined
            common_1.assertParamExists('createAStudyV1StudiesPost', 'studyIn', studyIn);
            const localVarPath = `/v1/studies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(studyIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamSlug
         * @param {StudyIn} studyIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamSlugStudiesPost: (teamSlug, studyIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createAStudyV1TeamsTeamSlugStudiesPost', 'teamSlug', teamSlug);
            // verify required parameter 'studyIn' is not null or undefined
            common_1.assertParamExists('createAStudyV1TeamsTeamSlugStudiesPost', 'studyIn', studyIn);
            const localVarPath = `/v1/teams/{team_slug}/studies`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(studyIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost: (studyId, modelIn, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('createModelsV1StudiesStudyIdModelsPost', 'studyId', studyId);
            // verify required parameter 'modelIn' is not null or undefined
            common_1.assertParamExists('createModelsV1StudiesStudyIdModelsPost', 'modelIn', modelIn);
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost: (teamSlug, studyId, modelIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost', 'studyId', studyId);
            // verify required parameter 'modelIn' is not null or undefined
            common_1.assertParamExists('createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost', 'modelIn', modelIn);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/models`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1StudiesStudyIdDelete: (studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('deleteStudyV1StudiesStudyIdDelete', 'studyId', studyId);
            const localVarPath = `/v1/studies/{study_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamSlugStudiesStudyIdDelete: (teamSlug, studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteStudyV1TeamsTeamSlugStudiesStudyIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('deleteStudyV1TeamsTeamSlugStudiesStudyIdDelete', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1StudiesStudyIdGet: (studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('getStudyV1StudiesStudyIdGet', 'studyId', studyId);
            const localVarPath = `/v1/studies/{study_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamSlugStudiesStudyIdGet: (teamSlug, studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getStudyV1TeamsTeamSlugStudiesStudyIdGet', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('getStudyV1TeamsTeamSlugStudiesStudyIdGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet: (studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1StudiesStudyIdAssociationsGet', 'studyId', studyId);
            const localVarPath = `/v1/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet: (teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/studies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1StudiesStudyIdAuthorsGet: (studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAuthorsV1StudiesStudyIdAuthorsGet', 'studyId', studyId);
            const localVarPath = `/v1/studies/{study_id}/authors`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGet: (teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGet', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/authors`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet: (studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listModelsInStudyV1StudiesStudyIdModelsGet', 'studyId', studyId);
            const localVarPath = `/v1/studies/{study_id}/models`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet: (teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/models`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1StudiesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/studies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamSlugStudiesGet: (teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listStudiesV1TeamsTeamSlugStudiesGet', 'teamSlug', teamSlug);
            const localVarPath = `/v1/teams/{team_slug}/studies`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserStudiesV1UsersUserIdStudiesGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/studies`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1StudiesStudyIdPatch: (studyId, patchStudyOpArrayPatchStudyOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('patchStudyEndpointV1StudiesStudyIdPatch', 'studyId', studyId);
            // verify required parameter 'patchStudyOpArrayPatchStudyOp' is not null or undefined
            common_1.assertParamExists('patchStudyEndpointV1StudiesStudyIdPatch', 'patchStudyOpArrayPatchStudyOp', patchStudyOpArrayPatchStudyOp);
            const localVarPath = `/v1/studies/{study_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchStudyOpArrayPatchStudyOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch: (teamSlug, studyId, patchStudyOpArrayPatchStudyOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch', 'studyId', studyId);
            // verify required parameter 'patchStudyOpArrayPatchStudyOp' is not null or undefined
            common_1.assertParamExists('patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch', 'patchStudyOpArrayPatchStudyOp', patchStudyOpArrayPatchStudyOp);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchStudyOpArrayPatchStudyOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1StudiesStudyIdPublishPost: (studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('publishStudyV1StudiesStudyIdPublishPost', 'studyId', studyId);
            const localVarPath = `/v1/studies/{study_id}/publish`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamSlugStudiesStudyIdPublishPost: (teamSlug, studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('publishStudyV1TeamsTeamSlugStudiesStudyIdPublishPost', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('publishStudyV1TeamsTeamSlugStudiesStudyIdPublishPost', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/publish`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete: (studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete', 'authorId', authorId);
            const localVarPath = `/v1/studies/{study_id}/authors/{author_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete: (teamSlug, studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete: (studyId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete', 'studyId', studyId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete: (teamSlug, studyId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete', 'studyId', studyId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut: (studyId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut', 'studyId', studyId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut: (teamSlug, studyId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut', 'studyId', studyId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * StudiesApi - functional programming interface
 * @export
 */
exports.StudiesApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.StudiesApiAxiosParamCreator(configuration);
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut(teamSlug, studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut(teamSlug, studyId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {StudyIn} studyIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1StudiesPost(studyIn, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAStudyV1StudiesPost(studyIn, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamSlug
         * @param {StudyIn} studyIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamSlugStudiesPost(teamSlug, studyIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAStudyV1TeamsTeamSlugStudiesPost(teamSlug, studyIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost(teamSlug, studyId, modelIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost(teamSlug, studyId, modelIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1StudiesStudyIdDelete(studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteStudyV1StudiesStudyIdDelete(studyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamSlugStudiesStudyIdDelete(teamSlug, studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteStudyV1TeamsTeamSlugStudiesStudyIdDelete(teamSlug, studyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1StudiesStudyIdGet(studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStudyV1StudiesStudyIdGet(studyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamSlugStudiesStudyIdGet(teamSlug, studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStudyV1TeamsTeamSlugStudiesStudyIdGet(teamSlug, studyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1StudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1StudiesStudyIdAuthorsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthorsV1StudiesStudyIdAuthorsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsInStudyV1StudiesStudyIdModelsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1StudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listStudiesV1StudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamSlugStudiesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listStudiesV1TeamsTeamSlugStudiesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchStudyEndpointV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch(teamSlug, studyId, patchStudyOpArrayPatchStudyOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch(teamSlug, studyId, patchStudyOpArrayPatchStudyOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1StudiesStudyIdPublishPost(studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.publishStudyV1StudiesStudyIdPublishPost(studyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamSlugStudiesStudyIdPublishPost(teamSlug, studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.publishStudyV1TeamsTeamSlugStudiesStudyIdPublishPost(teamSlug, studyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete(teamSlug, studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete(teamSlug, studyId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete(teamSlug, studyId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete(teamSlug, studyId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut(teamSlug, studyId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut(teamSlug, studyId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * StudiesApi - factory interface
 * @export
 */
exports.StudiesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.StudiesApiFp(configuration);
    return {
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options) {
            return localVarFp.addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut(teamSlug, studyId, authorId, options) {
            return localVarFp.addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut(teamSlug, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {StudyIn} studyIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1StudiesPost(studyIn, teamSlug, options) {
            return localVarFp.createAStudyV1StudiesPost(studyIn, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamSlug
         * @param {StudyIn} studyIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamSlugStudiesPost(teamSlug, studyIn, options) {
            return localVarFp.createAStudyV1TeamsTeamSlugStudiesPost(teamSlug, studyIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamSlug, options) {
            return localVarFp.createModelsV1StudiesStudyIdModelsPost(studyId, modelIn, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost(teamSlug, studyId, modelIn, options) {
            return localVarFp.createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost(teamSlug, studyId, modelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1StudiesStudyIdDelete(studyId, options) {
            return localVarFp.deleteStudyV1StudiesStudyIdDelete(studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamSlugStudiesStudyIdDelete(teamSlug, studyId, options) {
            return localVarFp.deleteStudyV1TeamsTeamSlugStudiesStudyIdDelete(teamSlug, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1StudiesStudyIdGet(studyId, options) {
            return localVarFp.getStudyV1StudiesStudyIdGet(studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamSlugStudiesStudyIdGet(teamSlug, studyId, options) {
            return localVarFp.getStudyV1TeamsTeamSlugStudiesStudyIdGet(teamSlug, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1StudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1StudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1StudiesStudyIdAuthorsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listAuthorsV1StudiesStudyIdAuthorsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1StudiesStudyIdModelsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsInStudyV1StudiesStudyIdModelsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1StudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamSlug, options) {
            return localVarFp.listStudiesV1StudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamSlugStudiesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return localVarFp.listStudiesV1TeamsTeamSlugStudiesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, options) {
            return localVarFp.patchStudyEndpointV1StudiesStudyIdPatch(studyId, patchStudyOpArrayPatchStudyOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch(teamSlug, studyId, patchStudyOpArrayPatchStudyOp, options) {
            return localVarFp.patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch(teamSlug, studyId, patchStudyOpArrayPatchStudyOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1StudiesStudyIdPublishPost(studyId, options) {
            return localVarFp.publishStudyV1StudiesStudyIdPublishPost(studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamSlugStudiesStudyIdPublishPost(teamSlug, studyId, options) {
            return localVarFp.publishStudyV1TeamsTeamSlugStudiesStudyIdPublishPost(teamSlug, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options) {
            return localVarFp.removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete(teamSlug, studyId, authorId, options) {
            return localVarFp.removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete(teamSlug, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId, tagObjectId, options) {
            return localVarFp.removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete(teamSlug, studyId, tagObjectId, options) {
            return localVarFp.removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete(teamSlug, studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId, tagObjectId, options) {
            return localVarFp.tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut(teamSlug, studyId, tagObjectId, options) {
            return localVarFp.tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut(teamSlug, studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * StudiesApi - object-oriented interface
 * @export
 * @class StudiesApi
 * @extends {BaseAPI}
 */
class StudiesApi extends base_1.BaseAPI {
    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {StudiesApiAddAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).addAuthorToStudyV1StudiesStudyIdAuthorsAuthorIdPut(requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {StudiesApiAddAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut(requestParameters.teamSlug, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Study.
     * @summary Create A Study.
     * @param {StudiesApiCreateAStudyV1StudiesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    createAStudyV1StudiesPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).createAStudyV1StudiesPost(requestParameters.studyIn, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Study.
     * @summary Create A Study.
     * @param {StudiesApiCreateAStudyV1TeamsTeamSlugStudiesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    createAStudyV1TeamsTeamSlugStudiesPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).createAStudyV1TeamsTeamSlugStudiesPost(requestParameters.teamSlug, requestParameters.studyIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {StudiesApiCreateModelsV1StudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    createModelsV1StudiesStudyIdModelsPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).createModelsV1StudiesStudyIdModelsPost(requestParameters.studyId, requestParameters.modelIn, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {StudiesApiCreateModelsV1TeamsTeamSlugStudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost(requestParameters.teamSlug, requestParameters.studyId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Study
     * @param {StudiesApiDeleteStudyV1StudiesStudyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    deleteStudyV1StudiesStudyIdDelete(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).deleteStudyV1StudiesStudyIdDelete(requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Study
     * @param {StudiesApiDeleteStudyV1TeamsTeamSlugStudiesStudyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    deleteStudyV1TeamsTeamSlugStudiesStudyIdDelete(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).deleteStudyV1TeamsTeamSlugStudiesStudyIdDelete(requestParameters.teamSlug, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Study.
     * @summary Get Study
     * @param {StudiesApiGetStudyV1StudiesStudyIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    getStudyV1StudiesStudyIdGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).getStudyV1StudiesStudyIdGet(requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Study.
     * @summary Get Study
     * @param {StudiesApiGetStudyV1TeamsTeamSlugStudiesStudyIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    getStudyV1TeamsTeamSlugStudiesStudyIdGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).getStudyV1TeamsTeamSlugStudiesStudyIdGet(requestParameters.teamSlug, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {StudiesApiListAssociationsV1StudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listAssociationsV1StudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {StudiesApiListAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet(requestParameters.teamSlug, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {StudiesApiListAuthenticatedUserStudiesV1UserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters = {}, options) {
        return exports.StudiesApiFp(this.configuration).listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a study\'s authors.
     * @summary List Authors
     * @param {StudiesApiListAuthorsV1StudiesStudyIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listAuthorsV1StudiesStudyIdAuthorsGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listAuthorsV1StudiesStudyIdAuthorsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a study\'s authors.
     * @summary List Authors
     * @param {StudiesApiListAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGet(requestParameters.teamSlug, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {StudiesApiListModelsInStudyV1StudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listModelsInStudyV1StudiesStudyIdModelsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {StudiesApiListModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet(requestParameters.teamSlug, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Studies.
     * @summary List Studies
     * @param {StudiesApiListStudiesV1StudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listStudiesV1StudiesGet(requestParameters = {}, options) {
        return exports.StudiesApiFp(this.configuration).listStudiesV1StudiesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Studies.
     * @summary List Studies
     * @param {StudiesApiListStudiesV1TeamsTeamSlugStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listStudiesV1TeamsTeamSlugStudiesGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listStudiesV1TeamsTeamSlugStudiesGet(requestParameters.teamSlug, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {StudiesApiListUserStudiesV1UsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    listUserStudiesV1UsersUserIdStudiesGet(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).listUserStudiesV1UsersUserIdStudiesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Study resource with partial update.
     * @summary Patch Study Endpoint
     * @param {StudiesApiPatchStudyEndpointV1StudiesStudyIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    patchStudyEndpointV1StudiesStudyIdPatch(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).patchStudyEndpointV1StudiesStudyIdPatch(requestParameters.studyId, requestParameters.patchStudyOpArrayPatchStudyOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Study resource with partial update.
     * @summary Patch Study Endpoint
     * @param {StudiesApiPatchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch(requestParameters.teamSlug, requestParameters.studyId, requestParameters.patchStudyOpArrayPatchStudyOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Publish the study making it visible to other users.
     * @summary Publish Study
     * @param {StudiesApiPublishStudyV1StudiesStudyIdPublishPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    publishStudyV1StudiesStudyIdPublishPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).publishStudyV1StudiesStudyIdPublishPost(requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Publish the study making it visible to other users.
     * @summary Publish Study
     * @param {StudiesApiPublishStudyV1TeamsTeamSlugStudiesStudyIdPublishPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    publishStudyV1TeamsTeamSlugStudiesStudyIdPublishPost(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).publishStudyV1TeamsTeamSlugStudiesStudyIdPublishPost(requestParameters.teamSlug, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {StudiesApiRemoveAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).removeAuthorFromStudyV1StudiesStudyIdAuthorsAuthorIdDelete(requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {StudiesApiRemoveAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete(requestParameters.teamSlug, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the study with object with provided id.
     * @summary Remove Object Tag From Study
     * @param {StudiesApiRemoveObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).removeObjectTagFromStudyV1StudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the study with object with provided id.
     * @summary Remove Object Tag From Study
     * @param {StudiesApiRemoveObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters.teamSlug, requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the study with object with provided id.
     * @summary Tag Study With Object
     * @param {StudiesApiTagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).tagStudyWithObjectV1StudiesStudyIdObjectTagsTagObjectIdPut(requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the study with object with provided id.
     * @summary Tag Study With Object
     * @param {StudiesApiTagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudiesApi
     */
    tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut(requestParameters, options) {
        return exports.StudiesApiFp(this.configuration).tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut(requestParameters.teamSlug, requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.StudiesApi = StudiesApi;
/**
 * SystemApi - axios parameter creator
 * @export
 */
exports.SystemApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet: (conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'conceptId' is not null or undefined
            common_1.assertParamExists('listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet', 'conceptId', conceptId);
            const localVarPath = `/v1/concepts/{concept_id}/system/concepts`
                .replace(`{${"concept_id"}}`, encodeURIComponent(String(conceptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet: (featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet', 'featureId', featureId);
            const localVarPath = `/v1/features/{feature_id}/system/features`
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet: (teamSlug, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet', 'teamSlug', teamSlug);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_slug}/features/{feature_id}/system/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet: (teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet', 'teamSlug', teamSlug);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}/system/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet: (variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet', 'variableId', variableId);
            const localVarPath = `/v1/variables/{variable_id}/system/features`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet: (teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet', 'teamSlug', teamSlug);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}/system/variables`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet: (variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet', 'variableId', variableId);
            const localVarPath = `/v1/variables/{variable_id}/system/variables`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SystemApi - functional programming interface
 * @export
 */
exports.SystemApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.SystemApiAxiosParamCreator(configuration);
    return {
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet(teamSlug, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet(teamSlug, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * SystemApi - factory interface
 * @export
 */
exports.SystemApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.SystemApiFp(configuration);
    return {
        /**
         * Get the concepts in the requested concept\'s system.
         * @summary List System Of Concepts
         * @param {string} conceptId
         * @param {ConceptToConceptSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return localVarFp.listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(conceptId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return localVarFp.listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet(teamSlug, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return localVarFp.listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet(teamSlug, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return localVarFp.listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return localVarFp.listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return localVarFp.listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return localVarFp.listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
class SystemApi extends base_1.BaseAPI {
    /**
     * Get the concepts in the requested concept\'s system.
     * @summary List System Of Concepts
     * @param {SystemApiListSystemOfConceptsV1ConceptsConceptIdSystemConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(requestParameters, options) {
        return exports.SystemApiFp(this.configuration).listSystemOfConceptsV1ConceptsConceptIdSystemConceptsGet(requestParameters.conceptId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested feature\'s system.
     * @summary List System Of Features
     * @param {SystemApiListSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(requestParameters, options) {
        return exports.SystemApiFp(this.configuration).listSystemOfFeaturesV1FeaturesFeatureIdSystemFeaturesGet(requestParameters.featureId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested feature\'s system.
     * @summary List System Of Features
     * @param {SystemApiListSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet(requestParameters, options) {
        return exports.SystemApiFp(this.configuration).listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet(requestParameters.teamSlug, requestParameters.featureId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested variable\'s system.
     * @summary List System Of Features
     * @param {SystemApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(requestParameters, options) {
        return exports.SystemApiFp(this.configuration).listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(requestParameters.teamSlug, requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested variable\'s system.
     * @summary List System Of Features
     * @param {SystemApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(requestParameters, options) {
        return exports.SystemApiFp(this.configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the variables in the requested variable\'s system.
     * @summary List System Of Variables
     * @param {SystemApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(requestParameters, options) {
        return exports.SystemApiFp(this.configuration).listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(requestParameters.teamSlug, requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the variables in the requested variable\'s system.
     * @summary List System Of Variables
     * @param {SystemApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(requestParameters, options) {
        return exports.SystemApiFp(this.configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SystemApi = SystemApi;
/**
 * TeamsApi - axios parameter creator
 * @export
 */
exports.TeamsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add a user to a team by email.
         * @summary Add A User To A Team.
         * @param {string} teamSlug
         * @param {TeamUserIn} teamUserIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAUserToATeamV1TeamsTeamSlugUsersPost: (teamSlug, teamUserIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('addAUserToATeamV1TeamsTeamSlugUsersPost', 'teamSlug', teamSlug);
            // verify required parameter 'teamUserIn' is not null or undefined
            common_1.assertParamExists('addAUserToATeamV1TeamsTeamSlugUsersPost', 'teamUserIn', teamUserIn);
            const localVarPath = `/v1/teams/{team_slug}/users`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(teamUserIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut: (teamSlug, studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut: (teamSlug, datasetId, featureId, index, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut: (teamSlug, datasetId, parentId, reconcileFeatures, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut', 'datasetId', datasetId);
            // verify required parameter 'parentId' is not null or undefined
            common_1.assertParamExists('addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut', 'parentId', parentId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (reconcileFeatures !== undefined) {
                localVarQueryParameter['reconcile_features'] = reconcileFeatures;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut: (teamSlug, datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamSlug
         * @param {StudyIn} studyIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamSlugStudiesPost: (teamSlug, studyIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createAStudyV1TeamsTeamSlugStudiesPost', 'teamSlug', teamSlug);
            // verify required parameter 'studyIn' is not null or undefined
            common_1.assertParamExists('createAStudyV1TeamsTeamSlugStudiesPost', 'studyIn', studyIn);
            const localVarPath = `/v1/teams/{team_slug}/studies`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(studyIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamSlug
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamSlugVariablesPost: (teamSlug, variableIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createAVariableV1TeamsTeamSlugVariablesPost', 'teamSlug', teamSlug);
            // verify required parameter 'variableIn' is not null or undefined
            common_1.assertParamExists('createAVariableV1TeamsTeamSlugVariablesPost', 'variableIn', variableIn);
            const localVarPath = `/v1/teams/{team_slug}/variables`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(variableIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost: (teamSlug, datasetId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost', 'datasetId', datasetId);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost', 'featureIn', featureIn);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost: (teamSlug, datasetId, associationInArrayAssociationIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost', 'datasetId', datasetId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost: (teamSlug, modelId, associationInArrayAssociationIn, mergeFeatures, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost', 'modelId', modelId);
            // verify required parameter 'associationInArrayAssociationIn' is not null or undefined
            common_1.assertParamExists('createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost', 'associationInArrayAssociationIn', associationInArrayAssociationIn);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (mergeFeatures !== undefined) {
                localVarQueryParameter['merge_features'] = mergeFeatures;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(associationInArrayAssociationIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamSlug
         * @param {AuthorIn} authorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamSlugAuthorsPost: (teamSlug, authorIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createAuthorV1TeamsTeamSlugAuthorsPost', 'teamSlug', teamSlug);
            // verify required parameter 'authorIn' is not null or undefined
            common_1.assertParamExists('createAuthorV1TeamsTeamSlugAuthorsPost', 'authorIn', authorIn);
            const localVarPath = `/v1/teams/{team_slug}/authors`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(authorIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamSlug
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamSlugDatasetsPost: (teamSlug, datasetIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createDatasetV1TeamsTeamSlugDatasetsPost', 'teamSlug', teamSlug);
            // verify required parameter 'datasetIn' is not null or undefined
            common_1.assertParamExists('createDatasetV1TeamsTeamSlugDatasetsPost', 'datasetIn', datasetIn);
            const localVarPath = `/v1/teams/{team_slug}/datasets`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(datasetIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamSlug
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamSlugFeaturesPost: (teamSlug, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createFeatureV1TeamsTeamSlugFeaturesPost', 'teamSlug', teamSlug);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('createFeatureV1TeamsTeamSlugFeaturesPost', 'featureIn', featureIn);
            const localVarPath = `/v1/teams/{team_slug}/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost: (teamSlug, studyId, modelIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost', 'studyId', studyId);
            // verify required parameter 'modelIn' is not null or undefined
            common_1.assertParamExists('createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost', 'modelIn', modelIn);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/models`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamSlug
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost: (teamSlug, arrayVariableInVariableIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost', 'teamSlug', teamSlug);
            // verify required parameter 'arrayVariableInVariableIn' is not null or undefined
            common_1.assertParamExists('createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost', 'arrayVariableInVariableIn', arrayVariableInVariableIn);
            const localVarPath = `/v1/teams/{team_slug}/variables/bulk`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(arrayVariableInVariableIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete: (teamSlug, modelId, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete', 'modelId', modelId);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete', 'associationId', associationId);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete: (teamSlug, modelId, bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete', 'modelId', modelId);
            // verify required parameter 'bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete', 'bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete', bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamSlug
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDelete: (teamSlug, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('deleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDelete', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_slug}/authors/{author_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDelete: (teamSlug, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('deleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDelete', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDelete: (teamSlug, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('deleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDelete', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_slug}/features/{feature_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete: (teamSlug, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete', 'datasetId', datasetId);
            // verify required parameter 'bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete' is not null or undefined
            common_1.assertParamExists('deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete', 'bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete', bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamSlugModelsModelIdDelete: (teamSlug, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteModelV1TeamsTeamSlugModelsModelIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('deleteModelV1TeamsTeamSlugModelsModelIdDelete', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamSlugStudiesStudyIdDelete: (teamSlug, studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteStudyV1TeamsTeamSlugStudiesStudyIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('deleteStudyV1TeamsTeamSlugStudiesStudyIdDelete', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete: (teamSlug, variableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet: (teamSlug, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/population_attribute_values`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet: (teamSlug, associationId, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet', 'teamSlug', teamSlug);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet', 'associationId', associationId);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}/associations/{association_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamSlug
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamSlugAuthorsAuthorIdGet: (teamSlug, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getAuthorV1TeamsTeamSlugAuthorsAuthorIdGet', 'teamSlug', teamSlug);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('getAuthorV1TeamsTeamSlugAuthorsAuthorIdGet', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_slug}/authors/{author_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamSlugDatasetsDatasetIdGet: (teamSlug, datasetId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getDatasetV1TeamsTeamSlugDatasetsDatasetIdGet', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('getDatasetV1TeamsTeamSlugDatasetsDatasetIdGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamSlugFeaturesFeatureIdGet: (teamSlug, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getFeatureV1TeamsTeamSlugFeaturesFeatureIdGet', 'teamSlug', teamSlug);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('getFeatureV1TeamsTeamSlugFeaturesFeatureIdGet', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_slug}/features/{feature_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamSlugModelsModelIdGet: (teamSlug, modelId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getModelV1TeamsTeamSlugModelsModelIdGet', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('getModelV1TeamsTeamSlugModelsModelIdGet', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGet: (teamSlug, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGet', 'teamSlug', teamSlug);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGet', 'associationId', associationId);
            const localVarPath = `/v1/teams/{team_slug}/associations/{association_id}/direction`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGet: (teamSlug, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGet', 'teamSlug', teamSlug);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGet', 'associationId', associationId);
            const localVarPath = `/v1/teams/{team_slug}/associations/{association_id}/reproducibility`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGet: (teamSlug, associationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGet', 'teamSlug', teamSlug);
            // verify required parameter 'associationId' is not null or undefined
            common_1.assertParamExists('getRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGet', 'associationId', associationId);
            const localVarPath = `/v1/teams/{team_slug}/associations/{association_id}/strength`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"association_id"}}`, encodeURIComponent(String(associationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamSlugStudiesStudyIdGet: (teamSlug, studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getStudyV1TeamsTeamSlugStudiesStudyIdGet', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('getStudyV1TeamsTeamSlugStudiesStudyIdGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamSlugVariablesVariableIdGet: (teamSlug, variableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getVariableV1TeamsTeamSlugVariablesVariableIdGet', 'teamSlug', teamSlug);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('getVariableV1TeamsTeamSlugVariablesVariableIdGet', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugAssociationsGet: (teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugAssociationsGet', 'teamSlug', teamSlug);
            const localVarPath = `/v1/teams/{team_slug}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            if (conceptRelationship !== undefined) {
                localVarQueryParameter['concept_relationship'] = conceptRelationship;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet: (teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet: (teamSlug, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet', 'modelId', modelId);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet: (teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet: (teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet', 'teamSlug', teamSlug);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamSlugAuthorsGet: (teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listAuthorsV1TeamsTeamSlugAuthorsGet', 'teamSlug', teamSlug);
            const localVarPath = `/v1/teams/{team_slug}/authors`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGet: (teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGet', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/authors`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet: (teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGet: (teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGet', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/parents`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamSlugDatasetsGet: (teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listDatasetsV1TeamsTeamSlugDatasetsGet', 'teamSlug', teamSlug);
            const localVarPath = `/v1/teams/{team_slug}/datasets`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamSlugFeaturesGet: (teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listFeaturesV1TeamsTeamSlugFeaturesGet', 'teamSlug', teamSlug);
            const localVarPath = `/v1/teams/{team_slug}/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet: (teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/models`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGet: (teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGet', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('listModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGet', 'datasetId', datasetId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/models`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamSlugModelsGet: (teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listModelsV1TeamsTeamSlugModelsGet', 'teamSlug', teamSlug);
            const localVarPath = `/v1/teams/{team_slug}/models`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamSlugStudiesGet: (teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listStudiesV1TeamsTeamSlugStudiesGet', 'teamSlug', teamSlug);
            const localVarPath = `/v1/teams/{team_slug}/studies`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            if (variableRelationship !== undefined) {
                localVarQueryParameter['variable_relationship'] = variableRelationship;
            }
            if (featureRelationship !== undefined) {
                localVarQueryParameter['feature_relationship'] = featureRelationship;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet: (teamSlug, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet', 'teamSlug', teamSlug);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_slug}/features/{feature_id}/system/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet: (teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet', 'teamSlug', teamSlug);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}/system/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet: (teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet', 'teamSlug', teamSlug);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}/system/variables`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamSlugVariablesGet: (teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listVariablesV1TeamsTeamSlugVariablesGet', 'teamSlug', teamSlug);
            const localVarPath = `/v1/teams/{team_slug}/variables`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch: (teamSlug, modelId, bulkPatchAssociationOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch', 'modelId', modelId);
            // verify required parameter 'bulkPatchAssociationOp' is not null or undefined
            common_1.assertParamExists('patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch', 'bulkPatchAssociationOp', bulkPatchAssociationOp);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bulkPatchAssociationOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch: (teamSlug, datasetId, patchDatasetOpArrayPatchDatasetOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch', 'datasetId', datasetId);
            // verify required parameter 'patchDatasetOpArrayPatchDatasetOp' is not null or undefined
            common_1.assertParamExists('patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch', 'patchDatasetOpArrayPatchDatasetOp', patchDatasetOpArrayPatchDatasetOp);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchDatasetOpArrayPatchDatasetOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch: (teamSlug, featureId, patchFeatureOpArrayPatchFeatureOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch', 'teamSlug', teamSlug);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch', 'featureId', featureId);
            // verify required parameter 'patchFeatureOpArrayPatchFeatureOp' is not null or undefined
            common_1.assertParamExists('patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch', 'patchFeatureOpArrayPatchFeatureOp', patchFeatureOpArrayPatchFeatureOp);
            const localVarPath = `/v1/teams/{team_slug}/features/{feature_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchFeatureOpArrayPatchFeatureOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamSlugModelsModelIdPatch: (teamSlug, modelId, patchModelOpArrayPatchModelOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('patchModelV1TeamsTeamSlugModelsModelIdPatch', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('patchModelV1TeamsTeamSlugModelsModelIdPatch', 'modelId', modelId);
            // verify required parameter 'patchModelOpArrayPatchModelOp' is not null or undefined
            common_1.assertParamExists('patchModelV1TeamsTeamSlugModelsModelIdPatch', 'patchModelOpArrayPatchModelOp', patchModelOpArrayPatchModelOp);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchModelOpArrayPatchModelOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamSlug
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamSlugFeaturesPatch: (teamSlug, bulkPatchFeatureOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('patchMultipleFeaturesV1TeamsTeamSlugFeaturesPatch', 'teamSlug', teamSlug);
            // verify required parameter 'bulkPatchFeatureOp' is not null or undefined
            common_1.assertParamExists('patchMultipleFeaturesV1TeamsTeamSlugFeaturesPatch', 'bulkPatchFeatureOp', bulkPatchFeatureOp);
            const localVarPath = `/v1/teams/{team_slug}/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bulkPatchFeatureOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch: (teamSlug, studyId, patchStudyOpArrayPatchStudyOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch', 'studyId', studyId);
            // verify required parameter 'patchStudyOpArrayPatchStudyOp' is not null or undefined
            common_1.assertParamExists('patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch', 'patchStudyOpArrayPatchStudyOp', patchStudyOpArrayPatchStudyOp);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchStudyOpArrayPatchStudyOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamSlugVariablesVariableIdPatch: (teamSlug, variableId, patchVariableOpArrayPatchVariableOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('patchVariableV1TeamsTeamSlugVariablesVariableIdPatch', 'teamSlug', teamSlug);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('patchVariableV1TeamsTeamSlugVariablesVariableIdPatch', 'variableId', variableId);
            // verify required parameter 'patchVariableOpArrayPatchVariableOp' is not null or undefined
            common_1.assertParamExists('patchVariableV1TeamsTeamSlugVariablesVariableIdPatch', 'patchVariableOpArrayPatchVariableOp', patchVariableOpArrayPatchVariableOp);
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchVariableOpArrayPatchVariableOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an Team.
         * @summary Post Team
         * @param {TeamIn} teamIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamV1TeamsPost: (teamIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamIn' is not null or undefined
            common_1.assertParamExists('postTeamV1TeamsPost', 'teamIn', teamIn);
            const localVarPath = `/v1/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(teamIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamSlugStudiesStudyIdPublishPost: (teamSlug, studyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('publishStudyV1TeamsTeamSlugStudiesStudyIdPublishPost', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('publishStudyV1TeamsTeamSlugStudiesStudyIdPublishPost', 'studyId', studyId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/publish`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete: (teamSlug, studyId, authorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete', 'studyId', studyId);
            // verify required parameter 'authorId' is not null or undefined
            common_1.assertParamExists('removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete', 'authorId', authorId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/authors/{author_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete: (teamSlug, datasetId, featureId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete', 'datasetId', datasetId);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete', 'featureId', featureId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/features/{feature_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete: (teamSlug, datasetId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete', 'datasetId', datasetId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete: (teamSlug, studyId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete', 'studyId', studyId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete: (teamSlug, datasetId, parentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete', 'datasetId', datasetId);
            // verify required parameter 'parentId' is not null or undefined
            common_1.assertParamExists('removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete', 'parentId', parentId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/parents/{parent_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete: (teamSlug, datasetId, populationAttributeValueId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'datasetId', datasetId);
            // verify required parameter 'populationAttributeValueId' is not null or undefined
            common_1.assertParamExists('removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete', 'populationAttributeValueId', populationAttributeValueId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/population_attribute_values/{population_attribute_value_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"population_attribute_value_id"}}`, encodeURIComponent(String(populationAttributeValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut: (teamSlug, datasetId, datasetIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut', 'datasetId', datasetId);
            // verify required parameter 'datasetIn' is not null or undefined
            common_1.assertParamExists('replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut', 'datasetIn', datasetIn);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(datasetIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut: (teamSlug, featureId, featureIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'featureId' is not null or undefined
            common_1.assertParamExists('replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut', 'featureId', featureId);
            // verify required parameter 'featureIn' is not null or undefined
            common_1.assertParamExists('replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut', 'featureIn', featureIn);
            const localVarPath = `/v1/teams/{team_slug}/features/{feature_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"feature_id"}}`, encodeURIComponent(String(featureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(featureIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamSlugModelsModelIdPut: (teamSlug, modelId, modelIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('replaceModelV1TeamsTeamSlugModelsModelIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'modelId' is not null or undefined
            common_1.assertParamExists('replaceModelV1TeamsTeamSlugModelsModelIdPut', 'modelId', modelId);
            // verify required parameter 'modelIn' is not null or undefined
            common_1.assertParamExists('replaceModelV1TeamsTeamSlugModelsModelIdPut', 'modelIn', modelIn);
            const localVarPath = `/v1/teams/{team_slug}/models/{model_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(modelIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut: (teamSlug, datasetId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'datasetId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut', 'datasetId', datasetId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/teams/{team_slug}/datasets/{dataset_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut: (teamSlug, studyId, tagObjectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut', 'teamSlug', teamSlug);
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut', 'studyId', studyId);
            // verify required parameter 'tagObjectId' is not null or undefined
            common_1.assertParamExists('tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut', 'tagObjectId', tagObjectId);
            const localVarPath = `/v1/teams/{team_slug}/studies/{study_id}/object_tags/{tag_object_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)))
                .replace(`{${"tag_object_id"}}`, encodeURIComponent(String(tagObjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * TeamsApi - functional programming interface
 * @export
 */
exports.TeamsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.TeamsApiAxiosParamCreator(configuration);
    return {
        /**
         * Add a user to a team by email.
         * @summary Add A User To A Team.
         * @param {string} teamSlug
         * @param {TeamUserIn} teamUserIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAUserToATeamV1TeamsTeamSlugUsersPost(teamSlug, teamUserIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addAUserToATeamV1TeamsTeamSlugUsersPost(teamSlug, teamUserIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut(teamSlug, studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut(teamSlug, studyId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut(teamSlug, datasetId, featureId, index, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut(teamSlug, datasetId, featureId, index, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut(teamSlug, datasetId, parentId, reconcileFeatures, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut(teamSlug, datasetId, parentId, reconcileFeatures, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamSlug, datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamSlug, datasetId, populationAttributeValueId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamSlug
         * @param {StudyIn} studyIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamSlugStudiesPost(teamSlug, studyIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAStudyV1TeamsTeamSlugStudiesPost(teamSlug, studyIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamSlug
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamSlugVariablesPost(teamSlug, variableIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAVariableV1TeamsTeamSlugVariablesPost(teamSlug, variableIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost(teamSlug, datasetId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost(teamSlug, datasetId, featureIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost(teamSlug, datasetId, associationInArrayAssociationIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost(teamSlug, datasetId, associationInArrayAssociationIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost(teamSlug, modelId, associationInArrayAssociationIn, mergeFeatures, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost(teamSlug, modelId, associationInArrayAssociationIn, mergeFeatures, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamSlug
         * @param {AuthorIn} authorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamSlugAuthorsPost(teamSlug, authorIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAuthorV1TeamsTeamSlugAuthorsPost(teamSlug, authorIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamSlug
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamSlugDatasetsPost(teamSlug, datasetIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createDatasetV1TeamsTeamSlugDatasetsPost(teamSlug, datasetIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamSlug
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamSlugFeaturesPost(teamSlug, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createFeatureV1TeamsTeamSlugFeaturesPost(teamSlug, featureIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost(teamSlug, studyId, modelIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost(teamSlug, studyId, modelIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamSlug
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(teamSlug, arrayVariableInVariableIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(teamSlug, arrayVariableInVariableIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete(teamSlug, modelId, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete(teamSlug, modelId, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete(teamSlug, modelId, bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete(teamSlug, modelId, bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamSlug
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDelete(teamSlug, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDelete(teamSlug, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDelete(teamSlug, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDelete(teamSlug, datasetId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDelete(teamSlug, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDelete(teamSlug, featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete(teamSlug, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete(teamSlug, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamSlugModelsModelIdDelete(teamSlug, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteModelV1TeamsTeamSlugModelsModelIdDelete(teamSlug, modelId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamSlugStudiesStudyIdDelete(teamSlug, studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteStudyV1TeamsTeamSlugStudiesStudyIdDelete(teamSlug, studyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(teamSlug, variableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(teamSlug, variableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet(teamSlug, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet(teamSlug, datasetId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet(teamSlug, associationId, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet(teamSlug, associationId, modelId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamSlug
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamSlugAuthorsAuthorIdGet(teamSlug, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAuthorV1TeamsTeamSlugAuthorsAuthorIdGet(teamSlug, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamSlugDatasetsDatasetIdGet(teamSlug, datasetId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDatasetV1TeamsTeamSlugDatasetsDatasetIdGet(teamSlug, datasetId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamSlugFeaturesFeatureIdGet(teamSlug, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFeatureV1TeamsTeamSlugFeaturesFeatureIdGet(teamSlug, featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamSlugModelsModelIdGet(teamSlug, modelId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getModelV1TeamsTeamSlugModelsModelIdGet(teamSlug, modelId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGet(teamSlug, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGet(teamSlug, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGet(teamSlug, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGet(teamSlug, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGet(teamSlug, associationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGet(teamSlug, associationId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamSlugStudiesStudyIdGet(teamSlug, studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStudyV1TeamsTeamSlugStudiesStudyIdGet(teamSlug, studyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamSlugVariablesVariableIdGet(teamSlug, variableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getVariableV1TeamsTeamSlugVariablesVariableIdGet(teamSlug, variableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugAssociationsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamSlugAssociationsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet(teamSlug, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet(teamSlug, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamSlugAuthorsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthorsV1TeamsTeamSlugAuthorsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamSlugDatasetsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDatasetsV1TeamsTeamSlugDatasetsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamSlugFeaturesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFeaturesV1TeamsTeamSlugFeaturesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamSlugModelsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModelsV1TeamsTeamSlugModelsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamSlugStudiesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listStudiesV1TeamsTeamSlugStudiesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet(teamSlug, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet(teamSlug, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamSlugVariablesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listVariablesV1TeamsTeamSlugVariablesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch(teamSlug, modelId, bulkPatchAssociationOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch(teamSlug, modelId, bulkPatchAssociationOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch(teamSlug, datasetId, patchDatasetOpArrayPatchDatasetOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch(teamSlug, datasetId, patchDatasetOpArrayPatchDatasetOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch(teamSlug, featureId, patchFeatureOpArrayPatchFeatureOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch(teamSlug, featureId, patchFeatureOpArrayPatchFeatureOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamSlugModelsModelIdPatch(teamSlug, modelId, patchModelOpArrayPatchModelOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchModelV1TeamsTeamSlugModelsModelIdPatch(teamSlug, modelId, patchModelOpArrayPatchModelOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamSlug
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamSlugFeaturesPatch(teamSlug, bulkPatchFeatureOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchMultipleFeaturesV1TeamsTeamSlugFeaturesPatch(teamSlug, bulkPatchFeatureOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch(teamSlug, studyId, patchStudyOpArrayPatchStudyOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch(teamSlug, studyId, patchStudyOpArrayPatchStudyOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(teamSlug, variableId, patchVariableOpArrayPatchVariableOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(teamSlug, variableId, patchVariableOpArrayPatchVariableOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create an Team.
         * @summary Post Team
         * @param {TeamIn} teamIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamV1TeamsPost(teamIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.postTeamV1TeamsPost(teamIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamSlugStudiesStudyIdPublishPost(teamSlug, studyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.publishStudyV1TeamsTeamSlugStudiesStudyIdPublishPost(teamSlug, studyId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete(teamSlug, studyId, authorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete(teamSlug, studyId, authorId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete(teamSlug, datasetId, featureId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete(teamSlug, datasetId, featureId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamSlug, datasetId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamSlug, datasetId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete(teamSlug, studyId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete(teamSlug, studyId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete(teamSlug, datasetId, parentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete(teamSlug, datasetId, parentId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamSlug, datasetId, populationAttributeValueId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamSlug, datasetId, populationAttributeValueId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut(teamSlug, datasetId, datasetIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut(teamSlug, datasetId, datasetIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut(teamSlug, featureId, featureIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut(teamSlug, featureId, featureIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamSlugModelsModelIdPut(teamSlug, modelId, modelIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.replaceModelV1TeamsTeamSlugModelsModelIdPut(teamSlug, modelId, modelIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut(teamSlug, datasetId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut(teamSlug, datasetId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut(teamSlug, studyId, tagObjectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut(teamSlug, studyId, tagObjectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * TeamsApi - factory interface
 * @export
 */
exports.TeamsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.TeamsApiFp(configuration);
    return {
        /**
         * Add a user to a team by email.
         * @summary Add A User To A Team.
         * @param {string} teamSlug
         * @param {TeamUserIn} teamUserIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAUserToATeamV1TeamsTeamSlugUsersPost(teamSlug, teamUserIn, options) {
            return localVarFp.addAUserToATeamV1TeamsTeamSlugUsersPost(teamSlug, teamUserIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an author to a study.
         * @summary Add Author To Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut(teamSlug, studyId, authorId, options) {
            return localVarFp.addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut(teamSlug, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
         * @summary Add Feature To Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} featureId
         * @param {boolean} [index] If true, then set the feature as the dataset index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut(teamSlug, datasetId, featureId, index, options) {
            return localVarFp.addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut(teamSlug, datasetId, featureId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a parent dataset.
         * @summary Add Parent Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} parentId
         * @param {boolean} [reconcileFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut(teamSlug, datasetId, parentId, reconcileFeatures, options) {
            return localVarFp.addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut(teamSlug, datasetId, parentId, reconcileFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a population attribute value to a dataset.
         * @summary Add Population Attribute Value To Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamSlug, datasetId, populationAttributeValueId, options) {
            return localVarFp.addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(teamSlug, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Study.
         * @summary Create A Study.
         * @param {string} teamSlug
         * @param {StudyIn} studyIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAStudyV1TeamsTeamSlugStudiesPost(teamSlug, studyIn, options) {
            return localVarFp.createAStudyV1TeamsTeamSlugStudiesPost(teamSlug, studyIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamSlug
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamSlugVariablesPost(teamSlug, variableIn, options) {
            return localVarFp.createAVariableV1TeamsTeamSlugVariablesPost(teamSlug, variableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and attach Features to Dataset in bulk.
         * @summary Create And Attach Features
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {Array<FeatureIn>} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost(teamSlug, datasetId, featureIn, options) {
            return localVarFp.createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost(teamSlug, datasetId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost(teamSlug, datasetId, associationInArrayAssociationIn, options) {
            return localVarFp.createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost(teamSlug, datasetId, associationInArrayAssociationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
         * @summary Create Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {AssociationIn | Array<AssociationIn>} associationInArrayAssociationIn
         * @param {boolean} [mergeFeatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost(teamSlug, modelId, associationInArrayAssociationIn, mergeFeatures, options) {
            return localVarFp.createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost(teamSlug, modelId, associationInArrayAssociationIn, mergeFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Author.
         * @summary Create Author
         * @param {string} teamSlug
         * @param {AuthorIn} authorIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorV1TeamsTeamSlugAuthorsPost(teamSlug, authorIn, options) {
            return localVarFp.createAuthorV1TeamsTeamSlugAuthorsPost(teamSlug, authorIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Dataset.
         * @summary Create Dataset
         * @param {string} teamSlug
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDatasetV1TeamsTeamSlugDatasetsPost(teamSlug, datasetIn, options) {
            return localVarFp.createDatasetV1TeamsTeamSlugDatasetsPost(teamSlug, datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Feature.
         * @summary Create Feature
         * @param {string} teamSlug
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureV1TeamsTeamSlugFeaturesPost(teamSlug, featureIn, options) {
            return localVarFp.createFeatureV1TeamsTeamSlugFeaturesPost(teamSlug, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create models and add to study.
         * @summary Create Models
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {Array<ModelIn>} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost(teamSlug, studyId, modelIn, options) {
            return localVarFp.createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost(teamSlug, studyId, modelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamSlug
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(teamSlug, arrayVariableInVariableIn, options) {
            return localVarFp.createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(teamSlug, arrayVariableInVariableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Association.
         * @summary Delete Association
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete(teamSlug, modelId, associationId, options) {
            return localVarFp.deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete(teamSlug, modelId, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {BodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete} bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete(teamSlug, modelId, bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, options) {
            return localVarFp.deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete(teamSlug, modelId, bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Author.
         * @summary Delete Author
         * @param {string} teamSlug
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDelete(teamSlug, authorId, options) {
            return localVarFp.deleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDelete(teamSlug, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDelete(teamSlug, datasetId, options) {
            return localVarFp.deleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDelete(teamSlug, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a feature.
         * @summary Delete Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDelete(teamSlug, featureId, options) {
            return localVarFp.deleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDelete(teamSlug, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Associations in a Model.
         * @summary Delete Interaction Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {BodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete} bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete(teamSlug, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, options) {
            return localVarFp.deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete(teamSlug, datasetId, bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
         * @summary Delete Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelV1TeamsTeamSlugModelsModelIdDelete(teamSlug, modelId, options) {
            return localVarFp.deleteModelV1TeamsTeamSlugModelsModelIdDelete(teamSlug, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
         * @summary Delete Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudyV1TeamsTeamSlugStudiesStudyIdDelete(teamSlug, studyId, options) {
            return localVarFp.deleteStudyV1TeamsTeamSlugStudiesStudyIdDelete(teamSlug, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(teamSlug, variableId, options) {
            return localVarFp.deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(teamSlug, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all population attribute values of the dataset.
         * @summary Fetch Dataset Population Attribute Values
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet(teamSlug, datasetId, options) {
            return localVarFp.fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet(teamSlug, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Association.
         * @summary Get Association
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet(teamSlug, associationId, modelId, options) {
            return localVarFp.getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet(teamSlug, associationId, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Author.
         * @summary Get Author
         * @param {string} teamSlug
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorV1TeamsTeamSlugAuthorsAuthorIdGet(teamSlug, authorId, options) {
            return localVarFp.getAuthorV1TeamsTeamSlugAuthorsAuthorIdGet(teamSlug, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Dataset.
         * @summary Get Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetV1TeamsTeamSlugDatasetsDatasetIdGet(teamSlug, datasetId, options) {
            return localVarFp.getDatasetV1TeamsTeamSlugDatasetsDatasetIdGet(teamSlug, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feature.
         * @summary Get Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureV1TeamsTeamSlugFeaturesFeatureIdGet(teamSlug, featureId, options) {
            return localVarFp.getFeatureV1TeamsTeamSlugFeaturesFeatureIdGet(teamSlug, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Model.
         * @summary Get Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelV1TeamsTeamSlugModelsModelIdGet(teamSlug, modelId, options) {
            return localVarFp.getModelV1TeamsTeamSlugModelsModelIdGet(teamSlug, modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get direction of this association.
         * @summary Get Relationship Direction
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGet(teamSlug, associationId, options) {
            return localVarFp.getRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGet(teamSlug, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get reproducibility of this association.
         * @summary Get Relationship Reproducibility
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGet(teamSlug, associationId, options) {
            return localVarFp.getRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGet(teamSlug, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get strength of this association.
         * @summary Get Relationship Strength
         * @param {string} teamSlug
         * @param {string} associationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGet(teamSlug, associationId, options) {
            return localVarFp.getRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGet(teamSlug, associationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Study.
         * @summary Get Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudyV1TeamsTeamSlugStudiesStudyIdGet(teamSlug, studyId, options) {
            return localVarFp.getStudyV1TeamsTeamSlugStudiesStudyIdGet(teamSlug, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamSlugVariablesVariableIdGet(teamSlug, variableId, options) {
            return localVarFp.getVariableV1TeamsTeamSlugVariablesVariableIdGet(teamSlug, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Associations.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {string} [conceptRelationship] Format: \&#39;&lt;concept_id_1&gt;;&lt;concept_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugAssociationsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options) {
            return localVarFp.listAssociationsV1TeamsTeamSlugAssociationsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, variableRelationship, featureRelationship, conceptRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations derived from the Dataset.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in model.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet(teamSlug, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet(teamSlug, modelId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations in a project.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
         * @summary List Authors
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamSlugAuthorsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listAuthorsV1TeamsTeamSlugAuthorsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a study\'s authors.
         * @summary List Authors
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AuthorSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options) {
            return localVarFp.listAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List a datasets features.
         * @summary List Dataset Features
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get parents of this dataset.
         * @summary List Dataset Parents
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Datasets.
         * @summary List Datasets
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatasetsV1TeamsTeamSlugDatasetsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return localVarFp.listDatasetsV1TeamsTeamSlugDatasetsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * List Features.
         * @summary List Features
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturesV1TeamsTeamSlugFeaturesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listFeaturesV1TeamsTeamSlugFeaturesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models in a project.
         * @summary List Models In Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet(teamSlug, studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get models that use the dataset either directly or through child datasets.
         * @summary List Models Using Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGet(teamSlug, datasetId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Models.
         * @summary List Models
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsV1TeamsTeamSlugModelsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listModelsV1TeamsTeamSlugModelsGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Studies.
         * @summary List Studies
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {string} [variableRelationship] Format: \&#39;&lt;var_id_1&gt;;&lt;var_id_2&gt;\&#39;
         * @param {string} [featureRelationship] Format: \&#39;&lt;feat_id_1&gt;;&lt;feat_id_2&gt;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudiesV1TeamsTeamSlugStudiesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options) {
            return localVarFp.listStudiesV1TeamsTeamSlugStudiesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, variableRelationship, featureRelationship, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested feature\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {FeatureToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet(teamSlug, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return localVarFp.listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet(teamSlug, featureId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return localVarFp.listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return localVarFp.listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamSlugVariablesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return localVarFp.listVariablesV1TeamsTeamSlugVariablesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk association patching.
         * @summary Patch Associations
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {Array<BulkPatchAssociationOp>} bulkPatchAssociationOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch(teamSlug, modelId, bulkPatchAssociationOp, options) {
            return localVarFp.patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch(teamSlug, modelId, bulkPatchAssociationOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Dataset resource with partial update.
         * @summary Patch Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {PatchDatasetOp | Array<PatchDatasetOp>} patchDatasetOpArrayPatchDatasetOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch(teamSlug, datasetId, patchDatasetOpArrayPatchDatasetOp, options) {
            return localVarFp.patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch(teamSlug, datasetId, patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
         * @summary Patch Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {PatchFeatureOp | Array<PatchFeatureOp>} patchFeatureOpArrayPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch(teamSlug, featureId, patchFeatureOpArrayPatchFeatureOp, options) {
            return localVarFp.patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch(teamSlug, featureId, patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Model resource with partial update.
         * @summary Patch Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {PatchModelOp | Array<PatchModelOp>} patchModelOpArrayPatchModelOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchModelV1TeamsTeamSlugModelsModelIdPatch(teamSlug, modelId, patchModelOpArrayPatchModelOp, options) {
            return localVarFp.patchModelV1TeamsTeamSlugModelsModelIdPatch(teamSlug, modelId, patchModelOpArrayPatchModelOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Batch feature patching.
         * @summary Patch Multiple Features
         * @param {string} teamSlug
         * @param {Array<BulkPatchFeatureOp>} bulkPatchFeatureOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMultipleFeaturesV1TeamsTeamSlugFeaturesPatch(teamSlug, bulkPatchFeatureOp, options) {
            return localVarFp.patchMultipleFeaturesV1TeamsTeamSlugFeaturesPatch(teamSlug, bulkPatchFeatureOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Study resource with partial update.
         * @summary Patch Study Endpoint
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {PatchStudyOp | Array<PatchStudyOp>} patchStudyOpArrayPatchStudyOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch(teamSlug, studyId, patchStudyOpArrayPatchStudyOp, options) {
            return localVarFp.patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch(teamSlug, studyId, patchStudyOpArrayPatchStudyOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(teamSlug, variableId, patchVariableOpArrayPatchVariableOp, options) {
            return localVarFp.patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(teamSlug, variableId, patchVariableOpArrayPatchVariableOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Team.
         * @summary Post Team
         * @param {TeamIn} teamIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamV1TeamsPost(teamIn, options) {
            return localVarFp.postTeamV1TeamsPost(teamIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish the study making it visible to other users.
         * @summary Publish Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishStudyV1TeamsTeamSlugStudiesStudyIdPublishPost(teamSlug, studyId, options) {
            return localVarFp.publishStudyV1TeamsTeamSlugStudiesStudyIdPublishPost(teamSlug, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an author from a study.
         * @summary Remove Author From Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} authorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete(teamSlug, studyId, authorId, options) {
            return localVarFp.removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete(teamSlug, studyId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
         * @summary Remove Feature From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} featureId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete(teamSlug, datasetId, featureId, options) {
            return localVarFp.removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete(teamSlug, datasetId, featureId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Remove Object Tag From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamSlug, datasetId, tagObjectId, options) {
            return localVarFp.removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete(teamSlug, datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Remove Object Tag From Study
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete(teamSlug, studyId, tagObjectId, options) {
            return localVarFp.removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete(teamSlug, studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a parent dataset.
         * @summary Remove Parent Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} parentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete(teamSlug, datasetId, parentId, options) {
            return localVarFp.removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete(teamSlug, datasetId, parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a population attribute value from a dataset.
         * @summary Remove Population Attribute Value From Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} populationAttributeValueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamSlug, datasetId, populationAttributeValueId, options) {
            return localVarFp.removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(teamSlug, datasetId, populationAttributeValueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Dataset.
         * @summary Replace Dataset
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {DatasetIn} datasetIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut(teamSlug, datasetId, datasetIn, options) {
            return localVarFp.replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut(teamSlug, datasetId, datasetIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Feature.
         * @summary Replace Feature
         * @param {string} teamSlug
         * @param {string} featureId
         * @param {FeatureIn} featureIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut(teamSlug, featureId, featureIn, options) {
            return localVarFp.replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut(teamSlug, featureId, featureIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace a Model.
         * @summary Replace Model
         * @param {string} teamSlug
         * @param {string} modelId
         * @param {ModelIn} modelIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceModelV1TeamsTeamSlugModelsModelIdPut(teamSlug, modelId, modelIn, options) {
            return localVarFp.replaceModelV1TeamsTeamSlugModelsModelIdPut(teamSlug, modelId, modelIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the dataset with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamSlug
         * @param {string} datasetId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut(teamSlug, datasetId, tagObjectId, options) {
            return localVarFp.tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut(teamSlug, datasetId, tagObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag the study with object with provided id.
         * @summary Tag Study With Object
         * @param {string} teamSlug
         * @param {string} studyId
         * @param {string} tagObjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut(teamSlug, studyId, tagObjectId, options) {
            return localVarFp.tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut(teamSlug, studyId, tagObjectId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
class TeamsApi extends base_1.BaseAPI {
    /**
     * Add a user to a team by email.
     * @summary Add A User To A Team.
     * @param {TeamsApiAddAUserToATeamV1TeamsTeamSlugUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    addAUserToATeamV1TeamsTeamSlugUsersPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).addAUserToATeamV1TeamsTeamSlugUsersPost(requestParameters.teamSlug, requestParameters.teamUserIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add an author to a study.
     * @summary Add Author To Study
     * @param {TeamsApiAddAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).addAuthorToStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdPut(requestParameters.teamSlug, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a feature to a dataset.  The feature can be marked as the dataset\'s index feature via the `index` query parameter if True or it can be removed as the index if False. A 400 error is returned if the index feature is already set and the user tries to set a different feature to the index.
     * @summary Add Feature To Dataset
     * @param {TeamsApiAddFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).addFeatureToDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdPut(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.featureId, requestParameters.index, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a parent dataset.
     * @summary Add Parent Dataset
     * @param {TeamsApiAddParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).addParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdPut(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.parentId, requestParameters.reconcileFeatures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a population attribute value to a dataset.
     * @summary Add Population Attribute Value To Dataset
     * @param {TeamsApiAddPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).addPopulationAttributeValueToDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdPut(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Study.
     * @summary Create A Study.
     * @param {TeamsApiCreateAStudyV1TeamsTeamSlugStudiesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAStudyV1TeamsTeamSlugStudiesPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAStudyV1TeamsTeamSlugStudiesPost(requestParameters.teamSlug, requestParameters.studyIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Variable.
     * @summary Create A Variable.
     * @param {TeamsApiCreateAVariableV1TeamsTeamSlugVariablesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAVariableV1TeamsTeamSlugVariablesPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAVariableV1TeamsTeamSlugVariablesPost(requestParameters.teamSlug, requestParameters.variableIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and attach Features to Dataset in bulk.
     * @summary Create And Attach Features
     * @param {TeamsApiCreateAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAndAttachFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesPost(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 1000 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {TeamsApiCreateAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsPost(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.associationInArrayAssociationIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create and add Associations to a Model.  Constraints:      1. A max of 25 can be created in one request.     2. The Feature ids must be unique per Association.     3. The Features must be members of the Model\'s training dataset.
     * @summary Create Associations
     * @param {TeamsApiCreateAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPost(requestParameters.teamSlug, requestParameters.modelId, requestParameters.associationInArrayAssociationIn, requestParameters.mergeFeatures, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Author.
     * @summary Create Author
     * @param {TeamsApiCreateAuthorV1TeamsTeamSlugAuthorsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createAuthorV1TeamsTeamSlugAuthorsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createAuthorV1TeamsTeamSlugAuthorsPost(requestParameters.teamSlug, requestParameters.authorIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Dataset.
     * @summary Create Dataset
     * @param {TeamsApiCreateDatasetV1TeamsTeamSlugDatasetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createDatasetV1TeamsTeamSlugDatasetsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createDatasetV1TeamsTeamSlugDatasetsPost(requestParameters.teamSlug, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Feature.
     * @summary Create Feature
     * @param {TeamsApiCreateFeatureV1TeamsTeamSlugFeaturesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createFeatureV1TeamsTeamSlugFeaturesPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createFeatureV1TeamsTeamSlugFeaturesPost(requestParameters.teamSlug, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create models and add to study.
     * @summary Create Models
     * @param {TeamsApiCreateModelsV1TeamsTeamSlugStudiesStudyIdModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createModelsV1TeamsTeamSlugStudiesStudyIdModelsPost(requestParameters.teamSlug, requestParameters.studyId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create mulitple Variables.
     * @summary Create Multiple Variables.
     * @param {TeamsApiCreateMultipleVariablesV1TeamsTeamSlugVariablesBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(requestParameters.teamSlug, requestParameters.arrayVariableInVariableIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Association.
     * @summary Delete Association
     * @param {TeamsApiDeleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdDelete(requestParameters.teamSlug, requestParameters.modelId, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Associations
     * @param {TeamsApiDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete(requestParameters.teamSlug, requestParameters.modelId, requestParameters.bodyDeleteAssociationsV1TeamsTeamSlugModelsModelIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Author.
     * @summary Delete Author
     * @param {TeamsApiDeleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteAuthorV1TeamsTeamSlugAuthorsAuthorIdDelete(requestParameters.teamSlug, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Dataset.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Dataset
     * @param {TeamsApiDeleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteDatasetV1TeamsTeamSlugDatasetsDatasetIdDelete(requestParameters.teamSlug, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a feature.
     * @summary Delete Feature
     * @param {TeamsApiDeleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteFeatureV1TeamsTeamSlugFeaturesFeatureIdDelete(requestParameters.teamSlug, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Associations in a Model.
     * @summary Delete Interaction Associations
     * @param {TeamsApiDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.bodyDeleteInteractionAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete Model and related resources from SystemDB.  Related resources also removed:  - All model associations.  - Training dataset if not referenced by other objects (e.x. as a parent).  - If deleting the training dataset, its features will also be    removed unless used in other datasets.
     * @summary Delete Model
     * @param {TeamsApiDeleteModelV1TeamsTeamSlugModelsModelIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteModelV1TeamsTeamSlugModelsModelIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteModelV1TeamsTeamSlugModelsModelIdDelete(requestParameters.teamSlug, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Study.  Deletion will fail if this Dataset is attached to any existing experiments or parent datasets.
     * @summary Delete Study
     * @param {TeamsApiDeleteStudyV1TeamsTeamSlugStudiesStudyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteStudyV1TeamsTeamSlugStudiesStudyIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteStudyV1TeamsTeamSlugStudiesStudyIdDelete(requestParameters.teamSlug, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
     * @summary Delete Variable
     * @param {TeamsApiDeleteVariableV1TeamsTeamSlugVariablesVariableIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(requestParameters.teamSlug, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch all population attribute values of the dataset.
     * @summary Fetch Dataset Population Attribute Values
     * @param {TeamsApiFetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).fetchDatasetPopulationAttributeValuesV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesGet(requestParameters.teamSlug, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an Association.
     * @summary Get Association
     * @param {TeamsApiGetAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getAssociationV1TeamsTeamSlugModelsModelIdAssociationsAssociationIdGet(requestParameters.teamSlug, requestParameters.associationId, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Author.
     * @summary Get Author
     * @param {TeamsApiGetAuthorV1TeamsTeamSlugAuthorsAuthorIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getAuthorV1TeamsTeamSlugAuthorsAuthorIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getAuthorV1TeamsTeamSlugAuthorsAuthorIdGet(requestParameters.teamSlug, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a Dataset.
     * @summary Get Dataset
     * @param {TeamsApiGetDatasetV1TeamsTeamSlugDatasetsDatasetIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getDatasetV1TeamsTeamSlugDatasetsDatasetIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getDatasetV1TeamsTeamSlugDatasetsDatasetIdGet(requestParameters.teamSlug, requestParameters.datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get feature.
     * @summary Get Feature
     * @param {TeamsApiGetFeatureV1TeamsTeamSlugFeaturesFeatureIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getFeatureV1TeamsTeamSlugFeaturesFeatureIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getFeatureV1TeamsTeamSlugFeaturesFeatureIdGet(requestParameters.teamSlug, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Model.
     * @summary Get Model
     * @param {TeamsApiGetModelV1TeamsTeamSlugModelsModelIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getModelV1TeamsTeamSlugModelsModelIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getModelV1TeamsTeamSlugModelsModelIdGet(requestParameters.teamSlug, requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get direction of this association.
     * @summary Get Relationship Direction
     * @param {TeamsApiGetRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getRelationshipDirectionV1TeamsTeamSlugAssociationsAssociationIdDirectionGet(requestParameters.teamSlug, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get reproducibility of this association.
     * @summary Get Relationship Reproducibility
     * @param {TeamsApiGetRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getRelationshipReproducibilityV1TeamsTeamSlugAssociationsAssociationIdReproducibilityGet(requestParameters.teamSlug, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get strength of this association.
     * @summary Get Relationship Strength
     * @param {TeamsApiGetRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getRelationshipStrengthV1TeamsTeamSlugAssociationsAssociationIdStrengthGet(requestParameters.teamSlug, requestParameters.associationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Study.
     * @summary Get Study
     * @param {TeamsApiGetStudyV1TeamsTeamSlugStudiesStudyIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getStudyV1TeamsTeamSlugStudiesStudyIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getStudyV1TeamsTeamSlugStudiesStudyIdGet(requestParameters.teamSlug, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Variable.
     * @summary Get Variable
     * @param {TeamsApiGetVariableV1TeamsTeamSlugVariablesVariableIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    getVariableV1TeamsTeamSlugVariablesVariableIdGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).getVariableV1TeamsTeamSlugVariablesVariableIdGet(requestParameters.teamSlug, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Associations.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamSlugAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAssociationsV1TeamsTeamSlugAssociationsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamSlugAssociationsGet(requestParameters.teamSlug, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, requestParameters.variableRelationship, requestParameters.featureRelationship, requestParameters.conceptRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations derived from the Dataset.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamSlugDatasetsDatasetIdAssociationsGet(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in model.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamSlugModelsModelIdAssociationsGet(requestParameters.teamSlug, requestParameters.modelId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations in a project.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamSlugStudiesStudyIdAssociationsGet(requestParameters.teamSlug, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {TeamsApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(requestParameters.teamSlug, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Authors.  Common queries:      - Filter authors who are System users: /v1/authors?query=has(user_id)     - Search for authors who are System users /v1/authors?query=search(<name>),has(user_id)
     * @summary List Authors
     * @param {TeamsApiListAuthorsV1TeamsTeamSlugAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAuthorsV1TeamsTeamSlugAuthorsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAuthorsV1TeamsTeamSlugAuthorsGet(requestParameters.teamSlug, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a study\'s authors.
     * @summary List Authors
     * @param {TeamsApiListAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listAuthorsV1TeamsTeamSlugStudiesStudyIdAuthorsGet(requestParameters.teamSlug, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a datasets features.
     * @summary List Dataset Features
     * @param {TeamsApiListDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listDatasetFeaturesV1TeamsTeamSlugDatasetsDatasetIdFeaturesGet(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get parents of this dataset.
     * @summary List Dataset Parents
     * @param {TeamsApiListDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listDatasetParentsV1TeamsTeamSlugDatasetsDatasetIdParentsGet(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all Datasets.
     * @summary List Datasets
     * @param {TeamsApiListDatasetsV1TeamsTeamSlugDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listDatasetsV1TeamsTeamSlugDatasetsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listDatasetsV1TeamsTeamSlugDatasetsGet(requestParameters.teamSlug, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Features.
     * @summary List Features
     * @param {TeamsApiListFeaturesV1TeamsTeamSlugFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listFeaturesV1TeamsTeamSlugFeaturesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listFeaturesV1TeamsTeamSlugFeaturesGet(requestParameters.teamSlug, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models in a project.
     * @summary List Models In Study
     * @param {TeamsApiListModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listModelsInStudyV1TeamsTeamSlugStudiesStudyIdModelsGet(requestParameters.teamSlug, requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get models that use the dataset either directly or through child datasets.
     * @summary List Models Using Dataset
     * @param {TeamsApiListModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listModelsUsingDatasetV1TeamsTeamSlugDatasetsDatasetIdModelsGet(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Models.
     * @summary List Models
     * @param {TeamsApiListModelsV1TeamsTeamSlugModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listModelsV1TeamsTeamSlugModelsGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listModelsV1TeamsTeamSlugModelsGet(requestParameters.teamSlug, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Studies.
     * @summary List Studies
     * @param {TeamsApiListStudiesV1TeamsTeamSlugStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listStudiesV1TeamsTeamSlugStudiesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listStudiesV1TeamsTeamSlugStudiesGet(requestParameters.teamSlug, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, requestParameters.variableRelationship, requestParameters.featureRelationship, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested feature\'s system.
     * @summary List System Of Features
     * @param {TeamsApiListSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listSystemOfFeaturesV1TeamsTeamSlugFeaturesFeatureIdSystemFeaturesGet(requestParameters.teamSlug, requestParameters.featureId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested variable\'s system.
     * @summary List System Of Features
     * @param {TeamsApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(requestParameters.teamSlug, requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the variables in the requested variable\'s system.
     * @summary List System Of Variables
     * @param {TeamsApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(requestParameters.teamSlug, requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Variables.
     * @summary List Variables
     * @param {TeamsApiListVariablesV1TeamsTeamSlugVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    listVariablesV1TeamsTeamSlugVariablesGet(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).listVariablesV1TeamsTeamSlugVariablesGet(requestParameters.teamSlug, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Bulk association patching.
     * @summary Patch Associations
     * @param {TeamsApiPatchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchAssociationsV1TeamsTeamSlugModelsModelIdAssociationsPatch(requestParameters.teamSlug, requestParameters.modelId, requestParameters.bulkPatchAssociationOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Dataset resource with partial update.
     * @summary Patch Dataset
     * @param {TeamsApiPatchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchDatasetV1TeamsTeamSlugDatasetsDatasetIdPatch(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.patchDatasetOpArrayPatchDatasetOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Feature resource with partial update.  Updating `feature_statistics` will replace all current stats.
     * @summary Patch Feature
     * @param {TeamsApiPatchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchFeatureV1TeamsTeamSlugFeaturesFeatureIdPatch(requestParameters.teamSlug, requestParameters.featureId, requestParameters.patchFeatureOpArrayPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Model resource with partial update.
     * @summary Patch Model
     * @param {TeamsApiPatchModelV1TeamsTeamSlugModelsModelIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchModelV1TeamsTeamSlugModelsModelIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchModelV1TeamsTeamSlugModelsModelIdPatch(requestParameters.teamSlug, requestParameters.modelId, requestParameters.patchModelOpArrayPatchModelOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Batch feature patching.
     * @summary Patch Multiple Features
     * @param {TeamsApiPatchMultipleFeaturesV1TeamsTeamSlugFeaturesPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchMultipleFeaturesV1TeamsTeamSlugFeaturesPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchMultipleFeaturesV1TeamsTeamSlugFeaturesPatch(requestParameters.teamSlug, requestParameters.bulkPatchFeatureOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Study resource with partial update.
     * @summary Patch Study Endpoint
     * @param {TeamsApiPatchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchStudyEndpointV1TeamsTeamSlugStudiesStudyIdPatch(requestParameters.teamSlug, requestParameters.studyId, requestParameters.patchStudyOpArrayPatchStudyOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Variable resource with partial update.
     * @summary Patch Variable
     * @param {TeamsApiPatchVariableV1TeamsTeamSlugVariablesVariableIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(requestParameters.teamSlug, requestParameters.variableId, requestParameters.patchVariableOpArrayPatchVariableOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an Team.
     * @summary Post Team
     * @param {TeamsApiPostTeamV1TeamsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    postTeamV1TeamsPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).postTeamV1TeamsPost(requestParameters.teamIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Publish the study making it visible to other users.
     * @summary Publish Study
     * @param {TeamsApiPublishStudyV1TeamsTeamSlugStudiesStudyIdPublishPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    publishStudyV1TeamsTeamSlugStudiesStudyIdPublishPost(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).publishStudyV1TeamsTeamSlugStudiesStudyIdPublishPost(requestParameters.teamSlug, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an author from a study.
     * @summary Remove Author From Study
     * @param {TeamsApiRemoveAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeAuthorFromStudyV1TeamsTeamSlugStudiesStudyIdAuthorsAuthorIdDelete(requestParameters.teamSlug, requestParameters.studyId, requestParameters.authorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a feature from a dataset.  If the feature is also the index of the dataset, index information will also be deleted.
     * @summary Remove Feature From Dataset
     * @param {TeamsApiRemoveFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeFeatureFromDatasetV1TeamsTeamSlugDatasetsDatasetIdFeaturesFeatureIdDelete(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.featureId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the dataset with object with provided id.
     * @summary Remove Object Tag From Dataset
     * @param {TeamsApiRemoveObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeObjectTagFromDatasetV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdDelete(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the study with object with provided id.
     * @summary Remove Object Tag From Study
     * @param {TeamsApiRemoveObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeObjectTagFromStudyV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdDelete(requestParameters.teamSlug, requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a parent dataset.
     * @summary Remove Parent Dataset
     * @param {TeamsApiRemoveParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removeParentDatasetV1TeamsTeamSlugDatasetsDatasetIdParentsParentIdDelete(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.parentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a population attribute value from a dataset.
     * @summary Remove Population Attribute Value From Dataset
     * @param {TeamsApiRemovePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).removePopulationAttributeValueFromDatasetV1TeamsTeamSlugDatasetsDatasetIdPopulationAttributeValuesPopulationAttributeValueIdDelete(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.populationAttributeValueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Dataset.
     * @summary Replace Dataset
     * @param {TeamsApiReplaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).replaceDatasetV1TeamsTeamSlugDatasetsDatasetIdPut(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.datasetIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Feature.
     * @summary Replace Feature
     * @param {TeamsApiReplaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).replaceFeatureV1TeamsTeamSlugFeaturesFeatureIdPut(requestParameters.teamSlug, requestParameters.featureId, requestParameters.featureIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace a Model.
     * @summary Replace Model
     * @param {TeamsApiReplaceModelV1TeamsTeamSlugModelsModelIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    replaceModelV1TeamsTeamSlugModelsModelIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).replaceModelV1TeamsTeamSlugModelsModelIdPut(requestParameters.teamSlug, requestParameters.modelId, requestParameters.modelIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the dataset with object with provided id.
     * @summary Tag Study With Object
     * @param {TeamsApiTagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).tagStudyWithObjectV1TeamsTeamSlugDatasetsDatasetIdObjectTagsTagObjectIdPut(requestParameters.teamSlug, requestParameters.datasetId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tag the study with object with provided id.
     * @summary Tag Study With Object
     * @param {TeamsApiTagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut(requestParameters, options) {
        return exports.TeamsApiFp(this.configuration).tagStudyWithObjectV1TeamsTeamSlugStudiesStudyIdObjectTagsTagObjectIdPut(requestParameters.teamSlug, requestParameters.studyId, requestParameters.tagObjectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TeamsApi = TeamsApi;
/**
 * TimelineApi - axios parameter creator
 * @export
 */
exports.TimelineApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Fetch resource creation timeline in reverse chronological order.
         * @summary Fetch Global Timeline
         * @param {Set<SystemObjectResources>} [types]
         * @param {string} [cursor] A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalTimelineV1TimelineGet: (types, cursor, limit, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/timeline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (types) {
                localVarQueryParameter['types'] = Array.from(types);
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * TimelineApi - functional programming interface
 * @export
 */
exports.TimelineApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.TimelineApiAxiosParamCreator(configuration);
    return {
        /**
         * Fetch resource creation timeline in reverse chronological order.
         * @summary Fetch Global Timeline
         * @param {Set<SystemObjectResources>} [types]
         * @param {string} [cursor] A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * TimelineApi - factory interface
 * @export
 */
exports.TimelineApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.TimelineApiFp(configuration);
    return {
        /**
         * Fetch resource creation timeline in reverse chronological order.
         * @summary Fetch Global Timeline
         * @param {Set<SystemObjectResources>} [types]
         * @param {string} [cursor] A cursor used for pagination. The client should not attempt to construct a cursor on their own but instead use provided cursor from previous response.
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options) {
            return localVarFp.fetchGlobalTimelineV1TimelineGet(types, cursor, limit, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * TimelineApi - object-oriented interface
 * @export
 * @class TimelineApi
 * @extends {BaseAPI}
 */
class TimelineApi extends base_1.BaseAPI {
    /**
     * Fetch resource creation timeline in reverse chronological order.
     * @summary Fetch Global Timeline
     * @param {TimelineApiFetchGlobalTimelineV1TimelineGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimelineApi
     */
    fetchGlobalTimelineV1TimelineGet(requestParameters = {}, options) {
        return exports.TimelineApiFp(this.configuration).fetchGlobalTimelineV1TimelineGet(requestParameters.types, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TimelineApi = TimelineApi;
/**
 * UsersApi - axios parameter creator
 * @export
 */
exports.UsersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a new user.
         * @summary Create A User.
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserV1UserPost: (userProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userProfileIn' is not null or undefined
            common_1.assertParamExists('createAUserV1UserPost', 'userProfileIn', userProfileIn);
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(userProfileIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User\'S Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1UserTeamsGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet: (includeAvatar, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet: (userId, includeAvatar, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('getUserV1UsersUserIdGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (includeAvatar !== undefined) {
                localVarQueryParameter['include_avatar'] = includeAvatar;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet: (studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studyId' is not null or undefined
            common_1.assertParamExists('listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet', 'studyId', studyId);
            const localVarPath = `/v1/user/studies/{study_id}/associations`
                .replace(`{${"study_id"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/concepts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/studies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/variables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserConceptsV1UsersUserIdConceptsGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/concepts`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inConceptGraph !== undefined) {
                localVarQueryParameter['in_concept_graph'] = inConceptGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserDatasetsV1UsersUserIdDatasetsGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/datasets`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserFeaturesV1UsersUserIdFeaturesGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/features`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inFeatureGraph !== undefined) {
                localVarQueryParameter['in_feature_graph'] = inFeatureGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserModelsV1UsersUserIdModelsGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/models`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (containsVariableId !== undefined) {
                localVarQueryParameter['contains_variable_id'] = containsVariableId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserStudiesV1UsersUserIdStudiesGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/studies`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (variableTag !== undefined) {
                localVarQueryParameter['variable_tag'] = variableTag;
            }
            if (conceptTag !== undefined) {
                localVarQueryParameter['concept_tag'] = conceptTag;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserVariablesV1UsersUserIdVariablesGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/variables`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1UserPut: (userProfileIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userProfileIn' is not null or undefined
            common_1.assertParamExists('updateAuthenticatedUserProfileV1UserPut', 'userProfileIn', userProfileIn);
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(userProfileIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
exports.UsersApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.UsersApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a new user.
         * @summary Create A User.
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserV1UserPost(userProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAUserV1UserPost(userProfileIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User\'S Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1UserTeamsGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAuthenticatedUserSTeamsV1UserTeamsGet(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet(includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAuthenticatedUserV1UserGet(includeAvatar, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet(userId, includeAvatar, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserV1UsersUserIdGet(userId, includeAvatar, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1UserPut(userProfileIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateAuthenticatedUserProfileV1UserPut(userProfileIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
exports.UsersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.UsersApiFp(configuration);
    return {
        /**
         * Create a new user.
         * @summary Create A User.
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAUserV1UserPost(userProfileIn, options) {
            return localVarFp.createAUserV1UserPost(userProfileIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User\'S Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserSTeamsV1UserTeamsGet(options) {
            return localVarFp.getAuthenticatedUserSTeamsV1UserTeamsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the authenticated user\'s profile.
         * @summary Get Authenticated User
         * @param {boolean} [includeAvatar] Include the user\&#39;s avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserV1UserGet(includeAvatar, options) {
            return localVarFp.getAuthenticatedUserV1UserGet(includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single user\'s public profile.
         * @summary Get User
         * @param {string} userId
         * @param {boolean} [includeAvatar]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserV1UsersUserIdGet(userId, includeAvatar, options) {
            return localVarFp.getUserV1UsersUserIdGet(userId, includeAvatar, options).then((request) => request(axios, basePath));
        },
        /**
         * List association in study by authenticated user.
         * @summary List Associations In The Authenticated User\'S Study.
         * @param {string} studyId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(studyId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s concepts.
         * @summary List Authenticated User Concepts
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return localVarFp.listAuthenticatedUserConceptsV1UserConceptsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s datasets.
         * @summary List Authenticated User Datasets
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listAuthenticatedUserDatasetsV1UserDatasetsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s features.
         * @summary List Authenticated User Features
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listAuthenticatedUserFeaturesV1UserFeaturesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s models.
         * @summary List Authenticated User Models
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listAuthenticatedUserModelsV1UserModelsGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s studies.
         * @summary List Authenticated User Studies
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listAuthenticatedUserStudiesV1UserStudiesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return localVarFp.listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s concepts.
         * @summary List User Concepts
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ConceptSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inConceptGraph] Is Concept in the Concept Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options) {
            return localVarFp.listUserConceptsV1UsersUserIdConceptsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inConceptGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s datasets.
         * @summary List User Datasets
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {DatasetSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter datasets with variable tag
         * @param {string} [conceptTag] Filter datasets with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listUserDatasetsV1UsersUserIdDatasetsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s features.
         * @summary List User Features
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {FeatureSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inFeatureGraph] Is Feature in the Feature Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options) {
            return localVarFp.listUserFeaturesV1UsersUserIdFeaturesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inFeatureGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s models.
         * @summary List User Models
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {ModelSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [containsVariableId] Filter models containing a variable via an association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options) {
            return localVarFp.listUserModelsV1UsersUserIdModelsGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, containsVariableId, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s studies.
         * @summary List User Studies
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {StudySortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {string} [variableTag] Filter studies with variable tag
         * @param {string} [conceptTag] Filter studies with concept tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options) {
            return localVarFp.listUserStudiesV1UsersUserIdStudiesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, variableTag, conceptTag, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return localVarFp.listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the authenticated user\'s profile.
         * @summary Update Authenticated User Profile
         * @param {UserProfileIn} userProfileIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthenticatedUserProfileV1UserPut(userProfileIn, options) {
            return localVarFp.updateAuthenticatedUserProfileV1UserPut(userProfileIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
class UsersApi extends base_1.BaseAPI {
    /**
     * Create a new user.
     * @summary Create A User.
     * @param {UsersApiCreateAUserV1UserPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createAUserV1UserPost(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).createAUserV1UserPost(requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User\'S Teams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getAuthenticatedUserSTeamsV1UserTeamsGet(options) {
        return exports.UsersApiFp(this.configuration).getAuthenticatedUserSTeamsV1UserTeamsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch the authenticated user\'s profile.
     * @summary Get Authenticated User
     * @param {UsersApiGetAuthenticatedUserV1UserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getAuthenticatedUserV1UserGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).getAuthenticatedUserV1UserGet(requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a single user\'s public profile.
     * @summary Get User
     * @param {UsersApiGetUserV1UsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserV1UsersUserIdGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).getUserV1UsersUserIdGet(requestParameters.userId, requestParameters.includeAvatar, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List association in study by authenticated user.
     * @summary List Associations In The Authenticated User\'S Study.
     * @param {UsersApiListAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listAssociationsInTheAuthenticatedUserSStudyV1UserStudiesStudyIdAssociationsGet(requestParameters.studyId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s concepts.
     * @summary List Authenticated User Concepts
     * @param {UsersApiListAuthenticatedUserConceptsV1UserConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserConceptsV1UserConceptsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s datasets.
     * @summary List Authenticated User Datasets
     * @param {UsersApiListAuthenticatedUserDatasetsV1UserDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserDatasetsV1UserDatasetsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s features.
     * @summary List Authenticated User Features
     * @param {UsersApiListAuthenticatedUserFeaturesV1UserFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserFeaturesV1UserFeaturesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s models.
     * @summary List Authenticated User Models
     * @param {UsersApiListAuthenticatedUserModelsV1UserModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserModelsV1UserModelsGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserModelsV1UserModelsGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s studies.
     * @summary List Authenticated User Studies
     * @param {UsersApiListAuthenticatedUserStudiesV1UserStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserStudiesV1UserStudiesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {UsersApiListAuthenticatedUserVariablesV1UserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters = {}, options) {
        return exports.UsersApiFp(this.configuration).listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s concepts.
     * @summary List User Concepts
     * @param {UsersApiListUserConceptsV1UsersUserIdConceptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserConceptsV1UsersUserIdConceptsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserConceptsV1UsersUserIdConceptsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inConceptGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s datasets.
     * @summary List User Datasets
     * @param {UsersApiListUserDatasetsV1UsersUserIdDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserDatasetsV1UsersUserIdDatasetsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s features.
     * @summary List User Features
     * @param {UsersApiListUserFeaturesV1UsersUserIdFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserFeaturesV1UsersUserIdFeaturesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inFeatureGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s models.
     * @summary List User Models
     * @param {UsersApiListUserModelsV1UsersUserIdModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserModelsV1UsersUserIdModelsGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserModelsV1UsersUserIdModelsGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.containsVariableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s studies.
     * @summary List User Studies
     * @param {UsersApiListUserStudiesV1UsersUserIdStudiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserStudiesV1UsersUserIdStudiesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserStudiesV1UsersUserIdStudiesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.variableTag, requestParameters.conceptTag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {UsersApiListUserVariablesV1UsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserVariablesV1UsersUserIdVariablesGet(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).listUserVariablesV1UsersUserIdVariablesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the authenticated user\'s profile.
     * @summary Update Authenticated User Profile
     * @param {UsersApiUpdateAuthenticatedUserProfileV1UserPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateAuthenticatedUserProfileV1UserPut(requestParameters, options) {
        return exports.UsersApiFp(this.configuration).updateAuthenticatedUserProfileV1UserPut(requestParameters.userProfileIn, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.UsersApi = UsersApi;
/**
 * VariablesApi - axios parameter creator
 * @export
 */
exports.VariablesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamSlug
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamSlugVariablesPost: (teamSlug, variableIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createAVariableV1TeamsTeamSlugVariablesPost', 'teamSlug', teamSlug);
            // verify required parameter 'variableIn' is not null or undefined
            common_1.assertParamExists('createAVariableV1TeamsTeamSlugVariablesPost', 'variableIn', variableIn);
            const localVarPath = `/v1/teams/{team_slug}/variables`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(variableIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {VariableIn} variableIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1VariablesPost: (variableIn, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableIn' is not null or undefined
            common_1.assertParamExists('createAVariableV1VariablesPost', 'variableIn', variableIn);
            const localVarPath = `/v1/variables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(variableIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamSlug
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost: (teamSlug, arrayVariableInVariableIn, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost', 'teamSlug', teamSlug);
            // verify required parameter 'arrayVariableInVariableIn' is not null or undefined
            common_1.assertParamExists('createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost', 'arrayVariableInVariableIn', arrayVariableInVariableIn);
            const localVarPath = `/v1/teams/{team_slug}/variables/bulk`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(arrayVariableInVariableIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1VariablesBulkPost: (arrayVariableInVariableIn, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'arrayVariableInVariableIn' is not null or undefined
            common_1.assertParamExists('createMultipleVariablesV1VariablesBulkPost', 'arrayVariableInVariableIn', arrayVariableInVariableIn);
            const localVarPath = `/v1/variables/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(arrayVariableInVariableIn, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete: (teamSlug, variableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete', 'teamSlug', teamSlug);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1VariablesVariableIdDelete: (variableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('deleteVariableV1VariablesVariableIdDelete', 'variableId', variableId);
            const localVarPath = `/v1/variables/{variable_id}`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamSlugVariablesVariableIdGet: (teamSlug, variableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('getVariableV1TeamsTeamSlugVariablesVariableIdGet', 'teamSlug', teamSlug);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('getVariableV1TeamsTeamSlugVariablesVariableIdGet', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1VariablesVariableIdGet: (variableId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('getVariableV1VariablesVariableIdGet', 'variableId', variableId);
            const localVarPath = `/v1/variables/{variable_id}`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet: (teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet', 'teamSlug', teamSlug);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}/associations`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet: (variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listAssociationsV1VariablesVariableIdAssociationsGet', 'variableId', variableId);
            const localVarPath = `/v1/variables/{variable_id}/associations`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (isInteraction !== undefined) {
                localVarQueryParameter['is_interaction'] = isInteraction;
            }
            if (isVariableAssociation !== undefined) {
                localVarQueryParameter['is_variable_association'] = isVariableAssociation;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user/variables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet: (teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet', 'teamSlug', teamSlug);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}/system/features`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet: (variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet', 'variableId', variableId);
            const localVarPath = `/v1/variables/{variable_id}/system/features`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (license) {
                localVarQueryParameter['license'] = license;
            }
            if (dsIdx) {
                localVarQueryParameter['ds_idx'] = dsIdx;
            }
            if (includeDatasetIndexIds !== undefined) {
                localVarQueryParameter['include_dataset_index_ids'] = includeDatasetIndexIds;
            }
            if (includeDatasetPopIds !== undefined) {
                localVarQueryParameter['include_dataset_pop_ids'] = includeDatasetPopIds;
            }
            if (dsPopFilter !== undefined) {
                localVarQueryParameter['ds_pop_filter'] = dsPopFilter;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet: (teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet', 'teamSlug', teamSlug);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet', 'variableId', variableId);
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}/system/variables`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet: (variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet', 'variableId', variableId);
            const localVarPath = `/v1/variables/{variable_id}/system/variables`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (hops !== undefined) {
                localVarQueryParameter['hops'] = hops;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (includePathPopIds !== undefined) {
                localVarQueryParameter['include_path_pop_ids'] = includePathPopIds;
            }
            if (pathPopFilter !== undefined) {
                localVarQueryParameter['path_pop_filter'] = pathPopFilter;
            }
            if (minStrength !== undefined) {
                localVarQueryParameter['min_strength'] = minStrength;
            }
            if (maxStrength !== undefined) {
                localVarQueryParameter['max_strength'] = maxStrength;
            }
            if (minReproducibility !== undefined) {
                localVarQueryParameter['min_reproducibility'] = minReproducibility;
            }
            if (maxReproducibility !== undefined) {
                localVarQueryParameter['max_reproducibility'] = maxReproducibility;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet: (userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('listUserVariablesV1UsersUserIdVariablesGet', 'userId', userId);
            const localVarPath = `/v1/users/{user_id}/variables`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamSlugVariablesGet: (teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('listVariablesV1TeamsTeamSlugVariablesGet', 'teamSlug', teamSlug);
            const localVarPath = `/v1/teams/{team_slug}/variables`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1VariablesGet: (query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, teamSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/variables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (inVariableGraph !== undefined) {
                localVarQueryParameter['in_variable_graph'] = inVariableGraph;
            }
            if (teamSlug !== undefined) {
                localVarQueryParameter['team_slug'] = teamSlug;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamSlugVariablesVariableIdPatch: (teamSlug, variableId, patchVariableOpArrayPatchVariableOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teamSlug' is not null or undefined
            common_1.assertParamExists('patchVariableV1TeamsTeamSlugVariablesVariableIdPatch', 'teamSlug', teamSlug);
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('patchVariableV1TeamsTeamSlugVariablesVariableIdPatch', 'variableId', variableId);
            // verify required parameter 'patchVariableOpArrayPatchVariableOp' is not null or undefined
            common_1.assertParamExists('patchVariableV1TeamsTeamSlugVariablesVariableIdPatch', 'patchVariableOpArrayPatchVariableOp', patchVariableOpArrayPatchVariableOp);
            const localVarPath = `/v1/teams/{team_slug}/variables/{variable_id}`
                .replace(`{${"team_slug"}}`, encodeURIComponent(String(teamSlug)))
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchVariableOpArrayPatchVariableOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1VariablesVariableIdPatch: (variableId, patchVariableOpArrayPatchVariableOp, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'variableId' is not null or undefined
            common_1.assertParamExists('patchVariableV1VariablesVariableIdPatch', 'variableId', variableId);
            // verify required parameter 'patchVariableOpArrayPatchVariableOp' is not null or undefined
            common_1.assertParamExists('patchVariableV1VariablesVariableIdPatch', 'patchVariableOpArrayPatchVariableOp', patchVariableOpArrayPatchVariableOp);
            const localVarPath = `/v1/variables/{variable_id}`
                .replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication APIKeyHeader required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchVariableOpArrayPatchVariableOp, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * VariablesApi - functional programming interface
 * @export
 */
exports.VariablesApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.VariablesApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamSlug
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamSlugVariablesPost(teamSlug, variableIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAVariableV1TeamsTeamSlugVariablesPost(teamSlug, variableIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {VariableIn} variableIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1VariablesPost(variableIn, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAVariableV1VariablesPost(variableIn, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamSlug
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(teamSlug, arrayVariableInVariableIn, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(teamSlug, arrayVariableInVariableIn, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(teamSlug, variableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(teamSlug, variableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1VariablesVariableIdDelete(variableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteVariableV1VariablesVariableIdDelete(variableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamSlugVariablesVariableIdGet(teamSlug, variableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getVariableV1TeamsTeamSlugVariablesVariableIdGet(teamSlug, variableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1VariablesVariableIdGet(variableId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getVariableV1VariablesVariableIdGet(variableId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamSlugVariablesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listVariablesV1TeamsTeamSlugVariablesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1VariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, teamSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listVariablesV1VariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, teamSlug, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(teamSlug, variableId, patchVariableOpArrayPatchVariableOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(teamSlug, variableId, patchVariableOpArrayPatchVariableOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * VariablesApi - factory interface
 * @export
 */
exports.VariablesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.VariablesApiFp(configuration);
    return {
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {string} teamSlug
         * @param {VariableIn} variableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1TeamsTeamSlugVariablesPost(teamSlug, variableIn, options) {
            return localVarFp.createAVariableV1TeamsTeamSlugVariablesPost(teamSlug, variableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Variable.
         * @summary Create A Variable.
         * @param {VariableIn} variableIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAVariableV1VariablesPost(variableIn, teamSlug, options) {
            return localVarFp.createAVariableV1VariablesPost(variableIn, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {string} teamSlug
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(teamSlug, arrayVariableInVariableIn, options) {
            return localVarFp.createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(teamSlug, arrayVariableInVariableIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create mulitple Variables.
         * @summary Create Multiple Variables.
         * @param {Array<VariableIn> | VariableIn} arrayVariableInVariableIn
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn, teamSlug, options) {
            return localVarFp.createMultipleVariablesV1VariablesBulkPost(arrayVariableInVariableIn, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(teamSlug, variableId, options) {
            return localVarFp.deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(teamSlug, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
         * @summary Delete Variable
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariableV1VariablesVariableIdDelete(variableId, options) {
            return localVarFp.deleteVariableV1VariablesVariableIdDelete(variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1TeamsTeamSlugVariablesVariableIdGet(teamSlug, variableId, options) {
            return localVarFp.getVariableV1TeamsTeamSlugVariablesVariableIdGet(teamSlug, variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Variable.
         * @summary Get Variable
         * @param {string} variableId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariableV1VariablesVariableIdGet(variableId, options) {
            return localVarFp.getVariableV1VariablesVariableIdGet(variableId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(teamSlug, variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get associations using the Variable.
         * @summary List Associations
         * @param {string} variableId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {AssociationSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [isInteraction] Is association from interaction model?
         * @param {boolean} [isVariableAssociation] Include only variable-variable associations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options) {
            return localVarFp.listAssociationsV1VariablesVariableIdAssociationsGet(variableId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, isInteraction, isVariableAssociation, options).then((request) => request(axios, basePath));
        },
        /**
         * List authenticated user\'s variables.
         * @summary List Authenticated User Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return localVarFp.listAuthenticatedUserVariablesV1UserVariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return localVarFp.listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the features in the requested variable\'s system.
         * @summary List System Of Features
         * @param {string} variableId
         * @param {VariableToFeatureSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {Array<ValidDatasetLicenseEnum>} [license] Filter results by available dataset license.
         * @param {Array<string>} [dsIdx] Only include Features that are members of datasets with this index.
         * @param {boolean} [includeDatasetIndexIds] Include in response available dataset index ids for filtering.
         * @param {boolean} [includeDatasetPopIds] Include in response available dataset population ids for filtering.
         * @param {string} [dsPopFilter] Stringified list of lists of population id for dataset filtering.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options) {
            return localVarFp.listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, license, dsIdx, includeDatasetIndexIds, includeDatasetPopIds, dsPopFilter, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return localVarFp.listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(teamSlug, variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the variables in the requested variable\'s system.
         * @summary List System Of Variables
         * @param {string} variableId
         * @param {VariableToVariableSystemOfSortEnum} [orderBy] Order by this field.
         * @param {number} [hops] Number of hops.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {boolean} [includePathPopIds] Include in response available population ids for filtering.
         * @param {string} [pathPopFilter] Stringified list of lists of population id for path filtering.
         * @param {ValidRelationshipStrengthEnum} [minStrength]
         * @param {ValidRelationshipStrengthEnum} [maxStrength]
         * @param {ValidReproducibilityEnum} [minReproducibility]
         * @param {ValidReproducibilityEnum} [maxReproducibility]
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options) {
            return localVarFp.listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(variableId, orderBy, hops, ordering, includePathPopIds, pathPopFilter, minStrength, maxStrength, minReproducibility, maxReproducibility, page, pageSize, total, idsOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user\'s variables.
         * @summary List User Variables
         * @param {string} userId
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return localVarFp.listUserVariablesV1UsersUserIdVariablesGet(userId, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} teamSlug
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1TeamsTeamSlugVariablesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options) {
            return localVarFp.listVariablesV1TeamsTeamSlugVariablesGet(teamSlug, query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, options).then((request) => request(axios, basePath));
        },
        /**
         * List Variables.
         * @summary List Variables
         * @param {string} [query] Search query.
         * @param {boolean} [includeHidden] Include hidden objects in results.
         * @param {Array<string>} [id] Filter results by id.
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {boolean} [total] Include total count in response. Only use if you need it as a separate database call is required.
         * @param {boolean} [idsOnly] Only return ids. Will return an empty list for &#x60;items&#x60;.Will speed up the call to this endpoint if possible.
         * @param {VariableSortEnum} [orderBy] Order by this field.
         * @param {Ordering} [ordering] Order ascending or descending.
         * @param {string} [sortBy] Multi sorting parameter consisting of csv list of form \&#39;field1|asc,field2|desc,field3\&#39;. If sorting direction is not specified by &#x60;|asc&#x60; or &#x60;|desc&#x60; then descending is assumed.
         * @param {boolean} [inVariableGraph] Is Variable in the Variable Graph?
         * @param {string} [teamSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablesV1VariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, teamSlug, options) {
            return localVarFp.listVariablesV1VariablesGet(query, includeHidden, id, page, pageSize, total, idsOnly, orderBy, ordering, sortBy, inVariableGraph, teamSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} teamSlug
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(teamSlug, variableId, patchVariableOpArrayPatchVariableOp, options) {
            return localVarFp.patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(teamSlug, variableId, patchVariableOpArrayPatchVariableOp, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Variable resource with partial update.
         * @summary Patch Variable
         * @param {string} variableId
         * @param {PatchVariableOp | Array<PatchVariableOp>} patchVariableOpArrayPatchVariableOp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, options) {
            return localVarFp.patchVariableV1VariablesVariableIdPatch(variableId, patchVariableOpArrayPatchVariableOp, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * VariablesApi - object-oriented interface
 * @export
 * @class VariablesApi
 * @extends {BaseAPI}
 */
class VariablesApi extends base_1.BaseAPI {
    /**
     * Create a Variable.
     * @summary Create A Variable.
     * @param {VariablesApiCreateAVariableV1TeamsTeamSlugVariablesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    createAVariableV1TeamsTeamSlugVariablesPost(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).createAVariableV1TeamsTeamSlugVariablesPost(requestParameters.teamSlug, requestParameters.variableIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a Variable.
     * @summary Create A Variable.
     * @param {VariablesApiCreateAVariableV1VariablesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    createAVariableV1VariablesPost(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).createAVariableV1VariablesPost(requestParameters.variableIn, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create mulitple Variables.
     * @summary Create Multiple Variables.
     * @param {VariablesApiCreateMultipleVariablesV1TeamsTeamSlugVariablesBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).createMultipleVariablesV1TeamsTeamSlugVariablesBulkPost(requestParameters.teamSlug, requestParameters.arrayVariableInVariableIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create mulitple Variables.
     * @summary Create Multiple Variables.
     * @param {VariablesApiCreateMultipleVariablesV1VariablesBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    createMultipleVariablesV1VariablesBulkPost(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).createMultipleVariablesV1VariablesBulkPost(requestParameters.arrayVariableInVariableIn, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
     * @summary Delete Variable
     * @param {VariablesApiDeleteVariableV1TeamsTeamSlugVariablesVariableIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).deleteVariableV1TeamsTeamSlugVariablesVariableIdDelete(requestParameters.teamSlug, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Variable.  Deletion will fail if this Variable is attached to any existing Feature.
     * @summary Delete Variable
     * @param {VariablesApiDeleteVariableV1VariablesVariableIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    deleteVariableV1VariablesVariableIdDelete(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).deleteVariableV1VariablesVariableIdDelete(requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Variable.
     * @summary Get Variable
     * @param {VariablesApiGetVariableV1TeamsTeamSlugVariablesVariableIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    getVariableV1TeamsTeamSlugVariablesVariableIdGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).getVariableV1TeamsTeamSlugVariablesVariableIdGet(requestParameters.teamSlug, requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Variable.
     * @summary Get Variable
     * @param {VariablesApiGetVariableV1VariablesVariableIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    getVariableV1VariablesVariableIdGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).getVariableV1VariablesVariableIdGet(requestParameters.variableId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {VariablesApiListAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listAssociationsV1TeamsTeamSlugVariablesVariableIdAssociationsGet(requestParameters.teamSlug, requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get associations using the Variable.
     * @summary List Associations
     * @param {VariablesApiListAssociationsV1VariablesVariableIdAssociationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listAssociationsV1VariablesVariableIdAssociationsGet(requestParameters.variableId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.isInteraction, requestParameters.isVariableAssociation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List authenticated user\'s variables.
     * @summary List Authenticated User Variables
     * @param {VariablesApiListAuthenticatedUserVariablesV1UserVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters = {}, options) {
        return exports.VariablesApiFp(this.configuration).listAuthenticatedUserVariablesV1UserVariablesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested variable\'s system.
     * @summary List System Of Features
     * @param {VariablesApiListSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listSystemOfFeaturesV1TeamsTeamSlugVariablesVariableIdSystemFeaturesGet(requestParameters.teamSlug, requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the features in the requested variable\'s system.
     * @summary List System Of Features
     * @param {VariablesApiListSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listSystemOfFeaturesV1VariablesVariableIdSystemFeaturesGet(requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.license, requestParameters.dsIdx, requestParameters.includeDatasetIndexIds, requestParameters.includeDatasetPopIds, requestParameters.dsPopFilter, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the variables in the requested variable\'s system.
     * @summary List System Of Variables
     * @param {VariablesApiListSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listSystemOfVariablesV1TeamsTeamSlugVariablesVariableIdSystemVariablesGet(requestParameters.teamSlug, requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the variables in the requested variable\'s system.
     * @summary List System Of Variables
     * @param {VariablesApiListSystemOfVariablesV1VariablesVariableIdSystemVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listSystemOfVariablesV1VariablesVariableIdSystemVariablesGet(requestParameters.variableId, requestParameters.orderBy, requestParameters.hops, requestParameters.ordering, requestParameters.includePathPopIds, requestParameters.pathPopFilter, requestParameters.minStrength, requestParameters.maxStrength, requestParameters.minReproducibility, requestParameters.maxReproducibility, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a user\'s variables.
     * @summary List User Variables
     * @param {VariablesApiListUserVariablesV1UsersUserIdVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listUserVariablesV1UsersUserIdVariablesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listUserVariablesV1UsersUserIdVariablesGet(requestParameters.userId, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Variables.
     * @summary List Variables
     * @param {VariablesApiListVariablesV1TeamsTeamSlugVariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listVariablesV1TeamsTeamSlugVariablesGet(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).listVariablesV1TeamsTeamSlugVariablesGet(requestParameters.teamSlug, requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Variables.
     * @summary List Variables
     * @param {VariablesApiListVariablesV1VariablesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    listVariablesV1VariablesGet(requestParameters = {}, options) {
        return exports.VariablesApiFp(this.configuration).listVariablesV1VariablesGet(requestParameters.query, requestParameters.includeHidden, requestParameters.id, requestParameters.page, requestParameters.pageSize, requestParameters.total, requestParameters.idsOnly, requestParameters.orderBy, requestParameters.ordering, requestParameters.sortBy, requestParameters.inVariableGraph, requestParameters.teamSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Variable resource with partial update.
     * @summary Patch Variable
     * @param {VariablesApiPatchVariableV1TeamsTeamSlugVariablesVariableIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).patchVariableV1TeamsTeamSlugVariablesVariableIdPatch(requestParameters.teamSlug, requestParameters.variableId, requestParameters.patchVariableOpArrayPatchVariableOp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Variable resource with partial update.
     * @summary Patch Variable
     * @param {VariablesApiPatchVariableV1VariablesVariableIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VariablesApi
     */
    patchVariableV1VariablesVariableIdPatch(requestParameters, options) {
        return exports.VariablesApiFp(this.configuration).patchVariableV1VariablesVariableIdPatch(requestParameters.variableId, requestParameters.patchVariableOpArrayPatchVariableOp, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.VariablesApi = VariablesApi;
